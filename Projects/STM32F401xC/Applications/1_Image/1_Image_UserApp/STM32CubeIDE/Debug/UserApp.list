
UserApp.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000200  08010200  08010200  000000f4  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001cc8  08010400  08010400  000002f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000090  080120c8  080120c8  00001fbc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08012158  08012158  000020e4  2**0
                  CONTENTS
  4 .ARM          00000008  08012158  08012158  0000204c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08012160  08012160  000020e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08012160  08012160  00002054  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000008  08012168  08012168  0000205c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20001000  08012170  00002064  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .align16      00000010  080121e0  080121e0  000020d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
 10 .bss          000008c0  20001070  20001070  000020e4  2**2
                  ALLOC
 11 ._user_heap_stack 00000a00  20001930  20001930  000020e4  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000020e4  2**0
                  CONTENTS, READONLY
 13 .debug_line   0000fcb3  00000000  00000000  00002114  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_info   0000bddf  00000000  00000000  00011dc7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 000029b4  00000000  00000000  0001dba6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000918  00000000  00000000  00020560  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    000d4d3a  00000000  00000000  00020e78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_ranges 00000b40  00000000  00000000  000f5bb8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_loc    00005383  00000000  00000000  000f66f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_macro  00023363  00000000  00000000  000fba7b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000050  00000000  00000000  0011edde  2**0
                  CONTENTS, READONLY
 22 .debug_frame  00001cf8  00000000  00000000  0011ee30  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08010400 <__do_global_dtors_aux>:
 8010400:	b510      	push	{r4, lr}
 8010402:	4c05      	ldr	r4, [pc, #20]	; (8010418 <__do_global_dtors_aux+0x18>)
 8010404:	7823      	ldrb	r3, [r4, #0]
 8010406:	b933      	cbnz	r3, 8010416 <__do_global_dtors_aux+0x16>
 8010408:	4b04      	ldr	r3, [pc, #16]	; (801041c <__do_global_dtors_aux+0x1c>)
 801040a:	b113      	cbz	r3, 8010412 <__do_global_dtors_aux+0x12>
 801040c:	4804      	ldr	r0, [pc, #16]	; (8010420 <__do_global_dtors_aux+0x20>)
 801040e:	f3af 8000 	nop.w
 8010412:	2301      	movs	r3, #1
 8010414:	7023      	strb	r3, [r4, #0]
 8010416:	bd10      	pop	{r4, pc}
 8010418:	20001070 	.word	0x20001070
 801041c:	00000000 	.word	0x00000000
 8010420:	080120ac 	.word	0x080120ac

08010424 <frame_dummy>:
 8010424:	b508      	push	{r3, lr}
 8010426:	4b03      	ldr	r3, [pc, #12]	; (8010434 <frame_dummy+0x10>)
 8010428:	b11b      	cbz	r3, 8010432 <frame_dummy+0xe>
 801042a:	4903      	ldr	r1, [pc, #12]	; (8010438 <frame_dummy+0x14>)
 801042c:	4803      	ldr	r0, [pc, #12]	; (801043c <frame_dummy+0x18>)
 801042e:	f3af 8000 	nop.w
 8010432:	bd08      	pop	{r3, pc}
 8010434:	00000000 	.word	0x00000000
 8010438:	20001074 	.word	0x20001074
 801043c:	080120ac 	.word	0x080120ac

08010440 <SVC_Handler>:
        .syntax unified
        .weak  MPU_SVC_Handler
        .global SVC_Handler
        .type  SVC_Handler, %function
SVC_Handler:
        MRS r0, PSP
 8010440:	f3ef 8009 	mrs	r0, PSP
        B MPU_SVC_Handler
 8010444:	f000 baa1 	b.w	801098a <MPU_SVC_Handler>

08010448 <strlen>:
 8010448:	4603      	mov	r3, r0
 801044a:	f813 2b01 	ldrb.w	r2, [r3], #1
 801044e:	2a00      	cmp	r2, #0
 8010450:	d1fb      	bne.n	801044a <strlen+0x2>
 8010452:	1a18      	subs	r0, r3, r0
 8010454:	3801      	subs	r0, #1
 8010456:	4770      	bx	lr

08010458 <__aeabi_uldivmod>:
 8010458:	b953      	cbnz	r3, 8010470 <__aeabi_uldivmod+0x18>
 801045a:	b94a      	cbnz	r2, 8010470 <__aeabi_uldivmod+0x18>
 801045c:	2900      	cmp	r1, #0
 801045e:	bf08      	it	eq
 8010460:	2800      	cmpeq	r0, #0
 8010462:	bf1c      	itt	ne
 8010464:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8010468:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 801046c:	f000 b974 	b.w	8010758 <__aeabi_idiv0>
 8010470:	f1ad 0c08 	sub.w	ip, sp, #8
 8010474:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8010478:	f000 f806 	bl	8010488 <__udivmoddi4>
 801047c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8010480:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8010484:	b004      	add	sp, #16
 8010486:	4770      	bx	lr

08010488 <__udivmoddi4>:
 8010488:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801048c:	9d08      	ldr	r5, [sp, #32]
 801048e:	4604      	mov	r4, r0
 8010490:	468e      	mov	lr, r1
 8010492:	2b00      	cmp	r3, #0
 8010494:	d14d      	bne.n	8010532 <__udivmoddi4+0xaa>
 8010496:	428a      	cmp	r2, r1
 8010498:	4694      	mov	ip, r2
 801049a:	d969      	bls.n	8010570 <__udivmoddi4+0xe8>
 801049c:	fab2 f282 	clz	r2, r2
 80104a0:	b152      	cbz	r2, 80104b8 <__udivmoddi4+0x30>
 80104a2:	fa01 f302 	lsl.w	r3, r1, r2
 80104a6:	f1c2 0120 	rsb	r1, r2, #32
 80104aa:	fa20 f101 	lsr.w	r1, r0, r1
 80104ae:	fa0c fc02 	lsl.w	ip, ip, r2
 80104b2:	ea41 0e03 	orr.w	lr, r1, r3
 80104b6:	4094      	lsls	r4, r2
 80104b8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80104bc:	0c21      	lsrs	r1, r4, #16
 80104be:	fbbe f6f8 	udiv	r6, lr, r8
 80104c2:	fa1f f78c 	uxth.w	r7, ip
 80104c6:	fb08 e316 	mls	r3, r8, r6, lr
 80104ca:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80104ce:	fb06 f107 	mul.w	r1, r6, r7
 80104d2:	4299      	cmp	r1, r3
 80104d4:	d90a      	bls.n	80104ec <__udivmoddi4+0x64>
 80104d6:	eb1c 0303 	adds.w	r3, ip, r3
 80104da:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 80104de:	f080 811f 	bcs.w	8010720 <__udivmoddi4+0x298>
 80104e2:	4299      	cmp	r1, r3
 80104e4:	f240 811c 	bls.w	8010720 <__udivmoddi4+0x298>
 80104e8:	3e02      	subs	r6, #2
 80104ea:	4463      	add	r3, ip
 80104ec:	1a5b      	subs	r3, r3, r1
 80104ee:	b2a4      	uxth	r4, r4
 80104f0:	fbb3 f0f8 	udiv	r0, r3, r8
 80104f4:	fb08 3310 	mls	r3, r8, r0, r3
 80104f8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80104fc:	fb00 f707 	mul.w	r7, r0, r7
 8010500:	42a7      	cmp	r7, r4
 8010502:	d90a      	bls.n	801051a <__udivmoddi4+0x92>
 8010504:	eb1c 0404 	adds.w	r4, ip, r4
 8010508:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 801050c:	f080 810a 	bcs.w	8010724 <__udivmoddi4+0x29c>
 8010510:	42a7      	cmp	r7, r4
 8010512:	f240 8107 	bls.w	8010724 <__udivmoddi4+0x29c>
 8010516:	4464      	add	r4, ip
 8010518:	3802      	subs	r0, #2
 801051a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 801051e:	1be4      	subs	r4, r4, r7
 8010520:	2600      	movs	r6, #0
 8010522:	b11d      	cbz	r5, 801052c <__udivmoddi4+0xa4>
 8010524:	40d4      	lsrs	r4, r2
 8010526:	2300      	movs	r3, #0
 8010528:	e9c5 4300 	strd	r4, r3, [r5]
 801052c:	4631      	mov	r1, r6
 801052e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010532:	428b      	cmp	r3, r1
 8010534:	d909      	bls.n	801054a <__udivmoddi4+0xc2>
 8010536:	2d00      	cmp	r5, #0
 8010538:	f000 80ef 	beq.w	801071a <__udivmoddi4+0x292>
 801053c:	2600      	movs	r6, #0
 801053e:	e9c5 0100 	strd	r0, r1, [r5]
 8010542:	4630      	mov	r0, r6
 8010544:	4631      	mov	r1, r6
 8010546:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801054a:	fab3 f683 	clz	r6, r3
 801054e:	2e00      	cmp	r6, #0
 8010550:	d14a      	bne.n	80105e8 <__udivmoddi4+0x160>
 8010552:	428b      	cmp	r3, r1
 8010554:	d302      	bcc.n	801055c <__udivmoddi4+0xd4>
 8010556:	4282      	cmp	r2, r0
 8010558:	f200 80f9 	bhi.w	801074e <__udivmoddi4+0x2c6>
 801055c:	1a84      	subs	r4, r0, r2
 801055e:	eb61 0303 	sbc.w	r3, r1, r3
 8010562:	2001      	movs	r0, #1
 8010564:	469e      	mov	lr, r3
 8010566:	2d00      	cmp	r5, #0
 8010568:	d0e0      	beq.n	801052c <__udivmoddi4+0xa4>
 801056a:	e9c5 4e00 	strd	r4, lr, [r5]
 801056e:	e7dd      	b.n	801052c <__udivmoddi4+0xa4>
 8010570:	b902      	cbnz	r2, 8010574 <__udivmoddi4+0xec>
 8010572:	deff      	udf	#255	; 0xff
 8010574:	fab2 f282 	clz	r2, r2
 8010578:	2a00      	cmp	r2, #0
 801057a:	f040 8092 	bne.w	80106a2 <__udivmoddi4+0x21a>
 801057e:	eba1 010c 	sub.w	r1, r1, ip
 8010582:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8010586:	fa1f fe8c 	uxth.w	lr, ip
 801058a:	2601      	movs	r6, #1
 801058c:	0c20      	lsrs	r0, r4, #16
 801058e:	fbb1 f3f7 	udiv	r3, r1, r7
 8010592:	fb07 1113 	mls	r1, r7, r3, r1
 8010596:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 801059a:	fb0e f003 	mul.w	r0, lr, r3
 801059e:	4288      	cmp	r0, r1
 80105a0:	d908      	bls.n	80105b4 <__udivmoddi4+0x12c>
 80105a2:	eb1c 0101 	adds.w	r1, ip, r1
 80105a6:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 80105aa:	d202      	bcs.n	80105b2 <__udivmoddi4+0x12a>
 80105ac:	4288      	cmp	r0, r1
 80105ae:	f200 80cb 	bhi.w	8010748 <__udivmoddi4+0x2c0>
 80105b2:	4643      	mov	r3, r8
 80105b4:	1a09      	subs	r1, r1, r0
 80105b6:	b2a4      	uxth	r4, r4
 80105b8:	fbb1 f0f7 	udiv	r0, r1, r7
 80105bc:	fb07 1110 	mls	r1, r7, r0, r1
 80105c0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80105c4:	fb0e fe00 	mul.w	lr, lr, r0
 80105c8:	45a6      	cmp	lr, r4
 80105ca:	d908      	bls.n	80105de <__udivmoddi4+0x156>
 80105cc:	eb1c 0404 	adds.w	r4, ip, r4
 80105d0:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 80105d4:	d202      	bcs.n	80105dc <__udivmoddi4+0x154>
 80105d6:	45a6      	cmp	lr, r4
 80105d8:	f200 80bb 	bhi.w	8010752 <__udivmoddi4+0x2ca>
 80105dc:	4608      	mov	r0, r1
 80105de:	eba4 040e 	sub.w	r4, r4, lr
 80105e2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80105e6:	e79c      	b.n	8010522 <__udivmoddi4+0x9a>
 80105e8:	f1c6 0720 	rsb	r7, r6, #32
 80105ec:	40b3      	lsls	r3, r6
 80105ee:	fa22 fc07 	lsr.w	ip, r2, r7
 80105f2:	ea4c 0c03 	orr.w	ip, ip, r3
 80105f6:	fa20 f407 	lsr.w	r4, r0, r7
 80105fa:	fa01 f306 	lsl.w	r3, r1, r6
 80105fe:	431c      	orrs	r4, r3
 8010600:	40f9      	lsrs	r1, r7
 8010602:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8010606:	fa00 f306 	lsl.w	r3, r0, r6
 801060a:	fbb1 f8f9 	udiv	r8, r1, r9
 801060e:	0c20      	lsrs	r0, r4, #16
 8010610:	fa1f fe8c 	uxth.w	lr, ip
 8010614:	fb09 1118 	mls	r1, r9, r8, r1
 8010618:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 801061c:	fb08 f00e 	mul.w	r0, r8, lr
 8010620:	4288      	cmp	r0, r1
 8010622:	fa02 f206 	lsl.w	r2, r2, r6
 8010626:	d90b      	bls.n	8010640 <__udivmoddi4+0x1b8>
 8010628:	eb1c 0101 	adds.w	r1, ip, r1
 801062c:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8010630:	f080 8088 	bcs.w	8010744 <__udivmoddi4+0x2bc>
 8010634:	4288      	cmp	r0, r1
 8010636:	f240 8085 	bls.w	8010744 <__udivmoddi4+0x2bc>
 801063a:	f1a8 0802 	sub.w	r8, r8, #2
 801063e:	4461      	add	r1, ip
 8010640:	1a09      	subs	r1, r1, r0
 8010642:	b2a4      	uxth	r4, r4
 8010644:	fbb1 f0f9 	udiv	r0, r1, r9
 8010648:	fb09 1110 	mls	r1, r9, r0, r1
 801064c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8010650:	fb00 fe0e 	mul.w	lr, r0, lr
 8010654:	458e      	cmp	lr, r1
 8010656:	d908      	bls.n	801066a <__udivmoddi4+0x1e2>
 8010658:	eb1c 0101 	adds.w	r1, ip, r1
 801065c:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8010660:	d26c      	bcs.n	801073c <__udivmoddi4+0x2b4>
 8010662:	458e      	cmp	lr, r1
 8010664:	d96a      	bls.n	801073c <__udivmoddi4+0x2b4>
 8010666:	3802      	subs	r0, #2
 8010668:	4461      	add	r1, ip
 801066a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 801066e:	fba0 9402 	umull	r9, r4, r0, r2
 8010672:	eba1 010e 	sub.w	r1, r1, lr
 8010676:	42a1      	cmp	r1, r4
 8010678:	46c8      	mov	r8, r9
 801067a:	46a6      	mov	lr, r4
 801067c:	d356      	bcc.n	801072c <__udivmoddi4+0x2a4>
 801067e:	d053      	beq.n	8010728 <__udivmoddi4+0x2a0>
 8010680:	b15d      	cbz	r5, 801069a <__udivmoddi4+0x212>
 8010682:	ebb3 0208 	subs.w	r2, r3, r8
 8010686:	eb61 010e 	sbc.w	r1, r1, lr
 801068a:	fa01 f707 	lsl.w	r7, r1, r7
 801068e:	fa22 f306 	lsr.w	r3, r2, r6
 8010692:	40f1      	lsrs	r1, r6
 8010694:	431f      	orrs	r7, r3
 8010696:	e9c5 7100 	strd	r7, r1, [r5]
 801069a:	2600      	movs	r6, #0
 801069c:	4631      	mov	r1, r6
 801069e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80106a2:	f1c2 0320 	rsb	r3, r2, #32
 80106a6:	40d8      	lsrs	r0, r3
 80106a8:	fa0c fc02 	lsl.w	ip, ip, r2
 80106ac:	fa21 f303 	lsr.w	r3, r1, r3
 80106b0:	4091      	lsls	r1, r2
 80106b2:	4301      	orrs	r1, r0
 80106b4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80106b8:	fa1f fe8c 	uxth.w	lr, ip
 80106bc:	fbb3 f0f7 	udiv	r0, r3, r7
 80106c0:	fb07 3610 	mls	r6, r7, r0, r3
 80106c4:	0c0b      	lsrs	r3, r1, #16
 80106c6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80106ca:	fb00 f60e 	mul.w	r6, r0, lr
 80106ce:	429e      	cmp	r6, r3
 80106d0:	fa04 f402 	lsl.w	r4, r4, r2
 80106d4:	d908      	bls.n	80106e8 <__udivmoddi4+0x260>
 80106d6:	eb1c 0303 	adds.w	r3, ip, r3
 80106da:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 80106de:	d22f      	bcs.n	8010740 <__udivmoddi4+0x2b8>
 80106e0:	429e      	cmp	r6, r3
 80106e2:	d92d      	bls.n	8010740 <__udivmoddi4+0x2b8>
 80106e4:	3802      	subs	r0, #2
 80106e6:	4463      	add	r3, ip
 80106e8:	1b9b      	subs	r3, r3, r6
 80106ea:	b289      	uxth	r1, r1
 80106ec:	fbb3 f6f7 	udiv	r6, r3, r7
 80106f0:	fb07 3316 	mls	r3, r7, r6, r3
 80106f4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80106f8:	fb06 f30e 	mul.w	r3, r6, lr
 80106fc:	428b      	cmp	r3, r1
 80106fe:	d908      	bls.n	8010712 <__udivmoddi4+0x28a>
 8010700:	eb1c 0101 	adds.w	r1, ip, r1
 8010704:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8010708:	d216      	bcs.n	8010738 <__udivmoddi4+0x2b0>
 801070a:	428b      	cmp	r3, r1
 801070c:	d914      	bls.n	8010738 <__udivmoddi4+0x2b0>
 801070e:	3e02      	subs	r6, #2
 8010710:	4461      	add	r1, ip
 8010712:	1ac9      	subs	r1, r1, r3
 8010714:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8010718:	e738      	b.n	801058c <__udivmoddi4+0x104>
 801071a:	462e      	mov	r6, r5
 801071c:	4628      	mov	r0, r5
 801071e:	e705      	b.n	801052c <__udivmoddi4+0xa4>
 8010720:	4606      	mov	r6, r0
 8010722:	e6e3      	b.n	80104ec <__udivmoddi4+0x64>
 8010724:	4618      	mov	r0, r3
 8010726:	e6f8      	b.n	801051a <__udivmoddi4+0x92>
 8010728:	454b      	cmp	r3, r9
 801072a:	d2a9      	bcs.n	8010680 <__udivmoddi4+0x1f8>
 801072c:	ebb9 0802 	subs.w	r8, r9, r2
 8010730:	eb64 0e0c 	sbc.w	lr, r4, ip
 8010734:	3801      	subs	r0, #1
 8010736:	e7a3      	b.n	8010680 <__udivmoddi4+0x1f8>
 8010738:	4646      	mov	r6, r8
 801073a:	e7ea      	b.n	8010712 <__udivmoddi4+0x28a>
 801073c:	4620      	mov	r0, r4
 801073e:	e794      	b.n	801066a <__udivmoddi4+0x1e2>
 8010740:	4640      	mov	r0, r8
 8010742:	e7d1      	b.n	80106e8 <__udivmoddi4+0x260>
 8010744:	46d0      	mov	r8, sl
 8010746:	e77b      	b.n	8010640 <__udivmoddi4+0x1b8>
 8010748:	3b02      	subs	r3, #2
 801074a:	4461      	add	r1, ip
 801074c:	e732      	b.n	80105b4 <__udivmoddi4+0x12c>
 801074e:	4630      	mov	r0, r6
 8010750:	e709      	b.n	8010566 <__udivmoddi4+0xde>
 8010752:	4464      	add	r4, ip
 8010754:	3802      	subs	r0, #2
 8010756:	e742      	b.n	80105de <__udivmoddi4+0x156>

08010758 <__aeabi_idiv0>:
 8010758:	4770      	bx	lr
 801075a:	bf00      	nop

0801075c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack       /* set stack pointer */
 801075c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8010794 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */
  movs  r1, #0
 8010760:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8010762:	e003      	b.n	801076c <LoopCopyDataInit>

08010764 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8010764:	4b0c      	ldr	r3, [pc, #48]	; (8010798 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8010766:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8010768:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 801076a:	3104      	adds	r1, #4

0801076c <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr  r0, =_sdata
 801076c:	480b      	ldr	r0, [pc, #44]	; (801079c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 801076e:	4b0c      	ldr	r3, [pc, #48]	; (80107a0 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8010770:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8010772:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8010774:	d3f6      	bcc.n	8010764 <CopyDataInit>
  ldr  r2, =_sbss
 8010776:	4a0b      	ldr	r2, [pc, #44]	; (80107a4 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8010778:	e002      	b.n	8010780 <LoopFillZerobss>

0801077a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs  r3, #0
 801077a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 801077c:	f842 3b04 	str.w	r3, [r2], #4

08010780 <LoopFillZerobss>:

LoopFillZerobss:
  ldr  r3, = _ebss
 8010780:	4b09      	ldr	r3, [pc, #36]	; (80107a8 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8010782:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8010784:	d3f9      	bcc.n	801077a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8010786:	f000 f969 	bl	8010a5c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 801078a:	f001 f81d 	bl	80117c8 <__libc_init_array>
/* Call the application entry point.*/
  bl  main
 801078e:	f000 f8e7 	bl	8010960 <main>
  bx  lr
 8010792:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8010794:	20010000 	.word	0x20010000
  ldr  r3, =_sidata
 8010798:	08012170 	.word	0x08012170
  ldr  r0, =_sdata
 801079c:	20001000 	.word	0x20001000
  ldr  r3, =_edata
 80107a0:	20001070 	.word	0x20001070
  ldr  r2, =_sbss
 80107a4:	20001070 	.word	0x20001070
  ldr  r3, = _ebss
 80107a8:	20001930 	.word	0x20001930

080107ac <ADC_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80107ac:	e7fe      	b.n	80107ac <ADC_IRQHandler>
	...

080107b0 <COM_Init>:
  * @brief  Initialize COM module.
  * @param  None.
  * @retval HAL Status.
  */
HAL_StatusTypeDef  COM_Init(void)
{
 80107b0:	b508      	push	{r3, lr}
#if defined(__GNUC__)
  setvbuf(stdout, NULL, _IONBF, 0);
 80107b2:	4b0c      	ldr	r3, [pc, #48]	; (80107e4 <COM_Init+0x34>)
 80107b4:	6818      	ldr	r0, [r3, #0]
 80107b6:	2300      	movs	r3, #0
 80107b8:	2202      	movs	r2, #2
 80107ba:	4619      	mov	r1, r3
 80107bc:	6880      	ldr	r0, [r0, #8]
 80107be:	f001 f82f 	bl	8011820 <setvbuf>
  - One Stop Bit
  - No parity
  - Hardware flow control disabled (RTS and CTS signals)
  - Receive and transmit enabled
  */
  UartHandle.Instance = COM_UART;
 80107c2:	4809      	ldr	r0, [pc, #36]	; (80107e8 <COM_Init+0x38>)
  UartHandle.Init.BaudRate = 115200U;
 80107c4:	4a09      	ldr	r2, [pc, #36]	; (80107ec <COM_Init+0x3c>)
 80107c6:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 80107ca:	e9c0 2300 	strd	r2, r3, [r0]
  UartHandle.Init.WordLength = UART_WORDLENGTH_8B;
 80107ce:	2300      	movs	r3, #0
  UartHandle.Init.StopBits = UART_STOPBITS_1;
 80107d0:	e9c0 3302 	strd	r3, r3, [r0, #8]
  UartHandle.Init.Parity = UART_PARITY_NONE;
 80107d4:	6103      	str	r3, [r0, #16]
  UartHandle.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80107d6:	6183      	str	r3, [r0, #24]
  UartHandle.Init.Mode = UART_MODE_RX | UART_MODE_TX;
 80107d8:	230c      	movs	r3, #12
 80107da:	6143      	str	r3, [r0, #20]

  return HAL_UART_Init(&UartHandle);
}
 80107dc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  return HAL_UART_Init(&UartHandle);
 80107e0:	f000 bf68 	b.w	80116b4 <HAL_UART_Init>
 80107e4:	2000100c 	.word	0x2000100c
 80107e8:	2000108c 	.word	0x2000108c
 80107ec:	40011000 	.word	0x40011000

080107f0 <HAL_UART_MspInit>:
  * @brief  UART MSP Init.
  * @param  huart: UART handler pointer.
  * @retval None.
  */
void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 80107f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if (huart->Instance == COM_UART)
 80107f4:	6802      	ldr	r2, [r0, #0]
 80107f6:	4b1f      	ldr	r3, [pc, #124]	; (8010874 <HAL_UART_MspInit+0x84>)
 80107f8:	429a      	cmp	r2, r3
{
 80107fa:	b088      	sub	sp, #32
  if (huart->Instance == COM_UART)
 80107fc:	d137      	bne.n	801086e <HAL_UART_MspInit+0x7e>
  {
    /* Peripheral Clock Enable */
    COM_UART_CLK_ENABLE();
 80107fe:	f503 3394 	add.w	r3, r3, #75776	; 0x12800
 8010802:	2400      	movs	r4, #0
 8010804:	9400      	str	r4, [sp, #0]
 8010806:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    GPIO_InitStruct.Pin = COM_UART_TX_PIN;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = COM_UART_TX_AF;
    HAL_GPIO_Init(COM_UART_TX_GPIO_PORT, &GPIO_InitStruct);
 8010808:	481b      	ldr	r0, [pc, #108]	; (8010878 <HAL_UART_MspInit+0x88>)
    COM_UART_CLK_ENABLE();
 801080a:	f042 0210 	orr.w	r2, r2, #16
 801080e:	645a      	str	r2, [r3, #68]	; 0x44
 8010810:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8010812:	f002 0210 	and.w	r2, r2, #16
 8010816:	9200      	str	r2, [sp, #0]
 8010818:	9a00      	ldr	r2, [sp, #0]
    COM_UART_TX_GPIO_CLK_ENABLE();
 801081a:	9401      	str	r4, [sp, #4]
 801081c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801081e:	f042 0201 	orr.w	r2, r2, #1
 8010822:	631a      	str	r2, [r3, #48]	; 0x30
 8010824:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8010826:	f002 0201 	and.w	r2, r2, #1
 801082a:	9201      	str	r2, [sp, #4]
 801082c:	9a01      	ldr	r2, [sp, #4]
    COM_UART_RX_GPIO_CLK_ENABLE();
 801082e:	9402      	str	r4, [sp, #8]
 8010830:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8010832:	f042 0201 	orr.w	r2, r2, #1
 8010836:	631a      	str	r2, [r3, #48]	; 0x30
 8010838:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801083a:	9405      	str	r4, [sp, #20]
    COM_UART_RX_GPIO_CLK_ENABLE();
 801083c:	f003 0301 	and.w	r3, r3, #1
 8010840:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8010842:	f44f 7800 	mov.w	r8, #512	; 0x200
 8010846:	2702      	movs	r7, #2
    GPIO_InitStruct.Alternate = COM_UART_TX_AF;
 8010848:	2603      	movs	r6, #3
 801084a:	2507      	movs	r5, #7
    HAL_GPIO_Init(COM_UART_TX_GPIO_PORT, &GPIO_InitStruct);
 801084c:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801084e:	e9cd 8703 	strd	r8, r7, [sp, #12]
    GPIO_InitStruct.Alternate = COM_UART_TX_AF;
 8010852:	e9cd 6506 	strd	r6, r5, [sp, #24]
    COM_UART_RX_GPIO_CLK_ENABLE();
 8010856:	9b02      	ldr	r3, [sp, #8]
    HAL_GPIO_Init(COM_UART_TX_GPIO_PORT, &GPIO_InitStruct);
 8010858:	f000 faea 	bl	8010e30 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = COM_UART_RX_PIN;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = COM_UART_RX_AF;
    HAL_GPIO_Init(COM_UART_RX_GPIO_PORT, &GPIO_InitStruct);
 801085c:	4806      	ldr	r0, [pc, #24]	; (8010878 <HAL_UART_MspInit+0x88>)
    GPIO_InitStruct.Alternate = COM_UART_RX_AF;
 801085e:	9507      	str	r5, [sp, #28]
    HAL_GPIO_Init(COM_UART_RX_GPIO_PORT, &GPIO_InitStruct);
 8010860:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8010862:	e9cd 8703 	strd	r8, r7, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8010866:	e9cd 4605 	strd	r4, r6, [sp, #20]
    HAL_GPIO_Init(COM_UART_RX_GPIO_PORT, &GPIO_InitStruct);
 801086a:	f000 fae1 	bl	8010e30 <HAL_GPIO_Init>

  }

}
 801086e:	b008      	add	sp, #32
 8010870:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010874:	40011000 	.word	0x40011000
 8010878:	40020000 	.word	0x40020000

0801087c <COM_Transmit>:
  * @param uDataLength: Data pointer to the Data to transmit.
  * @param uTimeout: Timeout duration.
  * @retval Status of the Transmit operation.
  */
HAL_StatusTypeDef COM_Transmit(uint8_t *Data, uint16_t uDataLength, uint32_t uTimeout)
{
 801087c:	4613      	mov	r3, r2
  return HAL_UART_Transmit(&UartHandle, (uint8_t *)Data, uDataLength, uTimeout);
 801087e:	460a      	mov	r2, r1
 8010880:	4601      	mov	r1, r0
 8010882:	4801      	ldr	r0, [pc, #4]	; (8010888 <COM_Transmit+0xc>)
 8010884:	f000 bf44 	b.w	8011710 <HAL_UART_Transmit>
 8010888:	2000108c 	.word	0x2000108c

0801088c <__io_putchar>:
  * @brief  Retargets the C library printf function to the USART.
  * @param  None
  * @retval ch
  */
PUTCHAR_PROTOTYPE
{
 801088c:	b507      	push	{r0, r1, r2, lr}
  /* Place your implementation of fputc here */
  /* e.g. write a character to the USART1 and Loop until the end of transmission */
  HAL_UART_Transmit(&UartHandle, (uint8_t *)&ch, 1U, 0xFFFFU);
 801088e:	f64f 73ff 	movw	r3, #65535	; 0xffff
{
 8010892:	9001      	str	r0, [sp, #4]
  HAL_UART_Transmit(&UartHandle, (uint8_t *)&ch, 1U, 0xFFFFU);
 8010894:	2201      	movs	r2, #1
 8010896:	a901      	add	r1, sp, #4
 8010898:	4803      	ldr	r0, [pc, #12]	; (80108a8 <__io_putchar+0x1c>)
 801089a:	f000 ff39 	bl	8011710 <HAL_UART_Transmit>

  return ch;
}
 801089e:	9801      	ldr	r0, [sp, #4]
 80108a0:	b003      	add	sp, #12
 80108a2:	f85d fb04 	ldr.w	pc, [sp], #4
 80108a6:	bf00      	nop
 80108a8:	2000108c 	.word	0x2000108c

080108ac <puts_com>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

/* USER CODE END 0 */

void puts_com(char *msg) {
 80108ac:	b510      	push	{r4, lr}
 80108ae:	4604      	mov	r4, r0
	int len = strlen(msg);
 80108b0:	f7ff fdca 	bl	8010448 <strlen>
	COM_Transmit(msg,len,2000);
 80108b4:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80108b8:	b281      	uxth	r1, r0
 80108ba:	4620      	mov	r0, r4
 80108bc:	f7ff ffde 	bl	801087c <COM_Transmit>
	COM_Transmit("\n",1,2000);
}
 80108c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	COM_Transmit("\n",1,2000);
 80108c4:	4802      	ldr	r0, [pc, #8]	; (80108d0 <puts_com+0x24>)
 80108c6:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80108ca:	2101      	movs	r1, #1
 80108cc:	f7ff bfd6 	b.w	801087c <COM_Transmit>
 80108d0:	080120e0 	.word	0x080120e0

080108d4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80108d4:	b500      	push	{lr}
 80108d6:	b095      	sub	sp, #84	; 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80108d8:	2230      	movs	r2, #48	; 0x30
 80108da:	2100      	movs	r1, #0
 80108dc:	a808      	add	r0, sp, #32
 80108de:	f000 ff97 	bl	8011810 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80108e2:	2214      	movs	r2, #20
 80108e4:	2100      	movs	r1, #0
 80108e6:	a802      	add	r0, sp, #8
 80108e8:	f000 ff92 	bl	8011810 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80108ec:	2200      	movs	r2, #0
 80108ee:	4b1a      	ldr	r3, [pc, #104]	; (8010958 <SystemClock_Config+0x84>)
 80108f0:	9200      	str	r2, [sp, #0]
 80108f2:	6c19      	ldr	r1, [r3, #64]	; 0x40
 80108f4:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 80108f8:	6419      	str	r1, [r3, #64]	; 0x40
 80108fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80108fc:	4917      	ldr	r1, [pc, #92]	; (801095c <SystemClock_Config+0x88>)
  __HAL_RCC_PWR_CLK_ENABLE();
 80108fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8010902:	9300      	str	r3, [sp, #0]
 8010904:	9b00      	ldr	r3, [sp, #0]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8010906:	9201      	str	r2, [sp, #4]
 8010908:	680b      	ldr	r3, [r1, #0]
 801090a:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 801090e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8010912:	600b      	str	r3, [r1, #0]
 8010914:	680b      	ldr	r3, [r1, #0]
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8010916:	920d      	str	r2, [sp, #52]	; 0x34
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8010918:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 801091c:	9301      	str	r3, [sp, #4]
 801091e:	9b01      	ldr	r3, [sp, #4]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8010920:	2302      	movs	r3, #2
 8010922:	9307      	str	r3, [sp, #28]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8010924:	2001      	movs	r0, #1
 8010926:	2310      	movs	r3, #16
 8010928:	e9cd 030a 	strd	r0, r3, [sp, #40]	; 0x28
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 801092c:	a807      	add	r0, sp, #28
 801092e:	f000 fc3d 	bl	80111ac <HAL_RCC_OscConfig>
 8010932:	4601      	mov	r1, r0
 8010934:	b108      	cbz	r0, 801093a <SystemClock_Config+0x66>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8010936:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8010938:	e7fe      	b.n	8010938 <SystemClock_Config+0x64>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 801093a:	230f      	movs	r3, #15
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 801093c:	e9cd 3002 	strd	r3, r0, [sp, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8010940:	e9cd 0004 	strd	r0, r0, [sp, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8010944:	9006      	str	r0, [sp, #24]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8010946:	a802      	add	r0, sp, #8
 8010948:	f000 fb74 	bl	8011034 <HAL_RCC_ClockConfig>
 801094c:	b108      	cbz	r0, 8010952 <SystemClock_Config+0x7e>
 801094e:	b672      	cpsid	i
  while (1)
 8010950:	e7fe      	b.n	8010950 <SystemClock_Config+0x7c>
}
 8010952:	b015      	add	sp, #84	; 0x54
 8010954:	f85d fb04 	ldr.w	pc, [sp], #4
 8010958:	40023800 	.word	0x40023800
 801095c:	40007000 	.word	0x40007000

08010960 <main>:
{
 8010960:	b508      	push	{r3, lr}
  HAL_Init();
 8010962:	f000 f8c5 	bl	8010af0 <HAL_Init>
  SystemClock_Config();
 8010966:	f7ff ffb5 	bl	80108d4 <SystemClock_Config>
  COM_Init();
 801096a:	f7ff ff21 	bl	80107b0 <COM_Init>
  puts_com("\nhello world");
 801096e:	4802      	ldr	r0, [pc, #8]	; (8010978 <main+0x18>)
 8010970:	f7ff ff9c 	bl	80108ac <puts_com>
  while (1)
 8010974:	e7fe      	b.n	8010974 <main+0x14>
 8010976:	bf00      	nop
 8010978:	080120e2 	.word	0x080120e2

0801097c <HAL_APP_SVC_Handler>:
  * \li NVIC system reset
  * \li MPU disable request
  */
void HAL_APP_SVC_Handler(uint32_t *args)
{
  switch (args[0])
 801097c:	6803      	ldr	r3, [r0, #0]
 801097e:	2b01      	cmp	r3, #1
 8010980:	d001      	beq.n	8010986 <HAL_APP_SVC_Handler+0xa>
  {
    case HAL_SVC_NVIC_SYSTEM_RESET :  /* HAL NVIC system reset */
    {
      HAL_NVIC_SystemReset();
 8010982:	f000 b925 	b.w	8010bd0 <HAL_NVIC_SystemReset>
      break;
    }
    case HAL_SVC_MPU_DISABLE :        /* HAL Disable MPU */
    {
      HAL_MPU_Disable();
 8010986:	f000 b949 	b.w	8010c1c <HAL_MPU_Disable>

0801098a <MPU_SVC_Handler>:
  uint8_t code = ((char *)args[6])[-2];
 801098a:	6983      	ldr	r3, [r0, #24]
 801098c:	f813 3c02 	ldrb.w	r3, [r3, #-2]
  switch (code)
 8010990:	b113      	cbz	r3, 8010998 <MPU_SVC_Handler+0xe>
 8010992:	2b01      	cmp	r3, #1
 8010994:	d002      	beq.n	801099c <MPU_SVC_Handler+0x12>
 8010996:	4770      	bx	lr
      SE_APP_SVC_Handler(args);
 8010998:	f7f7 bb56 	b.w	8008048 <SE_APP_SVC_Handler>
      HAL_APP_SVC_Handler(args);
 801099c:	f7ff bfee 	b.w	801097c <HAL_APP_SVC_Handler>

080109a0 <NMI_Handler>:
  * @retval None
  */
void NMI_Handler(void)
{
  /* Go to infinite loop when NMI exception occurs */
  while (1)
 80109a0:	e7fe      	b.n	80109a0 <NMI_Handler>

080109a2 <HardFault_Handler>:
  * @retval None
  */
void HardFault_Handler(void)
{
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 80109a2:	e7fe      	b.n	80109a2 <HardFault_Handler>

080109a4 <MemManage_Handler>:
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
  HAL_NVIC_SystemReset();
 80109a4:	f000 b914 	b.w	8010bd0 <HAL_NVIC_SystemReset>

080109a8 <BusFault_Handler>:
  * @retval None
  */
void BusFault_Handler(void)
{
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 80109a8:	e7fe      	b.n	80109a8 <BusFault_Handler>

080109aa <UsageFault_Handler>:
  * @retval None
  */
void UsageFault_Handler(void)
{
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 80109aa:	e7fe      	b.n	80109aa <UsageFault_Handler>

080109ac <DebugMon_Handler>:
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
}
 80109ac:	4770      	bx	lr

080109ae <PendSV_Handler>:
 80109ae:	4770      	bx	lr

080109b0 <SysTick_Handler>:
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
  HAL_IncTick();
 80109b0:	f000 b8b8 	b.w	8010b24 <HAL_IncTick>

080109b4 <FLASH_IRQHandler>:
  * @param  None
  * @retval None
  */
void FLASH_IRQHandler(void)
{
  HAL_FLASH_IRQHandler();
 80109b4:	f000 b988 	b.w	8010cc8 <HAL_FLASH_IRQHandler>

080109b8 <TAMP_STAMP_IRQHandler>:
  * @param  None
  * @retval None
  */
void TAMP_STAMP_IRQHandler(void)
{
  RtcHandle.Instance = RTC;
 80109b8:	4802      	ldr	r0, [pc, #8]	; (80109c4 <TAMP_STAMP_IRQHandler+0xc>)
 80109ba:	4b03      	ldr	r3, [pc, #12]	; (80109c8 <TAMP_STAMP_IRQHandler+0x10>)
 80109bc:	6003      	str	r3, [r0, #0]
  HAL_RTCEx_TamperTimeStampIRQHandler(&RtcHandle);
 80109be:	f000 bdb1 	b.w	8011524 <HAL_RTCEx_TamperTimeStampIRQHandler>
 80109c2:	bf00      	nop
 80109c4:	200010d0 	.word	0x200010d0
 80109c8:	40002800 	.word	0x40002800

080109cc <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

int _read (int file, char *ptr, int len)
{
 80109cc:	b570      	push	{r4, r5, r6, lr}
 80109ce:	460d      	mov	r5, r1
 80109d0:	4614      	mov	r4, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80109d2:	460e      	mov	r6, r1
 80109d4:	1b73      	subs	r3, r6, r5
 80109d6:	429c      	cmp	r4, r3
 80109d8:	dc01      	bgt.n	80109de <_read+0x12>
	{
		*ptr++ = __io_getchar();
	}

return len;
}
 80109da:	4620      	mov	r0, r4
 80109dc:	bd70      	pop	{r4, r5, r6, pc}
		*ptr++ = __io_getchar();
 80109de:	f3af 8000 	nop.w
 80109e2:	f806 0b01 	strb.w	r0, [r6], #1
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80109e6:	e7f5      	b.n	80109d4 <_read+0x8>

080109e8 <_write>:

int _write(int file, char *ptr, int len)
{
 80109e8:	b570      	push	{r4, r5, r6, lr}
 80109ea:	460d      	mov	r5, r1
 80109ec:	4614      	mov	r4, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80109ee:	460e      	mov	r6, r1
 80109f0:	1b73      	subs	r3, r6, r5
 80109f2:	429c      	cmp	r4, r3
 80109f4:	dc01      	bgt.n	80109fa <_write+0x12>
	{
		__io_putchar(*ptr++);
	}
	return len;
}
 80109f6:	4620      	mov	r0, r4
 80109f8:	bd70      	pop	{r4, r5, r6, pc}
		__io_putchar(*ptr++);
 80109fa:	f816 0b01 	ldrb.w	r0, [r6], #1
 80109fe:	f7ff ff45 	bl	801088c <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8010a02:	e7f5      	b.n	80109f0 <_write+0x8>

08010a04 <_sbrk>:
{
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8010a04:	4a0a      	ldr	r2, [pc, #40]	; (8010a30 <_sbrk+0x2c>)
 8010a06:	6811      	ldr	r1, [r2, #0]
{
 8010a08:	b508      	push	{r3, lr}
 8010a0a:	4603      	mov	r3, r0
	if (heap_end == 0)
 8010a0c:	b909      	cbnz	r1, 8010a12 <_sbrk+0xe>
		heap_end = &end;
 8010a0e:	4909      	ldr	r1, [pc, #36]	; (8010a34 <_sbrk+0x30>)
 8010a10:	6011      	str	r1, [r2, #0]

	prev_heap_end = heap_end;
 8010a12:	6810      	ldr	r0, [r2, #0]
	if (heap_end + incr > stack_ptr)
 8010a14:	4669      	mov	r1, sp
 8010a16:	4403      	add	r3, r0
 8010a18:	428b      	cmp	r3, r1
 8010a1a:	d906      	bls.n	8010a2a <_sbrk+0x26>
	{
//		write(1, "Heap and stack collision\n", 25);
//		abort();
		errno = ENOMEM;
 8010a1c:	f000 fece 	bl	80117bc <__errno>
 8010a20:	230c      	movs	r3, #12
 8010a22:	6003      	str	r3, [r0, #0]
		return (caddr_t) -1;
 8010a24:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
	}

	heap_end += incr;

	return (caddr_t) prev_heap_end;
}
 8010a28:	bd08      	pop	{r3, pc}
	heap_end += incr;
 8010a2a:	6013      	str	r3, [r2, #0]
	return (caddr_t) prev_heap_end;
 8010a2c:	e7fc      	b.n	8010a28 <_sbrk+0x24>
 8010a2e:	bf00      	nop
 8010a30:	200010f0 	.word	0x200010f0
 8010a34:	20001930 	.word	0x20001930

08010a38 <_close>:

int _close(int file)
{
	return -1;
}
 8010a38:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8010a3c:	4770      	bx	lr

08010a3e <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 8010a3e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8010a42:	604b      	str	r3, [r1, #4]
	return 0;
}
 8010a44:	2000      	movs	r0, #0
 8010a46:	4770      	bx	lr

08010a48 <_lseek>:
}

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 8010a48:	2000      	movs	r0, #0
 8010a4a:	4770      	bx	lr

08010a4c <HAL_RTCEx_Tamper1EventCallback>:
  * @retval None
  */
void CALLBACK_Antitamper(void)
{
  /*Set tamper event variable*/
  m_uTamperEvent = 1U;
 8010a4c:	4b02      	ldr	r3, [pc, #8]	; (8010a58 <HAL_RTCEx_Tamper1EventCallback+0xc>)
 8010a4e:	2201      	movs	r2, #1
 8010a50:	f8c3 2800 	str.w	r2, [r3, #2048]	; 0x800
}
 8010a54:	4770      	bx	lr
 8010a56:	bf00      	nop
 8010a58:	200010f8 	.word	0x200010f8

08010a5c <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8010a5c:	490e      	ldr	r1, [pc, #56]	; (8010a98 <SystemInit+0x3c>)
 8010a5e:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8010a62:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8010a66:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8010a6a:	4b0c      	ldr	r3, [pc, #48]	; (8010a9c <SystemInit+0x40>)
 8010a6c:	681a      	ldr	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8010a6e:	2000      	movs	r0, #0
  RCC->CR |= (uint32_t)0x00000001;
 8010a70:	f042 0201 	orr.w	r2, r2, #1
 8010a74:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000;
 8010a76:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8010a78:	681a      	ldr	r2, [r3, #0]
 8010a7a:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8010a7e:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8010a82:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8010a84:	4a06      	ldr	r2, [pc, #24]	; (8010aa0 <SystemInit+0x44>)
 8010a86:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8010a88:	681a      	ldr	r2, [r3, #0]
 8010a8a:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8010a8e:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8010a90:	60d8      	str	r0, [r3, #12]
  SystemInit_ExtMemCtl(); 
#endif /* DATA_IN_ExtSRAM || DATA_IN_ExtSDRAM */

  /* Configure the Vector Table location  ------------------*/
  /* Reuse information from map file */ 
  SCB->VTOR = INTVECT_START;
 8010a92:	4b04      	ldr	r3, [pc, #16]	; (8010aa4 <SystemInit+0x48>)
 8010a94:	608b      	str	r3, [r1, #8]
}
 8010a96:	4770      	bx	lr
 8010a98:	e000ed00 	.word	0xe000ed00
 8010a9c:	40023800 	.word	0x40023800
 8010aa0:	24003010 	.word	0x24003010
 8010aa4:	08010200 	.word	0x08010200

08010aa8 <HAL_MspInit>:
__weak void HAL_MspInit(void)
{
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspInit could be implemented in the user file
   */
}
 8010aa8:	4770      	bx	lr
	...

08010aac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8010aac:	b570      	push	{r4, r5, r6, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8010aae:	4a0e      	ldr	r2, [pc, #56]	; (8010ae8 <HAL_InitTick+0x3c>)
 8010ab0:	4e0e      	ldr	r6, [pc, #56]	; (8010aec <HAL_InitTick+0x40>)
{
 8010ab2:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8010ab4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8010ab8:	7830      	ldrb	r0, [r6, #0]
 8010aba:	fbb3 f3f0 	udiv	r3, r3, r0
 8010abe:	6810      	ldr	r0, [r2, #0]
 8010ac0:	fbb0 f0f3 	udiv	r0, r0, r3
 8010ac4:	f000 f896 	bl	8010bf4 <HAL_SYSTICK_Config>
 8010ac8:	4604      	mov	r4, r0
 8010aca:	b950      	cbnz	r0, 8010ae2 <HAL_InitTick+0x36>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8010acc:	2d0f      	cmp	r5, #15
 8010ace:	d808      	bhi.n	8010ae2 <HAL_InitTick+0x36>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8010ad0:	4602      	mov	r2, r0
 8010ad2:	4629      	mov	r1, r5
 8010ad4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8010ad8:	f000 f848 	bl	8010b6c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8010adc:	6075      	str	r5, [r6, #4]
 8010ade:	4620      	mov	r0, r4
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8010ae0:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 8010ae2:	2001      	movs	r0, #1
 8010ae4:	e7fc      	b.n	8010ae0 <HAL_InitTick+0x34>
 8010ae6:	bf00      	nop
 8010ae8:	20001000 	.word	0x20001000
 8010aec:	20001004 	.word	0x20001004

08010af0 <HAL_Init>:
{
 8010af0:	b508      	push	{r3, lr}
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8010af2:	4b0b      	ldr	r3, [pc, #44]	; (8010b20 <HAL_Init+0x30>)
 8010af4:	681a      	ldr	r2, [r3, #0]
 8010af6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8010afa:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8010afc:	681a      	ldr	r2, [r3, #0]
 8010afe:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8010b02:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8010b04:	681a      	ldr	r2, [r3, #0]
 8010b06:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8010b0a:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8010b0c:	2003      	movs	r0, #3
 8010b0e:	f000 f81b 	bl	8010b48 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8010b12:	200f      	movs	r0, #15
 8010b14:	f7ff ffca 	bl	8010aac <HAL_InitTick>
  HAL_MspInit();
 8010b18:	f7ff ffc6 	bl	8010aa8 <HAL_MspInit>
}
 8010b1c:	2000      	movs	r0, #0
 8010b1e:	bd08      	pop	{r3, pc}
 8010b20:	40023c00 	.word	0x40023c00

08010b24 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8010b24:	4a03      	ldr	r2, [pc, #12]	; (8010b34 <HAL_IncTick+0x10>)
 8010b26:	4b04      	ldr	r3, [pc, #16]	; (8010b38 <HAL_IncTick+0x14>)
 8010b28:	6811      	ldr	r1, [r2, #0]
 8010b2a:	781b      	ldrb	r3, [r3, #0]
 8010b2c:	440b      	add	r3, r1
 8010b2e:	6013      	str	r3, [r2, #0]
}
 8010b30:	4770      	bx	lr
 8010b32:	bf00      	nop
 8010b34:	200018fc 	.word	0x200018fc
 8010b38:	20001004 	.word	0x20001004

08010b3c <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8010b3c:	4b01      	ldr	r3, [pc, #4]	; (8010b44 <HAL_GetTick+0x8>)
 8010b3e:	6818      	ldr	r0, [r3, #0]
}
 8010b40:	4770      	bx	lr
 8010b42:	bf00      	nop
 8010b44:	200018fc 	.word	0x200018fc

08010b48 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8010b48:	4907      	ldr	r1, [pc, #28]	; (8010b68 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8010b4a:	68ca      	ldr	r2, [r1, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8010b4c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8010b50:	0203      	lsls	r3, r0, #8
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8010b52:	0412      	lsls	r2, r2, #16
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8010b54:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8010b58:	0c12      	lsrs	r2, r2, #16
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8010b5a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8010b5c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8010b60:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8010b64:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8010b66:	4770      	bx	lr
 8010b68:	e000ed00 	.word	0xe000ed00

08010b6c <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8010b6c:	4b16      	ldr	r3, [pc, #88]	; (8010bc8 <HAL_NVIC_SetPriority+0x5c>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8010b6e:	b530      	push	{r4, r5, lr}
 8010b70:	68dc      	ldr	r4, [r3, #12]
 8010b72:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8010b76:	f1c4 0507 	rsb	r5, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8010b7a:	1d23      	adds	r3, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8010b7c:	2d04      	cmp	r5, #4
 8010b7e:	bf28      	it	cs
 8010b80:	2504      	movcs	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8010b82:	2b06      	cmp	r3, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8010b84:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8010b88:	bf8c      	ite	hi
 8010b8a:	3c03      	subhi	r4, #3
 8010b8c:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8010b8e:	fa03 f505 	lsl.w	r5, r3, r5
 8010b92:	ea21 0105 	bic.w	r1, r1, r5
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8010b96:	40a3      	lsls	r3, r4
 8010b98:	ea22 0203 	bic.w	r2, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8010b9c:	40a1      	lsls	r1, r4
  if ((int32_t)(IRQn) >= 0)
 8010b9e:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8010ba0:	ea41 0302 	orr.w	r3, r1, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8010ba4:	bfac      	ite	ge
 8010ba6:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8010baa:	4a08      	ldrlt	r2, [pc, #32]	; (8010bcc <HAL_NVIC_SetPriority+0x60>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8010bac:	ea4f 1303 	mov.w	r3, r3, lsl #4
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8010bb0:	bfb8      	it	lt
 8010bb2:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8010bb6:	b2db      	uxtb	r3, r3
 8010bb8:	bfaa      	itet	ge
 8010bba:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8010bbe:	5413      	strblt	r3, [r2, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8010bc0:	f880 3300 	strbge.w	r3, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8010bc4:	bd30      	pop	{r4, r5, pc}
 8010bc6:	bf00      	nop
 8010bc8:	e000ed00 	.word	0xe000ed00
 8010bcc:	e000ed14 	.word	0xe000ed14

08010bd0 <HAL_NVIC_SystemReset>:
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8010bd0:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8010bd4:	4905      	ldr	r1, [pc, #20]	; (8010bec <HAL_NVIC_SystemReset+0x1c>)
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8010bd6:	4b06      	ldr	r3, [pc, #24]	; (8010bf0 <HAL_NVIC_SystemReset+0x20>)
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8010bd8:	68ca      	ldr	r2, [r1, #12]
 8010bda:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8010bde:	4313      	orrs	r3, r2
 8010be0:	60cb      	str	r3, [r1, #12]
 8010be2:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8010be6:	bf00      	nop
  for(;;)                                                           /* wait until reset */
 8010be8:	e7fd      	b.n	8010be6 <HAL_NVIC_SystemReset+0x16>
 8010bea:	bf00      	nop
 8010bec:	e000ed00 	.word	0xe000ed00
 8010bf0:	05fa0004 	.word	0x05fa0004

08010bf4 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8010bf4:	3801      	subs	r0, #1
 8010bf6:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8010bfa:	d20b      	bcs.n	8010c14 <HAL_SYSTICK_Config+0x20>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8010bfc:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8010c00:	4a05      	ldr	r2, [pc, #20]	; (8010c18 <HAL_SYSTICK_Config+0x24>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8010c02:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8010c04:	21f0      	movs	r1, #240	; 0xf0
 8010c06:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8010c0a:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8010c0c:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8010c0e:	6198      	str	r0, [r3, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8010c10:	611a      	str	r2, [r3, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8010c12:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8010c14:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8010c16:	4770      	bx	lr
 8010c18:	e000ed00 	.word	0xe000ed00

08010c1c <HAL_MPU_Disable>:
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8010c1c:	f3bf 8f5f 	dmb	sy
{
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8010c20:	4b04      	ldr	r3, [pc, #16]	; (8010c34 <HAL_MPU_Disable+0x18>)
 8010c22:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8010c24:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8010c28:	625a      	str	r2, [r3, #36]	; 0x24
  
  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0U;
 8010c2a:	2200      	movs	r2, #0
 8010c2c:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
}
 8010c30:	4770      	bx	lr
 8010c32:	bf00      	nop
 8010c34:	e000ed00 	.word	0xe000ed00

08010c38 <FLASH_SetErrorCode>:
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 8010c38:	4b20      	ldr	r3, [pc, #128]	; (8010cbc <FLASH_SetErrorCode+0x84>)
 8010c3a:	68da      	ldr	r2, [r3, #12]
 8010c3c:	06d0      	lsls	r0, r2, #27
 8010c3e:	d506      	bpl.n	8010c4e <FLASH_SetErrorCode+0x16>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8010c40:	491f      	ldr	r1, [pc, #124]	; (8010cc0 <FLASH_SetErrorCode+0x88>)
 8010c42:	69ca      	ldr	r2, [r1, #28]
 8010c44:	f042 0210 	orr.w	r2, r2, #16
 8010c48:	61ca      	str	r2, [r1, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 8010c4a:	2210      	movs	r2, #16
 8010c4c:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 8010c4e:	68da      	ldr	r2, [r3, #12]
 8010c50:	0691      	lsls	r1, r2, #26
 8010c52:	d506      	bpl.n	8010c62 <FLASH_SetErrorCode+0x2a>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 8010c54:	491a      	ldr	r1, [pc, #104]	; (8010cc0 <FLASH_SetErrorCode+0x88>)
 8010c56:	69ca      	ldr	r2, [r1, #28]
 8010c58:	f042 0208 	orr.w	r2, r2, #8
 8010c5c:	61ca      	str	r2, [r1, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 8010c5e:	2220      	movs	r2, #32
 8010c60:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 8010c62:	4b16      	ldr	r3, [pc, #88]	; (8010cbc <FLASH_SetErrorCode+0x84>)
 8010c64:	68da      	ldr	r2, [r3, #12]
 8010c66:	0652      	lsls	r2, r2, #25
 8010c68:	d506      	bpl.n	8010c78 <FLASH_SetErrorCode+0x40>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 8010c6a:	4915      	ldr	r1, [pc, #84]	; (8010cc0 <FLASH_SetErrorCode+0x88>)
 8010c6c:	69ca      	ldr	r2, [r1, #28]
 8010c6e:	f042 0204 	orr.w	r2, r2, #4
 8010c72:	61ca      	str	r2, [r1, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 8010c74:	2240      	movs	r2, #64	; 0x40
 8010c76:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 8010c78:	68da      	ldr	r2, [r3, #12]
 8010c7a:	0610      	lsls	r0, r2, #24
 8010c7c:	d506      	bpl.n	8010c8c <FLASH_SetErrorCode+0x54>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 8010c7e:	4910      	ldr	r1, [pc, #64]	; (8010cc0 <FLASH_SetErrorCode+0x88>)
 8010c80:	69ca      	ldr	r2, [r1, #28]
 8010c82:	f042 0202 	orr.w	r2, r2, #2
 8010c86:	61ca      	str	r2, [r1, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 8010c88:	2280      	movs	r2, #128	; 0x80
 8010c8a:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR) 
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR) != RESET)
 8010c8c:	4b0b      	ldr	r3, [pc, #44]	; (8010cbc <FLASH_SetErrorCode+0x84>)
 8010c8e:	68da      	ldr	r2, [r3, #12]
 8010c90:	05d1      	lsls	r1, r2, #23
 8010c92:	d507      	bpl.n	8010ca4 <FLASH_SetErrorCode+0x6c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 8010c94:	490a      	ldr	r1, [pc, #40]	; (8010cc0 <FLASH_SetErrorCode+0x88>)
 8010c96:	69ca      	ldr	r2, [r1, #28]
 8010c98:	f042 0201 	orr.w	r2, r2, #1
 8010c9c:	61ca      	str	r2, [r1, #28]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
 8010c9e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8010ca2:	60da      	str	r2, [r3, #12]
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 8010ca4:	68da      	ldr	r2, [r3, #12]
 8010ca6:	0792      	lsls	r2, r2, #30
 8010ca8:	d506      	bpl.n	8010cb8 <FLASH_SetErrorCode+0x80>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 8010caa:	4905      	ldr	r1, [pc, #20]	; (8010cc0 <FLASH_SetErrorCode+0x88>)
 8010cac:	69ca      	ldr	r2, [r1, #28]
 8010cae:	f042 0220 	orr.w	r2, r2, #32
 8010cb2:	61ca      	str	r2, [r1, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 8010cb4:	2202      	movs	r2, #2
 8010cb6:	60da      	str	r2, [r3, #12]
  }
}
 8010cb8:	4770      	bx	lr
 8010cba:	bf00      	nop
 8010cbc:	40023c00 	.word	0x40023c00
 8010cc0:	20001900 	.word	0x20001900

08010cc4 <HAL_FLASH_EndOfOperationCallback>:
}
 8010cc4:	4770      	bx	lr

08010cc6 <HAL_FLASH_OperationErrorCallback>:
 8010cc6:	4770      	bx	lr

08010cc8 <HAL_FLASH_IRQHandler>:
{
 8010cc8:	b538      	push	{r3, r4, r5, lr}
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 8010cca:	4b2e      	ldr	r3, [pc, #184]	; (8010d84 <HAL_FLASH_IRQHandler+0xbc>)
 8010ccc:	4c2e      	ldr	r4, [pc, #184]	; (8010d88 <HAL_FLASH_IRQHandler+0xc0>)
 8010cce:	68db      	ldr	r3, [r3, #12]
 8010cd0:	f413 7ff9 	tst.w	r3, #498	; 0x1f2
 8010cd4:	d00d      	beq.n	8010cf2 <HAL_FLASH_IRQHandler+0x2a>
    if(pFlash.ProcedureOnGoing == FLASH_PROC_SECTERASE)
 8010cd6:	7823      	ldrb	r3, [r4, #0]
 8010cd8:	2b01      	cmp	r3, #1
 8010cda:	d135      	bne.n	8010d48 <HAL_FLASH_IRQHandler+0x80>
      pFlash.Sector = 0xFFFFFFFFU;
 8010cdc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
      addresstmp = pFlash.Sector;
 8010ce0:	68e5      	ldr	r5, [r4, #12]
      pFlash.Sector = 0xFFFFFFFFU;
 8010ce2:	60e3      	str	r3, [r4, #12]
    FLASH_SetErrorCode();
 8010ce4:	f7ff ffa8 	bl	8010c38 <FLASH_SetErrorCode>
    HAL_FLASH_OperationErrorCallback(addresstmp);
 8010ce8:	4628      	mov	r0, r5
 8010cea:	f7ff ffec 	bl	8010cc6 <HAL_FLASH_OperationErrorCallback>
    pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 8010cee:	2300      	movs	r3, #0
 8010cf0:	7023      	strb	r3, [r4, #0]
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 8010cf2:	4b24      	ldr	r3, [pc, #144]	; (8010d84 <HAL_FLASH_IRQHandler+0xbc>)
 8010cf4:	68da      	ldr	r2, [r3, #12]
 8010cf6:	07d2      	lsls	r2, r2, #31
 8010cf8:	d513      	bpl.n	8010d22 <HAL_FLASH_IRQHandler+0x5a>
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8010cfa:	2201      	movs	r2, #1
 8010cfc:	60da      	str	r2, [r3, #12]
    if(pFlash.ProcedureOnGoing == FLASH_PROC_SECTERASE)
 8010cfe:	7823      	ldrb	r3, [r4, #0]
 8010d00:	4293      	cmp	r3, r2
 8010d02:	d131      	bne.n	8010d68 <HAL_FLASH_IRQHandler+0xa0>
      pFlash.NbSectorsToErase--;
 8010d04:	6863      	ldr	r3, [r4, #4]
 8010d06:	3b01      	subs	r3, #1
 8010d08:	6063      	str	r3, [r4, #4]
      if(pFlash.NbSectorsToErase != 0U)
 8010d0a:	6863      	ldr	r3, [r4, #4]
 8010d0c:	b313      	cbz	r3, 8010d54 <HAL_FLASH_IRQHandler+0x8c>
        addresstmp = pFlash.Sector;
 8010d0e:	68e0      	ldr	r0, [r4, #12]
        HAL_FLASH_EndOfOperationCallback(addresstmp);
 8010d10:	f7ff ffd8 	bl	8010cc4 <HAL_FLASH_EndOfOperationCallback>
        pFlash.Sector++;
 8010d14:	68e3      	ldr	r3, [r4, #12]
 8010d16:	3301      	adds	r3, #1
 8010d18:	60e3      	str	r3, [r4, #12]
        addresstmp = pFlash.Sector;
 8010d1a:	68e0      	ldr	r0, [r4, #12]
        FLASH_Erase_Sector(addresstmp, pFlash.VoltageForErase);
 8010d1c:	7a21      	ldrb	r1, [r4, #8]
 8010d1e:	f000 f835 	bl	8010d8c <FLASH_Erase_Sector>
  if(pFlash.ProcedureOnGoing == FLASH_PROC_NONE)
 8010d22:	7823      	ldrb	r3, [r4, #0]
 8010d24:	f003 01ff 	and.w	r1, r3, #255	; 0xff
 8010d28:	b96b      	cbnz	r3, 8010d46 <HAL_FLASH_IRQHandler+0x7e>
    CLEAR_BIT(FLASH->CR, (FLASH_CR_PG | FLASH_CR_SER | FLASH_CR_SNB | FLASH_MER_BIT));
 8010d2a:	4b16      	ldr	r3, [pc, #88]	; (8010d84 <HAL_FLASH_IRQHandler+0xbc>)
 8010d2c:	691a      	ldr	r2, [r3, #16]
 8010d2e:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
 8010d32:	611a      	str	r2, [r3, #16]
    __HAL_FLASH_DISABLE_IT(FLASH_IT_EOP);
 8010d34:	691a      	ldr	r2, [r3, #16]
 8010d36:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8010d3a:	611a      	str	r2, [r3, #16]
    __HAL_FLASH_DISABLE_IT(FLASH_IT_ERR);
 8010d3c:	691a      	ldr	r2, [r3, #16]
 8010d3e:	f022 7200 	bic.w	r2, r2, #33554432	; 0x2000000
 8010d42:	611a      	str	r2, [r3, #16]
    __HAL_UNLOCK(&pFlash);
 8010d44:	7621      	strb	r1, [r4, #24]
}
 8010d46:	bd38      	pop	{r3, r4, r5, pc}
    else if(pFlash.ProcedureOnGoing == FLASH_PROC_MASSERASE)
 8010d48:	7823      	ldrb	r3, [r4, #0]
 8010d4a:	2b02      	cmp	r3, #2
      addresstmp = pFlash.Bank;
 8010d4c:	bf0c      	ite	eq
 8010d4e:	6925      	ldreq	r5, [r4, #16]
      addresstmp = pFlash.Address;
 8010d50:	6965      	ldrne	r5, [r4, #20]
 8010d52:	e7c7      	b.n	8010ce4 <HAL_FLASH_IRQHandler+0x1c>
        pFlash.Sector = addresstmp = 0xFFFFFFFFU;
 8010d54:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8010d58:	60e5      	str	r5, [r4, #12]
        pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 8010d5a:	7023      	strb	r3, [r4, #0]
        FLASH_FlushCaches() ;
 8010d5c:	f000 f83c 	bl	8010dd8 <FLASH_FlushCaches>
        HAL_FLASH_EndOfOperationCallback(addresstmp);
 8010d60:	4628      	mov	r0, r5
 8010d62:	f7ff ffaf 	bl	8010cc4 <HAL_FLASH_EndOfOperationCallback>
 8010d66:	e7dc      	b.n	8010d22 <HAL_FLASH_IRQHandler+0x5a>
      if(pFlash.ProcedureOnGoing == FLASH_PROC_MASSERASE) 
 8010d68:	7823      	ldrb	r3, [r4, #0]
 8010d6a:	2b02      	cmp	r3, #2
 8010d6c:	d107      	bne.n	8010d7e <HAL_FLASH_IRQHandler+0xb6>
        FLASH_FlushCaches() ;
 8010d6e:	f000 f833 	bl	8010dd8 <FLASH_FlushCaches>
        HAL_FLASH_EndOfOperationCallback(pFlash.Bank);
 8010d72:	6920      	ldr	r0, [r4, #16]
        HAL_FLASH_EndOfOperationCallback(pFlash.Address);
 8010d74:	f7ff ffa6 	bl	8010cc4 <HAL_FLASH_EndOfOperationCallback>
      pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 8010d78:	2300      	movs	r3, #0
 8010d7a:	7023      	strb	r3, [r4, #0]
 8010d7c:	e7d1      	b.n	8010d22 <HAL_FLASH_IRQHandler+0x5a>
        HAL_FLASH_EndOfOperationCallback(pFlash.Address);
 8010d7e:	6960      	ldr	r0, [r4, #20]
 8010d80:	e7f8      	b.n	8010d74 <HAL_FLASH_IRQHandler+0xac>
 8010d82:	bf00      	nop
 8010d84:	40023c00 	.word	0x40023c00
 8010d88:	20001900 	.word	0x20001900

08010d8c <FLASH_Erase_Sector>:

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  
  if(VoltageRange == FLASH_VOLTAGE_RANGE_1)
 8010d8c:	b139      	cbz	r1, 8010d9e <FLASH_Erase_Sector+0x12>
  {
     tmp_psize = FLASH_PSIZE_BYTE;
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_2)
 8010d8e:	2901      	cmp	r1, #1
 8010d90:	d01c      	beq.n	8010dcc <FLASH_Erase_Sector+0x40>
  {
    tmp_psize = FLASH_PSIZE_WORD;
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 8010d92:	2902      	cmp	r1, #2
 8010d94:	bf0c      	ite	eq
 8010d96:	f44f 7100 	moveq.w	r1, #512	; 0x200
 8010d9a:	f44f 7140 	movne.w	r1, #768	; 0x300
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8010d9e:	4b0d      	ldr	r3, [pc, #52]	; (8010dd4 <FLASH_Erase_Sector+0x48>)
 8010da0:	691a      	ldr	r2, [r3, #16]
 8010da2:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8010da6:	611a      	str	r2, [r3, #16]
  FLASH->CR |= tmp_psize;
 8010da8:	691a      	ldr	r2, [r3, #16]
 8010daa:	4311      	orrs	r1, r2
 8010dac:	6119      	str	r1, [r3, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 8010dae:	691a      	ldr	r2, [r3, #16]
 8010db0:	f022 0278 	bic.w	r2, r2, #120	; 0x78
 8010db4:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 8010db6:	691a      	ldr	r2, [r3, #16]
 8010db8:	ea42 00c0 	orr.w	r0, r2, r0, lsl #3
 8010dbc:	f040 0002 	orr.w	r0, r0, #2
 8010dc0:	6118      	str	r0, [r3, #16]
  FLASH->CR |= FLASH_CR_STRT;
 8010dc2:	691a      	ldr	r2, [r3, #16]
 8010dc4:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8010dc8:	611a      	str	r2, [r3, #16]
}
 8010dca:	4770      	bx	lr
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 8010dcc:	f44f 7180 	mov.w	r1, #256	; 0x100
 8010dd0:	e7e5      	b.n	8010d9e <FLASH_Erase_Sector+0x12>
 8010dd2:	bf00      	nop
 8010dd4:	40023c00 	.word	0x40023c00

08010dd8 <FLASH_FlushCaches>:
  * @retval None
  */
void FLASH_FlushCaches(void)
{
  /* Flush instruction cache  */
  if(READ_BIT(FLASH->ACR, FLASH_ACR_ICEN)!= RESET)
 8010dd8:	4b14      	ldr	r3, [pc, #80]	; (8010e2c <FLASH_FlushCaches+0x54>)
 8010dda:	681a      	ldr	r2, [r3, #0]
 8010ddc:	0591      	lsls	r1, r2, #22
 8010dde:	d50f      	bpl.n	8010e00 <FLASH_FlushCaches+0x28>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8010de0:	681a      	ldr	r2, [r3, #0]
 8010de2:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8010de6:	601a      	str	r2, [r3, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8010de8:	681a      	ldr	r2, [r3, #0]
 8010dea:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8010dee:	601a      	str	r2, [r3, #0]
 8010df0:	681a      	ldr	r2, [r3, #0]
 8010df2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8010df6:	601a      	str	r2, [r3, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8010df8:	681a      	ldr	r2, [r3, #0]
 8010dfa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8010dfe:	601a      	str	r2, [r3, #0]
  }
  
  /* Flush data cache */
  if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 8010e00:	4b0a      	ldr	r3, [pc, #40]	; (8010e2c <FLASH_FlushCaches+0x54>)
 8010e02:	681a      	ldr	r2, [r3, #0]
 8010e04:	0552      	lsls	r2, r2, #21
 8010e06:	d50f      	bpl.n	8010e28 <FLASH_FlushCaches+0x50>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 8010e08:	681a      	ldr	r2, [r3, #0]
 8010e0a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8010e0e:	601a      	str	r2, [r3, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8010e10:	681a      	ldr	r2, [r3, #0]
 8010e12:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8010e16:	601a      	str	r2, [r3, #0]
 8010e18:	681a      	ldr	r2, [r3, #0]
 8010e1a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8010e1e:	601a      	str	r2, [r3, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8010e20:	681a      	ldr	r2, [r3, #0]
 8010e22:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8010e26:	601a      	str	r2, [r3, #0]
  }
}
 8010e28:	4770      	bx	lr
 8010e2a:	bf00      	nop
 8010e2c:	40023c00 	.word	0x40023c00

08010e30 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8010e30:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8010e34:	f8df 919c 	ldr.w	r9, [pc, #412]	; 8010fd4 <HAL_GPIO_Init+0x1a4>
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8010e38:	4a64      	ldr	r2, [pc, #400]	; (8010fcc <HAL_GPIO_Init+0x19c>)
  for(position = 0U; position < GPIO_NUMBER; position++)
 8010e3a:	2300      	movs	r3, #0
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8010e3c:	680d      	ldr	r5, [r1, #0]
    ioposition = 0x01U << position;
 8010e3e:	2401      	movs	r4, #1
 8010e40:	409c      	lsls	r4, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8010e42:	ea04 0c05 	and.w	ip, r4, r5
    if(iocurrent == ioposition)
 8010e46:	43ac      	bics	r4, r5
 8010e48:	f040 80ac 	bne.w	8010fa4 <HAL_GPIO_Init+0x174>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8010e4c:	684d      	ldr	r5, [r1, #4]
 8010e4e:	f005 0403 	and.w	r4, r5, #3
 8010e52:	ea4f 0843 	mov.w	r8, r3, lsl #1
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8010e56:	2603      	movs	r6, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8010e58:	1e67      	subs	r7, r4, #1
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8010e5a:	fa06 f608 	lsl.w	r6, r6, r8
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8010e5e:	2f01      	cmp	r7, #1
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8010e60:	ea6f 0606 	mvn.w	r6, r6
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8010e64:	d834      	bhi.n	8010ed0 <HAL_GPIO_Init+0xa0>
        temp = GPIOx->OSPEEDR; 
 8010e66:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8010e68:	ea07 0e06 	and.w	lr, r7, r6
        temp |= (GPIO_Init->Speed << (position * 2U));
 8010e6c:	68cf      	ldr	r7, [r1, #12]
 8010e6e:	fa07 f708 	lsl.w	r7, r7, r8
 8010e72:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OSPEEDR = temp;
 8010e76:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 8010e78:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8010e7a:	ea27 0e0c 	bic.w	lr, r7, ip
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8010e7e:	f3c5 1700 	ubfx	r7, r5, #4, #1
 8010e82:	409f      	lsls	r7, r3
 8010e84:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OTYPER = temp;
 8010e88:	6047      	str	r7, [r0, #4]
        temp = GPIOx->PUPDR;
 8010e8a:	68c7      	ldr	r7, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8010e8c:	ea07 0e06 	and.w	lr, r7, r6
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8010e90:	688f      	ldr	r7, [r1, #8]
 8010e92:	fa07 f708 	lsl.w	r7, r7, r8
 8010e96:	ea47 070e 	orr.w	r7, r7, lr
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8010e9a:	2c02      	cmp	r4, #2
        GPIOx->PUPDR = temp;
 8010e9c:	60c7      	str	r7, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8010e9e:	d119      	bne.n	8010ed4 <HAL_GPIO_Init+0xa4>
        temp = GPIOx->AFR[position >> 3U];
 8010ea0:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
 8010ea4:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8010ea8:	f003 0b07 	and.w	fp, r3, #7
        temp = GPIOx->AFR[position >> 3U];
 8010eac:	f8da 7020 	ldr.w	r7, [sl, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8010eb0:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 8010eb4:	f04f 0e0f 	mov.w	lr, #15
 8010eb8:	fa0e fe0b 	lsl.w	lr, lr, fp
 8010ebc:	ea27 0e0e 	bic.w	lr, r7, lr
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8010ec0:	690f      	ldr	r7, [r1, #16]
 8010ec2:	fa07 f70b 	lsl.w	r7, r7, fp
 8010ec6:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->AFR[position >> 3U] = temp;
 8010eca:	f8ca 7020 	str.w	r7, [sl, #32]
 8010ece:	e001      	b.n	8010ed4 <HAL_GPIO_Init+0xa4>
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8010ed0:	2c03      	cmp	r4, #3
 8010ed2:	d1da      	bne.n	8010e8a <HAL_GPIO_Init+0x5a>
      temp = GPIOx->MODER;
 8010ed4:	6807      	ldr	r7, [r0, #0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8010ed6:	fa04 f408 	lsl.w	r4, r4, r8
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8010eda:	403e      	ands	r6, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8010edc:	4326      	orrs	r6, r4
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8010ede:	00ec      	lsls	r4, r5, #3
      GPIOx->MODER = temp;
 8010ee0:	6006      	str	r6, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8010ee2:	d55f      	bpl.n	8010fa4 <HAL_GPIO_Init+0x174>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8010ee4:	f04f 0a00 	mov.w	sl, #0
 8010ee8:	f8cd a004 	str.w	sl, [sp, #4]
 8010eec:	f8d9 6044 	ldr.w	r6, [r9, #68]	; 0x44
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8010ef0:	4c37      	ldr	r4, [pc, #220]	; (8010fd0 <HAL_GPIO_Init+0x1a0>)
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8010ef2:	f446 4680 	orr.w	r6, r6, #16384	; 0x4000
 8010ef6:	f8c9 6044 	str.w	r6, [r9, #68]	; 0x44
 8010efa:	f8d9 6044 	ldr.w	r6, [r9, #68]	; 0x44
 8010efe:	f406 4680 	and.w	r6, r6, #16384	; 0x4000
 8010f02:	9601      	str	r6, [sp, #4]
 8010f04:	9e01      	ldr	r6, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 8010f06:	f023 0603 	bic.w	r6, r3, #3
 8010f0a:	f106 4680 	add.w	r6, r6, #1073741824	; 0x40000000
 8010f0e:	f506 369c 	add.w	r6, r6, #79872	; 0x13800
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8010f12:	f003 0e03 	and.w	lr, r3, #3
        temp = SYSCFG->EXTICR[position >> 2U];
 8010f16:	f8d6 8008 	ldr.w	r8, [r6, #8]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8010f1a:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 8010f1e:	270f      	movs	r7, #15
 8010f20:	fa07 f70e 	lsl.w	r7, r7, lr
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8010f24:	42a0      	cmp	r0, r4
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8010f26:	ea28 0707 	bic.w	r7, r8, r7
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8010f2a:	d042      	beq.n	8010fb2 <HAL_GPIO_Init+0x182>
 8010f2c:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8010f30:	42a0      	cmp	r0, r4
 8010f32:	d040      	beq.n	8010fb6 <HAL_GPIO_Init+0x186>
 8010f34:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8010f38:	42a0      	cmp	r0, r4
 8010f3a:	d03e      	beq.n	8010fba <HAL_GPIO_Init+0x18a>
 8010f3c:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8010f40:	42a0      	cmp	r0, r4
 8010f42:	d03c      	beq.n	8010fbe <HAL_GPIO_Init+0x18e>
 8010f44:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8010f48:	42a0      	cmp	r0, r4
 8010f4a:	d03a      	beq.n	8010fc2 <HAL_GPIO_Init+0x192>
 8010f4c:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8010f50:	42a0      	cmp	r0, r4
 8010f52:	d038      	beq.n	8010fc6 <HAL_GPIO_Init+0x196>
 8010f54:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8010f58:	42a0      	cmp	r0, r4
 8010f5a:	bf0c      	ite	eq
 8010f5c:	2406      	moveq	r4, #6
 8010f5e:	2407      	movne	r4, #7
 8010f60:	fa04 f40e 	lsl.w	r4, r4, lr
 8010f64:	433c      	orrs	r4, r7
        SYSCFG->EXTICR[position >> 2U] = temp;
 8010f66:	60b4      	str	r4, [r6, #8]
        temp = EXTI->IMR;
 8010f68:	6814      	ldr	r4, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 8010f6a:	ea6f 060c 	mvn.w	r6, ip
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8010f6e:	03ef      	lsls	r7, r5, #15
        temp &= ~((uint32_t)iocurrent);
 8010f70:	bf54      	ite	pl
 8010f72:	4034      	andpl	r4, r6
        {
          temp |= iocurrent;
 8010f74:	ea4c 0404 	orrmi.w	r4, ip, r4
        }
        EXTI->IMR = temp;
 8010f78:	6014      	str	r4, [r2, #0]

        temp = EXTI->EMR;
 8010f7a:	6854      	ldr	r4, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8010f7c:	03af      	lsls	r7, r5, #14
        temp &= ~((uint32_t)iocurrent);
 8010f7e:	bf54      	ite	pl
 8010f80:	4034      	andpl	r4, r6
        {
          temp |= iocurrent;
 8010f82:	ea4c 0404 	orrmi.w	r4, ip, r4
        }
        EXTI->EMR = temp;
 8010f86:	6054      	str	r4, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8010f88:	6894      	ldr	r4, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8010f8a:	02ef      	lsls	r7, r5, #11
        temp &= ~((uint32_t)iocurrent);
 8010f8c:	bf54      	ite	pl
 8010f8e:	4034      	andpl	r4, r6
        {
          temp |= iocurrent;
 8010f90:	ea4c 0404 	orrmi.w	r4, ip, r4
        }
        EXTI->RTSR = temp;
 8010f94:	6094      	str	r4, [r2, #8]

        temp = EXTI->FTSR;
 8010f96:	68d4      	ldr	r4, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8010f98:	02ad      	lsls	r5, r5, #10
        temp &= ~((uint32_t)iocurrent);
 8010f9a:	bf54      	ite	pl
 8010f9c:	4034      	andpl	r4, r6
        {
          temp |= iocurrent;
 8010f9e:	ea4c 0404 	orrmi.w	r4, ip, r4
        }
        EXTI->FTSR = temp;
 8010fa2:	60d4      	str	r4, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8010fa4:	3301      	adds	r3, #1
 8010fa6:	2b10      	cmp	r3, #16
 8010fa8:	f47f af48 	bne.w	8010e3c <HAL_GPIO_Init+0xc>
      }
    }
  }
}
 8010fac:	b003      	add	sp, #12
 8010fae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8010fb2:	4654      	mov	r4, sl
 8010fb4:	e7d4      	b.n	8010f60 <HAL_GPIO_Init+0x130>
 8010fb6:	2401      	movs	r4, #1
 8010fb8:	e7d2      	b.n	8010f60 <HAL_GPIO_Init+0x130>
 8010fba:	2402      	movs	r4, #2
 8010fbc:	e7d0      	b.n	8010f60 <HAL_GPIO_Init+0x130>
 8010fbe:	2403      	movs	r4, #3
 8010fc0:	e7ce      	b.n	8010f60 <HAL_GPIO_Init+0x130>
 8010fc2:	2404      	movs	r4, #4
 8010fc4:	e7cc      	b.n	8010f60 <HAL_GPIO_Init+0x130>
 8010fc6:	2405      	movs	r4, #5
 8010fc8:	e7ca      	b.n	8010f60 <HAL_GPIO_Init+0x130>
 8010fca:	bf00      	nop
 8010fcc:	40013c00 	.word	0x40013c00
 8010fd0:	40020000 	.word	0x40020000
 8010fd4:	40023800 	.word	0x40023800

08010fd8 <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8010fd8:	4913      	ldr	r1, [pc, #76]	; (8011028 <HAL_RCC_GetSysClockFreq+0x50>)
{
 8010fda:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8010fdc:	688b      	ldr	r3, [r1, #8]
 8010fde:	f003 030c 	and.w	r3, r3, #12
 8010fe2:	2b04      	cmp	r3, #4
 8010fe4:	d01c      	beq.n	8011020 <HAL_RCC_GetSysClockFreq+0x48>
 8010fe6:	2b08      	cmp	r3, #8
 8010fe8:	d11c      	bne.n	8011024 <HAL_RCC_GetSysClockFreq+0x4c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8010fea:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8010fec:	684b      	ldr	r3, [r1, #4]
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8010fee:	6849      	ldr	r1, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8010ff0:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8010ff4:	bf14      	ite	ne
 8010ff6:	480d      	ldrne	r0, [pc, #52]	; (801102c <HAL_RCC_GetSysClockFreq+0x54>)
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8010ff8:	480d      	ldreq	r0, [pc, #52]	; (8011030 <HAL_RCC_GetSysClockFreq+0x58>)
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8010ffa:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8010ffe:	bf18      	it	ne
 8011000:	2300      	movne	r3, #0
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8011002:	f002 023f 	and.w	r2, r2, #63	; 0x3f
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8011006:	fba1 0100 	umull	r0, r1, r1, r0
 801100a:	f7ff fa25 	bl	8010458 <__aeabi_uldivmod>
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 801100e:	4b06      	ldr	r3, [pc, #24]	; (8011028 <HAL_RCC_GetSysClockFreq+0x50>)
 8011010:	685b      	ldr	r3, [r3, #4]
 8011012:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8011016:	3301      	adds	r3, #1
 8011018:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco/pllp;
 801101a:	fbb0 f0f3 	udiv	r0, r0, r3
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 801101e:	bd08      	pop	{r3, pc}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8011020:	4802      	ldr	r0, [pc, #8]	; (801102c <HAL_RCC_GetSysClockFreq+0x54>)
 8011022:	e7fc      	b.n	801101e <HAL_RCC_GetSysClockFreq+0x46>
      sysclockfreq = HSI_VALUE;
 8011024:	4802      	ldr	r0, [pc, #8]	; (8011030 <HAL_RCC_GetSysClockFreq+0x58>)
  return sysclockfreq;
 8011026:	e7fa      	b.n	801101e <HAL_RCC_GetSysClockFreq+0x46>
 8011028:	40023800 	.word	0x40023800
 801102c:	007a1200 	.word	0x007a1200
 8011030:	00f42400 	.word	0x00f42400

08011034 <HAL_RCC_ClockConfig>:
{
 8011034:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011038:	460d      	mov	r5, r1
  if(RCC_ClkInitStruct == NULL)
 801103a:	4604      	mov	r4, r0
 801103c:	b910      	cbnz	r0, 8011044 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 801103e:	2001      	movs	r0, #1
}
 8011040:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8011044:	4b44      	ldr	r3, [pc, #272]	; (8011158 <HAL_RCC_ClockConfig+0x124>)
 8011046:	681a      	ldr	r2, [r3, #0]
 8011048:	f002 0207 	and.w	r2, r2, #7
 801104c:	428a      	cmp	r2, r1
 801104e:	d328      	bcc.n	80110a2 <HAL_RCC_ClockConfig+0x6e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8011050:	6822      	ldr	r2, [r4, #0]
 8011052:	0797      	lsls	r7, r2, #30
 8011054:	d42d      	bmi.n	80110b2 <HAL_RCC_ClockConfig+0x7e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8011056:	07d0      	lsls	r0, r2, #31
 8011058:	d441      	bmi.n	80110de <HAL_RCC_ClockConfig+0xaa>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 801105a:	4b3f      	ldr	r3, [pc, #252]	; (8011158 <HAL_RCC_ClockConfig+0x124>)
 801105c:	681a      	ldr	r2, [r3, #0]
 801105e:	f002 0207 	and.w	r2, r2, #7
 8011062:	42aa      	cmp	r2, r5
 8011064:	d866      	bhi.n	8011134 <HAL_RCC_ClockConfig+0x100>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8011066:	6822      	ldr	r2, [r4, #0]
 8011068:	0751      	lsls	r1, r2, #29
 801106a:	d46c      	bmi.n	8011146 <HAL_RCC_ClockConfig+0x112>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 801106c:	0713      	lsls	r3, r2, #28
 801106e:	d507      	bpl.n	8011080 <HAL_RCC_ClockConfig+0x4c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8011070:	4a3a      	ldr	r2, [pc, #232]	; (801115c <HAL_RCC_ClockConfig+0x128>)
 8011072:	6921      	ldr	r1, [r4, #16]
 8011074:	6893      	ldr	r3, [r2, #8]
 8011076:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 801107a:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 801107e:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8011080:	f7ff ffaa 	bl	8010fd8 <HAL_RCC_GetSysClockFreq>
 8011084:	4b35      	ldr	r3, [pc, #212]	; (801115c <HAL_RCC_ClockConfig+0x128>)
 8011086:	4a36      	ldr	r2, [pc, #216]	; (8011160 <HAL_RCC_ClockConfig+0x12c>)
 8011088:	689b      	ldr	r3, [r3, #8]
 801108a:	f3c3 1303 	ubfx	r3, r3, #4, #4
 801108e:	5cd3      	ldrb	r3, [r2, r3]
 8011090:	40d8      	lsrs	r0, r3
 8011092:	4b34      	ldr	r3, [pc, #208]	; (8011164 <HAL_RCC_ClockConfig+0x130>)
 8011094:	6018      	str	r0, [r3, #0]
  HAL_InitTick (uwTickPrio);
 8011096:	4b34      	ldr	r3, [pc, #208]	; (8011168 <HAL_RCC_ClockConfig+0x134>)
 8011098:	6818      	ldr	r0, [r3, #0]
 801109a:	f7ff fd07 	bl	8010aac <HAL_InitTick>
  return HAL_OK;
 801109e:	2000      	movs	r0, #0
 80110a0:	e7ce      	b.n	8011040 <HAL_RCC_ClockConfig+0xc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80110a2:	b2ca      	uxtb	r2, r1
 80110a4:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80110a6:	681b      	ldr	r3, [r3, #0]
 80110a8:	f003 0307 	and.w	r3, r3, #7
 80110ac:	428b      	cmp	r3, r1
 80110ae:	d1c6      	bne.n	801103e <HAL_RCC_ClockConfig+0xa>
 80110b0:	e7ce      	b.n	8011050 <HAL_RCC_ClockConfig+0x1c>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80110b2:	4b2a      	ldr	r3, [pc, #168]	; (801115c <HAL_RCC_ClockConfig+0x128>)
 80110b4:	f012 0f04 	tst.w	r2, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80110b8:	bf1e      	ittt	ne
 80110ba:	6899      	ldrne	r1, [r3, #8]
 80110bc:	f441 51e0 	orrne.w	r1, r1, #7168	; 0x1c00
 80110c0:	6099      	strne	r1, [r3, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80110c2:	0716      	lsls	r6, r2, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80110c4:	bf42      	ittt	mi
 80110c6:	6899      	ldrmi	r1, [r3, #8]
 80110c8:	f441 4160 	orrmi.w	r1, r1, #57344	; 0xe000
 80110cc:	6099      	strmi	r1, [r3, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80110ce:	4923      	ldr	r1, [pc, #140]	; (801115c <HAL_RCC_ClockConfig+0x128>)
 80110d0:	68a0      	ldr	r0, [r4, #8]
 80110d2:	688b      	ldr	r3, [r1, #8]
 80110d4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80110d8:	4303      	orrs	r3, r0
 80110da:	608b      	str	r3, [r1, #8]
 80110dc:	e7bb      	b.n	8011056 <HAL_RCC_ClockConfig+0x22>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80110de:	6862      	ldr	r2, [r4, #4]
 80110e0:	4b1e      	ldr	r3, [pc, #120]	; (801115c <HAL_RCC_ClockConfig+0x128>)
 80110e2:	2a01      	cmp	r2, #1
 80110e4:	d11c      	bne.n	8011120 <HAL_RCC_ClockConfig+0xec>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80110e6:	681b      	ldr	r3, [r3, #0]
 80110e8:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80110ec:	d0a7      	beq.n	801103e <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80110ee:	4e1b      	ldr	r6, [pc, #108]	; (801115c <HAL_RCC_ClockConfig+0x128>)
 80110f0:	68b3      	ldr	r3, [r6, #8]
 80110f2:	f023 0303 	bic.w	r3, r3, #3
 80110f6:	4313      	orrs	r3, r2
 80110f8:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 80110fa:	f7ff fd1f 	bl	8010b3c <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80110fe:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8011102:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8011104:	68b3      	ldr	r3, [r6, #8]
 8011106:	6862      	ldr	r2, [r4, #4]
 8011108:	f003 030c 	and.w	r3, r3, #12
 801110c:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8011110:	d0a3      	beq.n	801105a <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8011112:	f7ff fd13 	bl	8010b3c <HAL_GetTick>
 8011116:	1bc0      	subs	r0, r0, r7
 8011118:	4540      	cmp	r0, r8
 801111a:	d9f3      	bls.n	8011104 <HAL_RCC_ClockConfig+0xd0>
        return HAL_TIMEOUT;
 801111c:	2003      	movs	r0, #3
 801111e:	e78f      	b.n	8011040 <HAL_RCC_ClockConfig+0xc>
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8011120:	1e91      	subs	r1, r2, #2
 8011122:	2901      	cmp	r1, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8011124:	681b      	ldr	r3, [r3, #0]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8011126:	d802      	bhi.n	801112e <HAL_RCC_ClockConfig+0xfa>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8011128:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 801112c:	e7de      	b.n	80110ec <HAL_RCC_ClockConfig+0xb8>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 801112e:	f013 0f02 	tst.w	r3, #2
 8011132:	e7db      	b.n	80110ec <HAL_RCC_ClockConfig+0xb8>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8011134:	b2ea      	uxtb	r2, r5
 8011136:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8011138:	681b      	ldr	r3, [r3, #0]
 801113a:	f003 0307 	and.w	r3, r3, #7
 801113e:	42ab      	cmp	r3, r5
 8011140:	f47f af7d 	bne.w	801103e <HAL_RCC_ClockConfig+0xa>
 8011144:	e78f      	b.n	8011066 <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8011146:	4905      	ldr	r1, [pc, #20]	; (801115c <HAL_RCC_ClockConfig+0x128>)
 8011148:	68e0      	ldr	r0, [r4, #12]
 801114a:	688b      	ldr	r3, [r1, #8]
 801114c:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8011150:	4303      	orrs	r3, r0
 8011152:	608b      	str	r3, [r1, #8]
 8011154:	e78a      	b.n	801106c <HAL_RCC_ClockConfig+0x38>
 8011156:	bf00      	nop
 8011158:	40023c00 	.word	0x40023c00
 801115c:	40023800 	.word	0x40023800
 8011160:	080120c8 	.word	0x080120c8
 8011164:	20001000 	.word	0x20001000
 8011168:	20001008 	.word	0x20001008

0801116c <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 801116c:	4b04      	ldr	r3, [pc, #16]	; (8011180 <HAL_RCC_GetPCLK1Freq+0x14>)
 801116e:	4a05      	ldr	r2, [pc, #20]	; (8011184 <HAL_RCC_GetPCLK1Freq+0x18>)
 8011170:	689b      	ldr	r3, [r3, #8]
 8011172:	f3c3 2382 	ubfx	r3, r3, #10, #3
 8011176:	5cd3      	ldrb	r3, [r2, r3]
 8011178:	4a03      	ldr	r2, [pc, #12]	; (8011188 <HAL_RCC_GetPCLK1Freq+0x1c>)
 801117a:	6810      	ldr	r0, [r2, #0]
}
 801117c:	40d8      	lsrs	r0, r3
 801117e:	4770      	bx	lr
 8011180:	40023800 	.word	0x40023800
 8011184:	080120d8 	.word	0x080120d8
 8011188:	20001000 	.word	0x20001000

0801118c <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 801118c:	4b04      	ldr	r3, [pc, #16]	; (80111a0 <HAL_RCC_GetPCLK2Freq+0x14>)
 801118e:	4a05      	ldr	r2, [pc, #20]	; (80111a4 <HAL_RCC_GetPCLK2Freq+0x18>)
 8011190:	689b      	ldr	r3, [r3, #8]
 8011192:	f3c3 3342 	ubfx	r3, r3, #13, #3
 8011196:	5cd3      	ldrb	r3, [r2, r3]
 8011198:	4a03      	ldr	r2, [pc, #12]	; (80111a8 <HAL_RCC_GetPCLK2Freq+0x1c>)
 801119a:	6810      	ldr	r0, [r2, #0]
}
 801119c:	40d8      	lsrs	r0, r3
 801119e:	4770      	bx	lr
 80111a0:	40023800 	.word	0x40023800
 80111a4:	080120d8 	.word	0x080120d8
 80111a8:	20001000 	.word	0x20001000

080111ac <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80111ac:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80111b0:	4604      	mov	r4, r0
 80111b2:	b340      	cbz	r0, 8011206 <HAL_RCC_OscConfig+0x5a>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80111b4:	6803      	ldr	r3, [r0, #0]
 80111b6:	07dd      	lsls	r5, r3, #31
 80111b8:	d410      	bmi.n	80111dc <HAL_RCC_OscConfig+0x30>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80111ba:	6823      	ldr	r3, [r4, #0]
 80111bc:	0798      	lsls	r0, r3, #30
 80111be:	d45e      	bmi.n	801127e <HAL_RCC_OscConfig+0xd2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80111c0:	6823      	ldr	r3, [r4, #0]
 80111c2:	071a      	lsls	r2, r3, #28
 80111c4:	f100 80a0 	bmi.w	8011308 <HAL_RCC_OscConfig+0x15c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80111c8:	6823      	ldr	r3, [r4, #0]
 80111ca:	075b      	lsls	r3, r3, #29
 80111cc:	f100 80c0 	bmi.w	8011350 <HAL_RCC_OscConfig+0x1a4>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80111d0:	69a0      	ldr	r0, [r4, #24]
 80111d2:	2800      	cmp	r0, #0
 80111d4:	f040 8128 	bne.w	8011428 <HAL_RCC_OscConfig+0x27c>
          return HAL_ERROR;
        }
      }
    }
  }
  return HAL_OK;
 80111d8:	2000      	movs	r0, #0
 80111da:	e02b      	b.n	8011234 <HAL_RCC_OscConfig+0x88>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80111dc:	4b8f      	ldr	r3, [pc, #572]	; (801141c <HAL_RCC_OscConfig+0x270>)
 80111de:	689a      	ldr	r2, [r3, #8]
 80111e0:	f002 020c 	and.w	r2, r2, #12
 80111e4:	2a04      	cmp	r2, #4
 80111e6:	d007      	beq.n	80111f8 <HAL_RCC_OscConfig+0x4c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80111e8:	689a      	ldr	r2, [r3, #8]
 80111ea:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80111ee:	2a08      	cmp	r2, #8
 80111f0:	d10b      	bne.n	801120a <HAL_RCC_OscConfig+0x5e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80111f2:	685a      	ldr	r2, [r3, #4]
 80111f4:	0251      	lsls	r1, r2, #9
 80111f6:	d508      	bpl.n	801120a <HAL_RCC_OscConfig+0x5e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80111f8:	4b88      	ldr	r3, [pc, #544]	; (801141c <HAL_RCC_OscConfig+0x270>)
 80111fa:	681b      	ldr	r3, [r3, #0]
 80111fc:	039a      	lsls	r2, r3, #14
 80111fe:	d5dc      	bpl.n	80111ba <HAL_RCC_OscConfig+0xe>
 8011200:	6863      	ldr	r3, [r4, #4]
 8011202:	2b00      	cmp	r3, #0
 8011204:	d1d9      	bne.n	80111ba <HAL_RCC_OscConfig+0xe>
          return HAL_ERROR;
 8011206:	2001      	movs	r0, #1
 8011208:	e014      	b.n	8011234 <HAL_RCC_OscConfig+0x88>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 801120a:	6862      	ldr	r2, [r4, #4]
 801120c:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 8011210:	d113      	bne.n	801123a <HAL_RCC_OscConfig+0x8e>
 8011212:	681a      	ldr	r2, [r3, #0]
 8011214:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8011218:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 801121a:	f7ff fc8f 	bl	8010b3c <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 801121e:	4e7f      	ldr	r6, [pc, #508]	; (801141c <HAL_RCC_OscConfig+0x270>)
        tickstart = HAL_GetTick();
 8011220:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8011222:	6833      	ldr	r3, [r6, #0]
 8011224:	039b      	lsls	r3, r3, #14
 8011226:	d4c8      	bmi.n	80111ba <HAL_RCC_OscConfig+0xe>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8011228:	f7ff fc88 	bl	8010b3c <HAL_GetTick>
 801122c:	1b40      	subs	r0, r0, r5
 801122e:	2864      	cmp	r0, #100	; 0x64
 8011230:	d9f7      	bls.n	8011222 <HAL_RCC_OscConfig+0x76>
            return HAL_TIMEOUT;
 8011232:	2003      	movs	r0, #3
}
 8011234:	b002      	add	sp, #8
 8011236:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 801123a:	4d78      	ldr	r5, [pc, #480]	; (801141c <HAL_RCC_OscConfig+0x270>)
 801123c:	f5b2 2fa0 	cmp.w	r2, #327680	; 0x50000
 8011240:	682b      	ldr	r3, [r5, #0]
 8011242:	d107      	bne.n	8011254 <HAL_RCC_OscConfig+0xa8>
 8011244:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8011248:	602b      	str	r3, [r5, #0]
 801124a:	682b      	ldr	r3, [r5, #0]
 801124c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8011250:	602b      	str	r3, [r5, #0]
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8011252:	e7e2      	b.n	801121a <HAL_RCC_OscConfig+0x6e>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8011254:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8011258:	602b      	str	r3, [r5, #0]
 801125a:	682b      	ldr	r3, [r5, #0]
 801125c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8011260:	602b      	str	r3, [r5, #0]
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8011262:	2a00      	cmp	r2, #0
 8011264:	d1d9      	bne.n	801121a <HAL_RCC_OscConfig+0x6e>
        tickstart = HAL_GetTick();
 8011266:	f7ff fc69 	bl	8010b3c <HAL_GetTick>
 801126a:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 801126c:	682b      	ldr	r3, [r5, #0]
 801126e:	039f      	lsls	r7, r3, #14
 8011270:	d5a3      	bpl.n	80111ba <HAL_RCC_OscConfig+0xe>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8011272:	f7ff fc63 	bl	8010b3c <HAL_GetTick>
 8011276:	1b80      	subs	r0, r0, r6
 8011278:	2864      	cmp	r0, #100	; 0x64
 801127a:	d9f7      	bls.n	801126c <HAL_RCC_OscConfig+0xc0>
 801127c:	e7d9      	b.n	8011232 <HAL_RCC_OscConfig+0x86>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 801127e:	4b67      	ldr	r3, [pc, #412]	; (801141c <HAL_RCC_OscConfig+0x270>)
 8011280:	689a      	ldr	r2, [r3, #8]
 8011282:	f012 0f0c 	tst.w	r2, #12
 8011286:	d007      	beq.n	8011298 <HAL_RCC_OscConfig+0xec>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8011288:	689a      	ldr	r2, [r3, #8]
 801128a:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 801128e:	2a08      	cmp	r2, #8
 8011290:	d111      	bne.n	80112b6 <HAL_RCC_OscConfig+0x10a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8011292:	685b      	ldr	r3, [r3, #4]
 8011294:	025e      	lsls	r6, r3, #9
 8011296:	d40e      	bmi.n	80112b6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8011298:	4a60      	ldr	r2, [pc, #384]	; (801141c <HAL_RCC_OscConfig+0x270>)
 801129a:	6813      	ldr	r3, [r2, #0]
 801129c:	079d      	lsls	r5, r3, #30
 801129e:	d502      	bpl.n	80112a6 <HAL_RCC_OscConfig+0xfa>
 80112a0:	68e3      	ldr	r3, [r4, #12]
 80112a2:	2b01      	cmp	r3, #1
 80112a4:	d1af      	bne.n	8011206 <HAL_RCC_OscConfig+0x5a>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80112a6:	6813      	ldr	r3, [r2, #0]
 80112a8:	6921      	ldr	r1, [r4, #16]
 80112aa:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80112ae:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80112b2:	6013      	str	r3, [r2, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80112b4:	e784      	b.n	80111c0 <HAL_RCC_OscConfig+0x14>
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80112b6:	68e2      	ldr	r2, [r4, #12]
 80112b8:	4b59      	ldr	r3, [pc, #356]	; (8011420 <HAL_RCC_OscConfig+0x274>)
 80112ba:	b1b2      	cbz	r2, 80112ea <HAL_RCC_OscConfig+0x13e>
        __HAL_RCC_HSI_ENABLE();
 80112bc:	2201      	movs	r2, #1
 80112be:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80112c0:	f7ff fc3c 	bl	8010b3c <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80112c4:	4d55      	ldr	r5, [pc, #340]	; (801141c <HAL_RCC_OscConfig+0x270>)
        tickstart = HAL_GetTick();
 80112c6:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80112c8:	682b      	ldr	r3, [r5, #0]
 80112ca:	0798      	lsls	r0, r3, #30
 80112cc:	d507      	bpl.n	80112de <HAL_RCC_OscConfig+0x132>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80112ce:	682b      	ldr	r3, [r5, #0]
 80112d0:	6922      	ldr	r2, [r4, #16]
 80112d2:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80112d6:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 80112da:	602b      	str	r3, [r5, #0]
 80112dc:	e770      	b.n	80111c0 <HAL_RCC_OscConfig+0x14>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80112de:	f7ff fc2d 	bl	8010b3c <HAL_GetTick>
 80112e2:	1b80      	subs	r0, r0, r6
 80112e4:	2802      	cmp	r0, #2
 80112e6:	d9ef      	bls.n	80112c8 <HAL_RCC_OscConfig+0x11c>
 80112e8:	e7a3      	b.n	8011232 <HAL_RCC_OscConfig+0x86>
        __HAL_RCC_HSI_DISABLE();
 80112ea:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80112ec:	f7ff fc26 	bl	8010b3c <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80112f0:	4e4a      	ldr	r6, [pc, #296]	; (801141c <HAL_RCC_OscConfig+0x270>)
        tickstart = HAL_GetTick();
 80112f2:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80112f4:	6833      	ldr	r3, [r6, #0]
 80112f6:	0799      	lsls	r1, r3, #30
 80112f8:	f57f af62 	bpl.w	80111c0 <HAL_RCC_OscConfig+0x14>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80112fc:	f7ff fc1e 	bl	8010b3c <HAL_GetTick>
 8011300:	1b40      	subs	r0, r0, r5
 8011302:	2802      	cmp	r0, #2
 8011304:	d9f6      	bls.n	80112f4 <HAL_RCC_OscConfig+0x148>
 8011306:	e794      	b.n	8011232 <HAL_RCC_OscConfig+0x86>
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8011308:	6962      	ldr	r2, [r4, #20]
 801130a:	4b45      	ldr	r3, [pc, #276]	; (8011420 <HAL_RCC_OscConfig+0x274>)
 801130c:	b182      	cbz	r2, 8011330 <HAL_RCC_OscConfig+0x184>
      __HAL_RCC_LSI_ENABLE();
 801130e:	2201      	movs	r2, #1
 8011310:	f8c3 2e80 	str.w	r2, [r3, #3712]	; 0xe80
      tickstart = HAL_GetTick();
 8011314:	f7ff fc12 	bl	8010b3c <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8011318:	4e40      	ldr	r6, [pc, #256]	; (801141c <HAL_RCC_OscConfig+0x270>)
      tickstart = HAL_GetTick();
 801131a:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 801131c:	6f73      	ldr	r3, [r6, #116]	; 0x74
 801131e:	079f      	lsls	r7, r3, #30
 8011320:	f53f af52 	bmi.w	80111c8 <HAL_RCC_OscConfig+0x1c>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8011324:	f7ff fc0a 	bl	8010b3c <HAL_GetTick>
 8011328:	1b40      	subs	r0, r0, r5
 801132a:	2802      	cmp	r0, #2
 801132c:	d9f6      	bls.n	801131c <HAL_RCC_OscConfig+0x170>
 801132e:	e780      	b.n	8011232 <HAL_RCC_OscConfig+0x86>
      __HAL_RCC_LSI_DISABLE();
 8011330:	f8c3 2e80 	str.w	r2, [r3, #3712]	; 0xe80
      tickstart = HAL_GetTick();
 8011334:	f7ff fc02 	bl	8010b3c <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8011338:	4e38      	ldr	r6, [pc, #224]	; (801141c <HAL_RCC_OscConfig+0x270>)
      tickstart = HAL_GetTick();
 801133a:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 801133c:	6f73      	ldr	r3, [r6, #116]	; 0x74
 801133e:	0798      	lsls	r0, r3, #30
 8011340:	f57f af42 	bpl.w	80111c8 <HAL_RCC_OscConfig+0x1c>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8011344:	f7ff fbfa 	bl	8010b3c <HAL_GetTick>
 8011348:	1b40      	subs	r0, r0, r5
 801134a:	2802      	cmp	r0, #2
 801134c:	d9f6      	bls.n	801133c <HAL_RCC_OscConfig+0x190>
 801134e:	e770      	b.n	8011232 <HAL_RCC_OscConfig+0x86>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8011350:	4b32      	ldr	r3, [pc, #200]	; (801141c <HAL_RCC_OscConfig+0x270>)
 8011352:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8011354:	f012 5280 	ands.w	r2, r2, #268435456	; 0x10000000
 8011358:	d128      	bne.n	80113ac <HAL_RCC_OscConfig+0x200>
      __HAL_RCC_PWR_CLK_ENABLE();
 801135a:	9201      	str	r2, [sp, #4]
 801135c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 801135e:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8011362:	641a      	str	r2, [r3, #64]	; 0x40
 8011364:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011366:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 801136a:	9301      	str	r3, [sp, #4]
 801136c:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 801136e:	2701      	movs	r7, #1
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8011370:	4d2c      	ldr	r5, [pc, #176]	; (8011424 <HAL_RCC_OscConfig+0x278>)
 8011372:	682b      	ldr	r3, [r5, #0]
 8011374:	05d9      	lsls	r1, r3, #23
 8011376:	d51b      	bpl.n	80113b0 <HAL_RCC_OscConfig+0x204>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8011378:	68a3      	ldr	r3, [r4, #8]
 801137a:	4d28      	ldr	r5, [pc, #160]	; (801141c <HAL_RCC_OscConfig+0x270>)
 801137c:	2b01      	cmp	r3, #1
 801137e:	d127      	bne.n	80113d0 <HAL_RCC_OscConfig+0x224>
 8011380:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8011382:	f043 0301 	orr.w	r3, r3, #1
 8011386:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
 8011388:	f7ff fbd8 	bl	8010b3c <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 801138c:	4e23      	ldr	r6, [pc, #140]	; (801141c <HAL_RCC_OscConfig+0x270>)
      tickstart = HAL_GetTick();
 801138e:	4605      	mov	r5, r0
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8011390:	f241 3888 	movw	r8, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8011394:	6f33      	ldr	r3, [r6, #112]	; 0x70
 8011396:	079b      	lsls	r3, r3, #30
 8011398:	d539      	bpl.n	801140e <HAL_RCC_OscConfig+0x262>
    if(pwrclkchanged == SET)
 801139a:	2f00      	cmp	r7, #0
 801139c:	f43f af18 	beq.w	80111d0 <HAL_RCC_OscConfig+0x24>
      __HAL_RCC_PWR_CLK_DISABLE();
 80113a0:	4a1e      	ldr	r2, [pc, #120]	; (801141c <HAL_RCC_OscConfig+0x270>)
 80113a2:	6c13      	ldr	r3, [r2, #64]	; 0x40
 80113a4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80113a8:	6413      	str	r3, [r2, #64]	; 0x40
 80113aa:	e711      	b.n	80111d0 <HAL_RCC_OscConfig+0x24>
    FlagStatus       pwrclkchanged = RESET;
 80113ac:	2700      	movs	r7, #0
 80113ae:	e7df      	b.n	8011370 <HAL_RCC_OscConfig+0x1c4>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80113b0:	682b      	ldr	r3, [r5, #0]
 80113b2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80113b6:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 80113b8:	f7ff fbc0 	bl	8010b3c <HAL_GetTick>
 80113bc:	4606      	mov	r6, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80113be:	682b      	ldr	r3, [r5, #0]
 80113c0:	05da      	lsls	r2, r3, #23
 80113c2:	d4d9      	bmi.n	8011378 <HAL_RCC_OscConfig+0x1cc>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80113c4:	f7ff fbba 	bl	8010b3c <HAL_GetTick>
 80113c8:	1b80      	subs	r0, r0, r6
 80113ca:	2802      	cmp	r0, #2
 80113cc:	d9f7      	bls.n	80113be <HAL_RCC_OscConfig+0x212>
 80113ce:	e730      	b.n	8011232 <HAL_RCC_OscConfig+0x86>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80113d0:	2b05      	cmp	r3, #5
 80113d2:	d104      	bne.n	80113de <HAL_RCC_OscConfig+0x232>
 80113d4:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80113d6:	f043 0304 	orr.w	r3, r3, #4
 80113da:	672b      	str	r3, [r5, #112]	; 0x70
 80113dc:	e7d0      	b.n	8011380 <HAL_RCC_OscConfig+0x1d4>
 80113de:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 80113e0:	f022 0201 	bic.w	r2, r2, #1
 80113e4:	672a      	str	r2, [r5, #112]	; 0x70
 80113e6:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 80113e8:	f022 0204 	bic.w	r2, r2, #4
 80113ec:	672a      	str	r2, [r5, #112]	; 0x70
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80113ee:	2b00      	cmp	r3, #0
 80113f0:	d1ca      	bne.n	8011388 <HAL_RCC_OscConfig+0x1dc>
      tickstart = HAL_GetTick();
 80113f2:	f7ff fba3 	bl	8010b3c <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80113f6:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 80113fa:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80113fc:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80113fe:	0798      	lsls	r0, r3, #30
 8011400:	d5cb      	bpl.n	801139a <HAL_RCC_OscConfig+0x1ee>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8011402:	f7ff fb9b 	bl	8010b3c <HAL_GetTick>
 8011406:	1b80      	subs	r0, r0, r6
 8011408:	4540      	cmp	r0, r8
 801140a:	d9f7      	bls.n	80113fc <HAL_RCC_OscConfig+0x250>
 801140c:	e711      	b.n	8011232 <HAL_RCC_OscConfig+0x86>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 801140e:	f7ff fb95 	bl	8010b3c <HAL_GetTick>
 8011412:	1b40      	subs	r0, r0, r5
 8011414:	4540      	cmp	r0, r8
 8011416:	d9bd      	bls.n	8011394 <HAL_RCC_OscConfig+0x1e8>
 8011418:	e70b      	b.n	8011232 <HAL_RCC_OscConfig+0x86>
 801141a:	bf00      	nop
 801141c:	40023800 	.word	0x40023800
 8011420:	42470000 	.word	0x42470000
 8011424:	40007000 	.word	0x40007000
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8011428:	4d3b      	ldr	r5, [pc, #236]	; (8011518 <HAL_RCC_OscConfig+0x36c>)
 801142a:	68ab      	ldr	r3, [r5, #8]
 801142c:	f003 030c 	and.w	r3, r3, #12
 8011430:	2b08      	cmp	r3, #8
 8011432:	d040      	beq.n	80114b6 <HAL_RCC_OscConfig+0x30a>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8011434:	4b39      	ldr	r3, [pc, #228]	; (801151c <HAL_RCC_OscConfig+0x370>)
 8011436:	2200      	movs	r2, #0
 8011438:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 801143a:	661a      	str	r2, [r3, #96]	; 0x60
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 801143c:	d12e      	bne.n	801149c <HAL_RCC_OscConfig+0x2f0>
        tickstart = HAL_GetTick();
 801143e:	f7ff fb7d 	bl	8010b3c <HAL_GetTick>
 8011442:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8011444:	682b      	ldr	r3, [r5, #0]
 8011446:	0199      	lsls	r1, r3, #6
 8011448:	d422      	bmi.n	8011490 <HAL_RCC_OscConfig+0x2e4>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 801144a:	e9d4 3207 	ldrd	r3, r2, [r4, #28]
 801144e:	4313      	orrs	r3, r2
 8011450:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8011452:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8011456:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8011458:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 801145c:	6b22      	ldr	r2, [r4, #48]	; 0x30
 801145e:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
 8011462:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8011464:	0852      	lsrs	r2, r2, #1
 8011466:	3a01      	subs	r2, #1
 8011468:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801146c:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 801146e:	4b2b      	ldr	r3, [pc, #172]	; (801151c <HAL_RCC_OscConfig+0x370>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8011470:	4d29      	ldr	r5, [pc, #164]	; (8011518 <HAL_RCC_OscConfig+0x36c>)
        __HAL_RCC_PLL_ENABLE();
 8011472:	2201      	movs	r2, #1
 8011474:	661a      	str	r2, [r3, #96]	; 0x60
        tickstart = HAL_GetTick();
 8011476:	f7ff fb61 	bl	8010b3c <HAL_GetTick>
 801147a:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 801147c:	682b      	ldr	r3, [r5, #0]
 801147e:	019a      	lsls	r2, r3, #6
 8011480:	f53f aeaa 	bmi.w	80111d8 <HAL_RCC_OscConfig+0x2c>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8011484:	f7ff fb5a 	bl	8010b3c <HAL_GetTick>
 8011488:	1b00      	subs	r0, r0, r4
 801148a:	2802      	cmp	r0, #2
 801148c:	d9f6      	bls.n	801147c <HAL_RCC_OscConfig+0x2d0>
 801148e:	e6d0      	b.n	8011232 <HAL_RCC_OscConfig+0x86>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8011490:	f7ff fb54 	bl	8010b3c <HAL_GetTick>
 8011494:	1b80      	subs	r0, r0, r6
 8011496:	2802      	cmp	r0, #2
 8011498:	d9d4      	bls.n	8011444 <HAL_RCC_OscConfig+0x298>
 801149a:	e6ca      	b.n	8011232 <HAL_RCC_OscConfig+0x86>
        tickstart = HAL_GetTick();
 801149c:	f7ff fb4e 	bl	8010b3c <HAL_GetTick>
 80114a0:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80114a2:	682b      	ldr	r3, [r5, #0]
 80114a4:	019b      	lsls	r3, r3, #6
 80114a6:	f57f ae97 	bpl.w	80111d8 <HAL_RCC_OscConfig+0x2c>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80114aa:	f7ff fb47 	bl	8010b3c <HAL_GetTick>
 80114ae:	1b00      	subs	r0, r0, r4
 80114b0:	2802      	cmp	r0, #2
 80114b2:	d9f6      	bls.n	80114a2 <HAL_RCC_OscConfig+0x2f6>
 80114b4:	e6bd      	b.n	8011232 <HAL_RCC_OscConfig+0x86>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80114b6:	2801      	cmp	r0, #1
 80114b8:	f43f aebc 	beq.w	8011234 <HAL_RCC_OscConfig+0x88>
        pll_config = RCC->PLLCFGR;
 80114bc:	686b      	ldr	r3, [r5, #4]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80114be:	69e2      	ldr	r2, [r4, #28]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80114c0:	f403 0180 	and.w	r1, r3, #4194304	; 0x400000
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80114c4:	4291      	cmp	r1, r2
 80114c6:	f47f ae9e 	bne.w	8011206 <HAL_RCC_OscConfig+0x5a>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80114ca:	6a21      	ldr	r1, [r4, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80114cc:	f003 023f 	and.w	r2, r3, #63	; 0x3f
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80114d0:	428a      	cmp	r2, r1
 80114d2:	f47f ae98 	bne.w	8011206 <HAL_RCC_OscConfig+0x5a>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80114d6:	6a61      	ldr	r1, [r4, #36]	; 0x24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80114d8:	f647 72c0 	movw	r2, #32704	; 0x7fc0
 80114dc:	401a      	ands	r2, r3
 80114de:	ebb2 1f81 	cmp.w	r2, r1, lsl #6
 80114e2:	f47f ae90 	bne.w	8011206 <HAL_RCC_OscConfig+0x5a>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80114e6:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80114e8:	0852      	lsrs	r2, r2, #1
 80114ea:	f403 3140 	and.w	r1, r3, #196608	; 0x30000
 80114ee:	3a01      	subs	r2, #1
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80114f0:	ebb1 4f02 	cmp.w	r1, r2, lsl #16
 80114f4:	f47f ae87 	bne.w	8011206 <HAL_RCC_OscConfig+0x5a>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80114f8:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 80114fa:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80114fe:	ebb2 6f01 	cmp.w	r2, r1, lsl #24
 8011502:	f47f ae80 	bne.w	8011206 <HAL_RCC_OscConfig+0x5a>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8011506:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8011508:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 801150c:	ebb3 7f02 	cmp.w	r3, r2, lsl #28
 8011510:	f43f ae62 	beq.w	80111d8 <HAL_RCC_OscConfig+0x2c>
 8011514:	e677      	b.n	8011206 <HAL_RCC_OscConfig+0x5a>
 8011516:	bf00      	nop
 8011518:	40023800 	.word	0x40023800
 801151c:	42470000 	.word	0x42470000

08011520 <HAL_RTCEx_TimeStampEventCallback>:
 8011520:	4770      	bx	lr

08011522 <HAL_RTCEx_Tamper2EventCallback>:
 8011522:	4770      	bx	lr

08011524 <HAL_RTCEx_TamperTimeStampIRQHandler>:
  * @retval None
  */
void HAL_RTCEx_TamperTimeStampIRQHandler(RTC_HandleTypeDef *hrtc)
{
  /* Get the TimeStamp interrupt source enable status */
  if(__HAL_RTC_TIMESTAMP_GET_IT_SOURCE(hrtc, RTC_IT_TS) != (uint32_t)RESET)
 8011524:	6803      	ldr	r3, [r0, #0]
 8011526:	689a      	ldr	r2, [r3, #8]
 8011528:	0412      	lsls	r2, r2, #16
{
 801152a:	b510      	push	{r4, lr}
 801152c:	4604      	mov	r4, r0
  if(__HAL_RTC_TIMESTAMP_GET_IT_SOURCE(hrtc, RTC_IT_TS) != (uint32_t)RESET)
 801152e:	d50a      	bpl.n	8011546 <HAL_RTCEx_TamperTimeStampIRQHandler+0x22>
  {
    /* Get the pending status of the TIMESTAMP Interrupt */
    if(__HAL_RTC_TIMESTAMP_GET_FLAG(hrtc, RTC_FLAG_TSF) != (uint32_t)RESET)
 8011530:	68db      	ldr	r3, [r3, #12]
 8011532:	051b      	lsls	r3, r3, #20
 8011534:	d507      	bpl.n	8011546 <HAL_RTCEx_TamperTimeStampIRQHandler+0x22>
    {
      /* TIMESTAMP callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->TimeStampEventCallback(hrtc);
#else
      HAL_RTCEx_TimeStampEventCallback(hrtc);
 8011536:	f7ff fff3 	bl	8011520 <HAL_RTCEx_TimeStampEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the TIMESTAMP interrupt pending bit */
      __HAL_RTC_TIMESTAMP_CLEAR_FLAG(hrtc,RTC_FLAG_TSF);
 801153a:	6822      	ldr	r2, [r4, #0]
 801153c:	68d3      	ldr	r3, [r2, #12]
 801153e:	b2db      	uxtb	r3, r3
 8011540:	f463 6308 	orn	r3, r3, #2176	; 0x880
 8011544:	60d3      	str	r3, [r2, #12]
    }
  }

  /* Get the Tamper1 interrupt source enable status */
  if(__HAL_RTC_TAMPER_GET_IT_SOURCE(hrtc, RTC_IT_TAMP) != (uint32_t)RESET)
 8011546:	6823      	ldr	r3, [r4, #0]
 8011548:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 801154a:	0750      	lsls	r0, r2, #29
 801154c:	d50b      	bpl.n	8011566 <HAL_RTCEx_TamperTimeStampIRQHandler+0x42>
  {
    /* Get the pending status of the Tamper1 Interrupt */
    if(__HAL_RTC_TAMPER_GET_FLAG(hrtc, RTC_FLAG_TAMP1F) != (uint32_t)RESET)
 801154e:	68db      	ldr	r3, [r3, #12]
 8011550:	0499      	lsls	r1, r3, #18
 8011552:	d508      	bpl.n	8011566 <HAL_RTCEx_TamperTimeStampIRQHandler+0x42>
    {
      /* Tamper callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->Tamper1EventCallback(hrtc);
#else
      HAL_RTCEx_Tamper1EventCallback(hrtc);
 8011554:	4620      	mov	r0, r4
 8011556:	f7ff fa79 	bl	8010a4c <HAL_RTCEx_Tamper1EventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the Tamper interrupt pending bit */
      __HAL_RTC_TAMPER_CLEAR_FLAG(hrtc,RTC_FLAG_TAMP1F);
 801155a:	6822      	ldr	r2, [r4, #0]
 801155c:	68d3      	ldr	r3, [r2, #12]
 801155e:	b2db      	uxtb	r3, r3
 8011560:	f463 5302 	orn	r3, r3, #8320	; 0x2080
 8011564:	60d3      	str	r3, [r2, #12]
    }
  }

  /* Get the Tamper2 interrupt source enable status */
  if(__HAL_RTC_TAMPER_GET_IT_SOURCE(hrtc, RTC_IT_TAMP) != (uint32_t)RESET)
 8011566:	6823      	ldr	r3, [r4, #0]
 8011568:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 801156a:	0752      	lsls	r2, r2, #29
 801156c:	d50b      	bpl.n	8011586 <HAL_RTCEx_TamperTimeStampIRQHandler+0x62>
  {
    /* Get the pending status of the Tamper2 Interrupt */
    if(__HAL_RTC_TAMPER_GET_FLAG(hrtc, RTC_FLAG_TAMP2F) != (uint32_t)RESET)
 801156e:	68db      	ldr	r3, [r3, #12]
 8011570:	045b      	lsls	r3, r3, #17
 8011572:	d508      	bpl.n	8011586 <HAL_RTCEx_TamperTimeStampIRQHandler+0x62>
    {
      /* Tamper callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->Tamper2EventCallback(hrtc);
#else
      HAL_RTCEx_Tamper2EventCallback(hrtc);
 8011574:	4620      	mov	r0, r4
 8011576:	f7ff ffd4 	bl	8011522 <HAL_RTCEx_Tamper2EventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the Tamper interrupt pending bit */
      __HAL_RTC_TAMPER_CLEAR_FLAG(hrtc, RTC_FLAG_TAMP2F);
 801157a:	6822      	ldr	r2, [r4, #0]
 801157c:	68d3      	ldr	r3, [r2, #12]
 801157e:	b2db      	uxtb	r3, r3
 8011580:	f463 4381 	orn	r3, r3, #16512	; 0x4080
 8011584:	60d3      	str	r3, [r2, #12]
    }
  }

  /* Clear the EXTI's Flag for RTC TimeStamp and Tamper */
  __HAL_RTC_TAMPER_TIMESTAMP_EXTI_CLEAR_FLAG();
 8011586:	4b03      	ldr	r3, [pc, #12]	; (8011594 <HAL_RTCEx_TamperTimeStampIRQHandler+0x70>)
 8011588:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 801158c:	615a      	str	r2, [r3, #20]

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 801158e:	2301      	movs	r3, #1
 8011590:	7763      	strb	r3, [r4, #29]
}
 8011592:	bd10      	pop	{r4, pc}
 8011594:	40013c00 	.word	0x40013c00

08011598 <UART_SetConfig>:
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8011598:	6803      	ldr	r3, [r0, #0]
 801159a:	68c1      	ldr	r1, [r0, #12]
 801159c:	691a      	ldr	r2, [r3, #16]
 801159e:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 80115a2:	430a      	orrs	r2, r1
{
 80115a4:	b570      	push	{r4, r5, r6, lr}
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80115a6:	611a      	str	r2, [r3, #16]
{
 80115a8:	4605      	mov	r5, r0
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80115aa:	6882      	ldr	r2, [r0, #8]
 80115ac:	6900      	ldr	r0, [r0, #16]
  MODIFY_REG(huart->Instance->CR1,
 80115ae:	68d9      	ldr	r1, [r3, #12]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80115b0:	4302      	orrs	r2, r0
 80115b2:	6968      	ldr	r0, [r5, #20]
 80115b4:	4302      	orrs	r2, r0
 80115b6:	69e8      	ldr	r0, [r5, #28]
  MODIFY_REG(huart->Instance->CR1,
 80115b8:	f421 4116 	bic.w	r1, r1, #38400	; 0x9600
 80115bc:	f021 010c 	bic.w	r1, r1, #12
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80115c0:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1,
 80115c2:	430a      	orrs	r2, r1
 80115c4:	60da      	str	r2, [r3, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80115c6:	695a      	ldr	r2, [r3, #20]
 80115c8:	69a9      	ldr	r1, [r5, #24]
 80115ca:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80115ce:	430a      	orrs	r2, r1
 80115d0:	615a      	str	r2, [r3, #20]


#if defined(USART6) && defined(UART9) && defined(UART10)
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
 80115d2:	4a23      	ldr	r2, [pc, #140]	; (8011660 <UART_SetConfig+0xc8>)
 80115d4:	4293      	cmp	r3, r2
 80115d6:	d00b      	beq.n	80115f0 <UART_SetConfig+0x58>
 80115d8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80115dc:	4293      	cmp	r3, r2
 80115de:	d007      	beq.n	80115f0 <UART_SetConfig+0x58>
 80115e0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80115e4:	4293      	cmp	r3, r2
 80115e6:	d003      	beq.n	80115f0 <UART_SetConfig+0x58>
 80115e8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80115ec:	4293      	cmp	r3, r2
 80115ee:	d123      	bne.n	8011638 <UART_SetConfig+0xa0>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80115f0:	f7ff fdcc 	bl	801118c <HAL_RCC_GetPCLK2Freq>
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80115f4:	69eb      	ldr	r3, [r5, #28]
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80115f6:	2119      	movs	r1, #25
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80115f8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80115fc:	e9d5 4600 	ldrd	r4, r6, [r5]
 8011600:	fba0 0101 	umull	r0, r1, r0, r1
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8011604:	d11b      	bne.n	801163e <UART_SetConfig+0xa6>
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8011606:	19b2      	adds	r2, r6, r6
 8011608:	f04f 0300 	mov.w	r3, #0
 801160c:	415b      	adcs	r3, r3
 801160e:	f7fe ff23 	bl	8010458 <__aeabi_uldivmod>
 8011612:	2164      	movs	r1, #100	; 0x64
 8011614:	fbb0 f5f1 	udiv	r5, r0, r1
 8011618:	fb01 0315 	mls	r3, r1, r5, r0
 801161c:	00db      	lsls	r3, r3, #3
 801161e:	3332      	adds	r3, #50	; 0x32
 8011620:	fbb3 f3f1 	udiv	r3, r3, r1
 8011624:	f003 0207 	and.w	r2, r3, #7
 8011628:	005b      	lsls	r3, r3, #1
 801162a:	eb02 1205 	add.w	r2, r2, r5, lsl #4
 801162e:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8011632:	4413      	add	r3, r2
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8011634:	60a3      	str	r3, [r4, #8]
  }
}
 8011636:	bd70      	pop	{r4, r5, r6, pc}
      pclk = HAL_RCC_GetPCLK1Freq();
 8011638:	f7ff fd98 	bl	801116c <HAL_RCC_GetPCLK1Freq>
 801163c:	e7da      	b.n	80115f4 <UART_SetConfig+0x5c>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 801163e:	00b2      	lsls	r2, r6, #2
 8011640:	0fb3      	lsrs	r3, r6, #30
 8011642:	f7fe ff09 	bl	8010458 <__aeabi_uldivmod>
 8011646:	2264      	movs	r2, #100	; 0x64
 8011648:	fbb0 f1f2 	udiv	r1, r0, r2
 801164c:	fb02 0311 	mls	r3, r2, r1, r0
 8011650:	011b      	lsls	r3, r3, #4
 8011652:	3332      	adds	r3, #50	; 0x32
 8011654:	fbb3 f3f2 	udiv	r3, r3, r2
 8011658:	eb03 1301 	add.w	r3, r3, r1, lsl #4
 801165c:	e7ea      	b.n	8011634 <UART_SetConfig+0x9c>
 801165e:	bf00      	nop
 8011660:	40011000 	.word	0x40011000

08011664 <UART_WaitOnFlagUntilTimeout.constprop.0>:
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
 8011664:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011666:	4604      	mov	r4, r0
 8011668:	460e      	mov	r6, r1
 801166a:	4617      	mov	r7, r2
 801166c:	461d      	mov	r5, r3
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 801166e:	6822      	ldr	r2, [r4, #0]
 8011670:	6813      	ldr	r3, [r2, #0]
 8011672:	ea36 0303 	bics.w	r3, r6, r3
 8011676:	d101      	bne.n	801167c <UART_WaitOnFlagUntilTimeout.constprop.0+0x18>
  return HAL_OK;
 8011678:	2000      	movs	r0, #0
 801167a:	e014      	b.n	80116a6 <UART_WaitOnFlagUntilTimeout.constprop.0+0x42>
    if (Timeout != HAL_MAX_DELAY)
 801167c:	1c6b      	adds	r3, r5, #1
 801167e:	d0f7      	beq.n	8011670 <UART_WaitOnFlagUntilTimeout.constprop.0+0xc>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8011680:	b995      	cbnz	r5, 80116a8 <UART_WaitOnFlagUntilTimeout.constprop.0+0x44>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8011682:	6823      	ldr	r3, [r4, #0]
 8011684:	68da      	ldr	r2, [r3, #12]
 8011686:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 801168a:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801168c:	695a      	ldr	r2, [r3, #20]
 801168e:	f022 0201 	bic.w	r2, r2, #1
 8011692:	615a      	str	r2, [r3, #20]
        huart->gState  = HAL_UART_STATE_READY;
 8011694:	2320      	movs	r3, #32
 8011696:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 801169a:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        __HAL_UNLOCK(huart);
 801169e:	2300      	movs	r3, #0
 80116a0:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
 80116a4:	2003      	movs	r0, #3
}
 80116a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80116a8:	f7ff fa48 	bl	8010b3c <HAL_GetTick>
 80116ac:	1bc0      	subs	r0, r0, r7
 80116ae:	4285      	cmp	r5, r0
 80116b0:	d2dd      	bcs.n	801166e <UART_WaitOnFlagUntilTimeout.constprop.0+0xa>
 80116b2:	e7e6      	b.n	8011682 <UART_WaitOnFlagUntilTimeout.constprop.0+0x1e>

080116b4 <HAL_UART_Init>:
{
 80116b4:	b510      	push	{r4, lr}
  if (huart == NULL)
 80116b6:	4604      	mov	r4, r0
 80116b8:	b340      	cbz	r0, 801170c <HAL_UART_Init+0x58>
  if (huart->gState == HAL_UART_STATE_RESET)
 80116ba:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80116be:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80116c2:	b91b      	cbnz	r3, 80116cc <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 80116c4:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_UART_MspInit(huart);
 80116c8:	f7ff f892 	bl	80107f0 <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 80116cc:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 80116ce:	2324      	movs	r3, #36	; 0x24
 80116d0:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UART_DISABLE(huart);
 80116d4:	68d3      	ldr	r3, [r2, #12]
 80116d6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80116da:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 80116dc:	4620      	mov	r0, r4
 80116de:	f7ff ff5b 	bl	8011598 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80116e2:	6823      	ldr	r3, [r4, #0]
 80116e4:	691a      	ldr	r2, [r3, #16]
 80116e6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80116ea:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80116ec:	695a      	ldr	r2, [r3, #20]
 80116ee:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80116f2:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 80116f4:	68da      	ldr	r2, [r3, #12]
 80116f6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80116fa:	60da      	str	r2, [r3, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80116fc:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 80116fe:	2320      	movs	r3, #32
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8011700:	6420      	str	r0, [r4, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8011702:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8011706:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
}
 801170a:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 801170c:	2001      	movs	r0, #1
 801170e:	e7fc      	b.n	801170a <HAL_UART_Init+0x56>

08011710 <HAL_UART_Transmit>:
{
 8011710:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8011712:	4617      	mov	r7, r2
  if (huart->gState == HAL_UART_STATE_READY)
 8011714:	f890 203d 	ldrb.w	r2, [r0, #61]	; 0x3d
{
 8011718:	9300      	str	r3, [sp, #0]
  if (huart->gState == HAL_UART_STATE_READY)
 801171a:	2a20      	cmp	r2, #32
{
 801171c:	4604      	mov	r4, r0
 801171e:	460e      	mov	r6, r1
  if (huart->gState == HAL_UART_STATE_READY)
 8011720:	d149      	bne.n	80117b6 <HAL_UART_Transmit+0xa6>
    if ((pData == NULL) || (Size == 0U))
 8011722:	2900      	cmp	r1, #0
 8011724:	d045      	beq.n	80117b2 <HAL_UART_Transmit+0xa2>
 8011726:	2f00      	cmp	r7, #0
 8011728:	d043      	beq.n	80117b2 <HAL_UART_Transmit+0xa2>
    __HAL_LOCK(huart);
 801172a:	f890 203c 	ldrb.w	r2, [r0, #60]	; 0x3c
 801172e:	2a01      	cmp	r2, #1
 8011730:	d041      	beq.n	80117b6 <HAL_UART_Transmit+0xa6>
 8011732:	2201      	movs	r2, #1
 8011734:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8011738:	2500      	movs	r5, #0
    huart->gState = HAL_UART_STATE_BUSY_TX;
 801173a:	2221      	movs	r2, #33	; 0x21
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 801173c:	6405      	str	r5, [r0, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 801173e:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
    tickstart = HAL_GetTick();
 8011742:	f7ff f9fb 	bl	8010b3c <HAL_GetTick>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8011746:	68a1      	ldr	r1, [r4, #8]
 8011748:	9b00      	ldr	r3, [sp, #0]
    huart->TxXferSize = Size;
 801174a:	84a7      	strh	r7, [r4, #36]	; 0x24
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 801174c:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
    tickstart = HAL_GetTick();
 8011750:	4602      	mov	r2, r0
    huart->TxXferCount = Size;
 8011752:	84e7      	strh	r7, [r4, #38]	; 0x26
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8011754:	d103      	bne.n	801175e <HAL_UART_Transmit+0x4e>
 8011756:	6921      	ldr	r1, [r4, #16]
 8011758:	b909      	cbnz	r1, 801175e <HAL_UART_Transmit+0x4e>
 801175a:	4635      	mov	r5, r6
      pdata8bits  = NULL;
 801175c:	460e      	mov	r6, r1
    __HAL_UNLOCK(huart);
 801175e:	2100      	movs	r1, #0
 8011760:	f884 103c 	strb.w	r1, [r4, #60]	; 0x3c
    while (huart->TxXferCount > 0U)
 8011764:	8ce1      	ldrh	r1, [r4, #38]	; 0x26
 8011766:	b289      	uxth	r1, r1
 8011768:	b941      	cbnz	r1, 801177c <HAL_UART_Transmit+0x6c>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 801176a:	2140      	movs	r1, #64	; 0x40
 801176c:	4620      	mov	r0, r4
 801176e:	f7ff ff79 	bl	8011664 <UART_WaitOnFlagUntilTimeout.constprop.0>
 8011772:	b960      	cbnz	r0, 801178e <HAL_UART_Transmit+0x7e>
    huart->gState = HAL_UART_STATE_READY;
 8011774:	2320      	movs	r3, #32
 8011776:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    return HAL_OK;
 801177a:	e009      	b.n	8011790 <HAL_UART_Transmit+0x80>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 801177c:	2180      	movs	r1, #128	; 0x80
 801177e:	4620      	mov	r0, r4
 8011780:	e9cd 2300 	strd	r2, r3, [sp]
 8011784:	f7ff ff6e 	bl	8011664 <UART_WaitOnFlagUntilTimeout.constprop.0>
 8011788:	e9dd 2300 	ldrd	r2, r3, [sp]
 801178c:	b110      	cbz	r0, 8011794 <HAL_UART_Transmit+0x84>
        return HAL_TIMEOUT;
 801178e:	2003      	movs	r0, #3
}
 8011790:	b003      	add	sp, #12
 8011792:	bdf0      	pop	{r4, r5, r6, r7, pc}
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8011794:	6820      	ldr	r0, [r4, #0]
      if (pdata8bits == NULL)
 8011796:	b94e      	cbnz	r6, 80117ac <HAL_UART_Transmit+0x9c>
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8011798:	f835 1b02 	ldrh.w	r1, [r5], #2
 801179c:	f3c1 0108 	ubfx	r1, r1, #0, #9
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80117a0:	6041      	str	r1, [r0, #4]
      huart->TxXferCount--;
 80117a2:	8ce1      	ldrh	r1, [r4, #38]	; 0x26
 80117a4:	3901      	subs	r1, #1
 80117a6:	b289      	uxth	r1, r1
 80117a8:	84e1      	strh	r1, [r4, #38]	; 0x26
 80117aa:	e7db      	b.n	8011764 <HAL_UART_Transmit+0x54>
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80117ac:	f816 1b01 	ldrb.w	r1, [r6], #1
 80117b0:	e7f6      	b.n	80117a0 <HAL_UART_Transmit+0x90>
      return  HAL_ERROR;
 80117b2:	2001      	movs	r0, #1
 80117b4:	e7ec      	b.n	8011790 <HAL_UART_Transmit+0x80>
    return HAL_BUSY;
 80117b6:	2002      	movs	r0, #2
 80117b8:	e7ea      	b.n	8011790 <HAL_UART_Transmit+0x80>
	...

080117bc <__errno>:
 80117bc:	4b01      	ldr	r3, [pc, #4]	; (80117c4 <__errno+0x8>)
 80117be:	6818      	ldr	r0, [r3, #0]
 80117c0:	4770      	bx	lr
 80117c2:	bf00      	nop
 80117c4:	2000100c 	.word	0x2000100c

080117c8 <__libc_init_array>:
 80117c8:	b570      	push	{r4, r5, r6, lr}
 80117ca:	4d0d      	ldr	r5, [pc, #52]	; (8011800 <__libc_init_array+0x38>)
 80117cc:	4c0d      	ldr	r4, [pc, #52]	; (8011804 <__libc_init_array+0x3c>)
 80117ce:	1b64      	subs	r4, r4, r5
 80117d0:	10a4      	asrs	r4, r4, #2
 80117d2:	2600      	movs	r6, #0
 80117d4:	42a6      	cmp	r6, r4
 80117d6:	d109      	bne.n	80117ec <__libc_init_array+0x24>
 80117d8:	4d0b      	ldr	r5, [pc, #44]	; (8011808 <__libc_init_array+0x40>)
 80117da:	4c0c      	ldr	r4, [pc, #48]	; (801180c <__libc_init_array+0x44>)
 80117dc:	f000 fc66 	bl	80120ac <_init>
 80117e0:	1b64      	subs	r4, r4, r5
 80117e2:	10a4      	asrs	r4, r4, #2
 80117e4:	2600      	movs	r6, #0
 80117e6:	42a6      	cmp	r6, r4
 80117e8:	d105      	bne.n	80117f6 <__libc_init_array+0x2e>
 80117ea:	bd70      	pop	{r4, r5, r6, pc}
 80117ec:	f855 3b04 	ldr.w	r3, [r5], #4
 80117f0:	4798      	blx	r3
 80117f2:	3601      	adds	r6, #1
 80117f4:	e7ee      	b.n	80117d4 <__libc_init_array+0xc>
 80117f6:	f855 3b04 	ldr.w	r3, [r5], #4
 80117fa:	4798      	blx	r3
 80117fc:	3601      	adds	r6, #1
 80117fe:	e7f2      	b.n	80117e6 <__libc_init_array+0x1e>
 8011800:	08012160 	.word	0x08012160
 8011804:	08012160 	.word	0x08012160
 8011808:	08012160 	.word	0x08012160
 801180c:	08012164 	.word	0x08012164

08011810 <memset>:
 8011810:	4402      	add	r2, r0
 8011812:	4603      	mov	r3, r0
 8011814:	4293      	cmp	r3, r2
 8011816:	d100      	bne.n	801181a <memset+0xa>
 8011818:	4770      	bx	lr
 801181a:	f803 1b01 	strb.w	r1, [r3], #1
 801181e:	e7f9      	b.n	8011814 <memset+0x4>

08011820 <setvbuf>:
 8011820:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8011824:	461d      	mov	r5, r3
 8011826:	4b5d      	ldr	r3, [pc, #372]	; (801199c <setvbuf+0x17c>)
 8011828:	681f      	ldr	r7, [r3, #0]
 801182a:	4604      	mov	r4, r0
 801182c:	460e      	mov	r6, r1
 801182e:	4690      	mov	r8, r2
 8011830:	b127      	cbz	r7, 801183c <setvbuf+0x1c>
 8011832:	69bb      	ldr	r3, [r7, #24]
 8011834:	b913      	cbnz	r3, 801183c <setvbuf+0x1c>
 8011836:	4638      	mov	r0, r7
 8011838:	f000 f9d2 	bl	8011be0 <__sinit>
 801183c:	4b58      	ldr	r3, [pc, #352]	; (80119a0 <setvbuf+0x180>)
 801183e:	429c      	cmp	r4, r3
 8011840:	d167      	bne.n	8011912 <setvbuf+0xf2>
 8011842:	687c      	ldr	r4, [r7, #4]
 8011844:	f1b8 0f02 	cmp.w	r8, #2
 8011848:	d006      	beq.n	8011858 <setvbuf+0x38>
 801184a:	f1b8 0f01 	cmp.w	r8, #1
 801184e:	f200 809f 	bhi.w	8011990 <setvbuf+0x170>
 8011852:	2d00      	cmp	r5, #0
 8011854:	f2c0 809c 	blt.w	8011990 <setvbuf+0x170>
 8011858:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801185a:	07db      	lsls	r3, r3, #31
 801185c:	d405      	bmi.n	801186a <setvbuf+0x4a>
 801185e:	89a3      	ldrh	r3, [r4, #12]
 8011860:	0598      	lsls	r0, r3, #22
 8011862:	d402      	bmi.n	801186a <setvbuf+0x4a>
 8011864:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8011866:	f000 fa59 	bl	8011d1c <__retarget_lock_acquire_recursive>
 801186a:	4621      	mov	r1, r4
 801186c:	4638      	mov	r0, r7
 801186e:	f000 f923 	bl	8011ab8 <_fflush_r>
 8011872:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8011874:	b141      	cbz	r1, 8011888 <setvbuf+0x68>
 8011876:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801187a:	4299      	cmp	r1, r3
 801187c:	d002      	beq.n	8011884 <setvbuf+0x64>
 801187e:	4638      	mov	r0, r7
 8011880:	f000 fa7c 	bl	8011d7c <_free_r>
 8011884:	2300      	movs	r3, #0
 8011886:	6363      	str	r3, [r4, #52]	; 0x34
 8011888:	2300      	movs	r3, #0
 801188a:	61a3      	str	r3, [r4, #24]
 801188c:	6063      	str	r3, [r4, #4]
 801188e:	89a3      	ldrh	r3, [r4, #12]
 8011890:	0619      	lsls	r1, r3, #24
 8011892:	d503      	bpl.n	801189c <setvbuf+0x7c>
 8011894:	6921      	ldr	r1, [r4, #16]
 8011896:	4638      	mov	r0, r7
 8011898:	f000 fa70 	bl	8011d7c <_free_r>
 801189c:	89a3      	ldrh	r3, [r4, #12]
 801189e:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 80118a2:	f023 0303 	bic.w	r3, r3, #3
 80118a6:	f1b8 0f02 	cmp.w	r8, #2
 80118aa:	81a3      	strh	r3, [r4, #12]
 80118ac:	d06c      	beq.n	8011988 <setvbuf+0x168>
 80118ae:	ab01      	add	r3, sp, #4
 80118b0:	466a      	mov	r2, sp
 80118b2:	4621      	mov	r1, r4
 80118b4:	4638      	mov	r0, r7
 80118b6:	f000 fa33 	bl	8011d20 <__swhatbuf_r>
 80118ba:	89a3      	ldrh	r3, [r4, #12]
 80118bc:	4318      	orrs	r0, r3
 80118be:	81a0      	strh	r0, [r4, #12]
 80118c0:	2d00      	cmp	r5, #0
 80118c2:	d130      	bne.n	8011926 <setvbuf+0x106>
 80118c4:	9d00      	ldr	r5, [sp, #0]
 80118c6:	4628      	mov	r0, r5
 80118c8:	f000 fa50 	bl	8011d6c <malloc>
 80118cc:	4606      	mov	r6, r0
 80118ce:	2800      	cmp	r0, #0
 80118d0:	d155      	bne.n	801197e <setvbuf+0x15e>
 80118d2:	f8dd 9000 	ldr.w	r9, [sp]
 80118d6:	45a9      	cmp	r9, r5
 80118d8:	d14a      	bne.n	8011970 <setvbuf+0x150>
 80118da:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 80118de:	2200      	movs	r2, #0
 80118e0:	60a2      	str	r2, [r4, #8]
 80118e2:	f104 0247 	add.w	r2, r4, #71	; 0x47
 80118e6:	6022      	str	r2, [r4, #0]
 80118e8:	6122      	str	r2, [r4, #16]
 80118ea:	2201      	movs	r2, #1
 80118ec:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80118f0:	6162      	str	r2, [r4, #20]
 80118f2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80118f4:	f043 0302 	orr.w	r3, r3, #2
 80118f8:	07d2      	lsls	r2, r2, #31
 80118fa:	81a3      	strh	r3, [r4, #12]
 80118fc:	d405      	bmi.n	801190a <setvbuf+0xea>
 80118fe:	f413 7f00 	tst.w	r3, #512	; 0x200
 8011902:	d102      	bne.n	801190a <setvbuf+0xea>
 8011904:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8011906:	f000 fa0a 	bl	8011d1e <__retarget_lock_release_recursive>
 801190a:	4628      	mov	r0, r5
 801190c:	b003      	add	sp, #12
 801190e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011912:	4b24      	ldr	r3, [pc, #144]	; (80119a4 <setvbuf+0x184>)
 8011914:	429c      	cmp	r4, r3
 8011916:	d101      	bne.n	801191c <setvbuf+0xfc>
 8011918:	68bc      	ldr	r4, [r7, #8]
 801191a:	e793      	b.n	8011844 <setvbuf+0x24>
 801191c:	4b22      	ldr	r3, [pc, #136]	; (80119a8 <setvbuf+0x188>)
 801191e:	429c      	cmp	r4, r3
 8011920:	bf08      	it	eq
 8011922:	68fc      	ldreq	r4, [r7, #12]
 8011924:	e78e      	b.n	8011844 <setvbuf+0x24>
 8011926:	2e00      	cmp	r6, #0
 8011928:	d0cd      	beq.n	80118c6 <setvbuf+0xa6>
 801192a:	69bb      	ldr	r3, [r7, #24]
 801192c:	b913      	cbnz	r3, 8011934 <setvbuf+0x114>
 801192e:	4638      	mov	r0, r7
 8011930:	f000 f956 	bl	8011be0 <__sinit>
 8011934:	f1b8 0f01 	cmp.w	r8, #1
 8011938:	bf08      	it	eq
 801193a:	89a3      	ldrheq	r3, [r4, #12]
 801193c:	6026      	str	r6, [r4, #0]
 801193e:	bf04      	itt	eq
 8011940:	f043 0301 	orreq.w	r3, r3, #1
 8011944:	81a3      	strheq	r3, [r4, #12]
 8011946:	89a2      	ldrh	r2, [r4, #12]
 8011948:	f012 0308 	ands.w	r3, r2, #8
 801194c:	e9c4 6504 	strd	r6, r5, [r4, #16]
 8011950:	d01c      	beq.n	801198c <setvbuf+0x16c>
 8011952:	07d3      	lsls	r3, r2, #31
 8011954:	bf41      	itttt	mi
 8011956:	2300      	movmi	r3, #0
 8011958:	426d      	negmi	r5, r5
 801195a:	60a3      	strmi	r3, [r4, #8]
 801195c:	61a5      	strmi	r5, [r4, #24]
 801195e:	bf58      	it	pl
 8011960:	60a5      	strpl	r5, [r4, #8]
 8011962:	6e65      	ldr	r5, [r4, #100]	; 0x64
 8011964:	f015 0501 	ands.w	r5, r5, #1
 8011968:	d115      	bne.n	8011996 <setvbuf+0x176>
 801196a:	f412 7f00 	tst.w	r2, #512	; 0x200
 801196e:	e7c8      	b.n	8011902 <setvbuf+0xe2>
 8011970:	4648      	mov	r0, r9
 8011972:	f000 f9fb 	bl	8011d6c <malloc>
 8011976:	4606      	mov	r6, r0
 8011978:	2800      	cmp	r0, #0
 801197a:	d0ae      	beq.n	80118da <setvbuf+0xba>
 801197c:	464d      	mov	r5, r9
 801197e:	89a3      	ldrh	r3, [r4, #12]
 8011980:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011984:	81a3      	strh	r3, [r4, #12]
 8011986:	e7d0      	b.n	801192a <setvbuf+0x10a>
 8011988:	2500      	movs	r5, #0
 801198a:	e7a8      	b.n	80118de <setvbuf+0xbe>
 801198c:	60a3      	str	r3, [r4, #8]
 801198e:	e7e8      	b.n	8011962 <setvbuf+0x142>
 8011990:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8011994:	e7b9      	b.n	801190a <setvbuf+0xea>
 8011996:	2500      	movs	r5, #0
 8011998:	e7b7      	b.n	801190a <setvbuf+0xea>
 801199a:	bf00      	nop
 801199c:	2000100c 	.word	0x2000100c
 80119a0:	08012114 	.word	0x08012114
 80119a4:	08012134 	.word	0x08012134
 80119a8:	080120f4 	.word	0x080120f4

080119ac <__sflush_r>:
 80119ac:	898a      	ldrh	r2, [r1, #12]
 80119ae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80119b2:	4605      	mov	r5, r0
 80119b4:	0710      	lsls	r0, r2, #28
 80119b6:	460c      	mov	r4, r1
 80119b8:	d458      	bmi.n	8011a6c <__sflush_r+0xc0>
 80119ba:	684b      	ldr	r3, [r1, #4]
 80119bc:	2b00      	cmp	r3, #0
 80119be:	dc05      	bgt.n	80119cc <__sflush_r+0x20>
 80119c0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80119c2:	2b00      	cmp	r3, #0
 80119c4:	dc02      	bgt.n	80119cc <__sflush_r+0x20>
 80119c6:	2000      	movs	r0, #0
 80119c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80119cc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80119ce:	2e00      	cmp	r6, #0
 80119d0:	d0f9      	beq.n	80119c6 <__sflush_r+0x1a>
 80119d2:	2300      	movs	r3, #0
 80119d4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80119d8:	682f      	ldr	r7, [r5, #0]
 80119da:	602b      	str	r3, [r5, #0]
 80119dc:	d032      	beq.n	8011a44 <__sflush_r+0x98>
 80119de:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80119e0:	89a3      	ldrh	r3, [r4, #12]
 80119e2:	075a      	lsls	r2, r3, #29
 80119e4:	d505      	bpl.n	80119f2 <__sflush_r+0x46>
 80119e6:	6863      	ldr	r3, [r4, #4]
 80119e8:	1ac0      	subs	r0, r0, r3
 80119ea:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80119ec:	b10b      	cbz	r3, 80119f2 <__sflush_r+0x46>
 80119ee:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80119f0:	1ac0      	subs	r0, r0, r3
 80119f2:	2300      	movs	r3, #0
 80119f4:	4602      	mov	r2, r0
 80119f6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80119f8:	6a21      	ldr	r1, [r4, #32]
 80119fa:	4628      	mov	r0, r5
 80119fc:	47b0      	blx	r6
 80119fe:	1c43      	adds	r3, r0, #1
 8011a00:	89a3      	ldrh	r3, [r4, #12]
 8011a02:	d106      	bne.n	8011a12 <__sflush_r+0x66>
 8011a04:	6829      	ldr	r1, [r5, #0]
 8011a06:	291d      	cmp	r1, #29
 8011a08:	d82c      	bhi.n	8011a64 <__sflush_r+0xb8>
 8011a0a:	4a2a      	ldr	r2, [pc, #168]	; (8011ab4 <__sflush_r+0x108>)
 8011a0c:	40ca      	lsrs	r2, r1
 8011a0e:	07d6      	lsls	r6, r2, #31
 8011a10:	d528      	bpl.n	8011a64 <__sflush_r+0xb8>
 8011a12:	2200      	movs	r2, #0
 8011a14:	6062      	str	r2, [r4, #4]
 8011a16:	04d9      	lsls	r1, r3, #19
 8011a18:	6922      	ldr	r2, [r4, #16]
 8011a1a:	6022      	str	r2, [r4, #0]
 8011a1c:	d504      	bpl.n	8011a28 <__sflush_r+0x7c>
 8011a1e:	1c42      	adds	r2, r0, #1
 8011a20:	d101      	bne.n	8011a26 <__sflush_r+0x7a>
 8011a22:	682b      	ldr	r3, [r5, #0]
 8011a24:	b903      	cbnz	r3, 8011a28 <__sflush_r+0x7c>
 8011a26:	6560      	str	r0, [r4, #84]	; 0x54
 8011a28:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8011a2a:	602f      	str	r7, [r5, #0]
 8011a2c:	2900      	cmp	r1, #0
 8011a2e:	d0ca      	beq.n	80119c6 <__sflush_r+0x1a>
 8011a30:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8011a34:	4299      	cmp	r1, r3
 8011a36:	d002      	beq.n	8011a3e <__sflush_r+0x92>
 8011a38:	4628      	mov	r0, r5
 8011a3a:	f000 f99f 	bl	8011d7c <_free_r>
 8011a3e:	2000      	movs	r0, #0
 8011a40:	6360      	str	r0, [r4, #52]	; 0x34
 8011a42:	e7c1      	b.n	80119c8 <__sflush_r+0x1c>
 8011a44:	6a21      	ldr	r1, [r4, #32]
 8011a46:	2301      	movs	r3, #1
 8011a48:	4628      	mov	r0, r5
 8011a4a:	47b0      	blx	r6
 8011a4c:	1c41      	adds	r1, r0, #1
 8011a4e:	d1c7      	bne.n	80119e0 <__sflush_r+0x34>
 8011a50:	682b      	ldr	r3, [r5, #0]
 8011a52:	2b00      	cmp	r3, #0
 8011a54:	d0c4      	beq.n	80119e0 <__sflush_r+0x34>
 8011a56:	2b1d      	cmp	r3, #29
 8011a58:	d001      	beq.n	8011a5e <__sflush_r+0xb2>
 8011a5a:	2b16      	cmp	r3, #22
 8011a5c:	d101      	bne.n	8011a62 <__sflush_r+0xb6>
 8011a5e:	602f      	str	r7, [r5, #0]
 8011a60:	e7b1      	b.n	80119c6 <__sflush_r+0x1a>
 8011a62:	89a3      	ldrh	r3, [r4, #12]
 8011a64:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011a68:	81a3      	strh	r3, [r4, #12]
 8011a6a:	e7ad      	b.n	80119c8 <__sflush_r+0x1c>
 8011a6c:	690f      	ldr	r7, [r1, #16]
 8011a6e:	2f00      	cmp	r7, #0
 8011a70:	d0a9      	beq.n	80119c6 <__sflush_r+0x1a>
 8011a72:	0793      	lsls	r3, r2, #30
 8011a74:	680e      	ldr	r6, [r1, #0]
 8011a76:	bf08      	it	eq
 8011a78:	694b      	ldreq	r3, [r1, #20]
 8011a7a:	600f      	str	r7, [r1, #0]
 8011a7c:	bf18      	it	ne
 8011a7e:	2300      	movne	r3, #0
 8011a80:	eba6 0807 	sub.w	r8, r6, r7
 8011a84:	608b      	str	r3, [r1, #8]
 8011a86:	f1b8 0f00 	cmp.w	r8, #0
 8011a8a:	dd9c      	ble.n	80119c6 <__sflush_r+0x1a>
 8011a8c:	6a21      	ldr	r1, [r4, #32]
 8011a8e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8011a90:	4643      	mov	r3, r8
 8011a92:	463a      	mov	r2, r7
 8011a94:	4628      	mov	r0, r5
 8011a96:	47b0      	blx	r6
 8011a98:	2800      	cmp	r0, #0
 8011a9a:	dc06      	bgt.n	8011aaa <__sflush_r+0xfe>
 8011a9c:	89a3      	ldrh	r3, [r4, #12]
 8011a9e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011aa2:	81a3      	strh	r3, [r4, #12]
 8011aa4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8011aa8:	e78e      	b.n	80119c8 <__sflush_r+0x1c>
 8011aaa:	4407      	add	r7, r0
 8011aac:	eba8 0800 	sub.w	r8, r8, r0
 8011ab0:	e7e9      	b.n	8011a86 <__sflush_r+0xda>
 8011ab2:	bf00      	nop
 8011ab4:	20400001 	.word	0x20400001

08011ab8 <_fflush_r>:
 8011ab8:	b538      	push	{r3, r4, r5, lr}
 8011aba:	690b      	ldr	r3, [r1, #16]
 8011abc:	4605      	mov	r5, r0
 8011abe:	460c      	mov	r4, r1
 8011ac0:	b913      	cbnz	r3, 8011ac8 <_fflush_r+0x10>
 8011ac2:	2500      	movs	r5, #0
 8011ac4:	4628      	mov	r0, r5
 8011ac6:	bd38      	pop	{r3, r4, r5, pc}
 8011ac8:	b118      	cbz	r0, 8011ad2 <_fflush_r+0x1a>
 8011aca:	6983      	ldr	r3, [r0, #24]
 8011acc:	b90b      	cbnz	r3, 8011ad2 <_fflush_r+0x1a>
 8011ace:	f000 f887 	bl	8011be0 <__sinit>
 8011ad2:	4b14      	ldr	r3, [pc, #80]	; (8011b24 <_fflush_r+0x6c>)
 8011ad4:	429c      	cmp	r4, r3
 8011ad6:	d11b      	bne.n	8011b10 <_fflush_r+0x58>
 8011ad8:	686c      	ldr	r4, [r5, #4]
 8011ada:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011ade:	2b00      	cmp	r3, #0
 8011ae0:	d0ef      	beq.n	8011ac2 <_fflush_r+0xa>
 8011ae2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8011ae4:	07d0      	lsls	r0, r2, #31
 8011ae6:	d404      	bmi.n	8011af2 <_fflush_r+0x3a>
 8011ae8:	0599      	lsls	r1, r3, #22
 8011aea:	d402      	bmi.n	8011af2 <_fflush_r+0x3a>
 8011aec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8011aee:	f000 f915 	bl	8011d1c <__retarget_lock_acquire_recursive>
 8011af2:	4628      	mov	r0, r5
 8011af4:	4621      	mov	r1, r4
 8011af6:	f7ff ff59 	bl	80119ac <__sflush_r>
 8011afa:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8011afc:	07da      	lsls	r2, r3, #31
 8011afe:	4605      	mov	r5, r0
 8011b00:	d4e0      	bmi.n	8011ac4 <_fflush_r+0xc>
 8011b02:	89a3      	ldrh	r3, [r4, #12]
 8011b04:	059b      	lsls	r3, r3, #22
 8011b06:	d4dd      	bmi.n	8011ac4 <_fflush_r+0xc>
 8011b08:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8011b0a:	f000 f908 	bl	8011d1e <__retarget_lock_release_recursive>
 8011b0e:	e7d9      	b.n	8011ac4 <_fflush_r+0xc>
 8011b10:	4b05      	ldr	r3, [pc, #20]	; (8011b28 <_fflush_r+0x70>)
 8011b12:	429c      	cmp	r4, r3
 8011b14:	d101      	bne.n	8011b1a <_fflush_r+0x62>
 8011b16:	68ac      	ldr	r4, [r5, #8]
 8011b18:	e7df      	b.n	8011ada <_fflush_r+0x22>
 8011b1a:	4b04      	ldr	r3, [pc, #16]	; (8011b2c <_fflush_r+0x74>)
 8011b1c:	429c      	cmp	r4, r3
 8011b1e:	bf08      	it	eq
 8011b20:	68ec      	ldreq	r4, [r5, #12]
 8011b22:	e7da      	b.n	8011ada <_fflush_r+0x22>
 8011b24:	08012114 	.word	0x08012114
 8011b28:	08012134 	.word	0x08012134
 8011b2c:	080120f4 	.word	0x080120f4

08011b30 <std>:
 8011b30:	2300      	movs	r3, #0
 8011b32:	b510      	push	{r4, lr}
 8011b34:	4604      	mov	r4, r0
 8011b36:	e9c0 3300 	strd	r3, r3, [r0]
 8011b3a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8011b3e:	6083      	str	r3, [r0, #8]
 8011b40:	8181      	strh	r1, [r0, #12]
 8011b42:	6643      	str	r3, [r0, #100]	; 0x64
 8011b44:	81c2      	strh	r2, [r0, #14]
 8011b46:	6183      	str	r3, [r0, #24]
 8011b48:	4619      	mov	r1, r3
 8011b4a:	2208      	movs	r2, #8
 8011b4c:	305c      	adds	r0, #92	; 0x5c
 8011b4e:	f7ff fe5f 	bl	8011810 <memset>
 8011b52:	4b05      	ldr	r3, [pc, #20]	; (8011b68 <std+0x38>)
 8011b54:	6263      	str	r3, [r4, #36]	; 0x24
 8011b56:	4b05      	ldr	r3, [pc, #20]	; (8011b6c <std+0x3c>)
 8011b58:	62a3      	str	r3, [r4, #40]	; 0x28
 8011b5a:	4b05      	ldr	r3, [pc, #20]	; (8011b70 <std+0x40>)
 8011b5c:	62e3      	str	r3, [r4, #44]	; 0x2c
 8011b5e:	4b05      	ldr	r3, [pc, #20]	; (8011b74 <std+0x44>)
 8011b60:	6224      	str	r4, [r4, #32]
 8011b62:	6323      	str	r3, [r4, #48]	; 0x30
 8011b64:	bd10      	pop	{r4, pc}
 8011b66:	bf00      	nop
 8011b68:	08011f5d 	.word	0x08011f5d
 8011b6c:	08011f7f 	.word	0x08011f7f
 8011b70:	08011fb7 	.word	0x08011fb7
 8011b74:	08011fdb 	.word	0x08011fdb

08011b78 <_cleanup_r>:
 8011b78:	4901      	ldr	r1, [pc, #4]	; (8011b80 <_cleanup_r+0x8>)
 8011b7a:	f000 b8af 	b.w	8011cdc <_fwalk_reent>
 8011b7e:	bf00      	nop
 8011b80:	08011ab9 	.word	0x08011ab9

08011b84 <__sfmoreglue>:
 8011b84:	b570      	push	{r4, r5, r6, lr}
 8011b86:	2268      	movs	r2, #104	; 0x68
 8011b88:	1e4d      	subs	r5, r1, #1
 8011b8a:	4355      	muls	r5, r2
 8011b8c:	460e      	mov	r6, r1
 8011b8e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8011b92:	f000 f95f 	bl	8011e54 <_malloc_r>
 8011b96:	4604      	mov	r4, r0
 8011b98:	b140      	cbz	r0, 8011bac <__sfmoreglue+0x28>
 8011b9a:	2100      	movs	r1, #0
 8011b9c:	e9c0 1600 	strd	r1, r6, [r0]
 8011ba0:	300c      	adds	r0, #12
 8011ba2:	60a0      	str	r0, [r4, #8]
 8011ba4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8011ba8:	f7ff fe32 	bl	8011810 <memset>
 8011bac:	4620      	mov	r0, r4
 8011bae:	bd70      	pop	{r4, r5, r6, pc}

08011bb0 <__sfp_lock_acquire>:
 8011bb0:	4801      	ldr	r0, [pc, #4]	; (8011bb8 <__sfp_lock_acquire+0x8>)
 8011bb2:	f000 b8b3 	b.w	8011d1c <__retarget_lock_acquire_recursive>
 8011bb6:	bf00      	nop
 8011bb8:	20001921 	.word	0x20001921

08011bbc <__sfp_lock_release>:
 8011bbc:	4801      	ldr	r0, [pc, #4]	; (8011bc4 <__sfp_lock_release+0x8>)
 8011bbe:	f000 b8ae 	b.w	8011d1e <__retarget_lock_release_recursive>
 8011bc2:	bf00      	nop
 8011bc4:	20001921 	.word	0x20001921

08011bc8 <__sinit_lock_acquire>:
 8011bc8:	4801      	ldr	r0, [pc, #4]	; (8011bd0 <__sinit_lock_acquire+0x8>)
 8011bca:	f000 b8a7 	b.w	8011d1c <__retarget_lock_acquire_recursive>
 8011bce:	bf00      	nop
 8011bd0:	20001922 	.word	0x20001922

08011bd4 <__sinit_lock_release>:
 8011bd4:	4801      	ldr	r0, [pc, #4]	; (8011bdc <__sinit_lock_release+0x8>)
 8011bd6:	f000 b8a2 	b.w	8011d1e <__retarget_lock_release_recursive>
 8011bda:	bf00      	nop
 8011bdc:	20001922 	.word	0x20001922

08011be0 <__sinit>:
 8011be0:	b510      	push	{r4, lr}
 8011be2:	4604      	mov	r4, r0
 8011be4:	f7ff fff0 	bl	8011bc8 <__sinit_lock_acquire>
 8011be8:	69a3      	ldr	r3, [r4, #24]
 8011bea:	b11b      	cbz	r3, 8011bf4 <__sinit+0x14>
 8011bec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011bf0:	f7ff bff0 	b.w	8011bd4 <__sinit_lock_release>
 8011bf4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8011bf8:	6523      	str	r3, [r4, #80]	; 0x50
 8011bfa:	4b13      	ldr	r3, [pc, #76]	; (8011c48 <__sinit+0x68>)
 8011bfc:	4a13      	ldr	r2, [pc, #76]	; (8011c4c <__sinit+0x6c>)
 8011bfe:	681b      	ldr	r3, [r3, #0]
 8011c00:	62a2      	str	r2, [r4, #40]	; 0x28
 8011c02:	42a3      	cmp	r3, r4
 8011c04:	bf04      	itt	eq
 8011c06:	2301      	moveq	r3, #1
 8011c08:	61a3      	streq	r3, [r4, #24]
 8011c0a:	4620      	mov	r0, r4
 8011c0c:	f000 f820 	bl	8011c50 <__sfp>
 8011c10:	6060      	str	r0, [r4, #4]
 8011c12:	4620      	mov	r0, r4
 8011c14:	f000 f81c 	bl	8011c50 <__sfp>
 8011c18:	60a0      	str	r0, [r4, #8]
 8011c1a:	4620      	mov	r0, r4
 8011c1c:	f000 f818 	bl	8011c50 <__sfp>
 8011c20:	2200      	movs	r2, #0
 8011c22:	60e0      	str	r0, [r4, #12]
 8011c24:	2104      	movs	r1, #4
 8011c26:	6860      	ldr	r0, [r4, #4]
 8011c28:	f7ff ff82 	bl	8011b30 <std>
 8011c2c:	68a0      	ldr	r0, [r4, #8]
 8011c2e:	2201      	movs	r2, #1
 8011c30:	2109      	movs	r1, #9
 8011c32:	f7ff ff7d 	bl	8011b30 <std>
 8011c36:	68e0      	ldr	r0, [r4, #12]
 8011c38:	2202      	movs	r2, #2
 8011c3a:	2112      	movs	r1, #18
 8011c3c:	f7ff ff78 	bl	8011b30 <std>
 8011c40:	2301      	movs	r3, #1
 8011c42:	61a3      	str	r3, [r4, #24]
 8011c44:	e7d2      	b.n	8011bec <__sinit+0xc>
 8011c46:	bf00      	nop
 8011c48:	080120f0 	.word	0x080120f0
 8011c4c:	08011b79 	.word	0x08011b79

08011c50 <__sfp>:
 8011c50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011c52:	4607      	mov	r7, r0
 8011c54:	f7ff ffac 	bl	8011bb0 <__sfp_lock_acquire>
 8011c58:	4b1e      	ldr	r3, [pc, #120]	; (8011cd4 <__sfp+0x84>)
 8011c5a:	681e      	ldr	r6, [r3, #0]
 8011c5c:	69b3      	ldr	r3, [r6, #24]
 8011c5e:	b913      	cbnz	r3, 8011c66 <__sfp+0x16>
 8011c60:	4630      	mov	r0, r6
 8011c62:	f7ff ffbd 	bl	8011be0 <__sinit>
 8011c66:	3648      	adds	r6, #72	; 0x48
 8011c68:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8011c6c:	3b01      	subs	r3, #1
 8011c6e:	d503      	bpl.n	8011c78 <__sfp+0x28>
 8011c70:	6833      	ldr	r3, [r6, #0]
 8011c72:	b30b      	cbz	r3, 8011cb8 <__sfp+0x68>
 8011c74:	6836      	ldr	r6, [r6, #0]
 8011c76:	e7f7      	b.n	8011c68 <__sfp+0x18>
 8011c78:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8011c7c:	b9d5      	cbnz	r5, 8011cb4 <__sfp+0x64>
 8011c7e:	4b16      	ldr	r3, [pc, #88]	; (8011cd8 <__sfp+0x88>)
 8011c80:	60e3      	str	r3, [r4, #12]
 8011c82:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8011c86:	6665      	str	r5, [r4, #100]	; 0x64
 8011c88:	f000 f847 	bl	8011d1a <__retarget_lock_init_recursive>
 8011c8c:	f7ff ff96 	bl	8011bbc <__sfp_lock_release>
 8011c90:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8011c94:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8011c98:	6025      	str	r5, [r4, #0]
 8011c9a:	61a5      	str	r5, [r4, #24]
 8011c9c:	2208      	movs	r2, #8
 8011c9e:	4629      	mov	r1, r5
 8011ca0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8011ca4:	f7ff fdb4 	bl	8011810 <memset>
 8011ca8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8011cac:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8011cb0:	4620      	mov	r0, r4
 8011cb2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011cb4:	3468      	adds	r4, #104	; 0x68
 8011cb6:	e7d9      	b.n	8011c6c <__sfp+0x1c>
 8011cb8:	2104      	movs	r1, #4
 8011cba:	4638      	mov	r0, r7
 8011cbc:	f7ff ff62 	bl	8011b84 <__sfmoreglue>
 8011cc0:	4604      	mov	r4, r0
 8011cc2:	6030      	str	r0, [r6, #0]
 8011cc4:	2800      	cmp	r0, #0
 8011cc6:	d1d5      	bne.n	8011c74 <__sfp+0x24>
 8011cc8:	f7ff ff78 	bl	8011bbc <__sfp_lock_release>
 8011ccc:	230c      	movs	r3, #12
 8011cce:	603b      	str	r3, [r7, #0]
 8011cd0:	e7ee      	b.n	8011cb0 <__sfp+0x60>
 8011cd2:	bf00      	nop
 8011cd4:	080120f0 	.word	0x080120f0
 8011cd8:	ffff0001 	.word	0xffff0001

08011cdc <_fwalk_reent>:
 8011cdc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011ce0:	4606      	mov	r6, r0
 8011ce2:	4688      	mov	r8, r1
 8011ce4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8011ce8:	2700      	movs	r7, #0
 8011cea:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8011cee:	f1b9 0901 	subs.w	r9, r9, #1
 8011cf2:	d505      	bpl.n	8011d00 <_fwalk_reent+0x24>
 8011cf4:	6824      	ldr	r4, [r4, #0]
 8011cf6:	2c00      	cmp	r4, #0
 8011cf8:	d1f7      	bne.n	8011cea <_fwalk_reent+0xe>
 8011cfa:	4638      	mov	r0, r7
 8011cfc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011d00:	89ab      	ldrh	r3, [r5, #12]
 8011d02:	2b01      	cmp	r3, #1
 8011d04:	d907      	bls.n	8011d16 <_fwalk_reent+0x3a>
 8011d06:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8011d0a:	3301      	adds	r3, #1
 8011d0c:	d003      	beq.n	8011d16 <_fwalk_reent+0x3a>
 8011d0e:	4629      	mov	r1, r5
 8011d10:	4630      	mov	r0, r6
 8011d12:	47c0      	blx	r8
 8011d14:	4307      	orrs	r7, r0
 8011d16:	3568      	adds	r5, #104	; 0x68
 8011d18:	e7e9      	b.n	8011cee <_fwalk_reent+0x12>

08011d1a <__retarget_lock_init_recursive>:
 8011d1a:	4770      	bx	lr

08011d1c <__retarget_lock_acquire_recursive>:
 8011d1c:	4770      	bx	lr

08011d1e <__retarget_lock_release_recursive>:
 8011d1e:	4770      	bx	lr

08011d20 <__swhatbuf_r>:
 8011d20:	b570      	push	{r4, r5, r6, lr}
 8011d22:	460e      	mov	r6, r1
 8011d24:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011d28:	2900      	cmp	r1, #0
 8011d2a:	b096      	sub	sp, #88	; 0x58
 8011d2c:	4614      	mov	r4, r2
 8011d2e:	461d      	mov	r5, r3
 8011d30:	da08      	bge.n	8011d44 <__swhatbuf_r+0x24>
 8011d32:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8011d36:	2200      	movs	r2, #0
 8011d38:	602a      	str	r2, [r5, #0]
 8011d3a:	061a      	lsls	r2, r3, #24
 8011d3c:	d410      	bmi.n	8011d60 <__swhatbuf_r+0x40>
 8011d3e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8011d42:	e00e      	b.n	8011d62 <__swhatbuf_r+0x42>
 8011d44:	466a      	mov	r2, sp
 8011d46:	f000 f96f 	bl	8012028 <_fstat_r>
 8011d4a:	2800      	cmp	r0, #0
 8011d4c:	dbf1      	blt.n	8011d32 <__swhatbuf_r+0x12>
 8011d4e:	9a01      	ldr	r2, [sp, #4]
 8011d50:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8011d54:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8011d58:	425a      	negs	r2, r3
 8011d5a:	415a      	adcs	r2, r3
 8011d5c:	602a      	str	r2, [r5, #0]
 8011d5e:	e7ee      	b.n	8011d3e <__swhatbuf_r+0x1e>
 8011d60:	2340      	movs	r3, #64	; 0x40
 8011d62:	2000      	movs	r0, #0
 8011d64:	6023      	str	r3, [r4, #0]
 8011d66:	b016      	add	sp, #88	; 0x58
 8011d68:	bd70      	pop	{r4, r5, r6, pc}
	...

08011d6c <malloc>:
 8011d6c:	4b02      	ldr	r3, [pc, #8]	; (8011d78 <malloc+0xc>)
 8011d6e:	4601      	mov	r1, r0
 8011d70:	6818      	ldr	r0, [r3, #0]
 8011d72:	f000 b86f 	b.w	8011e54 <_malloc_r>
 8011d76:	bf00      	nop
 8011d78:	2000100c 	.word	0x2000100c

08011d7c <_free_r>:
 8011d7c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8011d7e:	2900      	cmp	r1, #0
 8011d80:	d044      	beq.n	8011e0c <_free_r+0x90>
 8011d82:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8011d86:	9001      	str	r0, [sp, #4]
 8011d88:	2b00      	cmp	r3, #0
 8011d8a:	f1a1 0404 	sub.w	r4, r1, #4
 8011d8e:	bfb8      	it	lt
 8011d90:	18e4      	addlt	r4, r4, r3
 8011d92:	f000 f96d 	bl	8012070 <__malloc_lock>
 8011d96:	4a1e      	ldr	r2, [pc, #120]	; (8011e10 <_free_r+0x94>)
 8011d98:	9801      	ldr	r0, [sp, #4]
 8011d9a:	6813      	ldr	r3, [r2, #0]
 8011d9c:	b933      	cbnz	r3, 8011dac <_free_r+0x30>
 8011d9e:	6063      	str	r3, [r4, #4]
 8011da0:	6014      	str	r4, [r2, #0]
 8011da2:	b003      	add	sp, #12
 8011da4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8011da8:	f000 b968 	b.w	801207c <__malloc_unlock>
 8011dac:	42a3      	cmp	r3, r4
 8011dae:	d908      	bls.n	8011dc2 <_free_r+0x46>
 8011db0:	6825      	ldr	r5, [r4, #0]
 8011db2:	1961      	adds	r1, r4, r5
 8011db4:	428b      	cmp	r3, r1
 8011db6:	bf01      	itttt	eq
 8011db8:	6819      	ldreq	r1, [r3, #0]
 8011dba:	685b      	ldreq	r3, [r3, #4]
 8011dbc:	1949      	addeq	r1, r1, r5
 8011dbe:	6021      	streq	r1, [r4, #0]
 8011dc0:	e7ed      	b.n	8011d9e <_free_r+0x22>
 8011dc2:	461a      	mov	r2, r3
 8011dc4:	685b      	ldr	r3, [r3, #4]
 8011dc6:	b10b      	cbz	r3, 8011dcc <_free_r+0x50>
 8011dc8:	42a3      	cmp	r3, r4
 8011dca:	d9fa      	bls.n	8011dc2 <_free_r+0x46>
 8011dcc:	6811      	ldr	r1, [r2, #0]
 8011dce:	1855      	adds	r5, r2, r1
 8011dd0:	42a5      	cmp	r5, r4
 8011dd2:	d10b      	bne.n	8011dec <_free_r+0x70>
 8011dd4:	6824      	ldr	r4, [r4, #0]
 8011dd6:	4421      	add	r1, r4
 8011dd8:	1854      	adds	r4, r2, r1
 8011dda:	42a3      	cmp	r3, r4
 8011ddc:	6011      	str	r1, [r2, #0]
 8011dde:	d1e0      	bne.n	8011da2 <_free_r+0x26>
 8011de0:	681c      	ldr	r4, [r3, #0]
 8011de2:	685b      	ldr	r3, [r3, #4]
 8011de4:	6053      	str	r3, [r2, #4]
 8011de6:	4421      	add	r1, r4
 8011de8:	6011      	str	r1, [r2, #0]
 8011dea:	e7da      	b.n	8011da2 <_free_r+0x26>
 8011dec:	d902      	bls.n	8011df4 <_free_r+0x78>
 8011dee:	230c      	movs	r3, #12
 8011df0:	6003      	str	r3, [r0, #0]
 8011df2:	e7d6      	b.n	8011da2 <_free_r+0x26>
 8011df4:	6825      	ldr	r5, [r4, #0]
 8011df6:	1961      	adds	r1, r4, r5
 8011df8:	428b      	cmp	r3, r1
 8011dfa:	bf04      	itt	eq
 8011dfc:	6819      	ldreq	r1, [r3, #0]
 8011dfe:	685b      	ldreq	r3, [r3, #4]
 8011e00:	6063      	str	r3, [r4, #4]
 8011e02:	bf04      	itt	eq
 8011e04:	1949      	addeq	r1, r1, r5
 8011e06:	6021      	streq	r1, [r4, #0]
 8011e08:	6054      	str	r4, [r2, #4]
 8011e0a:	e7ca      	b.n	8011da2 <_free_r+0x26>
 8011e0c:	b003      	add	sp, #12
 8011e0e:	bd30      	pop	{r4, r5, pc}
 8011e10:	20001924 	.word	0x20001924

08011e14 <sbrk_aligned>:
 8011e14:	b570      	push	{r4, r5, r6, lr}
 8011e16:	4e0e      	ldr	r6, [pc, #56]	; (8011e50 <sbrk_aligned+0x3c>)
 8011e18:	460c      	mov	r4, r1
 8011e1a:	6831      	ldr	r1, [r6, #0]
 8011e1c:	4605      	mov	r5, r0
 8011e1e:	b911      	cbnz	r1, 8011e26 <sbrk_aligned+0x12>
 8011e20:	f000 f88c 	bl	8011f3c <_sbrk_r>
 8011e24:	6030      	str	r0, [r6, #0]
 8011e26:	4621      	mov	r1, r4
 8011e28:	4628      	mov	r0, r5
 8011e2a:	f000 f887 	bl	8011f3c <_sbrk_r>
 8011e2e:	1c43      	adds	r3, r0, #1
 8011e30:	d00a      	beq.n	8011e48 <sbrk_aligned+0x34>
 8011e32:	1cc4      	adds	r4, r0, #3
 8011e34:	f024 0403 	bic.w	r4, r4, #3
 8011e38:	42a0      	cmp	r0, r4
 8011e3a:	d007      	beq.n	8011e4c <sbrk_aligned+0x38>
 8011e3c:	1a21      	subs	r1, r4, r0
 8011e3e:	4628      	mov	r0, r5
 8011e40:	f000 f87c 	bl	8011f3c <_sbrk_r>
 8011e44:	3001      	adds	r0, #1
 8011e46:	d101      	bne.n	8011e4c <sbrk_aligned+0x38>
 8011e48:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8011e4c:	4620      	mov	r0, r4
 8011e4e:	bd70      	pop	{r4, r5, r6, pc}
 8011e50:	20001928 	.word	0x20001928

08011e54 <_malloc_r>:
 8011e54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011e58:	1ccd      	adds	r5, r1, #3
 8011e5a:	f025 0503 	bic.w	r5, r5, #3
 8011e5e:	3508      	adds	r5, #8
 8011e60:	2d0c      	cmp	r5, #12
 8011e62:	bf38      	it	cc
 8011e64:	250c      	movcc	r5, #12
 8011e66:	2d00      	cmp	r5, #0
 8011e68:	4607      	mov	r7, r0
 8011e6a:	db01      	blt.n	8011e70 <_malloc_r+0x1c>
 8011e6c:	42a9      	cmp	r1, r5
 8011e6e:	d905      	bls.n	8011e7c <_malloc_r+0x28>
 8011e70:	230c      	movs	r3, #12
 8011e72:	603b      	str	r3, [r7, #0]
 8011e74:	2600      	movs	r6, #0
 8011e76:	4630      	mov	r0, r6
 8011e78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011e7c:	4e2e      	ldr	r6, [pc, #184]	; (8011f38 <_malloc_r+0xe4>)
 8011e7e:	f000 f8f7 	bl	8012070 <__malloc_lock>
 8011e82:	6833      	ldr	r3, [r6, #0]
 8011e84:	461c      	mov	r4, r3
 8011e86:	bb34      	cbnz	r4, 8011ed6 <_malloc_r+0x82>
 8011e88:	4629      	mov	r1, r5
 8011e8a:	4638      	mov	r0, r7
 8011e8c:	f7ff ffc2 	bl	8011e14 <sbrk_aligned>
 8011e90:	1c43      	adds	r3, r0, #1
 8011e92:	4604      	mov	r4, r0
 8011e94:	d14d      	bne.n	8011f32 <_malloc_r+0xde>
 8011e96:	6834      	ldr	r4, [r6, #0]
 8011e98:	4626      	mov	r6, r4
 8011e9a:	2e00      	cmp	r6, #0
 8011e9c:	d140      	bne.n	8011f20 <_malloc_r+0xcc>
 8011e9e:	6823      	ldr	r3, [r4, #0]
 8011ea0:	4631      	mov	r1, r6
 8011ea2:	4638      	mov	r0, r7
 8011ea4:	eb04 0803 	add.w	r8, r4, r3
 8011ea8:	f000 f848 	bl	8011f3c <_sbrk_r>
 8011eac:	4580      	cmp	r8, r0
 8011eae:	d13a      	bne.n	8011f26 <_malloc_r+0xd2>
 8011eb0:	6821      	ldr	r1, [r4, #0]
 8011eb2:	3503      	adds	r5, #3
 8011eb4:	1a6d      	subs	r5, r5, r1
 8011eb6:	f025 0503 	bic.w	r5, r5, #3
 8011eba:	3508      	adds	r5, #8
 8011ebc:	2d0c      	cmp	r5, #12
 8011ebe:	bf38      	it	cc
 8011ec0:	250c      	movcc	r5, #12
 8011ec2:	4629      	mov	r1, r5
 8011ec4:	4638      	mov	r0, r7
 8011ec6:	f7ff ffa5 	bl	8011e14 <sbrk_aligned>
 8011eca:	3001      	adds	r0, #1
 8011ecc:	d02b      	beq.n	8011f26 <_malloc_r+0xd2>
 8011ece:	6823      	ldr	r3, [r4, #0]
 8011ed0:	442b      	add	r3, r5
 8011ed2:	6023      	str	r3, [r4, #0]
 8011ed4:	e00e      	b.n	8011ef4 <_malloc_r+0xa0>
 8011ed6:	6822      	ldr	r2, [r4, #0]
 8011ed8:	1b52      	subs	r2, r2, r5
 8011eda:	d41e      	bmi.n	8011f1a <_malloc_r+0xc6>
 8011edc:	2a0b      	cmp	r2, #11
 8011ede:	d916      	bls.n	8011f0e <_malloc_r+0xba>
 8011ee0:	1961      	adds	r1, r4, r5
 8011ee2:	42a3      	cmp	r3, r4
 8011ee4:	6025      	str	r5, [r4, #0]
 8011ee6:	bf18      	it	ne
 8011ee8:	6059      	strne	r1, [r3, #4]
 8011eea:	6863      	ldr	r3, [r4, #4]
 8011eec:	bf08      	it	eq
 8011eee:	6031      	streq	r1, [r6, #0]
 8011ef0:	5162      	str	r2, [r4, r5]
 8011ef2:	604b      	str	r3, [r1, #4]
 8011ef4:	4638      	mov	r0, r7
 8011ef6:	f104 060b 	add.w	r6, r4, #11
 8011efa:	f000 f8bf 	bl	801207c <__malloc_unlock>
 8011efe:	f026 0607 	bic.w	r6, r6, #7
 8011f02:	1d23      	adds	r3, r4, #4
 8011f04:	1af2      	subs	r2, r6, r3
 8011f06:	d0b6      	beq.n	8011e76 <_malloc_r+0x22>
 8011f08:	1b9b      	subs	r3, r3, r6
 8011f0a:	50a3      	str	r3, [r4, r2]
 8011f0c:	e7b3      	b.n	8011e76 <_malloc_r+0x22>
 8011f0e:	6862      	ldr	r2, [r4, #4]
 8011f10:	42a3      	cmp	r3, r4
 8011f12:	bf0c      	ite	eq
 8011f14:	6032      	streq	r2, [r6, #0]
 8011f16:	605a      	strne	r2, [r3, #4]
 8011f18:	e7ec      	b.n	8011ef4 <_malloc_r+0xa0>
 8011f1a:	4623      	mov	r3, r4
 8011f1c:	6864      	ldr	r4, [r4, #4]
 8011f1e:	e7b2      	b.n	8011e86 <_malloc_r+0x32>
 8011f20:	4634      	mov	r4, r6
 8011f22:	6876      	ldr	r6, [r6, #4]
 8011f24:	e7b9      	b.n	8011e9a <_malloc_r+0x46>
 8011f26:	230c      	movs	r3, #12
 8011f28:	603b      	str	r3, [r7, #0]
 8011f2a:	4638      	mov	r0, r7
 8011f2c:	f000 f8a6 	bl	801207c <__malloc_unlock>
 8011f30:	e7a1      	b.n	8011e76 <_malloc_r+0x22>
 8011f32:	6025      	str	r5, [r4, #0]
 8011f34:	e7de      	b.n	8011ef4 <_malloc_r+0xa0>
 8011f36:	bf00      	nop
 8011f38:	20001924 	.word	0x20001924

08011f3c <_sbrk_r>:
 8011f3c:	b538      	push	{r3, r4, r5, lr}
 8011f3e:	4d06      	ldr	r5, [pc, #24]	; (8011f58 <_sbrk_r+0x1c>)
 8011f40:	2300      	movs	r3, #0
 8011f42:	4604      	mov	r4, r0
 8011f44:	4608      	mov	r0, r1
 8011f46:	602b      	str	r3, [r5, #0]
 8011f48:	f7fe fd5c 	bl	8010a04 <_sbrk>
 8011f4c:	1c43      	adds	r3, r0, #1
 8011f4e:	d102      	bne.n	8011f56 <_sbrk_r+0x1a>
 8011f50:	682b      	ldr	r3, [r5, #0]
 8011f52:	b103      	cbz	r3, 8011f56 <_sbrk_r+0x1a>
 8011f54:	6023      	str	r3, [r4, #0]
 8011f56:	bd38      	pop	{r3, r4, r5, pc}
 8011f58:	2000192c 	.word	0x2000192c

08011f5c <__sread>:
 8011f5c:	b510      	push	{r4, lr}
 8011f5e:	460c      	mov	r4, r1
 8011f60:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011f64:	f000 f890 	bl	8012088 <_read_r>
 8011f68:	2800      	cmp	r0, #0
 8011f6a:	bfab      	itete	ge
 8011f6c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8011f6e:	89a3      	ldrhlt	r3, [r4, #12]
 8011f70:	181b      	addge	r3, r3, r0
 8011f72:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8011f76:	bfac      	ite	ge
 8011f78:	6563      	strge	r3, [r4, #84]	; 0x54
 8011f7a:	81a3      	strhlt	r3, [r4, #12]
 8011f7c:	bd10      	pop	{r4, pc}

08011f7e <__swrite>:
 8011f7e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011f82:	461f      	mov	r7, r3
 8011f84:	898b      	ldrh	r3, [r1, #12]
 8011f86:	05db      	lsls	r3, r3, #23
 8011f88:	4605      	mov	r5, r0
 8011f8a:	460c      	mov	r4, r1
 8011f8c:	4616      	mov	r6, r2
 8011f8e:	d505      	bpl.n	8011f9c <__swrite+0x1e>
 8011f90:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011f94:	2302      	movs	r3, #2
 8011f96:	2200      	movs	r2, #0
 8011f98:	f000 f858 	bl	801204c <_lseek_r>
 8011f9c:	89a3      	ldrh	r3, [r4, #12]
 8011f9e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8011fa2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8011fa6:	81a3      	strh	r3, [r4, #12]
 8011fa8:	4632      	mov	r2, r6
 8011faa:	463b      	mov	r3, r7
 8011fac:	4628      	mov	r0, r5
 8011fae:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8011fb2:	f000 b817 	b.w	8011fe4 <_write_r>

08011fb6 <__sseek>:
 8011fb6:	b510      	push	{r4, lr}
 8011fb8:	460c      	mov	r4, r1
 8011fba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011fbe:	f000 f845 	bl	801204c <_lseek_r>
 8011fc2:	1c43      	adds	r3, r0, #1
 8011fc4:	89a3      	ldrh	r3, [r4, #12]
 8011fc6:	bf15      	itete	ne
 8011fc8:	6560      	strne	r0, [r4, #84]	; 0x54
 8011fca:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8011fce:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8011fd2:	81a3      	strheq	r3, [r4, #12]
 8011fd4:	bf18      	it	ne
 8011fd6:	81a3      	strhne	r3, [r4, #12]
 8011fd8:	bd10      	pop	{r4, pc}

08011fda <__sclose>:
 8011fda:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011fde:	f000 b813 	b.w	8012008 <_close_r>
	...

08011fe4 <_write_r>:
 8011fe4:	b538      	push	{r3, r4, r5, lr}
 8011fe6:	4d07      	ldr	r5, [pc, #28]	; (8012004 <_write_r+0x20>)
 8011fe8:	4604      	mov	r4, r0
 8011fea:	4608      	mov	r0, r1
 8011fec:	4611      	mov	r1, r2
 8011fee:	2200      	movs	r2, #0
 8011ff0:	602a      	str	r2, [r5, #0]
 8011ff2:	461a      	mov	r2, r3
 8011ff4:	f7fe fcf8 	bl	80109e8 <_write>
 8011ff8:	1c43      	adds	r3, r0, #1
 8011ffa:	d102      	bne.n	8012002 <_write_r+0x1e>
 8011ffc:	682b      	ldr	r3, [r5, #0]
 8011ffe:	b103      	cbz	r3, 8012002 <_write_r+0x1e>
 8012000:	6023      	str	r3, [r4, #0]
 8012002:	bd38      	pop	{r3, r4, r5, pc}
 8012004:	2000192c 	.word	0x2000192c

08012008 <_close_r>:
 8012008:	b538      	push	{r3, r4, r5, lr}
 801200a:	4d06      	ldr	r5, [pc, #24]	; (8012024 <_close_r+0x1c>)
 801200c:	2300      	movs	r3, #0
 801200e:	4604      	mov	r4, r0
 8012010:	4608      	mov	r0, r1
 8012012:	602b      	str	r3, [r5, #0]
 8012014:	f7fe fd10 	bl	8010a38 <_close>
 8012018:	1c43      	adds	r3, r0, #1
 801201a:	d102      	bne.n	8012022 <_close_r+0x1a>
 801201c:	682b      	ldr	r3, [r5, #0]
 801201e:	b103      	cbz	r3, 8012022 <_close_r+0x1a>
 8012020:	6023      	str	r3, [r4, #0]
 8012022:	bd38      	pop	{r3, r4, r5, pc}
 8012024:	2000192c 	.word	0x2000192c

08012028 <_fstat_r>:
 8012028:	b538      	push	{r3, r4, r5, lr}
 801202a:	4d07      	ldr	r5, [pc, #28]	; (8012048 <_fstat_r+0x20>)
 801202c:	2300      	movs	r3, #0
 801202e:	4604      	mov	r4, r0
 8012030:	4608      	mov	r0, r1
 8012032:	4611      	mov	r1, r2
 8012034:	602b      	str	r3, [r5, #0]
 8012036:	f7fe fd02 	bl	8010a3e <_fstat>
 801203a:	1c43      	adds	r3, r0, #1
 801203c:	d102      	bne.n	8012044 <_fstat_r+0x1c>
 801203e:	682b      	ldr	r3, [r5, #0]
 8012040:	b103      	cbz	r3, 8012044 <_fstat_r+0x1c>
 8012042:	6023      	str	r3, [r4, #0]
 8012044:	bd38      	pop	{r3, r4, r5, pc}
 8012046:	bf00      	nop
 8012048:	2000192c 	.word	0x2000192c

0801204c <_lseek_r>:
 801204c:	b538      	push	{r3, r4, r5, lr}
 801204e:	4d07      	ldr	r5, [pc, #28]	; (801206c <_lseek_r+0x20>)
 8012050:	4604      	mov	r4, r0
 8012052:	4608      	mov	r0, r1
 8012054:	4611      	mov	r1, r2
 8012056:	2200      	movs	r2, #0
 8012058:	602a      	str	r2, [r5, #0]
 801205a:	461a      	mov	r2, r3
 801205c:	f7fe fcf4 	bl	8010a48 <_lseek>
 8012060:	1c43      	adds	r3, r0, #1
 8012062:	d102      	bne.n	801206a <_lseek_r+0x1e>
 8012064:	682b      	ldr	r3, [r5, #0]
 8012066:	b103      	cbz	r3, 801206a <_lseek_r+0x1e>
 8012068:	6023      	str	r3, [r4, #0]
 801206a:	bd38      	pop	{r3, r4, r5, pc}
 801206c:	2000192c 	.word	0x2000192c

08012070 <__malloc_lock>:
 8012070:	4801      	ldr	r0, [pc, #4]	; (8012078 <__malloc_lock+0x8>)
 8012072:	f7ff be53 	b.w	8011d1c <__retarget_lock_acquire_recursive>
 8012076:	bf00      	nop
 8012078:	20001920 	.word	0x20001920

0801207c <__malloc_unlock>:
 801207c:	4801      	ldr	r0, [pc, #4]	; (8012084 <__malloc_unlock+0x8>)
 801207e:	f7ff be4e 	b.w	8011d1e <__retarget_lock_release_recursive>
 8012082:	bf00      	nop
 8012084:	20001920 	.word	0x20001920

08012088 <_read_r>:
 8012088:	b538      	push	{r3, r4, r5, lr}
 801208a:	4d07      	ldr	r5, [pc, #28]	; (80120a8 <_read_r+0x20>)
 801208c:	4604      	mov	r4, r0
 801208e:	4608      	mov	r0, r1
 8012090:	4611      	mov	r1, r2
 8012092:	2200      	movs	r2, #0
 8012094:	602a      	str	r2, [r5, #0]
 8012096:	461a      	mov	r2, r3
 8012098:	f7fe fc98 	bl	80109cc <_read>
 801209c:	1c43      	adds	r3, r0, #1
 801209e:	d102      	bne.n	80120a6 <_read_r+0x1e>
 80120a0:	682b      	ldr	r3, [r5, #0]
 80120a2:	b103      	cbz	r3, 80120a6 <_read_r+0x1e>
 80120a4:	6023      	str	r3, [r4, #0]
 80120a6:	bd38      	pop	{r3, r4, r5, pc}
 80120a8:	2000192c 	.word	0x2000192c

080120ac <_init>:
 80120ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80120ae:	bf00      	nop
 80120b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80120b2:	bc08      	pop	{r3}
 80120b4:	469e      	mov	lr, r3
 80120b6:	4770      	bx	lr

080120b8 <_fini>:
 80120b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80120ba:	bf00      	nop
 80120bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80120be:	bc08      	pop	{r3}
 80120c0:	469e      	mov	lr, r3
 80120c2:	4770      	bx	lr
 80120c4:	0000      	movs	r0, r0
	...
