
SBSFU.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text.SE_CORE_Bin 00004a70  08000200  08000200  00010200  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .SE_IF_Code   0000075c  08008000  08008000  00018000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .text         000044c8  08008900  08008900  00018900  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  4 .rodata       00000ab8  0800cdc8  0800cdc8  0001cdc8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .ARM.extab    00000000  0800d880  0800d880  000210d8  2**0
                  CONTENTS
  6 .ARM          00000008  0800d880  0800d880  0001d880  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .preinit_array 00000000  0800d888  0800d888  000210d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  8 .init_array   00000008  0800d888  0800d888  0001d888  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .fini_array   00000008  0800d890  0800d890  0001d890  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .data         000000d8  20001000  0800d898  00021000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          00000b84  200010d8  0800d970  000210d8  2**3
                  ALLOC
 12 ._user_heap_stack 00002004  20001c5c  0800d970  00021c5c  2**0
                  ALLOC
 13 .ARM.attributes 00000030  00000000  00000000  000210d8  2**0
                  CONTENTS, READONLY
 14 .debug_info   00016ec3  00000000  00000000  00021108  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00005188  00000000  00000000  00037fcb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000df8  00000000  00000000  0003d158  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 000013d8  00000000  00000000  0003df50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00029956  00000000  00000000  0003f328  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0001dc49  00000000  00000000  00068c7e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000ee5f5  00000000  00000000  000868c7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000050  00000000  00000000  00174ebc  2**0
                  CONTENTS, READONLY
 22 .debug_frame  00002c38  00000000  00000000  00174f0c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_loc    0000953f  00000000  00000000  00177b44  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .SE_IF_Code:

08008000 <SE_APP_GetActiveFwInfo>:
  * @param pFwInfo Active Firmware Info structure that will be filled.
  * @retval SE_ErrorStatus SE_SUCCESS if successful, SE_ERROR otherwise.
  */
__root SE_ErrorStatus SE_APP_GetActiveFwInfo(SE_StatusTypeDef *peSE_Status, uint32_t SlotNumber,
                                             SE_APP_ActiveFwInfo_t *pFwInfo)
{
 8008000:	b570      	push	{r4, r5, r6, lr}
 8008002:	b086      	sub	sp, #24
 8008004:	4604      	mov	r4, r0
 8008006:	460d      	mov	r5, r1
 8008008:	4616      	mov	r6, r2
  SE_ErrorStatus e_ret_status;
  uint32_t primask_bit; /*!< interruption mask saved when disabling ITs then restore when re-enabling ITs */

#ifdef SFU_ISOLATE_SE_WITH_MPU
  if (0U != SE_IsUnprivileged())
 800800a:	f000 fb28 	bl	800865e <SE_IsUnprivileged>
 800800e:	b150      	cbz	r0, 8008026 <SE_APP_GetActiveFwInfo+0x26>
  {
    uint32_t params[2] = {SlotNumber, (uint32_t)pFwInfo};
    SE_SysCall(&e_ret_status, SE_APP_GET_ACTIVE_FW_INFO, peSE_Status, &params);
 8008010:	ab04      	add	r3, sp, #16
 8008012:	4622      	mov	r2, r4
 8008014:	2120      	movs	r1, #32
 8008016:	a803      	add	r0, sp, #12
    uint32_t params[2] = {SlotNumber, (uint32_t)pFwInfo};
 8008018:	e9cd 5604 	strd	r5, r6, [sp, #16]
    SE_SysCall(&e_ret_status, SE_APP_GET_ACTIVE_FW_INFO, peSE_Status, &params);
 800801c:	f000 fb29 	bl	8008672 <SE_SysCall>

#ifdef SFU_ISOLATE_SE_WITH_MPU
  }
#endif /* SFU_ISOLATE_SE_WITH_MPU */
  return e_ret_status;
}
 8008020:	9803      	ldr	r0, [sp, #12]
 8008022:	b006      	add	sp, #24
 8008024:	bd70      	pop	{r4, r5, r6, pc}
    SE_EnterSecureMode(&primask_bit);
 8008026:	a804      	add	r0, sp, #16
 8008028:	f000 fb10 	bl	800864c <SE_EnterSecureMode>
    e_ret_status = (*SE_CallGatePtr)(SE_APP_GET_ACTIVE_FW_INFO, peSE_Status, primask_bit, SlotNumber, pFwInfo);
 800802c:	4621      	mov	r1, r4
 800802e:	9a04      	ldr	r2, [sp, #16]
 8008030:	4c04      	ldr	r4, [pc, #16]	; (8008044 <SE_APP_GetActiveFwInfo+0x44>)
 8008032:	9600      	str	r6, [sp, #0]
 8008034:	462b      	mov	r3, r5
 8008036:	2020      	movs	r0, #32
 8008038:	47a0      	blx	r4
 800803a:	9003      	str	r0, [sp, #12]
    SE_ExitSecureMode(primask_bit);
 800803c:	9804      	ldr	r0, [sp, #16]
 800803e:	f000 fb0a 	bl	8008656 <SE_ExitSecureMode>
 8008042:	e7ed      	b.n	8008020 <SE_APP_GetActiveFwInfo+0x20>
 8008044:	08000205 	.word	0x08000205

08008048 <SE_APP_SVC_Handler>:


#ifdef SFU_ISOLATE_SE_WITH_MPU
__root void SE_APP_SVC_Handler(uint32_t *args)
{
  SE_SVC_Handler(args);
 8008048:	f000 bb16 	b.w	8008678 <SE_SVC_Handler>

0800804c <SE_Init>:
  *        This parameter can be a value of @ref SE_Status_Structure_definition.
  * @param uSystemCoreClock System clock value.
  * @retval SE_ErrorStatus SE_SUCCESS if successful, SE_ERROR otherwise.
  */
SE_ErrorStatus SE_Init(SE_StatusTypeDef *peSE_Status, uint32_t uSystemCoreClock)
{
 800804c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800804e:	4604      	mov	r4, r0
 8008050:	9101      	str	r1, [sp, #4]
}
#elif defined(__GNUC__)
static inline uint32_t get_LR(void)
{
  register uint32_t result;
  __asm volatile("MOV %0, LR\n" : "=r"(result));
 8008052:	4671      	mov	r1, lr
  SE_ErrorStatus e_ret_status;
  uint32_t primask_bit; /*!< interruption mask saved when disabling ITs then restore when re-enabling ITs */

  /* Check if the call is coming from SFU code */
  __IS_SFU_RESERVED();
 8008054:	4a0c      	ldr	r2, [pc, #48]	; (8008088 <SE_Init+0x3c>)
 8008056:	4291      	cmp	r1, r2
 8008058:	d314      	bcc.n	8008084 <SE_Init+0x38>
 800805a:	4671      	mov	r1, lr
 800805c:	4a0b      	ldr	r2, [pc, #44]	; (800808c <SE_Init+0x40>)
 800805e:	4291      	cmp	r1, r2
 8008060:	d810      	bhi.n	8008084 <SE_Init+0x38>

  /* Check the pointers allocation */
  if (peSE_Status == NULL)
 8008062:	b178      	cbz	r0, 8008084 <SE_Init+0x38>

  /* Set the CallGate function pointer */
  SET_CALLGATE();

  /* Enter Secure Mode */
  SE_EnterSecureMode(&primask_bit);
 8008064:	a803      	add	r0, sp, #12
 8008066:	f000 faf1 	bl	800864c <SE_EnterSecureMode>

  /* Secure Engine Call */
  e_ret_status = (*SE_CallGatePtr)(SE_INIT_ID, peSE_Status, primask_bit, uSystemCoreClock);
 800806a:	4621      	mov	r1, r4
 800806c:	9b01      	ldr	r3, [sp, #4]
 800806e:	4c08      	ldr	r4, [pc, #32]	; (8008090 <SE_Init+0x44>)
 8008070:	9a03      	ldr	r2, [sp, #12]
 8008072:	2000      	movs	r0, #0
 8008074:	47a0      	blx	r4
 8008076:	4604      	mov	r4, r0

  /* Exit Secure Mode */
  SE_ExitSecureMode(primask_bit);
 8008078:	9803      	ldr	r0, [sp, #12]
 800807a:	f000 faec 	bl	8008656 <SE_ExitSecureMode>


  return e_ret_status;
}
 800807e:	4620      	mov	r0, r4
 8008080:	b004      	add	sp, #16
 8008082:	bd10      	pop	{r4, pc}
  __IS_SFU_RESERVED();
 8008084:	4c03      	ldr	r4, [pc, #12]	; (8008094 <SE_Init+0x48>)
 8008086:	e7fa      	b.n	800807e <SE_Init+0x32>
 8008088:	08008900 	.word	0x08008900
 800808c:	0800ffff 	.word	0x0800ffff
 8008090:	08000205 	.word	0x08000205
 8008094:	00018799 	.word	0x00018799

08008098 <SE_Startup>:
  *        This function must be called only one time so an internal check is executed.
  * @param None.
  * @retval SE_ErrorStatus SE_SUCCESS if successful, SE_ERROR otherwise.
  */
SE_ErrorStatus SE_Startup(void)
{
 8008098:	b538      	push	{r3, r4, r5, lr}
 800809a:	4672      	mov	r2, lr
  SE_ErrorStatus e_ret_status;
  static uint8_t b_startup_already_done = 0U;
  static SE_ErrorStatus(*SE_StartupPtr)(void);            /*!< Secure Engine STARTUP  pointer function*/

  /* Check if the call is coming from SFU code */
  __IS_SFU_RESERVED();
 800809c:	4b0a      	ldr	r3, [pc, #40]	; (80080c8 <SE_Startup+0x30>)
 800809e:	429a      	cmp	r2, r3
 80080a0:	d30e      	bcc.n	80080c0 <SE_Startup+0x28>
 80080a2:	4672      	mov	r2, lr
 80080a4:	4b09      	ldr	r3, [pc, #36]	; (80080cc <SE_Startup+0x34>)
 80080a6:	429a      	cmp	r2, r3
 80080a8:	d80a      	bhi.n	80080c0 <SE_Startup+0x28>

  /* Need to be sure to execute this initialization only one time! */
  if (b_startup_already_done == 0U)
 80080aa:	4d09      	ldr	r5, [pc, #36]	; (80080d0 <SE_Startup+0x38>)
 80080ac:	4c09      	ldr	r4, [pc, #36]	; (80080d4 <SE_Startup+0x3c>)
 80080ae:	782b      	ldrb	r3, [r5, #0]
 80080b0:	b943      	cbnz	r3, 80080c4 <SE_Startup+0x2c>
  {
    /* Secure Core Initialization */
    SE_StartupPtr = (SE_ErrorStatus(*)(void))((uint32_t) SE_STARTUP_REGION_ROM_START + 1U);
 80080b2:	4b09      	ldr	r3, [pc, #36]	; (80080d8 <SE_Startup+0x40>)
    e_ret_status = (*SE_StartupPtr)();
 80080b4:	4798      	blx	r3
    if (e_ret_status == SE_SUCCESS)
 80080b6:	42a0      	cmp	r0, r4
 80080b8:	d101      	bne.n	80080be <SE_Startup+0x26>
    {
      b_startup_already_done = 1U;
 80080ba:	2301      	movs	r3, #1
 80080bc:	702b      	strb	r3, [r5, #0]
    /* This function has been already successfully called */
    e_ret_status = SE_SUCCESS;
  }

  return e_ret_status;
}
 80080be:	bd38      	pop	{r3, r4, r5, pc}
  __IS_SFU_RESERVED();
 80080c0:	4806      	ldr	r0, [pc, #24]	; (80080dc <SE_Startup+0x44>)
 80080c2:	e7fc      	b.n	80080be <SE_Startup+0x26>
    e_ret_status = SE_SUCCESS;
 80080c4:	4620      	mov	r0, r4
 80080c6:	e7fa      	b.n	80080be <SE_Startup+0x26>
 80080c8:	08008900 	.word	0x08008900
 80080cc:	0800ffff 	.word	0x0800ffff
 80080d0:	20001c4c 	.word	0x20001c4c
 80080d4:	0012310f 	.word	0x0012310f
 80080d8:	08000501 	.word	0x08000501
 80080dc:	00018799 	.word	0x00018799

080080e0 <SE_LockRestrictServices>:
  * @brief call by SFU to lock part of Secure Engine services
  * @param  pSE_Status Secure Engine Status.
  * @retval SE_ErrorStatus SE_SUCCESS if successful, SE_ERROR otherwise.
  */
SE_ErrorStatus SE_LockRestrictServices(SE_StatusTypeDef *pSE_Status)
{
 80080e0:	b513      	push	{r0, r1, r4, lr}
 80080e2:	4604      	mov	r4, r0
 80080e4:	4672      	mov	r2, lr
  SE_ErrorStatus e_ret_status;
  uint32_t primask_bit; /*!< interruption mask saved when disabling ITs then restore when re-enabling ITs */

  /* Check if the call is coming from SFU code */
  __IS_SFU_RESERVED();
 80080e6:	4b12      	ldr	r3, [pc, #72]	; (8008130 <SE_LockRestrictServices+0x50>)
 80080e8:	429a      	cmp	r2, r3
 80080ea:	d31e      	bcc.n	800812a <SE_LockRestrictServices+0x4a>
 80080ec:	4672      	mov	r2, lr
 80080ee:	4b11      	ldr	r3, [pc, #68]	; (8008134 <SE_LockRestrictServices+0x54>)
 80080f0:	429a      	cmp	r2, r3
 80080f2:	d81a      	bhi.n	800812a <SE_LockRestrictServices+0x4a>
#ifdef SFU_ISOLATE_SE_WITH_MPU
  if (0U != SE_IsUnprivileged())
 80080f4:	f000 fab3 	bl	800865e <SE_IsUnprivileged>
 80080f8:	b148      	cbz	r0, 800810e <SE_LockRestrictServices+0x2e>
  {
    SE_SysCall(&e_ret_status, SE_LOCK_RESTRICT_SERVICES, pSE_Status, NULL);
 80080fa:	2300      	movs	r3, #0
 80080fc:	4622      	mov	r2, r4
 80080fe:	f44f 7180 	mov.w	r1, #256	; 0x100
 8008102:	4668      	mov	r0, sp
 8008104:	f000 fab5 	bl	8008672 <SE_SysCall>
    e_ret_status = (*SE_CallGatePtr)(SE_LOCK_RESTRICT_SERVICES, pSE_Status, primask_bit);
    SE_ExitSecureMode(primask_bit);
#ifdef SFU_ISOLATE_SE_WITH_MPU
  }
#endif /* SFU_ISOLATE_SE_WITH_MPU */
  return e_ret_status;
 8008108:	9800      	ldr	r0, [sp, #0]
}
 800810a:	b002      	add	sp, #8
 800810c:	bd10      	pop	{r4, pc}
    SE_EnterSecureMode(&primask_bit);
 800810e:	a801      	add	r0, sp, #4
 8008110:	f000 fa9c 	bl	800864c <SE_EnterSecureMode>
    e_ret_status = (*SE_CallGatePtr)(SE_LOCK_RESTRICT_SERVICES, pSE_Status, primask_bit);
 8008114:	9a01      	ldr	r2, [sp, #4]
 8008116:	4b08      	ldr	r3, [pc, #32]	; (8008138 <SE_LockRestrictServices+0x58>)
 8008118:	4621      	mov	r1, r4
 800811a:	f44f 7080 	mov.w	r0, #256	; 0x100
 800811e:	4798      	blx	r3
 8008120:	9000      	str	r0, [sp, #0]
    SE_ExitSecureMode(primask_bit);
 8008122:	9801      	ldr	r0, [sp, #4]
 8008124:	f000 fa97 	bl	8008656 <SE_ExitSecureMode>
 8008128:	e7ee      	b.n	8008108 <SE_LockRestrictServices+0x28>
  __IS_SFU_RESERVED();
 800812a:	4804      	ldr	r0, [pc, #16]	; (800813c <SE_LockRestrictServices+0x5c>)
 800812c:	e7ed      	b.n	800810a <SE_LockRestrictServices+0x2a>
 800812e:	bf00      	nop
 8008130:	08008900 	.word	0x08008900
 8008134:	0800ffff 	.word	0x0800ffff
 8008138:	08000205 	.word	0x08000205
 800813c:	00018799 	.word	0x00018799

08008140 <SE_CM0_Update>:
  * @brief call by SFU to trigg FUS or wireless stack update process managed by CM0
  * @param  pSE_Status Secure Engine Status.
  * @retval SE_ErrorStatus SE_SUCCESS if successful, SE_ERROR otherwise.
  */
SE_ErrorStatus SE_CM0_Update(SE_StatusTypeDef *pSE_Status)
{
 8008140:	b513      	push	{r0, r1, r4, lr}
 8008142:	4604      	mov	r4, r0
 8008144:	4672      	mov	r2, lr
  SE_ErrorStatus e_ret_status;
  uint32_t primask_bit; /*!< interruption mask saved when disabling ITs then restore when re-enabling ITs */

  /* Check if the call is coming from SFU code */
  __IS_SFU_RESERVED();
 8008146:	4b12      	ldr	r3, [pc, #72]	; (8008190 <SE_CM0_Update+0x50>)
 8008148:	429a      	cmp	r2, r3
 800814a:	d31e      	bcc.n	800818a <SE_CM0_Update+0x4a>
 800814c:	4672      	mov	r2, lr
 800814e:	4b11      	ldr	r3, [pc, #68]	; (8008194 <SE_CM0_Update+0x54>)
 8008150:	429a      	cmp	r2, r3
 8008152:	d81a      	bhi.n	800818a <SE_CM0_Update+0x4a>
#ifdef SFU_ISOLATE_SE_WITH_MPU
  if (0U != SE_IsUnprivileged())
 8008154:	f000 fa83 	bl	800865e <SE_IsUnprivileged>
 8008158:	b148      	cbz	r0, 800816e <SE_CM0_Update+0x2e>
  {
    SE_SysCall(&e_ret_status, SE_CM0_UPDATE, pSE_Status, NULL);
 800815a:	2300      	movs	r3, #0
 800815c:	4622      	mov	r2, r4
 800815e:	f44f 7190 	mov.w	r1, #288	; 0x120
 8008162:	4668      	mov	r0, sp
 8008164:	f000 fa85 	bl	8008672 <SE_SysCall>
    e_ret_status = (*SE_CallGatePtr)(SE_CM0_UPDATE, pSE_Status, primask_bit);
    SE_ExitSecureMode(primask_bit);
#ifdef SFU_ISOLATE_SE_WITH_MPU
  }
#endif /* SFU_ISOLATE_SE_WITH_MPU */
  return e_ret_status;
 8008168:	9800      	ldr	r0, [sp, #0]
}
 800816a:	b002      	add	sp, #8
 800816c:	bd10      	pop	{r4, pc}
    SE_EnterSecureMode(&primask_bit);
 800816e:	a801      	add	r0, sp, #4
 8008170:	f000 fa6c 	bl	800864c <SE_EnterSecureMode>
    e_ret_status = (*SE_CallGatePtr)(SE_CM0_UPDATE, pSE_Status, primask_bit);
 8008174:	9a01      	ldr	r2, [sp, #4]
 8008176:	4b08      	ldr	r3, [pc, #32]	; (8008198 <SE_CM0_Update+0x58>)
 8008178:	4621      	mov	r1, r4
 800817a:	f44f 7090 	mov.w	r0, #288	; 0x120
 800817e:	4798      	blx	r3
 8008180:	9000      	str	r0, [sp, #0]
    SE_ExitSecureMode(primask_bit);
 8008182:	9801      	ldr	r0, [sp, #4]
 8008184:	f000 fa67 	bl	8008656 <SE_ExitSecureMode>
 8008188:	e7ee      	b.n	8008168 <SE_CM0_Update+0x28>
  __IS_SFU_RESERVED();
 800818a:	4804      	ldr	r0, [pc, #16]	; (800819c <SE_CM0_Update+0x5c>)
 800818c:	e7ed      	b.n	800816a <SE_CM0_Update+0x2a>
 800818e:	bf00      	nop
 8008190:	08008900 	.word	0x08008900
 8008194:	0800ffff 	.word	0x0800ffff
 8008198:	08000205 	.word	0x08000205
 800819c:	00018799 	.word	0x00018799

080081a0 <SE_ExtFlash_Decrypt_Init>:
  *        This parameter can be a value of @ref SE_Status_Structure_definition.
  * @param pxSE_Metadata Metadata that will be used to fill the Crypto Init structure.
  * @retval SE_ErrorStatus SE_SUCCESS if successful, SE_ERROR otherwise.
  */
SE_ErrorStatus SE_ExtFlash_Decrypt_Init(SE_StatusTypeDef *pSE_Status, SE_FwRawHeaderTypeDef *pxSE_Metadata)
{
 80081a0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80081a2:	4604      	mov	r4, r0
 80081a4:	460d      	mov	r5, r1
 80081a6:	4672      	mov	r2, lr
  SE_ErrorStatus e_ret_status;
  uint32_t primask_bit; /*!< interruption mask saved when disabling ITs then restore when re-enabling ITs */

  /* Check if the call is coming from SFU code */
  __IS_SFU_RESERVED();
 80081a8:	4b12      	ldr	r3, [pc, #72]	; (80081f4 <SE_ExtFlash_Decrypt_Init+0x54>)
 80081aa:	429a      	cmp	r2, r3
 80081ac:	d320      	bcc.n	80081f0 <SE_ExtFlash_Decrypt_Init+0x50>
 80081ae:	4672      	mov	r2, lr
 80081b0:	4b11      	ldr	r3, [pc, #68]	; (80081f8 <SE_ExtFlash_Decrypt_Init+0x58>)
 80081b2:	429a      	cmp	r2, r3
 80081b4:	d81c      	bhi.n	80081f0 <SE_ExtFlash_Decrypt_Init+0x50>
#ifdef SFU_ISOLATE_SE_WITH_MPU
  if (0U != SE_IsUnprivileged())
 80081b6:	f000 fa52 	bl	800865e <SE_IsUnprivileged>
 80081ba:	b150      	cbz	r0, 80081d2 <SE_ExtFlash_Decrypt_Init+0x32>
  {
    uint32_t params[1] = {(uint32_t)pxSE_Metadata};
    SE_SysCall(&e_ret_status, SE_EXTFLASH_DECRYPT_INIT, pSE_Status, &params);
 80081bc:	ab01      	add	r3, sp, #4
 80081be:	4622      	mov	r2, r4
 80081c0:	f44f 7188 	mov.w	r1, #272	; 0x110
 80081c4:	4668      	mov	r0, sp
    uint32_t params[1] = {(uint32_t)pxSE_Metadata};
 80081c6:	9501      	str	r5, [sp, #4]
    SE_SysCall(&e_ret_status, SE_EXTFLASH_DECRYPT_INIT, pSE_Status, &params);
 80081c8:	f000 fa53 	bl	8008672 <SE_SysCall>
    e_ret_status = (*SE_CallGatePtr)(SE_EXTFLASH_DECRYPT_INIT, pSE_Status, primask_bit, pxSE_Metadata);
    SE_ExitSecureMode(primask_bit);
#ifdef SFU_ISOLATE_SE_WITH_MPU
  }
#endif /* SFU_ISOLATE_SE_WITH_MPU */
  return e_ret_status;
 80081cc:	9800      	ldr	r0, [sp, #0]
}
 80081ce:	b003      	add	sp, #12
 80081d0:	bd30      	pop	{r4, r5, pc}
    SE_EnterSecureMode(&primask_bit);
 80081d2:	a801      	add	r0, sp, #4
 80081d4:	f000 fa3a 	bl	800864c <SE_EnterSecureMode>
    e_ret_status = (*SE_CallGatePtr)(SE_EXTFLASH_DECRYPT_INIT, pSE_Status, primask_bit, pxSE_Metadata);
 80081d8:	4621      	mov	r1, r4
 80081da:	9a01      	ldr	r2, [sp, #4]
 80081dc:	4c07      	ldr	r4, [pc, #28]	; (80081fc <SE_ExtFlash_Decrypt_Init+0x5c>)
 80081de:	462b      	mov	r3, r5
 80081e0:	f44f 7088 	mov.w	r0, #272	; 0x110
 80081e4:	47a0      	blx	r4
 80081e6:	9000      	str	r0, [sp, #0]
    SE_ExitSecureMode(primask_bit);
 80081e8:	9801      	ldr	r0, [sp, #4]
 80081ea:	f000 fa34 	bl	8008656 <SE_ExitSecureMode>
 80081ee:	e7ed      	b.n	80081cc <SE_ExtFlash_Decrypt_Init+0x2c>
  __IS_SFU_RESERVED();
 80081f0:	4803      	ldr	r0, [pc, #12]	; (8008200 <SE_ExtFlash_Decrypt_Init+0x60>)
 80081f2:	e7ec      	b.n	80081ce <SE_ExtFlash_Decrypt_Init+0x2e>
 80081f4:	08008900 	.word	0x08008900
 80081f8:	0800ffff 	.word	0x0800ffff
 80081fc:	08000205 	.word	0x08000205
 8008200:	00018799 	.word	0x00018799

08008204 <SE_SFU_IMG_Read>:
  * @param  Length: number of bytes to read from flash
  * @retval SE_ErrorStatus SE_SUCCESS if successful, SE_ERROR otherwise.
  */
SE_ErrorStatus SE_SFU_IMG_Read(SE_StatusTypeDef *pSE_Status, uint8_t *pDestination, const uint8_t *pSource,
                               uint32_t Length)
{
 8008204:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008206:	4604      	mov	r4, r0
 8008208:	b087      	sub	sp, #28
 800820a:	460d      	mov	r5, r1
 800820c:	4616      	mov	r6, r2
 800820e:	461f      	mov	r7, r3
 8008210:	4672      	mov	r2, lr
  SE_ErrorStatus e_ret_status;
  uint32_t primask_bit; /*!< interruption mask saved when disabling ITs then restore when re-enabling ITs */

  /* Check if the call is coming from SFU code */
  __IS_SFU_RESERVED();
 8008212:	4b14      	ldr	r3, [pc, #80]	; (8008264 <SE_SFU_IMG_Read+0x60>)
 8008214:	429a      	cmp	r2, r3
 8008216:	d322      	bcc.n	800825e <SE_SFU_IMG_Read+0x5a>
 8008218:	4672      	mov	r2, lr
 800821a:	4b13      	ldr	r3, [pc, #76]	; (8008268 <SE_SFU_IMG_Read+0x64>)
 800821c:	429a      	cmp	r2, r3
 800821e:	d81e      	bhi.n	800825e <SE_SFU_IMG_Read+0x5a>
#ifdef SFU_ISOLATE_SE_WITH_MPU
  if (0U != SE_IsUnprivileged())
 8008220:	f000 fa1d 	bl	800865e <SE_IsUnprivileged>
 8008224:	b158      	cbz	r0, 800823e <SE_SFU_IMG_Read+0x3a>
  {

    uint32_t params[3] = {(uint32_t)pDestination, (uint32_t)pSource, (uint32_t)Length};
    SE_SysCall(&e_ret_status, SE_IMG_READ, pSE_Status, &params);
 8008226:	ab03      	add	r3, sp, #12
 8008228:	4622      	mov	r2, r4
 800822a:	2192      	movs	r1, #146	; 0x92
 800822c:	a802      	add	r0, sp, #8
    uint32_t params[3] = {(uint32_t)pDestination, (uint32_t)pSource, (uint32_t)Length};
 800822e:	e9cd 5603 	strd	r5, r6, [sp, #12]
 8008232:	9705      	str	r7, [sp, #20]
    SE_SysCall(&e_ret_status, SE_IMG_READ, pSE_Status, &params);
 8008234:	f000 fa1d 	bl	8008672 <SE_SysCall>
    /* Exit Secure Mode */
    SE_ExitSecureMode(primask_bit);
#ifdef SFU_ISOLATE_SE_WITH_MPU
  }
#endif /* SFU_ISOLATE_SE_WITH_MPU */
  return e_ret_status;
 8008238:	9802      	ldr	r0, [sp, #8]
}
 800823a:	b007      	add	sp, #28
 800823c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    SE_EnterSecureMode(&primask_bit);
 800823e:	a803      	add	r0, sp, #12
 8008240:	f000 fa04 	bl	800864c <SE_EnterSecureMode>
    e_ret_status = (*SE_CallGatePtr)(SE_IMG_READ, pSE_Status, primask_bit, pDestination, pSource, Length);;
 8008244:	4621      	mov	r1, r4
 8008246:	e9cd 6700 	strd	r6, r7, [sp]
 800824a:	9a03      	ldr	r2, [sp, #12]
 800824c:	4c07      	ldr	r4, [pc, #28]	; (800826c <SE_SFU_IMG_Read+0x68>)
 800824e:	462b      	mov	r3, r5
 8008250:	2092      	movs	r0, #146	; 0x92
 8008252:	47a0      	blx	r4
 8008254:	9002      	str	r0, [sp, #8]
    SE_ExitSecureMode(primask_bit);
 8008256:	9803      	ldr	r0, [sp, #12]
 8008258:	f000 f9fd 	bl	8008656 <SE_ExitSecureMode>
 800825c:	e7ec      	b.n	8008238 <SE_SFU_IMG_Read+0x34>
  __IS_SFU_RESERVED();
 800825e:	4804      	ldr	r0, [pc, #16]	; (8008270 <SE_SFU_IMG_Read+0x6c>)
 8008260:	e7eb      	b.n	800823a <SE_SFU_IMG_Read+0x36>
 8008262:	bf00      	nop
 8008264:	08008900 	.word	0x08008900
 8008268:	0800ffff 	.word	0x0800ffff
 800826c:	08000205 	.word	0x08000205
 8008270:	00018799 	.word	0x00018799

08008274 <SE_SFU_IMG_Write>:
  * @param  Length: number of bytes to write to flash
  * @retval SE_ErrorStatus SE_SUCCESS if successful, SE_ERROR otherwise.
  */
SE_ErrorStatus SE_SFU_IMG_Write(SE_StatusTypeDef *pSE_Status, uint8_t *pDestination, const uint8_t *pSource,
                                uint32_t Length)
{
 8008274:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008276:	4604      	mov	r4, r0
 8008278:	b087      	sub	sp, #28
 800827a:	460d      	mov	r5, r1
 800827c:	4616      	mov	r6, r2
 800827e:	461f      	mov	r7, r3
 8008280:	4672      	mov	r2, lr
  SE_ErrorStatus e_ret_status;
  uint32_t primask_bit; /*!< interruption mask saved when disabling ITs then restore when re-enabling ITs */

  /* Check if the call is coming from SFU code */
  __IS_SFU_RESERVED();
 8008282:	4b14      	ldr	r3, [pc, #80]	; (80082d4 <SE_SFU_IMG_Write+0x60>)
 8008284:	429a      	cmp	r2, r3
 8008286:	d322      	bcc.n	80082ce <SE_SFU_IMG_Write+0x5a>
 8008288:	4672      	mov	r2, lr
 800828a:	4b13      	ldr	r3, [pc, #76]	; (80082d8 <SE_SFU_IMG_Write+0x64>)
 800828c:	429a      	cmp	r2, r3
 800828e:	d81e      	bhi.n	80082ce <SE_SFU_IMG_Write+0x5a>

#ifdef SFU_ISOLATE_SE_WITH_MPU
  if (0U != SE_IsUnprivileged())
 8008290:	f000 f9e5 	bl	800865e <SE_IsUnprivileged>
 8008294:	b158      	cbz	r0, 80082ae <SE_SFU_IMG_Write+0x3a>
  {
    uint32_t params[3] = {(uint32_t)pDestination, (uint32_t)pSource, (uint32_t)Length};
    SE_SysCall(&e_ret_status, SE_IMG_WRITE, pSE_Status, &params);
 8008296:	ab03      	add	r3, sp, #12
 8008298:	4622      	mov	r2, r4
 800829a:	2193      	movs	r1, #147	; 0x93
 800829c:	a802      	add	r0, sp, #8
    uint32_t params[3] = {(uint32_t)pDestination, (uint32_t)pSource, (uint32_t)Length};
 800829e:	e9cd 5603 	strd	r5, r6, [sp, #12]
 80082a2:	9705      	str	r7, [sp, #20]
    SE_SysCall(&e_ret_status, SE_IMG_WRITE, pSE_Status, &params);
 80082a4:	f000 f9e5 	bl	8008672 <SE_SysCall>
    e_ret_status = (*SE_CallGatePtr)(SE_IMG_WRITE, pSE_Status, primask_bit, pDestination, pSource, Length);
    SE_ExitSecureMode(primask_bit);
#ifdef SFU_ISOLATE_SE_WITH_MPU
  }
#endif /* SFU_ISOLATE_SE_WITH_MPU */
  return e_ret_status;
 80082a8:	9802      	ldr	r0, [sp, #8]
}
 80082aa:	b007      	add	sp, #28
 80082ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
    SE_EnterSecureMode(&primask_bit);
 80082ae:	a803      	add	r0, sp, #12
 80082b0:	f000 f9cc 	bl	800864c <SE_EnterSecureMode>
    e_ret_status = (*SE_CallGatePtr)(SE_IMG_WRITE, pSE_Status, primask_bit, pDestination, pSource, Length);
 80082b4:	4621      	mov	r1, r4
 80082b6:	e9cd 6700 	strd	r6, r7, [sp]
 80082ba:	9a03      	ldr	r2, [sp, #12]
 80082bc:	4c07      	ldr	r4, [pc, #28]	; (80082dc <SE_SFU_IMG_Write+0x68>)
 80082be:	462b      	mov	r3, r5
 80082c0:	2093      	movs	r0, #147	; 0x93
 80082c2:	47a0      	blx	r4
 80082c4:	9002      	str	r0, [sp, #8]
    SE_ExitSecureMode(primask_bit);
 80082c6:	9803      	ldr	r0, [sp, #12]
 80082c8:	f000 f9c5 	bl	8008656 <SE_ExitSecureMode>
 80082cc:	e7ec      	b.n	80082a8 <SE_SFU_IMG_Write+0x34>
  __IS_SFU_RESERVED();
 80082ce:	4804      	ldr	r0, [pc, #16]	; (80082e0 <SE_SFU_IMG_Write+0x6c>)
 80082d0:	e7eb      	b.n	80082aa <SE_SFU_IMG_Write+0x36>
 80082d2:	bf00      	nop
 80082d4:	08008900 	.word	0x08008900
 80082d8:	0800ffff 	.word	0x0800ffff
 80082dc:	08000205 	.word	0x08000205
 80082e0:	00018799 	.word	0x00018799

080082e4 <SE_SFU_IMG_Erase>:
  * @param  pDestination: pointer to flash area to erase.
  * @param  Length: number of bytes to erase in flash
  * @retval SE_ErrorStatus SE_SUCCESS if successful, SE_ERROR otherwise.
  */
SE_ErrorStatus SE_SFU_IMG_Erase(SE_StatusTypeDef *pSE_Status, uint8_t *pDestination, uint32_t Length)
{
 80082e4:	b570      	push	{r4, r5, r6, lr}
 80082e6:	4604      	mov	r4, r0
 80082e8:	b086      	sub	sp, #24
 80082ea:	460d      	mov	r5, r1
 80082ec:	4616      	mov	r6, r2
 80082ee:	4672      	mov	r2, lr
  SE_ErrorStatus e_ret_status;
  uint32_t primask_bit; /*!< interruption mask saved when disabling ITs then restore when re-enabling ITs */

  /* Check if the call is coming from SFU code */
  __IS_SFU_RESERVED();
 80082f0:	4b12      	ldr	r3, [pc, #72]	; (800833c <SE_SFU_IMG_Erase+0x58>)
 80082f2:	429a      	cmp	r2, r3
 80082f4:	d320      	bcc.n	8008338 <SE_SFU_IMG_Erase+0x54>
 80082f6:	4672      	mov	r2, lr
 80082f8:	4b11      	ldr	r3, [pc, #68]	; (8008340 <SE_SFU_IMG_Erase+0x5c>)
 80082fa:	429a      	cmp	r2, r3
 80082fc:	d81c      	bhi.n	8008338 <SE_SFU_IMG_Erase+0x54>

#ifdef SFU_ISOLATE_SE_WITH_MPU
  if (0U != SE_IsUnprivileged())
 80082fe:	f000 f9ae 	bl	800865e <SE_IsUnprivileged>
 8008302:	b150      	cbz	r0, 800831a <SE_SFU_IMG_Erase+0x36>
  {
    uint32_t params[2] = {(uint32_t)pDestination, (uint32_t)Length};
    SE_SysCall(&e_ret_status, SE_IMG_ERASE, pSE_Status, &params);
 8008304:	ab04      	add	r3, sp, #16
 8008306:	4622      	mov	r2, r4
 8008308:	2194      	movs	r1, #148	; 0x94
 800830a:	a803      	add	r0, sp, #12
    uint32_t params[2] = {(uint32_t)pDestination, (uint32_t)Length};
 800830c:	e9cd 5604 	strd	r5, r6, [sp, #16]
    SE_SysCall(&e_ret_status, SE_IMG_ERASE, pSE_Status, &params);
 8008310:	f000 f9af 	bl	8008672 <SE_SysCall>
    e_ret_status = (*SE_CallGatePtr)(SE_IMG_ERASE, pSE_Status, primask_bit, pDestination, Length);
    SE_ExitSecureMode(primask_bit);
#ifdef SFU_ISOLATE_SE_WITH_MPU
  }
#endif /* SFU_ISOLATE_SE_WITH_MPU */
  return e_ret_status;
 8008314:	9803      	ldr	r0, [sp, #12]
}
 8008316:	b006      	add	sp, #24
 8008318:	bd70      	pop	{r4, r5, r6, pc}
    SE_EnterSecureMode(&primask_bit);
 800831a:	a804      	add	r0, sp, #16
 800831c:	f000 f996 	bl	800864c <SE_EnterSecureMode>
    e_ret_status = (*SE_CallGatePtr)(SE_IMG_ERASE, pSE_Status, primask_bit, pDestination, Length);
 8008320:	4621      	mov	r1, r4
 8008322:	9a04      	ldr	r2, [sp, #16]
 8008324:	4c07      	ldr	r4, [pc, #28]	; (8008344 <SE_SFU_IMG_Erase+0x60>)
 8008326:	9600      	str	r6, [sp, #0]
 8008328:	462b      	mov	r3, r5
 800832a:	2094      	movs	r0, #148	; 0x94
 800832c:	47a0      	blx	r4
 800832e:	9003      	str	r0, [sp, #12]
    SE_ExitSecureMode(primask_bit);
 8008330:	9804      	ldr	r0, [sp, #16]
 8008332:	f000 f990 	bl	8008656 <SE_ExitSecureMode>
 8008336:	e7ed      	b.n	8008314 <SE_SFU_IMG_Erase+0x30>
  __IS_SFU_RESERVED();
 8008338:	4803      	ldr	r0, [pc, #12]	; (8008348 <SE_SFU_IMG_Erase+0x64>)
 800833a:	e7ec      	b.n	8008316 <SE_SFU_IMG_Erase+0x32>
 800833c:	08008900 	.word	0x08008900
 8008340:	0800ffff 	.word	0x0800ffff
 8008344:	08000205 	.word	0x08000205
 8008348:	00018799 	.word	0x00018799

0800834c <SE_Decrypt_Init>:
  * @param SE_FwType Type of Fw Image.
  *        This parameter can be SE_FW_IMAGE_COMPLETE or SE_FW_IMAGE_PARTIAL.
  * @retval SE_ErrorStatus SE_SUCCESS if successful, SE_ERROR otherwise.
  */
SE_ErrorStatus SE_Decrypt_Init(SE_StatusTypeDef *peSE_Status, SE_FwRawHeaderTypeDef *pxSE_Metadata, uint32_t SE_FwType)
{
 800834c:	b570      	push	{r4, r5, r6, lr}
 800834e:	4605      	mov	r5, r0
 8008350:	b086      	sub	sp, #24
 8008352:	460e      	mov	r6, r1
 8008354:	4614      	mov	r4, r2
 8008356:	4672      	mov	r2, lr
  SE_ErrorStatus e_ret_status;
  uint32_t primask_bit; /*!< interruption mask saved when disabling ITs then restore when re-enabling ITs */

  /* Check if the call is coming from SFU code */
  __IS_SFU_RESERVED();
 8008358:	4b13      	ldr	r3, [pc, #76]	; (80083a8 <SE_Decrypt_Init+0x5c>)
 800835a:	429a      	cmp	r2, r3
 800835c:	d322      	bcc.n	80083a4 <SE_Decrypt_Init+0x58>
 800835e:	4672      	mov	r2, lr
 8008360:	4b12      	ldr	r3, [pc, #72]	; (80083ac <SE_Decrypt_Init+0x60>)
 8008362:	429a      	cmp	r2, r3
 8008364:	d81e      	bhi.n	80083a4 <SE_Decrypt_Init+0x58>

  /* Check the parameter */
  if ((SE_FwType != SE_FW_IMAGE_COMPLETE) && (SE_FwType != SE_FW_IMAGE_PARTIAL))
 8008366:	2c01      	cmp	r4, #1
 8008368:	d81c      	bhi.n	80083a4 <SE_Decrypt_Init+0x58>
  {
    return SE_ERROR;
  }

#ifdef SFU_ISOLATE_SE_WITH_MPU
  if (0U != SE_IsUnprivileged())
 800836a:	f000 f978 	bl	800865e <SE_IsUnprivileged>
 800836e:	b150      	cbz	r0, 8008386 <SE_Decrypt_Init+0x3a>
  {
    uint32_t params[2] = {(uint32_t)pxSE_Metadata, (uint32_t)SE_FwType};
    SE_SysCall(&e_ret_status, SE_CRYPTO_LL_DECRYPT_INIT_ID, peSE_Status, &params);
 8008370:	ab04      	add	r3, sp, #16
 8008372:	462a      	mov	r2, r5
 8008374:	2104      	movs	r1, #4
 8008376:	a803      	add	r0, sp, #12
    uint32_t params[2] = {(uint32_t)pxSE_Metadata, (uint32_t)SE_FwType};
 8008378:	e9cd 6404 	strd	r6, r4, [sp, #16]
    SE_SysCall(&e_ret_status, SE_CRYPTO_LL_DECRYPT_INIT_ID, peSE_Status, &params);
 800837c:	f000 f979 	bl	8008672 <SE_SysCall>
    /* Exit Secure Mode */
    SE_ExitSecureMode(primask_bit);
#ifdef SFU_ISOLATE_SE_WITH_MPU
  }
#endif /* SFU_ISOLATE_SE_WITH_MPU */
  return e_ret_status;
 8008380:	9803      	ldr	r0, [sp, #12]
}
 8008382:	b006      	add	sp, #24
 8008384:	bd70      	pop	{r4, r5, r6, pc}
    SE_EnterSecureMode(&primask_bit);
 8008386:	a804      	add	r0, sp, #16
 8008388:	f000 f960 	bl	800864c <SE_EnterSecureMode>
    e_ret_status = (*SE_CallGatePtr)(SE_CRYPTO_LL_DECRYPT_INIT_ID, peSE_Status, primask_bit, pxSE_Metadata, SE_FwType);
 800838c:	9400      	str	r4, [sp, #0]
 800838e:	9a04      	ldr	r2, [sp, #16]
 8008390:	4c07      	ldr	r4, [pc, #28]	; (80083b0 <SE_Decrypt_Init+0x64>)
 8008392:	4633      	mov	r3, r6
 8008394:	4629      	mov	r1, r5
 8008396:	2004      	movs	r0, #4
 8008398:	47a0      	blx	r4
 800839a:	9003      	str	r0, [sp, #12]
    SE_ExitSecureMode(primask_bit);
 800839c:	9804      	ldr	r0, [sp, #16]
 800839e:	f000 f95a 	bl	8008656 <SE_ExitSecureMode>
 80083a2:	e7ed      	b.n	8008380 <SE_Decrypt_Init+0x34>
  __IS_SFU_RESERVED();
 80083a4:	4803      	ldr	r0, [pc, #12]	; (80083b4 <SE_Decrypt_Init+0x68>)
 80083a6:	e7ec      	b.n	8008382 <SE_Decrypt_Init+0x36>
 80083a8:	08008900 	.word	0x08008900
 80083ac:	0800ffff 	.word	0x0800ffff
 80083b0:	08000205 	.word	0x08000205
 80083b4:	00018799 	.word	0x00018799

080083b8 <SE_Decrypt_Append>:
  * @param pOutputSize pointer to Output Size (bytes).
  * @retval SE_ErrorStatus SE_SUCCESS if successful, SE_ERROR otherwise.
  */
SE_ErrorStatus SE_Decrypt_Append(SE_StatusTypeDef *peSE_Status, const uint8_t *pInputBuffer, int32_t InputSize,
                                 uint8_t *pOutputBuffer, int32_t *pOutputSize)
{
 80083b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80083bc:	b08a      	sub	sp, #40	; 0x28
 80083be:	4604      	mov	r4, r0
 80083c0:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
 80083c4:	460d      	mov	r5, r1
 80083c6:	4616      	mov	r6, r2
 80083c8:	461f      	mov	r7, r3
 80083ca:	4672      	mov	r2, lr
  SE_ErrorStatus e_ret_status;
  uint32_t primask_bit; /*!< interruption mask saved when disabling ITs then restore when re-enabling ITs */

  /* Check if the call is coming from SFU code */
  __IS_SFU_RESERVED();
 80083cc:	4b15      	ldr	r3, [pc, #84]	; (8008424 <SE_Decrypt_Append+0x6c>)
 80083ce:	429a      	cmp	r2, r3
 80083d0:	d325      	bcc.n	800841e <SE_Decrypt_Append+0x66>
 80083d2:	4672      	mov	r2, lr
 80083d4:	4b14      	ldr	r3, [pc, #80]	; (8008428 <SE_Decrypt_Append+0x70>)
 80083d6:	429a      	cmp	r2, r3
 80083d8:	d821      	bhi.n	800841e <SE_Decrypt_Append+0x66>

#ifdef SFU_ISOLATE_SE_WITH_MPU
  if (0U != SE_IsUnprivileged())
 80083da:	f000 f940 	bl	800865e <SE_IsUnprivileged>
 80083de:	b168      	cbz	r0, 80083fc <SE_Decrypt_Append+0x44>
  {
    uint32_t params[4] = {(uint32_t)pInputBuffer, (uint32_t)InputSize, (uint32_t)pOutputBuffer, (uint32_t)pOutputSize};
    SE_SysCall(&e_ret_status, SE_CRYPTO_LL_DECRYPT_APPEND_ID, peSE_Status, &params);
 80083e0:	ab06      	add	r3, sp, #24
 80083e2:	4622      	mov	r2, r4
 80083e4:	2105      	movs	r1, #5
 80083e6:	a805      	add	r0, sp, #20
    uint32_t params[4] = {(uint32_t)pInputBuffer, (uint32_t)InputSize, (uint32_t)pOutputBuffer, (uint32_t)pOutputSize};
 80083e8:	e9cd 5606 	strd	r5, r6, [sp, #24]
 80083ec:	e9cd 7808 	strd	r7, r8, [sp, #32]
    SE_SysCall(&e_ret_status, SE_CRYPTO_LL_DECRYPT_APPEND_ID, peSE_Status, &params);
 80083f0:	f000 f93f 	bl	8008672 <SE_SysCall>
    /* Exit Secure Mode */
    SE_ExitSecureMode(primask_bit);
#ifdef SFU_ISOLATE_SE_WITH_MPU
  }
#endif /* SFU_ISOLATE_SE_WITH_MPU */
  return e_ret_status;
 80083f4:	9805      	ldr	r0, [sp, #20]
}
 80083f6:	b00a      	add	sp, #40	; 0x28
 80083f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    SE_EnterSecureMode(&primask_bit);
 80083fc:	a806      	add	r0, sp, #24
 80083fe:	f000 f925 	bl	800864c <SE_EnterSecureMode>
    e_ret_status = (*SE_CallGatePtr)(SE_CRYPTO_LL_DECRYPT_APPEND_ID, peSE_Status, primask_bit, pInputBuffer, InputSize,
 8008402:	4621      	mov	r1, r4
 8008404:	e9cd 7801 	strd	r7, r8, [sp, #4]
 8008408:	9a06      	ldr	r2, [sp, #24]
 800840a:	4c08      	ldr	r4, [pc, #32]	; (800842c <SE_Decrypt_Append+0x74>)
 800840c:	9600      	str	r6, [sp, #0]
 800840e:	462b      	mov	r3, r5
 8008410:	2005      	movs	r0, #5
 8008412:	47a0      	blx	r4
 8008414:	9005      	str	r0, [sp, #20]
    SE_ExitSecureMode(primask_bit);
 8008416:	9806      	ldr	r0, [sp, #24]
 8008418:	f000 f91d 	bl	8008656 <SE_ExitSecureMode>
 800841c:	e7ea      	b.n	80083f4 <SE_Decrypt_Append+0x3c>
  __IS_SFU_RESERVED();
 800841e:	4804      	ldr	r0, [pc, #16]	; (8008430 <SE_Decrypt_Append+0x78>)
 8008420:	e7e9      	b.n	80083f6 <SE_Decrypt_Append+0x3e>
 8008422:	bf00      	nop
 8008424:	08008900 	.word	0x08008900
 8008428:	0800ffff 	.word	0x0800ffff
 800842c:	08000205 	.word	0x08000205
 8008430:	00018799 	.word	0x00018799

08008434 <SE_Decrypt_Finish>:
  * @param pOutputBuffer pointer to Output Buffer.
  * @param pOutputSize pointer to Output Size (bytes).
  * @retval SE_ErrorStatus SE_SUCCESS if successful, SE_ERROR otherwise.
  */
SE_ErrorStatus SE_Decrypt_Finish(SE_StatusTypeDef *peSE_Status, uint8_t *pOutputBuffer, int32_t *pOutputSize)
{
 8008434:	b570      	push	{r4, r5, r6, lr}
 8008436:	4604      	mov	r4, r0
 8008438:	b086      	sub	sp, #24
 800843a:	460d      	mov	r5, r1
 800843c:	4616      	mov	r6, r2
 800843e:	4672      	mov	r2, lr
  SE_ErrorStatus e_ret_status;
  uint32_t primask_bit; /*!< interruption mask saved when disabling ITs then restore when re-enabling ITs */

  /* Check if the call is coming from SFU code */
  __IS_SFU_RESERVED();
 8008440:	4b12      	ldr	r3, [pc, #72]	; (800848c <SE_Decrypt_Finish+0x58>)
 8008442:	429a      	cmp	r2, r3
 8008444:	d320      	bcc.n	8008488 <SE_Decrypt_Finish+0x54>
 8008446:	4672      	mov	r2, lr
 8008448:	4b11      	ldr	r3, [pc, #68]	; (8008490 <SE_Decrypt_Finish+0x5c>)
 800844a:	429a      	cmp	r2, r3
 800844c:	d81c      	bhi.n	8008488 <SE_Decrypt_Finish+0x54>

#ifdef SFU_ISOLATE_SE_WITH_MPU
  if (0U != SE_IsUnprivileged())
 800844e:	f000 f906 	bl	800865e <SE_IsUnprivileged>
 8008452:	b150      	cbz	r0, 800846a <SE_Decrypt_Finish+0x36>
  {
    uint32_t params[2] = {(uint32_t)pOutputBuffer, (uint32_t)pOutputSize};
    SE_SysCall(&e_ret_status, SE_CRYPTO_LL_DECRYPT_FINISH_ID, peSE_Status, &params);
 8008454:	ab04      	add	r3, sp, #16
 8008456:	4622      	mov	r2, r4
 8008458:	2106      	movs	r1, #6
 800845a:	a803      	add	r0, sp, #12
    uint32_t params[2] = {(uint32_t)pOutputBuffer, (uint32_t)pOutputSize};
 800845c:	e9cd 5604 	strd	r5, r6, [sp, #16]
    SE_SysCall(&e_ret_status, SE_CRYPTO_LL_DECRYPT_FINISH_ID, peSE_Status, &params);
 8008460:	f000 f907 	bl	8008672 <SE_SysCall>
    /* Exit Secure Mode */
    SE_ExitSecureMode(primask_bit);
#ifdef SFU_ISOLATE_SE_WITH_MPU
  }
#endif /* SFU_ISOLATE_SE_WITH_MPU */
  return e_ret_status;
 8008464:	9803      	ldr	r0, [sp, #12]
}
 8008466:	b006      	add	sp, #24
 8008468:	bd70      	pop	{r4, r5, r6, pc}
    SE_EnterSecureMode(&primask_bit);
 800846a:	a804      	add	r0, sp, #16
 800846c:	f000 f8ee 	bl	800864c <SE_EnterSecureMode>
    e_ret_status = (*SE_CallGatePtr)(SE_CRYPTO_LL_DECRYPT_FINISH_ID, peSE_Status, primask_bit, pOutputBuffer,
 8008470:	4621      	mov	r1, r4
 8008472:	9a04      	ldr	r2, [sp, #16]
 8008474:	4c07      	ldr	r4, [pc, #28]	; (8008494 <SE_Decrypt_Finish+0x60>)
 8008476:	9600      	str	r6, [sp, #0]
 8008478:	462b      	mov	r3, r5
 800847a:	2006      	movs	r0, #6
 800847c:	47a0      	blx	r4
 800847e:	9003      	str	r0, [sp, #12]
    SE_ExitSecureMode(primask_bit);
 8008480:	9804      	ldr	r0, [sp, #16]
 8008482:	f000 f8e8 	bl	8008656 <SE_ExitSecureMode>
 8008486:	e7ed      	b.n	8008464 <SE_Decrypt_Finish+0x30>
  __IS_SFU_RESERVED();
 8008488:	4803      	ldr	r0, [pc, #12]	; (8008498 <SE_Decrypt_Finish+0x64>)
 800848a:	e7ec      	b.n	8008466 <SE_Decrypt_Finish+0x32>
 800848c:	08008900 	.word	0x08008900
 8008490:	0800ffff 	.word	0x0800ffff
 8008494:	08000205 	.word	0x08000205
 8008498:	00018799 	.word	0x00018799

0800849c <SE_AuthenticateFW_Init>:
  *        This parameter can be SE_FW_IMAGE_COMPLETE or SE_FW_IMAGE_PARTIAL.
  * @retval SE_ErrorStatus SE_SUCCESS if successful, SE_ERROR otherwise.
  */
SE_ErrorStatus SE_AuthenticateFW_Init(SE_StatusTypeDef *peSE_Status, SE_FwRawHeaderTypeDef *pxSE_Metadata,
                                      uint32_t SE_FwType)
{
 800849c:	b570      	push	{r4, r5, r6, lr}
 800849e:	4605      	mov	r5, r0
 80084a0:	b086      	sub	sp, #24
 80084a2:	460e      	mov	r6, r1
 80084a4:	4614      	mov	r4, r2
 80084a6:	4672      	mov	r2, lr
  SE_ErrorStatus e_ret_status;
  uint32_t primask_bit; /*!< interruption mask saved when disabling ITs then restore when re-enabling ITs */

  /* Check if the call is coming from SFU code */
  __IS_SFU_RESERVED();
 80084a8:	4b13      	ldr	r3, [pc, #76]	; (80084f8 <SE_AuthenticateFW_Init+0x5c>)
 80084aa:	429a      	cmp	r2, r3
 80084ac:	d322      	bcc.n	80084f4 <SE_AuthenticateFW_Init+0x58>
 80084ae:	4672      	mov	r2, lr
 80084b0:	4b12      	ldr	r3, [pc, #72]	; (80084fc <SE_AuthenticateFW_Init+0x60>)
 80084b2:	429a      	cmp	r2, r3
 80084b4:	d81e      	bhi.n	80084f4 <SE_AuthenticateFW_Init+0x58>

  /* Check the parameter */
  if ((SE_FwType != SE_FW_IMAGE_COMPLETE) && (SE_FwType != SE_FW_IMAGE_PARTIAL))
 80084b6:	2c01      	cmp	r4, #1
 80084b8:	d81c      	bhi.n	80084f4 <SE_AuthenticateFW_Init+0x58>
  {
    return SE_ERROR;
  }

#ifdef SFU_ISOLATE_SE_WITH_MPU
  if (0U != SE_IsUnprivileged())
 80084ba:	f000 f8d0 	bl	800865e <SE_IsUnprivileged>
 80084be:	b150      	cbz	r0, 80084d6 <SE_AuthenticateFW_Init+0x3a>
  {
    uint32_t params[2] = {(uint32_t)pxSE_Metadata, (uint32_t)SE_FwType};
    SE_SysCall(&e_ret_status, SE_CRYPTO_LL_AUTHENTICATE_FW_INIT_ID, peSE_Status, &params);
 80084c0:	ab04      	add	r3, sp, #16
 80084c2:	462a      	mov	r2, r5
 80084c4:	2107      	movs	r1, #7
 80084c6:	a803      	add	r0, sp, #12
    uint32_t params[2] = {(uint32_t)pxSE_Metadata, (uint32_t)SE_FwType};
 80084c8:	e9cd 6404 	strd	r6, r4, [sp, #16]
    SE_SysCall(&e_ret_status, SE_CRYPTO_LL_AUTHENTICATE_FW_INIT_ID, peSE_Status, &params);
 80084cc:	f000 f8d1 	bl	8008672 <SE_SysCall>
    SE_ExitSecureMode(primask_bit);
#ifdef SFU_ISOLATE_SE_WITH_MPU
  }
#endif /* SFU_ISOLATE_SE_WITH_MPU */

  return e_ret_status;
 80084d0:	9803      	ldr	r0, [sp, #12]
}
 80084d2:	b006      	add	sp, #24
 80084d4:	bd70      	pop	{r4, r5, r6, pc}
    SE_EnterSecureMode(&primask_bit);
 80084d6:	a804      	add	r0, sp, #16
 80084d8:	f000 f8b8 	bl	800864c <SE_EnterSecureMode>
    e_ret_status = (*SE_CallGatePtr)(SE_CRYPTO_LL_AUTHENTICATE_FW_INIT_ID, peSE_Status, primask_bit, pxSE_Metadata,
 80084dc:	9400      	str	r4, [sp, #0]
 80084de:	9a04      	ldr	r2, [sp, #16]
 80084e0:	4c07      	ldr	r4, [pc, #28]	; (8008500 <SE_AuthenticateFW_Init+0x64>)
 80084e2:	4633      	mov	r3, r6
 80084e4:	4629      	mov	r1, r5
 80084e6:	2007      	movs	r0, #7
 80084e8:	47a0      	blx	r4
 80084ea:	9003      	str	r0, [sp, #12]
    SE_ExitSecureMode(primask_bit);
 80084ec:	9804      	ldr	r0, [sp, #16]
 80084ee:	f000 f8b2 	bl	8008656 <SE_ExitSecureMode>
 80084f2:	e7ed      	b.n	80084d0 <SE_AuthenticateFW_Init+0x34>
  __IS_SFU_RESERVED();
 80084f4:	4803      	ldr	r0, [pc, #12]	; (8008504 <SE_AuthenticateFW_Init+0x68>)
 80084f6:	e7ec      	b.n	80084d2 <SE_AuthenticateFW_Init+0x36>
 80084f8:	08008900 	.word	0x08008900
 80084fc:	0800ffff 	.word	0x0800ffff
 8008500:	08000205 	.word	0x08000205
 8008504:	00018799 	.word	0x00018799

08008508 <SE_AuthenticateFW_Append>:
  * @param pOutputSize pointer to Output Size (bytes).
  * @retval SE_ErrorStatus SE_SUCCESS if successful, SE_ERROR otherwise.
  */
SE_ErrorStatus SE_AuthenticateFW_Append(SE_StatusTypeDef *peSE_Status, const uint8_t *pInputBuffer, int32_t InputSize,
                                        uint8_t *pOutputBuffer, int32_t *pOutputSize)
{
 8008508:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800850c:	b08a      	sub	sp, #40	; 0x28
 800850e:	4604      	mov	r4, r0
 8008510:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
 8008514:	460d      	mov	r5, r1
 8008516:	4616      	mov	r6, r2
 8008518:	461f      	mov	r7, r3
 800851a:	4672      	mov	r2, lr
  SE_ErrorStatus e_ret_status;
  uint32_t primask_bit; /*!< interruption mask saved when disabling ITs then restore when re-enabling ITs */

  /* Check if the call is coming from SFU code */
  __IS_SFU_RESERVED();
 800851c:	4b15      	ldr	r3, [pc, #84]	; (8008574 <SE_AuthenticateFW_Append+0x6c>)
 800851e:	429a      	cmp	r2, r3
 8008520:	d325      	bcc.n	800856e <SE_AuthenticateFW_Append+0x66>
 8008522:	4672      	mov	r2, lr
 8008524:	4b14      	ldr	r3, [pc, #80]	; (8008578 <SE_AuthenticateFW_Append+0x70>)
 8008526:	429a      	cmp	r2, r3
 8008528:	d821      	bhi.n	800856e <SE_AuthenticateFW_Append+0x66>

#ifdef SFU_ISOLATE_SE_WITH_MPU
  if (0U != SE_IsUnprivileged())
 800852a:	f000 f898 	bl	800865e <SE_IsUnprivileged>
 800852e:	b168      	cbz	r0, 800854c <SE_AuthenticateFW_Append+0x44>
  {
    uint32_t params[4] = {(uint32_t)pInputBuffer, (uint32_t)InputSize, (uint32_t)pOutputBuffer, (uint32_t)pOutputSize};
    SE_SysCall(&e_ret_status, SE_CRYPTO_LL_AUTHENTICATE_FW_APPEND_ID, peSE_Status, &params);
 8008530:	ab06      	add	r3, sp, #24
 8008532:	4622      	mov	r2, r4
 8008534:	2108      	movs	r1, #8
 8008536:	a805      	add	r0, sp, #20
    uint32_t params[4] = {(uint32_t)pInputBuffer, (uint32_t)InputSize, (uint32_t)pOutputBuffer, (uint32_t)pOutputSize};
 8008538:	e9cd 5606 	strd	r5, r6, [sp, #24]
 800853c:	e9cd 7808 	strd	r7, r8, [sp, #32]
    SE_SysCall(&e_ret_status, SE_CRYPTO_LL_AUTHENTICATE_FW_APPEND_ID, peSE_Status, &params);
 8008540:	f000 f897 	bl	8008672 <SE_SysCall>
    SE_ExitSecureMode(primask_bit);
#ifdef SFU_ISOLATE_SE_WITH_MPU
  }
#endif /* SFU_ISOLATE_SE_WITH_MPU */

  return e_ret_status;
 8008544:	9805      	ldr	r0, [sp, #20]
}
 8008546:	b00a      	add	sp, #40	; 0x28
 8008548:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    SE_EnterSecureMode(&primask_bit);
 800854c:	a806      	add	r0, sp, #24
 800854e:	f000 f87d 	bl	800864c <SE_EnterSecureMode>
    e_ret_status = (*SE_CallGatePtr)(SE_CRYPTO_LL_AUTHENTICATE_FW_APPEND_ID, peSE_Status, primask_bit, pInputBuffer,
 8008552:	4621      	mov	r1, r4
 8008554:	e9cd 7801 	strd	r7, r8, [sp, #4]
 8008558:	9a06      	ldr	r2, [sp, #24]
 800855a:	4c08      	ldr	r4, [pc, #32]	; (800857c <SE_AuthenticateFW_Append+0x74>)
 800855c:	9600      	str	r6, [sp, #0]
 800855e:	462b      	mov	r3, r5
 8008560:	2008      	movs	r0, #8
 8008562:	47a0      	blx	r4
 8008564:	9005      	str	r0, [sp, #20]
    SE_ExitSecureMode(primask_bit);
 8008566:	9806      	ldr	r0, [sp, #24]
 8008568:	f000 f875 	bl	8008656 <SE_ExitSecureMode>
 800856c:	e7ea      	b.n	8008544 <SE_AuthenticateFW_Append+0x3c>
  __IS_SFU_RESERVED();
 800856e:	4804      	ldr	r0, [pc, #16]	; (8008580 <SE_AuthenticateFW_Append+0x78>)
 8008570:	e7e9      	b.n	8008546 <SE_AuthenticateFW_Append+0x3e>
 8008572:	bf00      	nop
 8008574:	08008900 	.word	0x08008900
 8008578:	0800ffff 	.word	0x0800ffff
 800857c:	08000205 	.word	0x08000205
 8008580:	00018799 	.word	0x00018799

08008584 <SE_AuthenticateFW_Finish>:
  * @param pOutputBuffer pointer to Output Buffer.
  * @param pOutputSize pointer to Output Size (bytes).
  * @retval SE_ErrorStatus SE_SUCCESS if successful, SE_ERROR otherwise.
  */
SE_ErrorStatus SE_AuthenticateFW_Finish(SE_StatusTypeDef *peSE_Status, uint8_t *pOutputBuffer, int32_t *pOutputSize)
{
 8008584:	b570      	push	{r4, r5, r6, lr}
 8008586:	4604      	mov	r4, r0
 8008588:	b086      	sub	sp, #24
 800858a:	460d      	mov	r5, r1
 800858c:	4616      	mov	r6, r2
 800858e:	4672      	mov	r2, lr
  SE_ErrorStatus e_ret_status;
  uint32_t primask_bit; /*!< interruption mask saved when disabling ITs then restore when re-enabling ITs */

  /* Check if the call is coming from SFU code */
  __IS_SFU_RESERVED();
 8008590:	4b12      	ldr	r3, [pc, #72]	; (80085dc <SE_AuthenticateFW_Finish+0x58>)
 8008592:	429a      	cmp	r2, r3
 8008594:	d320      	bcc.n	80085d8 <SE_AuthenticateFW_Finish+0x54>
 8008596:	4672      	mov	r2, lr
 8008598:	4b11      	ldr	r3, [pc, #68]	; (80085e0 <SE_AuthenticateFW_Finish+0x5c>)
 800859a:	429a      	cmp	r2, r3
 800859c:	d81c      	bhi.n	80085d8 <SE_AuthenticateFW_Finish+0x54>

#ifdef SFU_ISOLATE_SE_WITH_MPU
  if (0U != SE_IsUnprivileged())
 800859e:	f000 f85e 	bl	800865e <SE_IsUnprivileged>
 80085a2:	b150      	cbz	r0, 80085ba <SE_AuthenticateFW_Finish+0x36>
  {
    uint32_t params[2] = {(uint32_t)pOutputBuffer, (uint32_t)pOutputSize};
    SE_SysCall(&e_ret_status, SE_CRYPTO_LL_AUTHENTICATE_FW_FINISH_ID, peSE_Status, &params);
 80085a4:	ab04      	add	r3, sp, #16
 80085a6:	4622      	mov	r2, r4
 80085a8:	2109      	movs	r1, #9
 80085aa:	a803      	add	r0, sp, #12
    uint32_t params[2] = {(uint32_t)pOutputBuffer, (uint32_t)pOutputSize};
 80085ac:	e9cd 5604 	strd	r5, r6, [sp, #16]
    SE_SysCall(&e_ret_status, SE_CRYPTO_LL_AUTHENTICATE_FW_FINISH_ID, peSE_Status, &params);
 80085b0:	f000 f85f 	bl	8008672 <SE_SysCall>
    SE_ExitSecureMode(primask_bit);
#ifdef SFU_ISOLATE_SE_WITH_MPU
  }
#endif /* SFU_ISOLATE_SE_WITH_MPU */

  return e_ret_status;
 80085b4:	9803      	ldr	r0, [sp, #12]
}
 80085b6:	b006      	add	sp, #24
 80085b8:	bd70      	pop	{r4, r5, r6, pc}
    SE_EnterSecureMode(&primask_bit);
 80085ba:	a804      	add	r0, sp, #16
 80085bc:	f000 f846 	bl	800864c <SE_EnterSecureMode>
    e_ret_status = (*SE_CallGatePtr)(SE_CRYPTO_LL_AUTHENTICATE_FW_FINISH_ID, peSE_Status, primask_bit, pOutputBuffer,
 80085c0:	4621      	mov	r1, r4
 80085c2:	9a04      	ldr	r2, [sp, #16]
 80085c4:	4c07      	ldr	r4, [pc, #28]	; (80085e4 <SE_AuthenticateFW_Finish+0x60>)
 80085c6:	9600      	str	r6, [sp, #0]
 80085c8:	462b      	mov	r3, r5
 80085ca:	2009      	movs	r0, #9
 80085cc:	47a0      	blx	r4
 80085ce:	9003      	str	r0, [sp, #12]
    SE_ExitSecureMode(primask_bit);
 80085d0:	9804      	ldr	r0, [sp, #16]
 80085d2:	f000 f840 	bl	8008656 <SE_ExitSecureMode>
 80085d6:	e7ed      	b.n	80085b4 <SE_AuthenticateFW_Finish+0x30>
  __IS_SFU_RESERVED();
 80085d8:	4803      	ldr	r0, [pc, #12]	; (80085e8 <SE_AuthenticateFW_Finish+0x64>)
 80085da:	e7ec      	b.n	80085b6 <SE_AuthenticateFW_Finish+0x32>
 80085dc:	08008900 	.word	0x08008900
 80085e0:	0800ffff 	.word	0x0800ffff
 80085e4:	08000205 	.word	0x08000205
 80085e8:	00018799 	.word	0x00018799

080085ec <SE_VerifyHeaderSignature>:
  *        This parameter can be a value of @ref SE_Status_Structure_definition.
  * @param pxFwRawHeader pointer to RawHeader Buffer.
  * @retval SE_ErrorStatus SE_SUCCESS if successful, SE_ERROR otherwise.
  */
SE_ErrorStatus SE_VerifyHeaderSignature(SE_StatusTypeDef *peSE_Status, SE_FwRawHeaderTypeDef *pxFwRawHeader)
{
 80085ec:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80085ee:	4604      	mov	r4, r0
 80085f0:	460d      	mov	r5, r1
 80085f2:	4672      	mov	r2, lr
  SE_ErrorStatus e_ret_status;
  uint32_t primask_bit; /*!< interruption mask saved when disabling ITs then restore when re-enabling ITs */

  /* Check if the call is coming from SFU code */
  __IS_SFU_RESERVED();
 80085f4:	4b11      	ldr	r3, [pc, #68]	; (800863c <SE_VerifyHeaderSignature+0x50>)
 80085f6:	429a      	cmp	r2, r3
 80085f8:	d31e      	bcc.n	8008638 <SE_VerifyHeaderSignature+0x4c>
 80085fa:	4672      	mov	r2, lr
 80085fc:	4b10      	ldr	r3, [pc, #64]	; (8008640 <SE_VerifyHeaderSignature+0x54>)
 80085fe:	429a      	cmp	r2, r3
 8008600:	d81a      	bhi.n	8008638 <SE_VerifyHeaderSignature+0x4c>

#ifdef SFU_ISOLATE_SE_WITH_MPU
  if (0U != SE_IsUnprivileged())
 8008602:	f000 f82c 	bl	800865e <SE_IsUnprivileged>
 8008606:	b148      	cbz	r0, 800861c <SE_VerifyHeaderSignature+0x30>
  {
    uint32_t params[1] = {(uint32_t)pxFwRawHeader};
    SE_SysCall(&e_ret_status, SE_CRYPTO_HL_AUTHENTICATE_METADATA, peSE_Status, &params);
 8008608:	ab01      	add	r3, sp, #4
 800860a:	4622      	mov	r2, r4
 800860c:	2110      	movs	r1, #16
 800860e:	4668      	mov	r0, sp
    uint32_t params[1] = {(uint32_t)pxFwRawHeader};
 8008610:	9501      	str	r5, [sp, #4]
    SE_SysCall(&e_ret_status, SE_CRYPTO_HL_AUTHENTICATE_METADATA, peSE_Status, &params);
 8008612:	f000 f82e 	bl	8008672 <SE_SysCall>
    SE_ExitSecureMode(primask_bit);
#ifdef SFU_ISOLATE_SE_WITH_MPU
  }
#endif /* SFU_ISOLATE_SE_WITH_MPU */

  return e_ret_status;
 8008616:	9800      	ldr	r0, [sp, #0]

}
 8008618:	b003      	add	sp, #12
 800861a:	bd30      	pop	{r4, r5, pc}
    SE_EnterSecureMode(&primask_bit);
 800861c:	a801      	add	r0, sp, #4
 800861e:	f000 f815 	bl	800864c <SE_EnterSecureMode>
    e_ret_status = (*SE_CallGatePtr)(SE_CRYPTO_HL_AUTHENTICATE_METADATA, peSE_Status, primask_bit, pxFwRawHeader);
 8008622:	4621      	mov	r1, r4
 8008624:	9a01      	ldr	r2, [sp, #4]
 8008626:	4c07      	ldr	r4, [pc, #28]	; (8008644 <SE_VerifyHeaderSignature+0x58>)
 8008628:	462b      	mov	r3, r5
 800862a:	2010      	movs	r0, #16
 800862c:	47a0      	blx	r4
 800862e:	9000      	str	r0, [sp, #0]
    SE_ExitSecureMode(primask_bit);
 8008630:	9801      	ldr	r0, [sp, #4]
 8008632:	f000 f810 	bl	8008656 <SE_ExitSecureMode>
 8008636:	e7ee      	b.n	8008616 <SE_VerifyHeaderSignature+0x2a>
  __IS_SFU_RESERVED();
 8008638:	4803      	ldr	r0, [pc, #12]	; (8008648 <SE_VerifyHeaderSignature+0x5c>)
 800863a:	e7ed      	b.n	8008618 <SE_VerifyHeaderSignature+0x2c>
 800863c:	08008900 	.word	0x08008900
 8008640:	0800ffff 	.word	0x0800ffff
 8008644:	08000205 	.word	0x08000205
 8008648:	00018799 	.word	0x00018799

0800864c <SE_EnterSecureMode>:
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800864c:	f3ef 8310 	mrs	r3, PRIMASK
  */
void SE_EnterSecureMode(uint32_t *pPrimaskBit)
{
#if !defined(CKS_ENABLED)
  /* Disable interrupts */
  *pPrimaskBit = __get_PRIMASK();
 8008650:	6003      	str	r3, [r0, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8008652:	b672      	cpsid	i
  __disable_irq();
#endif /* !CKS_ENABLED */
}
 8008654:	4770      	bx	lr

08008656 <SE_ExitSecureMode>:
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008656:	f380 8810 	msr	PRIMASK, r0
  __ASM volatile ("cpsie i" : : : "memory");
 800865a:	b662      	cpsie	i
#if !defined(CKS_ENABLED)
  /* Re-enable the interrupts */
  __set_PRIMASK(PrimaskBit);
  __enable_irq();
#endif /* !CKS_ENABLED */
}
 800865c:	4770      	bx	lr

0800865e <SE_IsUnprivileged>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800865e:	f3ef 8305 	mrs	r3, IPSR
  * @param void
  * @retval 0 if we are in privileged mode, 1 if we are in non-privileged mode
  */
uint32_t SE_IsUnprivileged(void)
{
  return ((__get_IPSR() == 0U) && ((__get_CONTROL() & 1U) == 1U));
 8008662:	b923      	cbnz	r3, 800866e <SE_IsUnprivileged+0x10>
  __ASM volatile ("MRS %0, control" : "=r" (result) );
 8008664:	f3ef 8014 	mrs	r0, CONTROL
 8008668:	f000 0001 	and.w	r0, r0, #1
 800866c:	4770      	bx	lr
 800866e:	2000      	movs	r0, #0
}
 8008670:	4770      	bx	lr

08008672 <SE_SysCall>:
  /*
    * You cannot directly change to privileged mode from unprivileged mode without going through an exception,
    * for example an SVC.
    * Handled by @ref MPU_SVC_Handler()  and finally @ref SE_SVC_Handler()
    */
  __ASM __IO("SVC #0");    /* 0 is the hard-coded value to indicate a Secure Engine syscall */
 8008672:	df00      	svc	0
}
 8008674:	4770      	bx	lr
	...

08008678 <SE_SVC_Handler>:
  * @note When this function is entered, privileged mode has already been entered.
  *       When leaving this function, the unprivileged mode is automatically enabled.
  * @note This function is exported to the MPU SVC handler (see @ref MPU_SVC_Handler).
  */
void SE_SVC_Handler(uint32_t *args)
{
 8008678:	b530      	push	{r4, r5, lr}
 800867a:	4601      	mov	r1, r0
 800867c:	b087      	sub	sp, #28
  SE_ErrorStatus ret;
  SE_ErrorStatus *pRet = (SE_ErrorStatus *)(args[0]);
 800867e:	6805      	ldr	r5, [r0, #0]
  uint32_t primask_bit; /*!< interruption mask saved when disabling ITs then restore when re-enabling ITs */

  /* Set the CallGate function pointer */
  SET_CALLGATE();
 8008680:	4c33      	ldr	r4, [pc, #204]	; (8008750 <SE_SVC_Handler+0xd8>)

  /*Enter Secure Mode*/
  SE_EnterSecureMode(&primask_bit);
 8008682:	a805      	add	r0, sp, #20
 8008684:	f7ff ffe2 	bl	800864c <SE_EnterSecureMode>

  switch (args[1]) /* main case for short operations that can be done under interrupts */
 8008688:	6848      	ldr	r0, [r1, #4]
 800868a:	2893      	cmp	r0, #147	; 0x93
 800868c:	d81f      	bhi.n	80086ce <SE_SVC_Handler+0x56>
 800868e:	2891      	cmp	r0, #145	; 0x91
 8008690:	d847      	bhi.n	8008722 <SE_SVC_Handler+0xaa>
 8008692:	2810      	cmp	r0, #16
 8008694:	d80d      	bhi.n	80086b2 <SE_SVC_Handler+0x3a>
 8008696:	2803      	cmp	r0, #3
 8008698:	d921      	bls.n	80086de <SE_SVC_Handler+0x66>
 800869a:	1f03      	subs	r3, r0, #4
 800869c:	2b0c      	cmp	r3, #12
 800869e:	d81e      	bhi.n	80086de <SE_SVC_Handler+0x66>
 80086a0:	e8df f003 	tbb	[pc, r3]
 80086a4:	0d0d490d 	.word	0x0d0d490d
 80086a8:	1d1d0d49 	.word	0x1d1d0d49
 80086ac:	1d1d1d1d 	.word	0x1d1d1d1d
 80086b0:	39          	.byte	0x39
 80086b1:	00          	.byte	0x00
 80086b2:	2820      	cmp	r0, #32
 80086b4:	d003      	beq.n	80086be <SE_SVC_Handler+0x46>
 80086b6:	f1a0 0360 	sub.w	r3, r0, #96	; 0x60
 80086ba:	2b01      	cmp	r3, #1
 80086bc:	d80f      	bhi.n	80086de <SE_SVC_Handler+0x66>
    case SE_SYS_SAVE_DISABLE_IRQ:
    case SE_SYS_RESTORE_ENABLE_IRQ:
      ret = (*SE_CallGatePtr)((SE_FunctionIDTypeDef)args[1],
                              (SE_StatusTypeDef *)args[2],
                              primask_bit,
                              (void *)(((uint32_t *)args[3])[0]),
 80086be:	68cb      	ldr	r3, [r1, #12]
      ret = (*SE_CallGatePtr)((SE_FunctionIDTypeDef)args[1],
 80086c0:	685a      	ldr	r2, [r3, #4]
 80086c2:	9200      	str	r2, [sp, #0]
 80086c4:	681b      	ldr	r3, [r3, #0]
 80086c6:	9a05      	ldr	r2, [sp, #20]
 80086c8:	6889      	ldr	r1, [r1, #8]
 80086ca:	47a0      	blx	r4
 80086cc:	e00c      	b.n	80086e8 <SE_SVC_Handler+0x70>
  switch (args[1]) /* main case for short operations that can be done under interrupts */
 80086ce:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
 80086d2:	d006      	beq.n	80086e2 <SE_SVC_Handler+0x6a>
 80086d4:	f5b0 7f88 	cmp.w	r0, #272	; 0x110
 80086d8:	d01d      	beq.n	8008716 <SE_SVC_Handler+0x9e>
 80086da:	2894      	cmp	r0, #148	; 0x94
 80086dc:	d0ef      	beq.n	80086be <SE_SVC_Handler+0x46>
 80086de:	4c1d      	ldr	r4, [pc, #116]	; (8008754 <SE_SVC_Handler+0xdc>)
 80086e0:	e003      	b.n	80086ea <SE_SVC_Handler+0x72>
      ret = (*SE_CallGatePtr)((SE_FunctionIDTypeDef)args[1],
 80086e2:	9a05      	ldr	r2, [sp, #20]
 80086e4:	6889      	ldr	r1, [r1, #8]
 80086e6:	47a0      	blx	r4
                              (void *)(((uint32_t *)args[3])[2]));
      break;
    /* four extra parameters calls */
    case SE_CRYPTO_LL_DECRYPT_APPEND_ID:
    case SE_CRYPTO_LL_AUTHENTICATE_FW_APPEND_ID:
      ret = (*SE_CallGatePtr)((SE_FunctionIDTypeDef)args[1],
 80086e8:	4604      	mov	r4, r0
      ret = SE_ERROR;
#endif /* KMS_ENABLED */
      break;
  }
  /*  Check return value address  */
  if ((SFU_LL_Buffer_in_ram((void *)pRet, sizeof(*pRet)) == SFU_SUCCESS)
 80086ea:	2104      	movs	r1, #4
 80086ec:	4628      	mov	r0, r5
 80086ee:	f002 f80b 	bl	800a708 <SFU_LL_Buffer_in_ram>
 80086f2:	4b19      	ldr	r3, [pc, #100]	; (8008758 <SE_SVC_Handler+0xe0>)
 80086f4:	4298      	cmp	r0, r3
 80086f6:	d108      	bne.n	800870a <SE_SVC_Handler+0x92>
      && (SFU_LL_BufferCheck_in_se_ram((void *)pRet, sizeof(*pRet)) == SFU_ERROR))
 80086f8:	2104      	movs	r1, #4
 80086fa:	4628      	mov	r0, r5
 80086fc:	f001 ffe8 	bl	800a6d0 <SFU_LL_BufferCheck_in_se_ram>
 8008700:	f641 73e1 	movw	r3, #8161	; 0x1fe1
 8008704:	4298      	cmp	r0, r3
  {
    *pRet = ret;
 8008706:	bf08      	it	eq
 8008708:	602c      	streq	r4, [r5, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800870a:	9b05      	ldr	r3, [sp, #20]
 800870c:	f383 8810 	msr	PRIMASK, r3
  __ASM volatile ("cpsie i" : : : "memory");
 8008710:	b662      	cpsie	i
  SE_ExitSecureMode(primask_bit);

  /*
    * End of the privileged operation execution: switching to unprivileged mode automatically.
    */
}
 8008712:	b007      	add	sp, #28
 8008714:	bd30      	pop	{r4, r5, pc}
      ret = (*SE_CallGatePtr)((SE_FunctionIDTypeDef)args[1],
 8008716:	68cb      	ldr	r3, [r1, #12]
 8008718:	9a05      	ldr	r2, [sp, #20]
 800871a:	681b      	ldr	r3, [r3, #0]
 800871c:	6889      	ldr	r1, [r1, #8]
 800871e:	47a0      	blx	r4
 8008720:	e7e2      	b.n	80086e8 <SE_SVC_Handler+0x70>
                              (void *)(((uint32_t *)args[3])[0]),
 8008722:	68cb      	ldr	r3, [r1, #12]
      ret = (*SE_CallGatePtr)((SE_FunctionIDTypeDef)args[1],
 8008724:	689a      	ldr	r2, [r3, #8]
 8008726:	9201      	str	r2, [sp, #4]
 8008728:	685a      	ldr	r2, [r3, #4]
 800872a:	9200      	str	r2, [sp, #0]
 800872c:	681b      	ldr	r3, [r3, #0]
 800872e:	9a05      	ldr	r2, [sp, #20]
 8008730:	6889      	ldr	r1, [r1, #8]
 8008732:	47a0      	blx	r4
 8008734:	e7d8      	b.n	80086e8 <SE_SVC_Handler+0x70>
                              (void *)(((uint32_t *)args[3])[0]),
 8008736:	68cb      	ldr	r3, [r1, #12]
      ret = (*SE_CallGatePtr)((SE_FunctionIDTypeDef)args[1],
 8008738:	68da      	ldr	r2, [r3, #12]
 800873a:	9202      	str	r2, [sp, #8]
 800873c:	689a      	ldr	r2, [r3, #8]
 800873e:	9201      	str	r2, [sp, #4]
 8008740:	685a      	ldr	r2, [r3, #4]
 8008742:	9200      	str	r2, [sp, #0]
 8008744:	681b      	ldr	r3, [r3, #0]
 8008746:	9a05      	ldr	r2, [sp, #20]
 8008748:	6889      	ldr	r1, [r1, #8]
 800874a:	47a0      	blx	r4
 800874c:	e7cc      	b.n	80086e8 <SE_SVC_Handler+0x70>
 800874e:	bf00      	nop
 8008750:	08000205 	.word	0x08000205
 8008754:	00018799 	.word	0x00018799
 8008758:	00122f11 	.word	0x00122f11

Disassembly of section .text:

08008900 <__do_global_dtors_aux>:
 8008900:	b510      	push	{r4, lr}
 8008902:	4c05      	ldr	r4, [pc, #20]	; (8008918 <__do_global_dtors_aux+0x18>)
 8008904:	7823      	ldrb	r3, [r4, #0]
 8008906:	b933      	cbnz	r3, 8008916 <__do_global_dtors_aux+0x16>
 8008908:	4b04      	ldr	r3, [pc, #16]	; (800891c <__do_global_dtors_aux+0x1c>)
 800890a:	b113      	cbz	r3, 8008912 <__do_global_dtors_aux+0x12>
 800890c:	4804      	ldr	r0, [pc, #16]	; (8008920 <__do_global_dtors_aux+0x20>)
 800890e:	f3af 8000 	nop.w
 8008912:	2301      	movs	r3, #1
 8008914:	7023      	strb	r3, [r4, #0]
 8008916:	bd10      	pop	{r4, pc}
 8008918:	200010d8 	.word	0x200010d8
 800891c:	00000000 	.word	0x00000000
 8008920:	0800cdac 	.word	0x0800cdac

08008924 <frame_dummy>:
 8008924:	b508      	push	{r3, lr}
 8008926:	4b03      	ldr	r3, [pc, #12]	; (8008934 <frame_dummy+0x10>)
 8008928:	b11b      	cbz	r3, 8008932 <frame_dummy+0xe>
 800892a:	4903      	ldr	r1, [pc, #12]	; (8008938 <frame_dummy+0x14>)
 800892c:	4803      	ldr	r0, [pc, #12]	; (800893c <frame_dummy+0x18>)
 800892e:	f3af 8000 	nop.w
 8008932:	bd08      	pop	{r3, pc}
 8008934:	00000000 	.word	0x00000000
 8008938:	200010dc 	.word	0x200010dc
 800893c:	0800cdac 	.word	0x0800cdac

08008940 <SVC_Handler>:
        .syntax unified
        .weak  MPU_SVC_Handler
        .global SVC_Handler
        .type  SVC_Handler, %function
SVC_Handler:
        MRS r0, PSP
 8008940:	f3ef 8009 	mrs	r0, PSP
        B MPU_SVC_Handler
 8008944:	f001 bd94 	b.w	800a470 <MPU_SVC_Handler>

08008948 <jump_to_function>:

        .global jump_to_function
jump_to_function:
        LDR SP, [R0]
 8008948:	f8d0 d000 	ldr.w	sp, [r0]
        LDR PC, [R0,#4]
 800894c:	f8d0 f004 	ldr.w	pc, [r0, #4]

08008950 <launch_application>:
* return from exception to application launch function
* R0: application vector address
* R1: exit function address
* push interrupt context R0 R1 R2 R3 R12 LR PC xPSR
*******************************************************/
        MOV R2, #0x01000000 /* xPSR activate Thumb bit */
 8008950:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
        PUSH {R2}
 8008954:	b404      	push	{r2}
        MOV R2, #1
 8008956:	f04f 0201 	mov.w	r2, #1
        BIC R1, R1, R2      /* clear least significant bit of exit function */
 800895a:	ea21 0102 	bic.w	r1, r1, r2
        PUSH {R1}           /* return address = application entry point */
 800895e:	b402      	push	{r1}
        MOV R1, #0          /* clear other context registers */
 8008960:	f04f 0100 	mov.w	r1, #0
        PUSH {R1}
 8008964:	b402      	push	{r1}
        PUSH {R1}
 8008966:	b402      	push	{r1}
        PUSH {R1}
 8008968:	b402      	push	{r1}
        PUSH {R1}
 800896a:	b402      	push	{r1}
        PUSH {R1}
 800896c:	b402      	push	{r1}
        PUSH {R0}           /* R0 = application entry point */
 800896e:	b401      	push	{r0}
        MOV LR, #0xFFFFFFF9 /* set LR to return to thread mode with main stack */
 8008970:	f06f 0e06 	mvn.w	lr, #6
        BX LR               /* return from interrupt */
 8008974:	4770      	bx	lr
	...

08008980 <memchr>:
 8008980:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8008984:	2a10      	cmp	r2, #16
 8008986:	db2b      	blt.n	80089e0 <memchr+0x60>
 8008988:	f010 0f07 	tst.w	r0, #7
 800898c:	d008      	beq.n	80089a0 <memchr+0x20>
 800898e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8008992:	3a01      	subs	r2, #1
 8008994:	428b      	cmp	r3, r1
 8008996:	d02d      	beq.n	80089f4 <memchr+0x74>
 8008998:	f010 0f07 	tst.w	r0, #7
 800899c:	b342      	cbz	r2, 80089f0 <memchr+0x70>
 800899e:	d1f6      	bne.n	800898e <memchr+0xe>
 80089a0:	b4f0      	push	{r4, r5, r6, r7}
 80089a2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80089a6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80089aa:	f022 0407 	bic.w	r4, r2, #7
 80089ae:	f07f 0700 	mvns.w	r7, #0
 80089b2:	2300      	movs	r3, #0
 80089b4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80089b8:	3c08      	subs	r4, #8
 80089ba:	ea85 0501 	eor.w	r5, r5, r1
 80089be:	ea86 0601 	eor.w	r6, r6, r1
 80089c2:	fa85 f547 	uadd8	r5, r5, r7
 80089c6:	faa3 f587 	sel	r5, r3, r7
 80089ca:	fa86 f647 	uadd8	r6, r6, r7
 80089ce:	faa5 f687 	sel	r6, r5, r7
 80089d2:	b98e      	cbnz	r6, 80089f8 <memchr+0x78>
 80089d4:	d1ee      	bne.n	80089b4 <memchr+0x34>
 80089d6:	bcf0      	pop	{r4, r5, r6, r7}
 80089d8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80089dc:	f002 0207 	and.w	r2, r2, #7
 80089e0:	b132      	cbz	r2, 80089f0 <memchr+0x70>
 80089e2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80089e6:	3a01      	subs	r2, #1
 80089e8:	ea83 0301 	eor.w	r3, r3, r1
 80089ec:	b113      	cbz	r3, 80089f4 <memchr+0x74>
 80089ee:	d1f8      	bne.n	80089e2 <memchr+0x62>
 80089f0:	2000      	movs	r0, #0
 80089f2:	4770      	bx	lr
 80089f4:	3801      	subs	r0, #1
 80089f6:	4770      	bx	lr
 80089f8:	2d00      	cmp	r5, #0
 80089fa:	bf06      	itte	eq
 80089fc:	4635      	moveq	r5, r6
 80089fe:	3803      	subeq	r0, #3
 8008a00:	3807      	subne	r0, #7
 8008a02:	f015 0f01 	tst.w	r5, #1
 8008a06:	d107      	bne.n	8008a18 <memchr+0x98>
 8008a08:	3001      	adds	r0, #1
 8008a0a:	f415 7f80 	tst.w	r5, #256	; 0x100
 8008a0e:	bf02      	ittt	eq
 8008a10:	3001      	addeq	r0, #1
 8008a12:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8008a16:	3001      	addeq	r0, #1
 8008a18:	bcf0      	pop	{r4, r5, r6, r7}
 8008a1a:	3801      	subs	r0, #1
 8008a1c:	4770      	bx	lr
 8008a1e:	bf00      	nop

08008a20 <__aeabi_uldivmod>:
 8008a20:	b953      	cbnz	r3, 8008a38 <__aeabi_uldivmod+0x18>
 8008a22:	b94a      	cbnz	r2, 8008a38 <__aeabi_uldivmod+0x18>
 8008a24:	2900      	cmp	r1, #0
 8008a26:	bf08      	it	eq
 8008a28:	2800      	cmpeq	r0, #0
 8008a2a:	bf1c      	itt	ne
 8008a2c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8008a30:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8008a34:	f000 b974 	b.w	8008d20 <__aeabi_idiv0>
 8008a38:	f1ad 0c08 	sub.w	ip, sp, #8
 8008a3c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8008a40:	f000 f806 	bl	8008a50 <__udivmoddi4>
 8008a44:	f8dd e004 	ldr.w	lr, [sp, #4]
 8008a48:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008a4c:	b004      	add	sp, #16
 8008a4e:	4770      	bx	lr

08008a50 <__udivmoddi4>:
 8008a50:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008a54:	9d08      	ldr	r5, [sp, #32]
 8008a56:	4604      	mov	r4, r0
 8008a58:	468e      	mov	lr, r1
 8008a5a:	2b00      	cmp	r3, #0
 8008a5c:	d14d      	bne.n	8008afa <__udivmoddi4+0xaa>
 8008a5e:	428a      	cmp	r2, r1
 8008a60:	4694      	mov	ip, r2
 8008a62:	d969      	bls.n	8008b38 <__udivmoddi4+0xe8>
 8008a64:	fab2 f282 	clz	r2, r2
 8008a68:	b152      	cbz	r2, 8008a80 <__udivmoddi4+0x30>
 8008a6a:	fa01 f302 	lsl.w	r3, r1, r2
 8008a6e:	f1c2 0120 	rsb	r1, r2, #32
 8008a72:	fa20 f101 	lsr.w	r1, r0, r1
 8008a76:	fa0c fc02 	lsl.w	ip, ip, r2
 8008a7a:	ea41 0e03 	orr.w	lr, r1, r3
 8008a7e:	4094      	lsls	r4, r2
 8008a80:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8008a84:	0c21      	lsrs	r1, r4, #16
 8008a86:	fbbe f6f8 	udiv	r6, lr, r8
 8008a8a:	fa1f f78c 	uxth.w	r7, ip
 8008a8e:	fb08 e316 	mls	r3, r8, r6, lr
 8008a92:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8008a96:	fb06 f107 	mul.w	r1, r6, r7
 8008a9a:	4299      	cmp	r1, r3
 8008a9c:	d90a      	bls.n	8008ab4 <__udivmoddi4+0x64>
 8008a9e:	eb1c 0303 	adds.w	r3, ip, r3
 8008aa2:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8008aa6:	f080 811f 	bcs.w	8008ce8 <__udivmoddi4+0x298>
 8008aaa:	4299      	cmp	r1, r3
 8008aac:	f240 811c 	bls.w	8008ce8 <__udivmoddi4+0x298>
 8008ab0:	3e02      	subs	r6, #2
 8008ab2:	4463      	add	r3, ip
 8008ab4:	1a5b      	subs	r3, r3, r1
 8008ab6:	b2a4      	uxth	r4, r4
 8008ab8:	fbb3 f0f8 	udiv	r0, r3, r8
 8008abc:	fb08 3310 	mls	r3, r8, r0, r3
 8008ac0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8008ac4:	fb00 f707 	mul.w	r7, r0, r7
 8008ac8:	42a7      	cmp	r7, r4
 8008aca:	d90a      	bls.n	8008ae2 <__udivmoddi4+0x92>
 8008acc:	eb1c 0404 	adds.w	r4, ip, r4
 8008ad0:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8008ad4:	f080 810a 	bcs.w	8008cec <__udivmoddi4+0x29c>
 8008ad8:	42a7      	cmp	r7, r4
 8008ada:	f240 8107 	bls.w	8008cec <__udivmoddi4+0x29c>
 8008ade:	4464      	add	r4, ip
 8008ae0:	3802      	subs	r0, #2
 8008ae2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8008ae6:	1be4      	subs	r4, r4, r7
 8008ae8:	2600      	movs	r6, #0
 8008aea:	b11d      	cbz	r5, 8008af4 <__udivmoddi4+0xa4>
 8008aec:	40d4      	lsrs	r4, r2
 8008aee:	2300      	movs	r3, #0
 8008af0:	e9c5 4300 	strd	r4, r3, [r5]
 8008af4:	4631      	mov	r1, r6
 8008af6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008afa:	428b      	cmp	r3, r1
 8008afc:	d909      	bls.n	8008b12 <__udivmoddi4+0xc2>
 8008afe:	2d00      	cmp	r5, #0
 8008b00:	f000 80ef 	beq.w	8008ce2 <__udivmoddi4+0x292>
 8008b04:	2600      	movs	r6, #0
 8008b06:	e9c5 0100 	strd	r0, r1, [r5]
 8008b0a:	4630      	mov	r0, r6
 8008b0c:	4631      	mov	r1, r6
 8008b0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008b12:	fab3 f683 	clz	r6, r3
 8008b16:	2e00      	cmp	r6, #0
 8008b18:	d14a      	bne.n	8008bb0 <__udivmoddi4+0x160>
 8008b1a:	428b      	cmp	r3, r1
 8008b1c:	d302      	bcc.n	8008b24 <__udivmoddi4+0xd4>
 8008b1e:	4282      	cmp	r2, r0
 8008b20:	f200 80f9 	bhi.w	8008d16 <__udivmoddi4+0x2c6>
 8008b24:	1a84      	subs	r4, r0, r2
 8008b26:	eb61 0303 	sbc.w	r3, r1, r3
 8008b2a:	2001      	movs	r0, #1
 8008b2c:	469e      	mov	lr, r3
 8008b2e:	2d00      	cmp	r5, #0
 8008b30:	d0e0      	beq.n	8008af4 <__udivmoddi4+0xa4>
 8008b32:	e9c5 4e00 	strd	r4, lr, [r5]
 8008b36:	e7dd      	b.n	8008af4 <__udivmoddi4+0xa4>
 8008b38:	b902      	cbnz	r2, 8008b3c <__udivmoddi4+0xec>
 8008b3a:	deff      	udf	#255	; 0xff
 8008b3c:	fab2 f282 	clz	r2, r2
 8008b40:	2a00      	cmp	r2, #0
 8008b42:	f040 8092 	bne.w	8008c6a <__udivmoddi4+0x21a>
 8008b46:	eba1 010c 	sub.w	r1, r1, ip
 8008b4a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8008b4e:	fa1f fe8c 	uxth.w	lr, ip
 8008b52:	2601      	movs	r6, #1
 8008b54:	0c20      	lsrs	r0, r4, #16
 8008b56:	fbb1 f3f7 	udiv	r3, r1, r7
 8008b5a:	fb07 1113 	mls	r1, r7, r3, r1
 8008b5e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8008b62:	fb0e f003 	mul.w	r0, lr, r3
 8008b66:	4288      	cmp	r0, r1
 8008b68:	d908      	bls.n	8008b7c <__udivmoddi4+0x12c>
 8008b6a:	eb1c 0101 	adds.w	r1, ip, r1
 8008b6e:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8008b72:	d202      	bcs.n	8008b7a <__udivmoddi4+0x12a>
 8008b74:	4288      	cmp	r0, r1
 8008b76:	f200 80cb 	bhi.w	8008d10 <__udivmoddi4+0x2c0>
 8008b7a:	4643      	mov	r3, r8
 8008b7c:	1a09      	subs	r1, r1, r0
 8008b7e:	b2a4      	uxth	r4, r4
 8008b80:	fbb1 f0f7 	udiv	r0, r1, r7
 8008b84:	fb07 1110 	mls	r1, r7, r0, r1
 8008b88:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8008b8c:	fb0e fe00 	mul.w	lr, lr, r0
 8008b90:	45a6      	cmp	lr, r4
 8008b92:	d908      	bls.n	8008ba6 <__udivmoddi4+0x156>
 8008b94:	eb1c 0404 	adds.w	r4, ip, r4
 8008b98:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8008b9c:	d202      	bcs.n	8008ba4 <__udivmoddi4+0x154>
 8008b9e:	45a6      	cmp	lr, r4
 8008ba0:	f200 80bb 	bhi.w	8008d1a <__udivmoddi4+0x2ca>
 8008ba4:	4608      	mov	r0, r1
 8008ba6:	eba4 040e 	sub.w	r4, r4, lr
 8008baa:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8008bae:	e79c      	b.n	8008aea <__udivmoddi4+0x9a>
 8008bb0:	f1c6 0720 	rsb	r7, r6, #32
 8008bb4:	40b3      	lsls	r3, r6
 8008bb6:	fa22 fc07 	lsr.w	ip, r2, r7
 8008bba:	ea4c 0c03 	orr.w	ip, ip, r3
 8008bbe:	fa20 f407 	lsr.w	r4, r0, r7
 8008bc2:	fa01 f306 	lsl.w	r3, r1, r6
 8008bc6:	431c      	orrs	r4, r3
 8008bc8:	40f9      	lsrs	r1, r7
 8008bca:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8008bce:	fa00 f306 	lsl.w	r3, r0, r6
 8008bd2:	fbb1 f8f9 	udiv	r8, r1, r9
 8008bd6:	0c20      	lsrs	r0, r4, #16
 8008bd8:	fa1f fe8c 	uxth.w	lr, ip
 8008bdc:	fb09 1118 	mls	r1, r9, r8, r1
 8008be0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8008be4:	fb08 f00e 	mul.w	r0, r8, lr
 8008be8:	4288      	cmp	r0, r1
 8008bea:	fa02 f206 	lsl.w	r2, r2, r6
 8008bee:	d90b      	bls.n	8008c08 <__udivmoddi4+0x1b8>
 8008bf0:	eb1c 0101 	adds.w	r1, ip, r1
 8008bf4:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8008bf8:	f080 8088 	bcs.w	8008d0c <__udivmoddi4+0x2bc>
 8008bfc:	4288      	cmp	r0, r1
 8008bfe:	f240 8085 	bls.w	8008d0c <__udivmoddi4+0x2bc>
 8008c02:	f1a8 0802 	sub.w	r8, r8, #2
 8008c06:	4461      	add	r1, ip
 8008c08:	1a09      	subs	r1, r1, r0
 8008c0a:	b2a4      	uxth	r4, r4
 8008c0c:	fbb1 f0f9 	udiv	r0, r1, r9
 8008c10:	fb09 1110 	mls	r1, r9, r0, r1
 8008c14:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8008c18:	fb00 fe0e 	mul.w	lr, r0, lr
 8008c1c:	458e      	cmp	lr, r1
 8008c1e:	d908      	bls.n	8008c32 <__udivmoddi4+0x1e2>
 8008c20:	eb1c 0101 	adds.w	r1, ip, r1
 8008c24:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8008c28:	d26c      	bcs.n	8008d04 <__udivmoddi4+0x2b4>
 8008c2a:	458e      	cmp	lr, r1
 8008c2c:	d96a      	bls.n	8008d04 <__udivmoddi4+0x2b4>
 8008c2e:	3802      	subs	r0, #2
 8008c30:	4461      	add	r1, ip
 8008c32:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8008c36:	fba0 9402 	umull	r9, r4, r0, r2
 8008c3a:	eba1 010e 	sub.w	r1, r1, lr
 8008c3e:	42a1      	cmp	r1, r4
 8008c40:	46c8      	mov	r8, r9
 8008c42:	46a6      	mov	lr, r4
 8008c44:	d356      	bcc.n	8008cf4 <__udivmoddi4+0x2a4>
 8008c46:	d053      	beq.n	8008cf0 <__udivmoddi4+0x2a0>
 8008c48:	b15d      	cbz	r5, 8008c62 <__udivmoddi4+0x212>
 8008c4a:	ebb3 0208 	subs.w	r2, r3, r8
 8008c4e:	eb61 010e 	sbc.w	r1, r1, lr
 8008c52:	fa01 f707 	lsl.w	r7, r1, r7
 8008c56:	fa22 f306 	lsr.w	r3, r2, r6
 8008c5a:	40f1      	lsrs	r1, r6
 8008c5c:	431f      	orrs	r7, r3
 8008c5e:	e9c5 7100 	strd	r7, r1, [r5]
 8008c62:	2600      	movs	r6, #0
 8008c64:	4631      	mov	r1, r6
 8008c66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008c6a:	f1c2 0320 	rsb	r3, r2, #32
 8008c6e:	40d8      	lsrs	r0, r3
 8008c70:	fa0c fc02 	lsl.w	ip, ip, r2
 8008c74:	fa21 f303 	lsr.w	r3, r1, r3
 8008c78:	4091      	lsls	r1, r2
 8008c7a:	4301      	orrs	r1, r0
 8008c7c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8008c80:	fa1f fe8c 	uxth.w	lr, ip
 8008c84:	fbb3 f0f7 	udiv	r0, r3, r7
 8008c88:	fb07 3610 	mls	r6, r7, r0, r3
 8008c8c:	0c0b      	lsrs	r3, r1, #16
 8008c8e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8008c92:	fb00 f60e 	mul.w	r6, r0, lr
 8008c96:	429e      	cmp	r6, r3
 8008c98:	fa04 f402 	lsl.w	r4, r4, r2
 8008c9c:	d908      	bls.n	8008cb0 <__udivmoddi4+0x260>
 8008c9e:	eb1c 0303 	adds.w	r3, ip, r3
 8008ca2:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8008ca6:	d22f      	bcs.n	8008d08 <__udivmoddi4+0x2b8>
 8008ca8:	429e      	cmp	r6, r3
 8008caa:	d92d      	bls.n	8008d08 <__udivmoddi4+0x2b8>
 8008cac:	3802      	subs	r0, #2
 8008cae:	4463      	add	r3, ip
 8008cb0:	1b9b      	subs	r3, r3, r6
 8008cb2:	b289      	uxth	r1, r1
 8008cb4:	fbb3 f6f7 	udiv	r6, r3, r7
 8008cb8:	fb07 3316 	mls	r3, r7, r6, r3
 8008cbc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8008cc0:	fb06 f30e 	mul.w	r3, r6, lr
 8008cc4:	428b      	cmp	r3, r1
 8008cc6:	d908      	bls.n	8008cda <__udivmoddi4+0x28a>
 8008cc8:	eb1c 0101 	adds.w	r1, ip, r1
 8008ccc:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8008cd0:	d216      	bcs.n	8008d00 <__udivmoddi4+0x2b0>
 8008cd2:	428b      	cmp	r3, r1
 8008cd4:	d914      	bls.n	8008d00 <__udivmoddi4+0x2b0>
 8008cd6:	3e02      	subs	r6, #2
 8008cd8:	4461      	add	r1, ip
 8008cda:	1ac9      	subs	r1, r1, r3
 8008cdc:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8008ce0:	e738      	b.n	8008b54 <__udivmoddi4+0x104>
 8008ce2:	462e      	mov	r6, r5
 8008ce4:	4628      	mov	r0, r5
 8008ce6:	e705      	b.n	8008af4 <__udivmoddi4+0xa4>
 8008ce8:	4606      	mov	r6, r0
 8008cea:	e6e3      	b.n	8008ab4 <__udivmoddi4+0x64>
 8008cec:	4618      	mov	r0, r3
 8008cee:	e6f8      	b.n	8008ae2 <__udivmoddi4+0x92>
 8008cf0:	454b      	cmp	r3, r9
 8008cf2:	d2a9      	bcs.n	8008c48 <__udivmoddi4+0x1f8>
 8008cf4:	ebb9 0802 	subs.w	r8, r9, r2
 8008cf8:	eb64 0e0c 	sbc.w	lr, r4, ip
 8008cfc:	3801      	subs	r0, #1
 8008cfe:	e7a3      	b.n	8008c48 <__udivmoddi4+0x1f8>
 8008d00:	4646      	mov	r6, r8
 8008d02:	e7ea      	b.n	8008cda <__udivmoddi4+0x28a>
 8008d04:	4620      	mov	r0, r4
 8008d06:	e794      	b.n	8008c32 <__udivmoddi4+0x1e2>
 8008d08:	4640      	mov	r0, r8
 8008d0a:	e7d1      	b.n	8008cb0 <__udivmoddi4+0x260>
 8008d0c:	46d0      	mov	r8, sl
 8008d0e:	e77b      	b.n	8008c08 <__udivmoddi4+0x1b8>
 8008d10:	3b02      	subs	r3, #2
 8008d12:	4461      	add	r1, ip
 8008d14:	e732      	b.n	8008b7c <__udivmoddi4+0x12c>
 8008d16:	4630      	mov	r0, r6
 8008d18:	e709      	b.n	8008b2e <__udivmoddi4+0xde>
 8008d1a:	4464      	add	r4, ip
 8008d1c:	3802      	subs	r0, #2
 8008d1e:	e742      	b.n	8008ba6 <__udivmoddi4+0x156>

08008d20 <__aeabi_idiv0>:
 8008d20:	4770      	bx	lr
 8008d22:	bf00      	nop

08008d24 <main>:
  * @brief  main function
  * @param  None
  * @retval int
  */
int main(void)
{
 8008d24:	b510      	push	{r4, lr}
 8008d26:	b094      	sub	sp, #80	; 0x50

  /* MCU Configuration--------------------------------------------------------*/
  /* This part is NOT secure (security mechanisms NOT enabled yet)            */
  /* Reset of all peripherals, Initializes the Flash interface and the Systick*/
  (void) HAL_Init();
 8008d28:	f001 ff6c 	bl	800ac04 <HAL_Init>
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8008d2c:	2230      	movs	r2, #48	; 0x30
 8008d2e:	2100      	movs	r1, #0
 8008d30:	a808      	add	r0, sp, #32
 8008d32:	f002 ff61 	bl	800bbf8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8008d36:	2214      	movs	r2, #20
 8008d38:	2100      	movs	r1, #0
 8008d3a:	a802      	add	r0, sp, #8
 8008d3c:	f002 ff5c 	bl	800bbf8 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8008d40:	2200      	movs	r2, #0
 8008d42:	4b1d      	ldr	r3, [pc, #116]	; (8008db8 <main+0x94>)
 8008d44:	9200      	str	r2, [sp, #0]
 8008d46:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8008d48:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 8008d4c:	6419      	str	r1, [r3, #64]	; 0x40
 8008d4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8008d50:	491a      	ldr	r1, [pc, #104]	; (8008dbc <main+0x98>)
  __HAL_RCC_PWR_CLK_ENABLE();
 8008d52:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008d56:	9300      	str	r3, [sp, #0]
 8008d58:	9b00      	ldr	r3, [sp, #0]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8008d5a:	9201      	str	r2, [sp, #4]
 8008d5c:	680b      	ldr	r3, [r1, #0]
 8008d5e:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8008d62:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008d66:	600b      	str	r3, [r1, #0]
 8008d68:	680b      	ldr	r3, [r1, #0]
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8008d6a:	920d      	str	r2, [sp, #52]	; 0x34
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8008d6c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8008d70:	9301      	str	r3, [sp, #4]
 8008d72:	9b01      	ldr	r3, [sp, #4]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8008d74:	2302      	movs	r3, #2
 8008d76:	9307      	str	r3, [sp, #28]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8008d78:	2001      	movs	r0, #1
 8008d7a:	2310      	movs	r3, #16
 8008d7c:	e9cd 030a 	strd	r0, r3, [sp, #40]	; 0x28
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8008d80:	a807      	add	r0, sp, #28
 8008d82:	f002 fbc9 	bl	800b518 <HAL_RCC_OscConfig>
 8008d86:	4601      	mov	r1, r0
 8008d88:	b108      	cbz	r0, 8008d8e <main+0x6a>
  __ASM volatile ("cpsid i" : : : "memory");
 8008d8a:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8008d8c:	e7fe      	b.n	8008d8c <main+0x68>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8008d8e:	230f      	movs	r3, #15
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8008d90:	e9cd 3002 	strd	r3, r0, [sp, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8008d94:	e9cd 0004 	strd	r0, r0, [sp, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8008d98:	9006      	str	r0, [sp, #24]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8008d9a:	a802      	add	r0, sp, #8
 8008d9c:	f002 fb00 	bl	800b3a0 <HAL_RCC_ClockConfig>
 8008da0:	4604      	mov	r4, r0
 8008da2:	b108      	cbz	r0, 8008da8 <main+0x84>
 8008da4:	b672      	cpsid	i
  while (1)
 8008da6:	e7fe      	b.n	8008da6 <main+0x82>
  (void)SFU_BOOT_RunSecureBootService(); /* no need to take care of the returned value as we reboot in all cases */
 8008da8:	f000 fb0e 	bl	80093c8 <SFU_BOOT_RunSecureBootService>
  SFU_BOOT_ForceReboot();
 8008dac:	f000 fa48 	bl	8009240 <SFU_BOOT_ForceReboot>
}
 8008db0:	4620      	mov	r0, r4
 8008db2:	b014      	add	sp, #80	; 0x50
 8008db4:	bd10      	pop	{r4, pc}
 8008db6:	bf00      	nop
 8008db8:	40023800 	.word	0x40023800
 8008dbc:	40007000 	.word	0x40007000

08008dc0 <HAL_MspInit>:
/* Functions Definition ------------------------------------------------------*/
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8008dc0:	b513      	push	{r0, r1, r4, lr}
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8008dc2:	4b18      	ldr	r3, [pc, #96]	; (8008e24 <HAL_MspInit+0x64>)
 8008dc4:	2400      	movs	r4, #0
 8008dc6:	9401      	str	r4, [sp, #4]
 8008dc8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008dca:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008dce:	645a      	str	r2, [r3, #68]	; 0x44
 8008dd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008dd2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008dd6:	9301      	str	r3, [sp, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8008dd8:	2003      	movs	r0, #3
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8008dda:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8008ddc:	f001 ff5a 	bl	800ac94 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0U, 0U);
 8008de0:	4622      	mov	r2, r4
 8008de2:	4621      	mov	r1, r4
 8008de4:	f06f 000b 	mvn.w	r0, #11
 8008de8:	f001 ff66 	bl	800acb8 <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0U, 0U);
 8008dec:	4622      	mov	r2, r4
 8008dee:	4621      	mov	r1, r4
 8008df0:	f06f 000a 	mvn.w	r0, #10
 8008df4:	f001 ff60 	bl	800acb8 <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0U, 0U);
 8008df8:	4622      	mov	r2, r4
 8008dfa:	4621      	mov	r1, r4
 8008dfc:	f06f 0009 	mvn.w	r0, #9
 8008e00:	f001 ff5a 	bl	800acb8 <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0U, 0U);
 8008e04:	4622      	mov	r2, r4
 8008e06:	4621      	mov	r1, r4
 8008e08:	f06f 0003 	mvn.w	r0, #3
 8008e0c:	f001 ff54 	bl	800acb8 <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0U, 0U);
 8008e10:	4622      	mov	r2, r4
 8008e12:	4621      	mov	r1, r4
 8008e14:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff

}
 8008e18:	b002      	add	sp, #8
 8008e1a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  HAL_NVIC_SetPriority(SysTick_IRQn, 0U, 0U);
 8008e1e:	f001 bf4b 	b.w	800acb8 <HAL_NVIC_SetPriority>
 8008e22:	bf00      	nop
 8008e24:	40023800 	.word	0x40023800

08008e28 <HAL_UART_MspInit>:
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
  SFU_LL_UART_MspInit(huart);
 8008e28:	f001 bc0c 	b.w	800a644 <SFU_LL_UART_MspInit>

08008e2c <BusFault_Handler>:
  * @retval None
  */
void BusFault_Handler(void)
{
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 8008e2c:	e7fe      	b.n	8008e2c <BusFault_Handler>

08008e2e <UsageFault_Handler>:
  * @retval None
  */
void UsageFault_Handler(void)
{
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 8008e2e:	e7fe      	b.n	8008e2e <UsageFault_Handler>

08008e30 <DebugMon_Handler>:
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
}
 8008e30:	4770      	bx	lr

08008e32 <PendSV_Handler>:
 8008e32:	4770      	bx	lr

08008e34 <SysTick_Handler>:
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
  HAL_IncTick();
 8008e34:	f001 bf00 	b.w	800ac38 <HAL_IncTick>

08008e38 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

int _read (int file, char *ptr, int len)
{
 8008e38:	b570      	push	{r4, r5, r6, lr}
 8008e3a:	460d      	mov	r5, r1
 8008e3c:	4614      	mov	r4, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8008e3e:	460e      	mov	r6, r1
 8008e40:	1b73      	subs	r3, r6, r5
 8008e42:	429c      	cmp	r4, r3
 8008e44:	dc01      	bgt.n	8008e4a <_read+0x12>
	{
		*ptr++ = __io_getchar();
	}

return len;
}
 8008e46:	4620      	mov	r0, r4
 8008e48:	bd70      	pop	{r4, r5, r6, pc}
		*ptr++ = __io_getchar();
 8008e4a:	f3af 8000 	nop.w
 8008e4e:	f806 0b01 	strb.w	r0, [r6], #1
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8008e52:	e7f5      	b.n	8008e40 <_read+0x8>

08008e54 <_write>:

int _write(int file, char *ptr, int len)
{
 8008e54:	b570      	push	{r4, r5, r6, lr}
 8008e56:	460d      	mov	r5, r1
 8008e58:	4614      	mov	r4, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8008e5a:	460e      	mov	r6, r1
 8008e5c:	1b73      	subs	r3, r6, r5
 8008e5e:	429c      	cmp	r4, r3
 8008e60:	dc01      	bgt.n	8008e66 <_write+0x12>
	{
		__io_putchar(*ptr++);
	}
	return len;
}
 8008e62:	4620      	mov	r0, r4
 8008e64:	bd70      	pop	{r4, r5, r6, pc}
		__io_putchar(*ptr++);
 8008e66:	f816 0b01 	ldrb.w	r0, [r6], #1
 8008e6a:	f000 fd3c 	bl	80098e6 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8008e6e:	e7f5      	b.n	8008e5c <_write+0x8>

08008e70 <_sbrk>:
{
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8008e70:	4a0a      	ldr	r2, [pc, #40]	; (8008e9c <_sbrk+0x2c>)
 8008e72:	6811      	ldr	r1, [r2, #0]
{
 8008e74:	b508      	push	{r3, lr}
 8008e76:	4603      	mov	r3, r0
	if (heap_end == 0)
 8008e78:	b909      	cbnz	r1, 8008e7e <_sbrk+0xe>
		heap_end = &end;
 8008e7a:	4909      	ldr	r1, [pc, #36]	; (8008ea0 <_sbrk+0x30>)
 8008e7c:	6011      	str	r1, [r2, #0]

	prev_heap_end = heap_end;
 8008e7e:	6810      	ldr	r0, [r2, #0]
	if (heap_end + incr > stack_ptr)
 8008e80:	4669      	mov	r1, sp
 8008e82:	4403      	add	r3, r0
 8008e84:	428b      	cmp	r3, r1
 8008e86:	d906      	bls.n	8008e96 <_sbrk+0x26>
	{
//		write(1, "Heap and stack collision\n", 25);
//		abort();
		errno = ENOMEM;
 8008e88:	f002 fe6e 	bl	800bb68 <__errno>
 8008e8c:	230c      	movs	r3, #12
 8008e8e:	6003      	str	r3, [r0, #0]
		return (caddr_t) -1;
 8008e90:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
	}

	heap_end += incr;

	return (caddr_t) prev_heap_end;
}
 8008e94:	bd08      	pop	{r3, pc}
	heap_end += incr;
 8008e96:	6013      	str	r3, [r2, #0]
	return (caddr_t) prev_heap_end;
 8008e98:	e7fc      	b.n	8008e94 <_sbrk+0x24>
 8008e9a:	bf00      	nop
 8008e9c:	200010f4 	.word	0x200010f4
 8008ea0:	20001c60 	.word	0x20001c60

08008ea4 <_close>:

int _close(int file)
{
	return -1;
}
 8008ea4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008ea8:	4770      	bx	lr

08008eaa <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 8008eaa:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8008eae:	604b      	str	r3, [r1, #4]
	return 0;
}
 8008eb0:	2000      	movs	r0, #0
 8008eb2:	4770      	bx	lr

08008eb4 <_isatty>:

int _isatty(int file)
{
	return 1;
}
 8008eb4:	2001      	movs	r0, #1
 8008eb6:	4770      	bx	lr

08008eb8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 8008eb8:	2000      	movs	r0, #0
 8008eba:	4770      	bx	lr

08008ebc <SFU_BOOT_SM_HandleCriticalFailure>:
  * @param  None
  * @note   After a Critical Failure a Reboot will be called.
  * @retval None
  */
static void SFU_BOOT_SM_HandleCriticalFailure(void)
{
 8008ebc:	b508      	push	{r3, lr}
  TRACE("\r\n= [SBOOT] STATE: HANDLE CRITICAL FAILURE");
 8008ebe:	4805      	ldr	r0, [pc, #20]	; (8008ed4 <SFU_BOOT_SM_HandleCriticalFailure+0x18>)
 8008ec0:	f002 fea2 	bl	800bc08 <iprintf>

  /* It's not possible to continue without compromising the stability or the security of the solution.
     The State Machine needs to be aborted and a Reset must be triggered */
  SFU_SET_SM_IF_CURR_STATE(SFU_ERROR, SFU_STATE_REBOOT_STATE_MACHINE, SFU_STATE_REBOOT_STATE_MACHINE);
 8008ec4:	4b04      	ldr	r3, [pc, #16]	; (8008ed8 <SFU_BOOT_SM_HandleCriticalFailure+0x1c>)
 8008ec6:	785a      	ldrb	r2, [r3, #1]
 8008ec8:	b2d2      	uxtb	r2, r2
 8008eca:	701a      	strb	r2, [r3, #0]
 8008ecc:	2207      	movs	r2, #7
 8008ece:	705a      	strb	r2, [r3, #1]
}
 8008ed0:	bd08      	pop	{r3, pc}
 8008ed2:	bf00      	nop
 8008ed4:	0800cf40 	.word	0x0800cf40
 8008ed8:	200010fc 	.word	0x200010fc

08008edc <SFU_BOOT_SM_VerifyUserFwSignature>:
{
 8008edc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  FLOW_CONTROL_CHECK(uFlowProtectValue, FLOW_CTRL_RUNTIME_PROTECT);
 8008ede:	4f35      	ldr	r7, [pc, #212]	; (8008fb4 <SFU_BOOT_SM_VerifyUserFwSignature+0xd8>)
  TRACE("\r\n= [SBOOT] STATE: VERIFY USER FW SIGNATURE");
 8008ee0:	4835      	ldr	r0, [pc, #212]	; (8008fb8 <SFU_BOOT_SM_VerifyUserFwSignature+0xdc>)
 8008ee2:	f002 fe91 	bl	800bc08 <iprintf>
  FLOW_CONTROL_CHECK(uFlowProtectValue, FLOW_CTRL_RUNTIME_PROTECT);
 8008ee6:	683a      	ldr	r2, [r7, #0]
 8008ee8:	f243 03f1 	movw	r3, #12529	; 0x30f1
 8008eec:	429a      	cmp	r2, r3
 8008eee:	d001      	beq.n	8008ef4 <SFU_BOOT_SM_VerifyUserFwSignature+0x18>
 8008ef0:	f000 fd38 	bl	8009964 <SFU_EXCPT_Security_Error>
  FLOW_CONTROL_INIT(uFlowProtectValue, FLOW_CTRL_INIT_VALUE);
 8008ef4:	f245 7376 	movw	r3, #22390	; 0x5776
 8008ef8:	603b      	str	r3, [r7, #0]
  e_ret_status = SFU_LL_SECU_CheckApplyStaticProtections();
 8008efa:	f001 fd85 	bl	800aa08 <SFU_LL_SECU_CheckApplyStaticProtections>
  FLOW_CONTROL_CHECK(uFlowProtectValue, FLOW_CTRL_STATIC_PROTECT);
 8008efe:	683a      	ldr	r2, [r7, #0]
 8008f00:	f243 03f1 	movw	r3, #12529	; 0x30f1
 8008f04:	429a      	cmp	r2, r3
  e_ret_status = SFU_LL_SECU_CheckApplyStaticProtections();
 8008f06:	4604      	mov	r4, r0
  FLOW_CONTROL_CHECK(uFlowProtectValue, FLOW_CTRL_STATIC_PROTECT);
 8008f08:	d001      	beq.n	8008f0e <SFU_BOOT_SM_VerifyUserFwSignature+0x32>
 8008f0a:	f000 fd2b 	bl	8009964 <SFU_EXCPT_Security_Error>
  if (e_ret_status == SFU_SUCCESS)
 8008f0e:	4b2b      	ldr	r3, [pc, #172]	; (8008fbc <SFU_BOOT_SM_VerifyUserFwSignature+0xe0>)
 8008f10:	429c      	cmp	r4, r3
 8008f12:	d103      	bne.n	8008f1c <SFU_BOOT_SM_VerifyUserFwSignature+0x40>
    e_ret_status = SFU_LL_SECU_CheckApplyRuntimeProtections(SFU_THIRD_CONFIGURATION);
 8008f14:	2002      	movs	r0, #2
 8008f16:	f001 fda3 	bl	800aa60 <SFU_LL_SECU_CheckApplyRuntimeProtections>
 8008f1a:	4604      	mov	r4, r0
  FLOW_CONTROL_CHECK(uFlowProtectValue, FLOW_CTRL_RUNTIME_PROTECT);
 8008f1c:	683a      	ldr	r2, [r7, #0]
 8008f1e:	f243 03f1 	movw	r3, #12529	; 0x30f1
 8008f22:	429a      	cmp	r2, r3
 8008f24:	d001      	beq.n	8008f2a <SFU_BOOT_SM_VerifyUserFwSignature+0x4e>
 8008f26:	f000 fd1d 	bl	8009964 <SFU_EXCPT_Security_Error>
  if (e_ret_status != SFU_SUCCESS)
 8008f2a:	4b24      	ldr	r3, [pc, #144]	; (8008fbc <SFU_BOOT_SM_VerifyUserFwSignature+0xe0>)
 8008f2c:	4e24      	ldr	r6, [pc, #144]	; (8008fc0 <SFU_BOOT_SM_VerifyUserFwSignature+0xe4>)
 8008f2e:	429c      	cmp	r4, r3
 8008f30:	d015      	beq.n	8008f5e <SFU_BOOT_SM_VerifyUserFwSignature+0x82>
    SFU_SET_SM_CURR_STATE(SFU_STATE_HANDLE_CRITICAL_FAILURE);
 8008f32:	7873      	ldrb	r3, [r6, #1]
 8008f34:	b2db      	uxtb	r3, r3
 8008f36:	7033      	strb	r3, [r6, #0]
  SFU_SET_SM_IF_CURR_STATE(e_ret_status, SFU_STATE_EXECUTE_USER_FW, SFU_STATE_HANDLE_CRITICAL_FAILURE);
 8008f38:	2306      	movs	r3, #6
 8008f3a:	e038      	b.n	8008fae <SFU_BOOT_SM_VerifyUserFwSignature+0xd2>
          FLOW_CONTROL_CHECK(uFlowCryptoValue, FLOW_CTRL_INTEGRITY);
 8008f3c:	687a      	ldr	r2, [r7, #4]
 8008f3e:	f248 435a 	movw	r3, #33882	; 0x845a
 8008f42:	429a      	cmp	r2, r3
 8008f44:	d02c      	beq.n	8008fa0 <SFU_BOOT_SM_VerifyUserFwSignature+0xc4>
 8008f46:	f000 fd0d 	bl	8009964 <SFU_EXCPT_Security_Error>
 8008f4a:	e029      	b.n	8008fa0 <SFU_BOOT_SM_VerifyUserFwSignature+0xc4>
        if (SFU_IMG_VerifyEmptyActiveSlot(SLOT_ACTIVE_1 + i) != SFU_SUCCESS)
 8008f4c:	2001      	movs	r0, #1
 8008f4e:	f000 ff57 	bl	8009e00 <SFU_IMG_VerifyEmptyActiveSlot>
 8008f52:	42a0      	cmp	r0, r4
 8008f54:	d024      	beq.n	8008fa0 <SFU_BOOT_SM_VerifyUserFwSignature+0xc4>
          (void)SFU_IMG_InvalidateCurrentFirmware(SLOT_ACTIVE_1 + i); /* If this fails we continue anyhow */
 8008f56:	2001      	movs	r0, #1
 8008f58:	f000 ff1a 	bl	8009d90 <SFU_IMG_InvalidateCurrentFirmware>
 8008f5c:	e020      	b.n	8008fa0 <SFU_BOOT_SM_VerifyUserFwSignature+0xc4>
    if (SlotStartAdd[SLOT_ACTIVE_1 + i] != 0U)
 8008f5e:	4b19      	ldr	r3, [pc, #100]	; (8008fc4 <SFU_BOOT_SM_VerifyUserFwSignature+0xe8>)
 8008f60:	685b      	ldr	r3, [r3, #4]
 8008f62:	b1eb      	cbz	r3, 8008fa0 <SFU_BOOT_SM_VerifyUserFwSignature+0xc4>
      if (SFU_SUCCESS == SFU_IMG_DetectFW(SLOT_ACTIVE_1 + i))
 8008f64:	2001      	movs	r0, #1
 8008f66:	f000 ffff 	bl	8009f68 <SFU_IMG_DetectFW>
 8008f6a:	42a0      	cmp	r0, r4
 8008f6c:	d1ee      	bne.n	8008f4c <SFU_BOOT_SM_VerifyUserFwSignature+0x70>
        FLOW_CONTROL_INIT(uFlowCryptoValue, FLOW_CTRL_INIT_VALUE);
 8008f6e:	f245 7376 	movw	r3, #22390	; 0x5776
        e_ret_status = SFU_IMG_VerifyActiveImgMetadata(SLOT_ACTIVE_1 + i);
 8008f72:	2001      	movs	r0, #1
        FLOW_CONTROL_INIT(uFlowCryptoValue, FLOW_CTRL_INIT_VALUE);
 8008f74:	607b      	str	r3, [r7, #4]
        e_ret_status = SFU_IMG_VerifyActiveImgMetadata(SLOT_ACTIVE_1 + i);
 8008f76:	f000 ffe1 	bl	8009f3c <SFU_IMG_VerifyActiveImgMetadata>
        if (SFU_SUCCESS == e_ret_status)
 8008f7a:	42a0      	cmp	r0, r4
        e_ret_status = SFU_IMG_VerifyActiveImgMetadata(SLOT_ACTIVE_1 + i);
 8008f7c:	4605      	mov	r5, r0
        if (SFU_SUCCESS == e_ret_status)
 8008f7e:	d10b      	bne.n	8008f98 <SFU_BOOT_SM_VerifyUserFwSignature+0xbc>
          e_ret_status = SFU_IMG_VerifyActiveImg(SLOT_ACTIVE_1 + i);
 8008f80:	2001      	movs	r0, #1
 8008f82:	f000 ff19 	bl	8009db8 <SFU_IMG_VerifyActiveImg>
          if (SFU_SUCCESS == e_ret_status)
 8008f86:	42a0      	cmp	r0, r4
          e_ret_status = SFU_IMG_VerifyActiveImg(SLOT_ACTIVE_1 + i);
 8008f88:	4605      	mov	r5, r0
          if (SFU_SUCCESS == e_ret_status)
 8008f8a:	d105      	bne.n	8008f98 <SFU_BOOT_SM_VerifyUserFwSignature+0xbc>
            e_ret_status = SFU_IMG_VerifyActiveSlot(SLOT_ACTIVE_1 + i);
 8008f8c:	2001      	movs	r0, #1
 8008f8e:	f000 ff23 	bl	8009dd8 <SFU_IMG_VerifyActiveSlot>
        if (SFU_SUCCESS != e_ret_status)
 8008f92:	42a0      	cmp	r0, r4
            e_ret_status = SFU_IMG_VerifyActiveSlot(SLOT_ACTIVE_1 + i);
 8008f94:	4605      	mov	r5, r0
        if (SFU_SUCCESS != e_ret_status)
 8008f96:	d0d1      	beq.n	8008f3c <SFU_BOOT_SM_VerifyUserFwSignature+0x60>
          (void)SFU_IMG_InvalidateCurrentFirmware(SLOT_ACTIVE_1 + i); /* If this fails we continue anyhow */
 8008f98:	2001      	movs	r0, #1
 8008f9a:	f000 fef9 	bl	8009d90 <SFU_IMG_InvalidateCurrentFirmware>
 8008f9e:	462c      	mov	r4, r5
  SFU_SET_SM_IF_CURR_STATE(e_ret_status, SFU_STATE_EXECUTE_USER_FW, SFU_STATE_HANDLE_CRITICAL_FAILURE);
 8008fa0:	7873      	ldrb	r3, [r6, #1]
 8008fa2:	b2db      	uxtb	r3, r3
 8008fa4:	7033      	strb	r3, [r6, #0]
 8008fa6:	4b05      	ldr	r3, [pc, #20]	; (8008fbc <SFU_BOOT_SM_VerifyUserFwSignature+0xe0>)
 8008fa8:	429c      	cmp	r4, r3
 8008faa:	d1c5      	bne.n	8008f38 <SFU_BOOT_SM_VerifyUserFwSignature+0x5c>
 8008fac:	2305      	movs	r3, #5
 8008fae:	7073      	strb	r3, [r6, #1]
}
 8008fb0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008fb2:	bf00      	nop
 8008fb4:	20001000 	.word	0x20001000
 8008fb8:	0800cf6b 	.word	0x0800cf6b
 8008fbc:	00122f11 	.word	0x00122f11
 8008fc0:	200010fc 	.word	0x200010fc
 8008fc4:	0800ce2c 	.word	0x0800ce2c

08008fc8 <SFU_BOOT_SM_CheckUserFwStatus>:
{
 8008fc8:	b510      	push	{r4, lr}
  if (initialDeviceStatusCheck == 1U)
 8008fca:	4c28      	ldr	r4, [pc, #160]	; (800906c <SFU_BOOT_SM_CheckUserFwStatus+0xa4>)
 8008fcc:	78a3      	ldrb	r3, [r4, #2]
 8008fce:	2b01      	cmp	r3, #1
 8008fd0:	d102      	bne.n	8008fd8 <SFU_BOOT_SM_CheckUserFwStatus+0x10>
    TRACE("\r\n= [SBOOT] STATE: CHECK USER FW STATUS");
 8008fd2:	4827      	ldr	r0, [pc, #156]	; (8009070 <SFU_BOOT_SM_CheckUserFwStatus+0xa8>)
 8008fd4:	f002 fe18 	bl	800bc08 <iprintf>
  m_ActiveSlotToExecute = 0U;
 8008fd8:	2300      	movs	r3, #0
    if (SFU_SUCCESS == SFU_IMG_DetectFW(MASTER_SLOT))
 8008fda:	2001      	movs	r0, #1
  m_ActiveSlotToExecute = 0U;
 8008fdc:	6063      	str	r3, [r4, #4]
    if (SFU_SUCCESS == SFU_IMG_DetectFW(MASTER_SLOT))
 8008fde:	f000 ffc3 	bl	8009f68 <SFU_IMG_DetectFW>
 8008fe2:	4b24      	ldr	r3, [pc, #144]	; (8009074 <SFU_BOOT_SM_CheckUserFwStatus+0xac>)
 8008fe4:	4298      	cmp	r0, r3
 8008fe6:	d109      	bne.n	8008ffc <SFU_BOOT_SM_CheckUserFwStatus+0x34>
      m_ActiveSlotToExecute = MASTER_SLOT;
 8008fe8:	2101      	movs	r1, #1
      TRACE("\r\n\t  A FW is detected in the slot SLOT_ACTIVE_%d", m_ActiveSlotToExecute);
 8008fea:	4823      	ldr	r0, [pc, #140]	; (8009078 <SFU_BOOT_SM_CheckUserFwStatus+0xb0>)
      m_ActiveSlotToExecute = MASTER_SLOT;
 8008fec:	6061      	str	r1, [r4, #4]
      TRACE("\r\n\t  A FW is detected in the slot SLOT_ACTIVE_%d", m_ActiveSlotToExecute);
 8008fee:	f002 fe0b 	bl	800bc08 <iprintf>
      SFU_SET_SM_CURR_STATE(SFU_STATE_VERIFY_USER_FW_SIGNATURE);
 8008ff2:	7863      	ldrb	r3, [r4, #1]
 8008ff4:	b2db      	uxtb	r3, r3
 8008ff6:	7023      	strb	r3, [r4, #0]
 8008ff8:	2304      	movs	r3, #4
 8008ffa:	7063      	strb	r3, [r4, #1]
  if (m_ActiveSlotToExecute == 0U)
 8008ffc:	6863      	ldr	r3, [r4, #4]
 8008ffe:	b103      	cbz	r3, 8009002 <SFU_BOOT_SM_CheckUserFwStatus+0x3a>
}
 8009000:	bd10      	pop	{r4, pc}
      if (SlotStartAdd[SLOT_ACTIVE_1 + i] != 0U)         /* Slot configured ? */
 8009002:	4b1e      	ldr	r3, [pc, #120]	; (800907c <SFU_BOOT_SM_CheckUserFwStatus+0xb4>)
 8009004:	685b      	ldr	r3, [r3, #4]
 8009006:	b1fb      	cbz	r3, 8009048 <SFU_BOOT_SM_CheckUserFwStatus+0x80>
        if (SFU_SUCCESS == SFU_IMG_DetectFW(SLOT_ACTIVE_1 + i))
 8009008:	2001      	movs	r0, #1
 800900a:	f000 ffad 	bl	8009f68 <SFU_IMG_DetectFW>
 800900e:	4b19      	ldr	r3, [pc, #100]	; (8009074 <SFU_BOOT_SM_CheckUserFwStatus+0xac>)
 8009010:	4298      	cmp	r0, r3
 8009012:	d109      	bne.n	8009028 <SFU_BOOT_SM_CheckUserFwStatus+0x60>
          m_ActiveSlotToExecute = SLOT_ACTIVE_1 + i;
 8009014:	2101      	movs	r1, #1
          TRACE("\r\n\t  A FW is detected in the slot SLOT_ACTIVE_%d", m_ActiveSlotToExecute);
 8009016:	4818      	ldr	r0, [pc, #96]	; (8009078 <SFU_BOOT_SM_CheckUserFwStatus+0xb0>)
          m_ActiveSlotToExecute = SLOT_ACTIVE_1 + i;
 8009018:	6061      	str	r1, [r4, #4]
          TRACE("\r\n\t  A FW is detected in the slot SLOT_ACTIVE_%d", m_ActiveSlotToExecute);
 800901a:	f002 fdf5 	bl	800bc08 <iprintf>
          SFU_SET_SM_CURR_STATE(SFU_STATE_VERIFY_USER_FW_SIGNATURE);
 800901e:	7863      	ldrb	r3, [r4, #1]
 8009020:	b2db      	uxtb	r3, r3
 8009022:	7023      	strb	r3, [r4, #0]
 8009024:	2304      	movs	r3, #4
 8009026:	7063      	strb	r3, [r4, #1]
  if (m_ActiveSlotToExecute == 0U)
 8009028:	6863      	ldr	r3, [r4, #4]
 800902a:	2b00      	cmp	r3, #0
 800902c:	d1e8      	bne.n	8009000 <SFU_BOOT_SM_CheckUserFwStatus+0x38>
        if (SFU_IMG_VerifyEmptyActiveSlot(SLOT_ACTIVE_1 + i) != SFU_SUCCESS)
 800902e:	2001      	movs	r0, #1
 8009030:	f000 fee6 	bl	8009e00 <SFU_IMG_VerifyEmptyActiveSlot>
 8009034:	4b0f      	ldr	r3, [pc, #60]	; (8009074 <SFU_BOOT_SM_CheckUserFwStatus+0xac>)
 8009036:	4298      	cmp	r0, r3
 8009038:	d006      	beq.n	8009048 <SFU_BOOT_SM_CheckUserFwStatus+0x80>
          TRACE("\r\n\t  Slot SLOT_ACTIVE_%d not empty : erasing ...", SLOT_ACTIVE_1 + i);
 800903a:	4811      	ldr	r0, [pc, #68]	; (8009080 <SFU_BOOT_SM_CheckUserFwStatus+0xb8>)
 800903c:	2101      	movs	r1, #1
 800903e:	f002 fde3 	bl	800bc08 <iprintf>
          (void)SFU_IMG_InvalidateCurrentFirmware(SLOT_ACTIVE_1 + i); /* If this fails we continue anyhow */
 8009042:	2001      	movs	r0, #1
 8009044:	f000 fea4 	bl	8009d90 <SFU_IMG_InvalidateCurrentFirmware>
    if (initialDeviceStatusCheck == 1U)
 8009048:	78a3      	ldrb	r3, [r4, #2]
 800904a:	2b01      	cmp	r3, #1
 800904c:	d107      	bne.n	800905e <SFU_BOOT_SM_CheckUserFwStatus+0x96>
      TRACE("\r\n\t  No valid FW found in the active slots nor new FW to be installed");
 800904e:	480d      	ldr	r0, [pc, #52]	; (8009084 <SFU_BOOT_SM_CheckUserFwStatus+0xbc>)
 8009050:	f002 fdda 	bl	800bc08 <iprintf>
      TRACE("\r\n\t  Waiting for the local download to start... ");
 8009054:	480c      	ldr	r0, [pc, #48]	; (8009088 <SFU_BOOT_SM_CheckUserFwStatus+0xc0>)
 8009056:	f002 fdd7 	bl	800bc08 <iprintf>
      initialDeviceStatusCheck = 0U;
 800905a:	2300      	movs	r3, #0
 800905c:	70a3      	strb	r3, [r4, #2]
    SFU_SET_SM_CURR_STATE(SFU_STATE_CHECK_NEW_FW_TO_DOWNLOAD);
 800905e:	7863      	ldrb	r3, [r4, #1]
 8009060:	b2db      	uxtb	r3, r3
 8009062:	7023      	strb	r3, [r4, #0]
 8009064:	2301      	movs	r3, #1
 8009066:	7063      	strb	r3, [r4, #1]
}
 8009068:	e7ca      	b.n	8009000 <SFU_BOOT_SM_CheckUserFwStatus+0x38>
 800906a:	bf00      	nop
 800906c:	200010fc 	.word	0x200010fc
 8009070:	0800cf97 	.word	0x0800cf97
 8009074:	00122f11 	.word	0x00122f11
 8009078:	0800cfbf 	.word	0x0800cfbf
 800907c:	0800ce2c 	.word	0x0800ce2c
 8009080:	0800cff0 	.word	0x0800cff0
 8009084:	0800d021 	.word	0x0800d021
 8009088:	0800d067 	.word	0x0800d067

0800908c <SFU_BOOT_SM_DownloadNewUserFw>:
{
 800908c:	b530      	push	{r4, r5, lr}
 800908e:	b085      	sub	sp, #20
  SFU_LOADER_StatusTypeDef  e_ret_status_app = SFU_LOADER_ERR_COM;
 8009090:	2301      	movs	r3, #1
 8009092:	f88d 3007 	strb.w	r3, [sp, #7]
  TRACE("\r\n= [SBOOT] STATE: DOWNLOAD NEW USER FIRMWARE");
 8009096:	4825      	ldr	r0, [pc, #148]	; (800912c <SFU_BOOT_SM_DownloadNewUserFw+0xa0>)
  if (e_ret_status == SFU_SUCCESS)
 8009098:	4d25      	ldr	r5, [pc, #148]	; (8009130 <SFU_BOOT_SM_DownloadNewUserFw+0xa4>)
  uint32_t                  u_size = 0;
 800909a:	2300      	movs	r3, #0
 800909c:	9303      	str	r3, [sp, #12]
  TRACE("\r\n= [SBOOT] STATE: DOWNLOAD NEW USER FIRMWARE");
 800909e:	f002 fdb3 	bl	800bc08 <iprintf>
  e_ret_status = SFU_LOADER_DownloadNewUserFw(&e_ret_status_app, &dwl_slot, &u_size);
 80090a2:	aa03      	add	r2, sp, #12
 80090a4:	a902      	add	r1, sp, #8
 80090a6:	f10d 0007 	add.w	r0, sp, #7
 80090aa:	f001 f855 	bl	800a158 <SFU_LOADER_DownloadNewUserFw>
  if (e_ret_status == SFU_SUCCESS)
 80090ae:	42a8      	cmp	r0, r5
  e_ret_status = SFU_LOADER_DownloadNewUserFw(&e_ret_status_app, &dwl_slot, &u_size);
 80090b0:	4604      	mov	r4, r0
  if (e_ret_status == SFU_SUCCESS)
 80090b2:	d120      	bne.n	80090f6 <SFU_BOOT_SM_DownloadNewUserFw+0x6a>
    e_ret_status = SFU_LL_FLASH_Read((uint8_t *) &fw_image_header_validated, (uint8_t *) SlotStartAdd[dwl_slot],
 80090b4:	4b1f      	ldr	r3, [pc, #124]	; (8009134 <SFU_BOOT_SM_DownloadNewUserFw+0xa8>)
 80090b6:	9902      	ldr	r1, [sp, #8]
 80090b8:	481f      	ldr	r0, [pc, #124]	; (8009138 <SFU_BOOT_SM_DownloadNewUserFw+0xac>)
 80090ba:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
 80090be:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80090c2:	f001 fb55 	bl	800a770 <SFU_LL_FLASH_Read>
  if (e_ret_status == SFU_SUCCESS)
 80090c6:	42a8      	cmp	r0, r5
    e_ret_status = SFU_LL_FLASH_Read((uint8_t *) &fw_image_header_validated, (uint8_t *) SlotStartAdd[dwl_slot],
 80090c8:	4604      	mov	r4, r0
  if (e_ret_status == SFU_SUCCESS)
 80090ca:	d114      	bne.n	80090f6 <SFU_BOOT_SM_DownloadNewUserFw+0x6a>
    if (SFU_IMG_Validation(dwl_slot, &fw_image_header_validated) != SFU_SUCCESS)
 80090cc:	491a      	ldr	r1, [pc, #104]	; (8009138 <SFU_BOOT_SM_DownloadNewUserFw+0xac>)
 80090ce:	9802      	ldr	r0, [sp, #8]
 80090d0:	f000 fee0 	bl	8009e94 <SFU_IMG_Validation>
 80090d4:	42a0      	cmp	r0, r4
 80090d6:	d002      	beq.n	80090de <SFU_BOOT_SM_DownloadNewUserFw+0x52>
      (void) SFU_IMG_InvalidateCurrentFirmware(dwl_slot);
 80090d8:	9802      	ldr	r0, [sp, #8]
 80090da:	f000 fe59 	bl	8009d90 <SFU_IMG_InvalidateCurrentFirmware>
  SFU_SET_SM_IF_CURR_STATE(e_ret_status, SFU_STATE_REBOOT_STATE_MACHINE, SFU_STATE_HANDLE_CRITICAL_FAILURE);
 80090de:	4b17      	ldr	r3, [pc, #92]	; (800913c <SFU_BOOT_SM_DownloadNewUserFw+0xb0>)
 80090e0:	785a      	ldrb	r2, [r3, #1]
 80090e2:	b2d2      	uxtb	r2, r2
 80090e4:	701a      	strb	r2, [r3, #0]
 80090e6:	4a12      	ldr	r2, [pc, #72]	; (8009130 <SFU_BOOT_SM_DownloadNewUserFw+0xa4>)
 80090e8:	4294      	cmp	r4, r2
 80090ea:	bf0c      	ite	eq
 80090ec:	2207      	moveq	r2, #7
 80090ee:	2206      	movne	r2, #6
 80090f0:	705a      	strb	r2, [r3, #1]
}
 80090f2:	b005      	add	sp, #20
 80090f4:	bd30      	pop	{r4, r5, pc}
    (void) SFU_IMG_InvalidateCurrentFirmware(dwl_slot);
 80090f6:	9802      	ldr	r0, [sp, #8]
 80090f8:	f000 fe4a 	bl	8009d90 <SFU_IMG_InvalidateCurrentFirmware>
    switch (e_ret_status_app)
 80090fc:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8009100:	3b01      	subs	r3, #1
 8009102:	2b05      	cmp	r3, #5
 8009104:	d8eb      	bhi.n	80090de <SFU_BOOT_SM_DownloadNewUserFw+0x52>
 8009106:	e8df f003 	tbb	[pc, r3]
 800910a:	0b03      	.short	0x0b03
 800910c:	0f0d0709 	.word	0x0f0d0709
        SFU_EXCPT_SetError(SFU_EXCPT_COM_ERR);
 8009110:	2006      	movs	r0, #6
        SFU_EXCPT_SetError(SFU_EXCPT_DECRYPT_ERR);
 8009112:	f000 fbf5 	bl	8009900 <SFU_EXCPT_SetError>
        break;
 8009116:	e7e2      	b.n	80090de <SFU_BOOT_SM_DownloadNewUserFw+0x52>
        SFU_EXCPT_SetError(SFU_EXCPT_VERSION_ERR);
 8009118:	200f      	movs	r0, #15
 800911a:	e7fa      	b.n	8009112 <SFU_BOOT_SM_DownloadNewUserFw+0x86>
        SFU_EXCPT_SetError(SFU_EXCPT_FW_TOO_BIG);
 800911c:	2005      	movs	r0, #5
 800911e:	e7f8      	b.n	8009112 <SFU_BOOT_SM_DownloadNewUserFw+0x86>
        SFU_EXCPT_SetError(SFU_EXCPT_HEADER_AUTH_ERR);
 8009120:	2007      	movs	r0, #7
 8009122:	e7f6      	b.n	8009112 <SFU_BOOT_SM_DownloadNewUserFw+0x86>
        SFU_EXCPT_SetError(SFU_EXCPT_FLASH_ERR);
 8009124:	200a      	movs	r0, #10
 8009126:	e7f4      	b.n	8009112 <SFU_BOOT_SM_DownloadNewUserFw+0x86>
        SFU_EXCPT_SetError(SFU_EXCPT_DECRYPT_ERR);
 8009128:	2008      	movs	r0, #8
 800912a:	e7f2      	b.n	8009112 <SFU_BOOT_SM_DownloadNewUserFw+0x86>
 800912c:	0800d098 	.word	0x0800d098
 8009130:	00122f11 	.word	0x00122f11
 8009134:	0800ce2c 	.word	0x0800ce2c
 8009138:	20001530 	.word	0x20001530
 800913c:	200010fc 	.word	0x200010fc

08009140 <SFU_BOOT_SM_CheckNewFwToDownload>:
{
 8009140:	b538      	push	{r3, r4, r5, lr}
  if (initialDeviceStatusCheck == 1U)
 8009142:	4c0d      	ldr	r4, [pc, #52]	; (8009178 <SFU_BOOT_SM_CheckNewFwToDownload+0x38>)
 8009144:	78a5      	ldrb	r5, [r4, #2]
 8009146:	2d01      	cmp	r5, #1
 8009148:	d00a      	beq.n	8009160 <SFU_BOOT_SM_CheckNewFwToDownload+0x20>
    e_ret_status = SFU_SUCCESS;
 800914a:	4a0c      	ldr	r2, [pc, #48]	; (800917c <SFU_BOOT_SM_CheckNewFwToDownload+0x3c>)
  SFU_SET_SM_IF_CURR_STATE(e_ret_status, SFU_STATE_DOWNLOAD_NEW_USER_FW, SFU_STATE_VERIFY_USER_FW_STATUS);
 800914c:	7863      	ldrb	r3, [r4, #1]
 800914e:	b2db      	uxtb	r3, r3
 8009150:	7023      	strb	r3, [r4, #0]
 8009152:	4b0a      	ldr	r3, [pc, #40]	; (800917c <SFU_BOOT_SM_CheckNewFwToDownload+0x3c>)
 8009154:	429a      	cmp	r2, r3
 8009156:	bf0c      	ite	eq
 8009158:	2302      	moveq	r3, #2
 800915a:	2303      	movne	r3, #3
 800915c:	7063      	strb	r3, [r4, #1]
}
 800915e:	bd38      	pop	{r3, r4, r5, pc}
    TRACE("\r\n= [SBOOT] STATE: CHECK NEW FIRMWARE TO DOWNLOAD");
 8009160:	4807      	ldr	r0, [pc, #28]	; (8009180 <SFU_BOOT_SM_CheckNewFwToDownload+0x40>)
 8009162:	f002 fd51 	bl	800bc08 <iprintf>
    if (0U != BUTTON_PUSHED())
 8009166:	4807      	ldr	r0, [pc, #28]	; (8009184 <SFU_BOOT_SM_CheckNewFwToDownload+0x44>)
 8009168:	4629      	mov	r1, r5
 800916a:	f002 f8d7 	bl	800b31c <HAL_GPIO_ReadPin>
 800916e:	2800      	cmp	r0, #0
 8009170:	d0eb      	beq.n	800914a <SFU_BOOT_SM_CheckNewFwToDownload+0xa>
      e_ret_status = SFU_ERROR;
 8009172:	f641 72e1 	movw	r2, #8161	; 0x1fe1
 8009176:	e7e9      	b.n	800914c <SFU_BOOT_SM_CheckNewFwToDownload+0xc>
 8009178:	200010fc 	.word	0x200010fc
 800917c:	00122f11 	.word	0x00122f11
 8009180:	0800d0c6 	.word	0x0800d0c6
 8009184:	40020000 	.word	0x40020000

08009188 <SFU_BOOT_SM_CheckStatusOnReset>:
{
 8009188:	b507      	push	{r0, r1, r2, lr}
  TRACE("\r\n= [SBOOT] STATE: CHECK STATUS ON RESET");
 800918a:	4818      	ldr	r0, [pc, #96]	; (80091ec <SFU_BOOT_SM_CheckStatusOnReset+0x64>)
 800918c:	f002 fd3c 	bl	800bc08 <iprintf>
  * @param  None
  * @retval None
  */
static void SFU_BOOT_ManageResetSources(void)
{
  SFU_RESET_IdTypeDef e_wakeup_source_id = SFU_RESET_UNKNOWN;
 8009190:	2300      	movs	r3, #0

  /* Check the wakeup sources */
  SFU_LL_SECU_GetResetSources(&e_wakeup_source_id);
 8009192:	f10d 0007 	add.w	r0, sp, #7
  SFU_RESET_IdTypeDef e_wakeup_source_id = SFU_RESET_UNKNOWN;
 8009196:	f88d 3007 	strb.w	r3, [sp, #7]
  SFU_LL_SECU_GetResetSources(&e_wakeup_source_id);
 800919a:	f001 fc65 	bl	800aa68 <SFU_LL_SECU_GetResetSources>
  switch (e_wakeup_source_id)
 800919e:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80091a2:	3b01      	subs	r3, #1
 80091a4:	2b05      	cmp	r3, #5
 80091a6:	d81e      	bhi.n	80091e6 <SFU_BOOT_SM_CheckStatusOnReset+0x5e>
 80091a8:	e8df f003 	tbb	[pc, r3]
 80091ac:	17151303 	.word	0x17151303
 80091b0:	1b19      	.short	0x1b19
       * Please note that the example of reset causes handling below is only a basic example to illustrate the way the
       * RCC_CSR flags can be used to do so.
       */

    case SFU_RESET_WDG_RESET:
      TRACE("\r\n\t  WARNING: A Reboot has been triggered by a Watchdog reset!");
 80091b2:	480f      	ldr	r0, [pc, #60]	; (80091f0 <SFU_BOOT_SM_CheckStatusOnReset+0x68>)
         ...
      */
      break;

    default:
      TRACE("\r\n\t  WARNING: A Reboot has been triggered by an Unknown reset source!");
 80091b4:	f002 fd28 	bl	800bc08 <iprintf>
      */
      break;
  }

  /* Once the reset sources has been managed and a possible error has been set, clear the reset sources */
  SFU_LL_SECU_ClearResetSources();
 80091b8:	f001 fc72 	bl	800aaa0 <SFU_LL_SECU_ClearResetSources>
  SFU_MPU_EnterUnprivilegedMode();
 80091bc:	f001 f972 	bl	800a4a4 <SFU_MPU_EnterUnprivilegedMode>
  SFU_SET_SM_CURR_STATE(SFU_STATE_CHECK_NEW_FW_TO_DOWNLOAD);
 80091c0:	4b0c      	ldr	r3, [pc, #48]	; (80091f4 <SFU_BOOT_SM_CheckStatusOnReset+0x6c>)
 80091c2:	785a      	ldrb	r2, [r3, #1]
 80091c4:	b2d2      	uxtb	r2, r2
 80091c6:	701a      	strb	r2, [r3, #0]
 80091c8:	2201      	movs	r2, #1
 80091ca:	705a      	strb	r2, [r3, #1]
}
 80091cc:	b003      	add	sp, #12
 80091ce:	f85d fb04 	ldr.w	pc, [sp], #4
      TRACE("\r\n\t  INFO: A Reboot has been triggered by a LowPower reset!");
 80091d2:	4809      	ldr	r0, [pc, #36]	; (80091f8 <SFU_BOOT_SM_CheckStatusOnReset+0x70>)
 80091d4:	e7ee      	b.n	80091b4 <SFU_BOOT_SM_CheckStatusOnReset+0x2c>
      TRACE("\r\n\t  INFO: A Reboot has been triggered by a Hardware reset!");
 80091d6:	4809      	ldr	r0, [pc, #36]	; (80091fc <SFU_BOOT_SM_CheckStatusOnReset+0x74>)
 80091d8:	e7ec      	b.n	80091b4 <SFU_BOOT_SM_CheckStatusOnReset+0x2c>
      TRACE("\r\n\t  INFO: A Reboot has been triggered by a BOR reset!");
 80091da:	4809      	ldr	r0, [pc, #36]	; (8009200 <SFU_BOOT_SM_CheckStatusOnReset+0x78>)
 80091dc:	e7ea      	b.n	80091b4 <SFU_BOOT_SM_CheckStatusOnReset+0x2c>
      TRACE("\r\n\t  INFO: A Reboot has been triggered by a Software reset!");
 80091de:	4809      	ldr	r0, [pc, #36]	; (8009204 <SFU_BOOT_SM_CheckStatusOnReset+0x7c>)
 80091e0:	e7e8      	b.n	80091b4 <SFU_BOOT_SM_CheckStatusOnReset+0x2c>
      TRACE("\r\n\t  WARNING: A Reboot has been triggered by an Option Bytes reload!");
 80091e2:	4809      	ldr	r0, [pc, #36]	; (8009208 <SFU_BOOT_SM_CheckStatusOnReset+0x80>)
 80091e4:	e7e6      	b.n	80091b4 <SFU_BOOT_SM_CheckStatusOnReset+0x2c>
      TRACE("\r\n\t  WARNING: A Reboot has been triggered by an Unknown reset source!");
 80091e6:	4809      	ldr	r0, [pc, #36]	; (800920c <SFU_BOOT_SM_CheckStatusOnReset+0x84>)
 80091e8:	e7e4      	b.n	80091b4 <SFU_BOOT_SM_CheckStatusOnReset+0x2c>
 80091ea:	bf00      	nop
 80091ec:	0800d0f8 	.word	0x0800d0f8
 80091f0:	0800d121 	.word	0x0800d121
 80091f4:	200010fc 	.word	0x200010fc
 80091f8:	0800d160 	.word	0x0800d160
 80091fc:	0800d19c 	.word	0x0800d19c
 8009200:	0800d1d8 	.word	0x0800d1d8
 8009204:	0800d20f 	.word	0x0800d20f
 8009208:	0800d24b 	.word	0x0800d24b
 800920c:	0800d290 	.word	0x0800d290

08009210 <SFU_BOOT_DeInit.isra.0>:
static SFU_ErrorStatus SFU_BOOT_DeInit(void)
 8009210:	b538      	push	{r3, r4, r5, lr}
  if (SFU_EXCPT_DeInit() != SFU_SUCCESS)
 8009212:	f000 fbcf 	bl	80099b4 <SFU_EXCPT_DeInit>
 8009216:	4b09      	ldr	r3, [pc, #36]	; (800923c <SFU_BOOT_DeInit.isra.0+0x2c>)
 8009218:	4298      	cmp	r0, r3
 800921a:	4605      	mov	r5, r0
 800921c:	d10c      	bne.n	8009238 <SFU_BOOT_DeInit.isra.0+0x28>
  if (SFU_LOADER_DeInit() != SFU_SUCCESS)
 800921e:	f000 ff97 	bl	800a150 <SFU_LOADER_DeInit>
 8009222:	42a8      	cmp	r0, r5
 8009224:	4604      	mov	r4, r0
 8009226:	d107      	bne.n	8009238 <SFU_BOOT_DeInit.isra.0+0x28>
  if (SFU_COM_DeInit() != SFU_SUCCESS)
 8009228:	f000 fb4e 	bl	80098c8 <SFU_COM_DeInit>
 800922c:	42a0      	cmp	r0, r4
 800922e:	d103      	bne.n	8009238 <SFU_BOOT_DeInit.isra.0+0x28>
}
 8009230:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  if (SFU_LL_DeInit() != SFU_SUCCESS)
 8009234:	f001 b95a 	b.w	800a4ec <SFU_LL_DeInit>
}
 8009238:	bd38      	pop	{r3, r4, r5, pc}
 800923a:	bf00      	nop
 800923c:	00122f11 	.word	0x00122f11

08009240 <SFU_BOOT_ForceReboot>:
{
 8009240:	b508      	push	{r3, lr}
  TRACE("\r\n========= End of Execution ==========");
 8009242:	480d      	ldr	r0, [pc, #52]	; (8009278 <SFU_BOOT_ForceReboot+0x38>)
 8009244:	f002 fce0 	bl	800bc08 <iprintf>
  TRACE("\r\n\r\n\r\n");
 8009248:	480c      	ldr	r0, [pc, #48]	; (800927c <SFU_BOOT_ForceReboot+0x3c>)
 800924a:	f002 fd63 	bl	800bd14 <puts>
  if (0U != SFU_MPU_IsUnprivileged())
 800924e:	f001 f91f 	bl	800a490 <SFU_MPU_IsUnprivileged>
 8009252:	b120      	cbz	r0, 800925e <SFU_BOOT_ForceReboot+0x1e>
}
 8009254:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    SFU_MPU_SysCall((uint32_t)SB_SYSCALL_RESET);
 8009258:	2002      	movs	r0, #2
 800925a:	f001 b915 	b.w	800a488 <SFU_MPU_SysCall>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800925e:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8009262:	4907      	ldr	r1, [pc, #28]	; (8009280 <SFU_BOOT_ForceReboot+0x40>)
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8009264:	4b07      	ldr	r3, [pc, #28]	; (8009284 <SFU_BOOT_ForceReboot+0x44>)
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8009266:	68ca      	ldr	r2, [r1, #12]
 8009268:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 800926c:	4313      	orrs	r3, r2
 800926e:	60cb      	str	r3, [r1, #12]
 8009270:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8009274:	bf00      	nop
  for(;;)                                                           /* wait until reset */
 8009276:	e7fd      	b.n	8009274 <SFU_BOOT_ForceReboot+0x34>
 8009278:	0800d2d6 	.word	0x0800d2d6
 800927c:	0800d2fe 	.word	0x0800d2fe
 8009280:	e000ed00 	.word	0xe000ed00
 8009284:	05fa0004 	.word	0x05fa0004

08009288 <SFU_BOOT_SM_RebootStateMachine>:
{
 8009288:	b508      	push	{r3, lr}
  TRACE("\r\n= [SBOOT] STATE: REBOOT STATE MACHINE");
 800928a:	4804      	ldr	r0, [pc, #16]	; (800929c <SFU_BOOT_SM_RebootStateMachine+0x14>)
 800928c:	f002 fcbc 	bl	800bc08 <iprintf>
  (void)SFU_BOOT_DeInit();
 8009290:	f7ff ffbe 	bl	8009210 <SFU_BOOT_DeInit.isra.0>
}
 8009294:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  SFU_BOOT_ForceReboot();
 8009298:	f7ff bfd2 	b.w	8009240 <SFU_BOOT_ForceReboot>
 800929c:	0800d304 	.word	0x0800d304

080092a0 <SFU_BOOT_SM_ExecuteUserFw>:
{
 80092a0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  FLOW_CONTROL_CHECK(uFlowCryptoValue, FLOW_CTRL_INTEGRITY);
 80092a2:	4d33      	ldr	r5, [pc, #204]	; (8009370 <SFU_BOOT_SM_ExecuteUserFw+0xd0>)
  SE_StatusTypeDef e_se_status = SE_KO;
 80092a4:	4b33      	ldr	r3, [pc, #204]	; (8009374 <SFU_BOOT_SM_ExecuteUserFw+0xd4>)
  TRACE("\r\n= [SBOOT] STATE: EXECUTE USER FIRMWARE");
 80092a6:	4834      	ldr	r0, [pc, #208]	; (8009378 <SFU_BOOT_SM_ExecuteUserFw+0xd8>)
  SE_StatusTypeDef e_se_status = SE_KO;
 80092a8:	9301      	str	r3, [sp, #4]
  TRACE("\r\n= [SBOOT] STATE: EXECUTE USER FIRMWARE");
 80092aa:	f002 fcad 	bl	800bc08 <iprintf>
  (void) SFU_LL_SECU_IWDG_Refresh();
 80092ae:	f001 fbff 	bl	800aab0 <SFU_LL_SECU_IWDG_Refresh>
  FLOW_CONTROL_CHECK(uFlowCryptoValue, FLOW_CTRL_INTEGRITY);
 80092b2:	686a      	ldr	r2, [r5, #4]
 80092b4:	f248 435a 	movw	r3, #33882	; 0x845a
 80092b8:	429a      	cmp	r2, r3
 80092ba:	d001      	beq.n	80092c0 <SFU_BOOT_SM_ExecuteUserFw+0x20>
 80092bc:	f000 fb52 	bl	8009964 <SFU_EXCPT_Security_Error>
    if (SlotStartAdd[SLOT_ACTIVE_1 + i] != 0U)
 80092c0:	4b2e      	ldr	r3, [pc, #184]	; (800937c <SFU_BOOT_SM_ExecuteUserFw+0xdc>)
 80092c2:	685b      	ldr	r3, [r3, #4]
 80092c4:	b133      	cbz	r3, 80092d4 <SFU_BOOT_SM_ExecuteUserFw+0x34>
      if (SFU_SUCCESS == SFU_IMG_DetectFW(SLOT_ACTIVE_1 + i))
 80092c6:	2001      	movs	r0, #1
 80092c8:	f000 fe4e 	bl	8009f68 <SFU_IMG_DetectFW>
 80092cc:	4b2c      	ldr	r3, [pc, #176]	; (8009380 <SFU_BOOT_SM_ExecuteUserFw+0xe0>)
 80092ce:	4298      	cmp	r0, r3
 80092d0:	4604      	mov	r4, r0
 80092d2:	d012      	beq.n	80092fa <SFU_BOOT_SM_ExecuteUserFw+0x5a>
  e_ret_status = SFU_LL_FLASH_Config_Exe(m_ActiveSlotToExecute);
 80092d4:	4c2b      	ldr	r4, [pc, #172]	; (8009384 <SFU_BOOT_SM_ExecuteUserFw+0xe4>)
 80092d6:	6860      	ldr	r0, [r4, #4]
 80092d8:	f001 fa58 	bl	800a78c <SFU_LL_FLASH_Config_Exe>
  if (e_ret_status != SFU_SUCCESS)
 80092dc:	4b28      	ldr	r3, [pc, #160]	; (8009380 <SFU_BOOT_SM_ExecuteUserFw+0xe0>)
 80092de:	4298      	cmp	r0, r3
 80092e0:	d027      	beq.n	8009332 <SFU_BOOT_SM_ExecuteUserFw+0x92>
    SFU_EXCPT_SetError(SFU_EXCPT_FLASH_CFG_ERR);
 80092e2:	200b      	movs	r0, #11
        SFU_EXCPT_SetError(SFU_EXCPT_LOCK_SE_SERVICES_ERR);
 80092e4:	f000 fb0c 	bl	8009900 <SFU_EXCPT_SetError>
        SFU_BOOT_ForceReboot();
 80092e8:	f7ff ffaa 	bl	8009240 <SFU_BOOT_ForceReboot>
  SFU_SET_SM_IF_CURR_STATE(e_ret_status, SFU_STATE_HANDLE_CRITICAL_FAILURE, SFU_STATE_HANDLE_CRITICAL_FAILURE);
 80092ec:	7863      	ldrb	r3, [r4, #1]
 80092ee:	b2db      	uxtb	r3, r3
 80092f0:	7023      	strb	r3, [r4, #0]
 80092f2:	2306      	movs	r3, #6
 80092f4:	7063      	strb	r3, [r4, #1]
}
 80092f6:	b003      	add	sp, #12
 80092f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
        FLOW_CONTROL_INIT(uFlowCryptoValue, FLOW_CTRL_INIT_VALUE);
 80092fa:	f245 7376 	movw	r3, #22390	; 0x5776
        if (SFU_IMG_VerifyActiveImgMetadata(SLOT_ACTIVE_1 + i) != SFU_SUCCESS)
 80092fe:	2001      	movs	r0, #1
        FLOW_CONTROL_INIT(uFlowCryptoValue, FLOW_CTRL_INIT_VALUE);
 8009300:	606b      	str	r3, [r5, #4]
        if (SFU_IMG_VerifyActiveImgMetadata(SLOT_ACTIVE_1 + i) != SFU_SUCCESS)
 8009302:	f000 fe1b 	bl	8009f3c <SFU_IMG_VerifyActiveImgMetadata>
 8009306:	42a0      	cmp	r0, r4
 8009308:	d001      	beq.n	800930e <SFU_BOOT_SM_ExecuteUserFw+0x6e>
          SFU_EXCPT_Security_Error();
 800930a:	f000 fb2b 	bl	8009964 <SFU_EXCPT_Security_Error>
        if (SFU_IMG_ControlActiveImgTag(SLOT_ACTIVE_1 + i) != SFU_SUCCESS)
 800930e:	2001      	movs	r0, #1
 8009310:	f000 fd88 	bl	8009e24 <SFU_IMG_ControlActiveImgTag>
 8009314:	4b1a      	ldr	r3, [pc, #104]	; (8009380 <SFU_BOOT_SM_ExecuteUserFw+0xe0>)
 8009316:	4298      	cmp	r0, r3
 8009318:	d001      	beq.n	800931e <SFU_BOOT_SM_ExecuteUserFw+0x7e>
          SFU_EXCPT_Security_Error();
 800931a:	f000 fb23 	bl	8009964 <SFU_EXCPT_Security_Error>
        FLOW_CONTROL_CHECK(uFlowCryptoValue, FLOW_CTRL_INTEGRITY);
 800931e:	686a      	ldr	r2, [r5, #4]
 8009320:	f248 435a 	movw	r3, #33882	; 0x845a
 8009324:	429a      	cmp	r2, r3
 8009326:	d0d5      	beq.n	80092d4 <SFU_BOOT_SM_ExecuteUserFw+0x34>
 8009328:	f000 fb1c 	bl	8009964 <SFU_EXCPT_Security_Error>
  for (i = 0U; i < SFU_NB_MAX_ACTIVE_IMAGE; i++)
 800932c:	e7d2      	b.n	80092d4 <SFU_BOOT_SM_ExecuteUserFw+0x34>
        SFU_EXCPT_SetError(SFU_EXCPT_LOCK_SE_SERVICES_ERR);
 800932e:	2004      	movs	r0, #4
 8009330:	e7d8      	b.n	80092e4 <SFU_BOOT_SM_ExecuteUserFw+0x44>
    if (SE_LockRestrictServices(&e_se_status) == SE_SUCCESS)
 8009332:	a801      	add	r0, sp, #4
 8009334:	f7fe fed4 	bl	80080e0 <SE_LockRestrictServices>
 8009338:	4b13      	ldr	r3, [pc, #76]	; (8009388 <SFU_BOOT_SM_ExecuteUserFw+0xe8>)
 800933a:	4298      	cmp	r0, r3
 800933c:	4606      	mov	r6, r0
 800933e:	d1f6      	bne.n	800932e <SFU_BOOT_SM_ExecuteUserFw+0x8e>
      if (SE_LockRestrictServices(&e_se_status) == SE_SUCCESS)
 8009340:	a801      	add	r0, sp, #4
 8009342:	f7fe fecd 	bl	80080e0 <SE_LockRestrictServices>
 8009346:	42b0      	cmp	r0, r6
 8009348:	d1f1      	bne.n	800932e <SFU_BOOT_SM_ExecuteUserFw+0x8e>
        (void)SFU_BOOT_DeInit(); /* the return value is not checked, we will always try launching the UserApp */
 800934a:	f7ff ff61 	bl	8009210 <SFU_BOOT_DeInit.isra.0>
        FLOW_CONTROL_STEP(uFlowCryptoValue, FLOW_STEP_LOCK_SERVICE, FLOW_CTRL_LOCK_SERVICE);
 800934e:	686a      	ldr	r2, [r5, #4]
 8009350:	f482 4334 	eor.w	r3, r2, #46080	; 0xb400
 8009354:	f083 03ab 	eor.w	r3, r3, #171	; 0xab
 8009358:	606b      	str	r3, [r5, #4]
 800935a:	f248 435a 	movw	r3, #33882	; 0x845a
 800935e:	429a      	cmp	r2, r3
 8009360:	d001      	beq.n	8009366 <SFU_BOOT_SM_ExecuteUserFw+0xc6>
 8009362:	f000 faff 	bl	8009964 <SFU_EXCPT_Security_Error>
        e_ret_status = SFU_IMG_LaunchActiveImg(m_ActiveSlotToExecute);
 8009366:	6860      	ldr	r0, [r4, #4]
 8009368:	f000 fd7a 	bl	8009e60 <SFU_IMG_LaunchActiveImg>
        while (1 == 1)
 800936c:	e7fe      	b.n	800936c <SFU_BOOT_SM_ExecuteUserFw+0xcc>
 800936e:	bf00      	nop
 8009370:	20001000 	.word	0x20001000
 8009374:	0013023d 	.word	0x0013023d
 8009378:	0800d32c 	.word	0x0800d32c
 800937c:	0800ce2c 	.word	0x0800ce2c
 8009380:	00122f11 	.word	0x00122f11
 8009384:	200010fc 	.word	0x200010fc
 8009388:	0012310f 	.word	0x0012310f

0800938c <DOWNLOAD_KEY_INIT>:
{
 800938c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	__HAL_RCC_GPIOA_CLK_ENABLE();  //使能对应时钟
 800938e:	4b0c      	ldr	r3, [pc, #48]	; (80093c0 <DOWNLOAD_KEY_INIT+0x34>)
	HAL_GPIO_Init(GPIOA, &GPIO_InitStructure);
 8009390:	480c      	ldr	r0, [pc, #48]	; (80093c4 <DOWNLOAD_KEY_INIT+0x38>)
	__HAL_RCC_GPIOA_CLK_ENABLE();  //使能对应时钟
 8009392:	2100      	movs	r1, #0
 8009394:	9100      	str	r1, [sp, #0]
 8009396:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009398:	f042 0201 	orr.w	r2, r2, #1
 800939c:	631a      	str	r2, [r3, #48]	; 0x30
 800939e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80093a0:	f003 0301 	and.w	r3, r3, #1
 80093a4:	9300      	str	r3, [sp, #0]
 80093a6:	9b00      	ldr	r3, [sp, #0]
	GPIO_InitStructure.Pin=GPIO_PIN_0;   //设置GPIO引脚
 80093a8:	2301      	movs	r3, #1
	GPIO_InitStructure.Mode=GPIO_MODE_INPUT;  //GPIO模式设置为按键输入
 80093aa:	e9cd 3101 	strd	r3, r1, [sp, #4]
	GPIO_InitStructure.Speed=GPIO_SPEED_FREQ_VERY_HIGH;
 80093ae:	2203      	movs	r2, #3
	HAL_GPIO_Init(GPIOA, &GPIO_InitStructure);
 80093b0:	a901      	add	r1, sp, #4
	GPIO_InitStructure.Pull=GPIO_PULLUP; //设置为上拉输入
 80093b2:	e9cd 3203 	strd	r3, r2, [sp, #12]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStructure);
 80093b6:	f001 fedd 	bl	800b174 <HAL_GPIO_Init>
}
 80093ba:	b007      	add	sp, #28
 80093bc:	f85d fb04 	ldr.w	pc, [sp], #4
 80093c0:	40023800 	.word	0x40023800
 80093c4:	40020000 	.word	0x40020000

080093c8 <SFU_BOOT_RunSecureBootService>:
{
 80093c8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  if (SE_Startup() == SE_SUCCESS)
 80093ca:	f7fe fe65 	bl	8008098 <SE_Startup>
 80093ce:	4b3b      	ldr	r3, [pc, #236]	; (80094bc <SFU_BOOT_RunSecureBootService+0xf4>)
 80093d0:	4298      	cmp	r0, r3
 80093d2:	4604      	mov	r4, r0
 80093d4:	d16f      	bne.n	80094b6 <SFU_BOOT_RunSecureBootService+0xee>
  (void) SFU_COM_Init();
 80093d6:	f000 fa67 	bl	80098a8 <SFU_COM_Init>
  if (SFU_LL_SECU_CheckApplyStaticProtections() == SFU_SUCCESS)
 80093da:	f001 fb15 	bl	800aa08 <SFU_LL_SECU_CheckApplyStaticProtections>
 80093de:	4b38      	ldr	r3, [pc, #224]	; (80094c0 <SFU_BOOT_RunSecureBootService+0xf8>)
 80093e0:	4298      	cmp	r0, r3
 80093e2:	4606      	mov	r6, r0
 80093e4:	d005      	beq.n	80093f2 <SFU_BOOT_RunSecureBootService+0x2a>
    TRACE("\r\n= [SBOOT] System Security Check failed! Rebooting...");
 80093e6:	4837      	ldr	r0, [pc, #220]	; (80094c4 <SFU_BOOT_RunSecureBootService+0xfc>)
 80093e8:	f002 fc0e 	bl	800bc08 <iprintf>
      e_ret_code = SFU_BOOT_SECIPS_CFG_FAIL;
 80093ec:	2001      	movs	r0, #1
}
 80093ee:	b003      	add	sp, #12
 80093f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    e_ret_status = SFU_LL_SECU_CheckApplyRuntimeProtections(SFU_INITIAL_CONFIGURATION);
 80093f2:	2000      	movs	r0, #0
 80093f4:	f001 fb34 	bl	800aa60 <SFU_LL_SECU_CheckApplyRuntimeProtections>
  if (SFU_BOOT_CheckApplySecurityProtections() != SFU_SUCCESS)
 80093f8:	42b0      	cmp	r0, r6
    e_ret_status = SFU_LL_SECU_CheckApplyRuntimeProtections(SFU_INITIAL_CONFIGURATION);
 80093fa:	4605      	mov	r5, r0
  if (SFU_BOOT_CheckApplySecurityProtections() != SFU_SUCCESS)
 80093fc:	d1f3      	bne.n	80093e6 <SFU_BOOT_RunSecureBootService+0x1e>
    TRACE("\r\n= [SBOOT] System Security Check successfully passed. Starting...");
 80093fe:	4832      	ldr	r0, [pc, #200]	; (80094c8 <SFU_BOOT_RunSecureBootService+0x100>)
  initialDeviceStatusCheck = 1U;
 8009400:	4f32      	ldr	r7, [pc, #200]	; (80094cc <SFU_BOOT_RunSecureBootService+0x104>)
    TRACE("\r\n= [SBOOT] System Security Check successfully passed. Starting...");
 8009402:	f002 fc01 	bl	800bc08 <iprintf>
  (void) BSP_LED_Init(SFU_STATUS_LED);
 8009406:	2000      	movs	r0, #0
 8009408:	f001 fb80 	bl	800ab0c <BSP_LED_Init>
  DOWNLOAD_KEY_INIT();
 800940c:	f7ff ffbe 	bl	800938c <DOWNLOAD_KEY_INIT>
  initialDeviceStatusCheck = 1U;
 8009410:	2301      	movs	r3, #1
 8009412:	70bb      	strb	r3, [r7, #2]
  if (SFU_LL_Init() != SFU_SUCCESS)
 8009414:	f001 f896 	bl	800a544 <SFU_LL_Init>
 8009418:	42a8      	cmp	r0, r5
 800941a:	4606      	mov	r6, r0
 800941c:	d134      	bne.n	8009488 <SFU_BOOT_RunSecureBootService+0xc0>
  if (SFU_LL_FLASH_Init() != SFU_SUCCESS)
 800941e:	f001 f98b 	bl	800a738 <SFU_LL_FLASH_Init>
 8009422:	42b0      	cmp	r0, r6
 8009424:	4605      	mov	r5, r0
 8009426:	d12f      	bne.n	8009488 <SFU_BOOT_RunSecureBootService+0xc0>
  if (SFU_COM_Init() != SFU_SUCCESS)
 8009428:	f000 fa3e 	bl	80098a8 <SFU_COM_Init>
 800942c:	42a8      	cmp	r0, r5
 800942e:	4606      	mov	r6, r0
 8009430:	d12a      	bne.n	8009488 <SFU_BOOT_RunSecureBootService+0xc0>
  if (SFU_LOADER_Init() != SFU_SUCCESS)
 8009432:	f000 fe89 	bl	800a148 <SFU_LOADER_Init>
 8009436:	42b0      	cmp	r0, r6
 8009438:	4605      	mov	r5, r0
 800943a:	d125      	bne.n	8009488 <SFU_BOOT_RunSecureBootService+0xc0>
  if (SFU_EXCPT_Init() != SFU_SUCCESS)
 800943c:	f000 fab6 	bl	80099ac <SFU_EXCPT_Init>
 8009440:	42a8      	cmp	r0, r5
 8009442:	d121      	bne.n	8009488 <SFU_BOOT_RunSecureBootService+0xc0>
  if (SFU_IMG_InitImageHandling() != SFU_IMG_INIT_OK)
 8009444:	f000 fc5a 	bl	8009cfc <SFU_IMG_InitImageHandling>
 8009448:	b9f0      	cbnz	r0, 8009488 <SFU_BOOT_RunSecureBootService+0xc0>
  TRACE("\r\n\r\n");
 800944a:	4821      	ldr	r0, [pc, #132]	; (80094d0 <SFU_BOOT_RunSecureBootService+0x108>)
 800944c:	f002 fc62 	bl	800bd14 <puts>
  TRACE("\r\n======================================================================");
 8009450:	4820      	ldr	r0, [pc, #128]	; (80094d4 <SFU_BOOT_RunSecureBootService+0x10c>)
 8009452:	f002 fbd9 	bl	800bc08 <iprintf>
  TRACE("\r\n=              (C) COPYRIGHT 2017 STMicroelectronics                 =");
 8009456:	4820      	ldr	r0, [pc, #128]	; (80094d8 <SFU_BOOT_RunSecureBootService+0x110>)
 8009458:	f002 fbd6 	bl	800bc08 <iprintf>
  TRACE("\r\n=                                                                    =");
 800945c:	481f      	ldr	r0, [pc, #124]	; (80094dc <SFU_BOOT_RunSecureBootService+0x114>)
 800945e:	f002 fbd3 	bl	800bc08 <iprintf>
  TRACE("\r\n=              Secure Boot and Secure Firmware Update                =");
 8009462:	481f      	ldr	r0, [pc, #124]	; (80094e0 <SFU_BOOT_RunSecureBootService+0x118>)
 8009464:	f002 fbd0 	bl	800bc08 <iprintf>
  TRACE("\r\n======================================================================");
 8009468:	481a      	ldr	r0, [pc, #104]	; (80094d4 <SFU_BOOT_RunSecureBootService+0x10c>)
 800946a:	f002 fbcd 	bl	800bc08 <iprintf>
  TRACE("\r\n\r\n");
 800946e:	4818      	ldr	r0, [pc, #96]	; (80094d0 <SFU_BOOT_RunSecureBootService+0x108>)
 8009470:	f002 fc50 	bl	800bd14 <puts>
  if (SE_Init(&e_se_status, SystemCoreClock) != SE_SUCCESS)
 8009474:	4b1b      	ldr	r3, [pc, #108]	; (80094e4 <SFU_BOOT_RunSecureBootService+0x11c>)
 8009476:	a801      	add	r0, sp, #4
 8009478:	6819      	ldr	r1, [r3, #0]
 800947a:	f7fe fde7 	bl	800804c <SE_Init>
 800947e:	42a0      	cmp	r0, r4
 8009480:	d004      	beq.n	800948c <SFU_BOOT_RunSecureBootService+0xc4>
    TRACE("\r\n= [SBOOT] SECURE ENGINE INITIALIZATION CRITICAL FAILURE!");
 8009482:	4819      	ldr	r0, [pc, #100]	; (80094e8 <SFU_BOOT_RunSecureBootService+0x120>)
 8009484:	f002 fbc0 	bl	800bc08 <iprintf>
        e_ret_code = SFU_BOOT_INIT_FAIL;
 8009488:	2002      	movs	r0, #2
 800948a:	e7b0      	b.n	80093ee <SFU_BOOT_RunSecureBootService+0x26>
    TRACE("\r\n= [SBOOT] SECURE ENGINE INITIALIZATION SUCCESSFUL");
 800948c:	4817      	ldr	r0, [pc, #92]	; (80094ec <SFU_BOOT_RunSecureBootService+0x124>)
    if (SFU_BOOT_SecuritySafetyCheck() == SFU_SUCCESS)
 800948e:	4c0c      	ldr	r4, [pc, #48]	; (80094c0 <SFU_BOOT_RunSecureBootService+0xf8>)
      fnStateMachineFunction = fnStateMachineTable[(uint8_t)m_StateMachineContext.CurrState];
 8009490:	4d17      	ldr	r5, [pc, #92]	; (80094f0 <SFU_BOOT_RunSecureBootService+0x128>)
    TRACE("\r\n= [SBOOT] SECURE ENGINE INITIALIZATION SUCCESSFUL");
 8009492:	f002 fbb9 	bl	800bc08 <iprintf>
  e_ret_status = SFU_LL_SECU_IWDG_Refresh();
 8009496:	f001 fb0b 	bl	800aab0 <SFU_LL_SECU_IWDG_Refresh>
    if (SFU_BOOT_SecuritySafetyCheck() == SFU_SUCCESS)
 800949a:	42a0      	cmp	r0, r4
 800949c:	d006      	beq.n	80094ac <SFU_BOOT_RunSecureBootService+0xe4>
  SFU_EXCPT_SetError(SFU_EXCPT_UNKNOWN);
 800949e:	2010      	movs	r0, #16
 80094a0:	f000 fa2e 	bl	8009900 <SFU_EXCPT_SetError>
  SFU_BOOT_ForceReboot();
 80094a4:	f7ff fecc 	bl	8009240 <SFU_BOOT_ForceReboot>
  SFU_BOOT_InitErrorTypeDef e_ret_code = SFU_BOOT_INIT_ERROR;
 80094a8:	2003      	movs	r0, #3
  return e_ret_status;
 80094aa:	e7a0      	b.n	80093ee <SFU_BOOT_RunSecureBootService+0x26>
      fnStateMachineFunction = fnStateMachineTable[(uint8_t)m_StateMachineContext.CurrState];
 80094ac:	787b      	ldrb	r3, [r7, #1]
      fnStateMachineFunction();
 80094ae:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 80094b2:	4798      	blx	r3
 80094b4:	e7ef      	b.n	8009496 <SFU_BOOT_RunSecureBootService+0xce>
    e_ret_code = SFU_BOOT_SECENG_INIT_FAIL;
 80094b6:	2000      	movs	r0, #0
 80094b8:	e799      	b.n	80093ee <SFU_BOOT_RunSecureBootService+0x26>
 80094ba:	bf00      	nop
 80094bc:	0012310f 	.word	0x0012310f
 80094c0:	00122f11 	.word	0x00122f11
 80094c4:	0800d355 	.word	0x0800d355
 80094c8:	0800d38c 	.word	0x0800d38c
 80094cc:	200010fc 	.word	0x200010fc
 80094d0:	0800d300 	.word	0x0800d300
 80094d4:	0800d3cf 	.word	0x0800d3cf
 80094d8:	0800d418 	.word	0x0800d418
 80094dc:	0800d461 	.word	0x0800d461
 80094e0:	0800d4aa 	.word	0x0800d4aa
 80094e4:	20001064 	.word	0x20001064
 80094e8:	0800d4f3 	.word	0x0800d4f3
 80094ec:	0800d52e 	.word	0x0800d52e
 80094f0:	0800cdc8 	.word	0x0800cdc8

080094f4 <MemManage_Handler>:
  * @param  None
  * @retval None
  */
void SFU_CALLBACK_MEMORYFAULT(void)
{
  SFU_EXCPT_IrqExceptionHandler(SFU_EXCPT_MEMORY_FAULT);
 80094f4:	2001      	movs	r0, #1
 80094f6:	f000 ba11 	b.w	800991c <SFU_EXCPT_IrqExceptionHandler>

080094fa <SFU_COM_Serial_PutByte>:
  * @brief  Transmit a byte to the COM Port.
  * @param  uParam: The byte to be sent.
  * @retval SFU_ErrorStatus SFU_SUCCESS if successful, SFU_ERROR otherwise.
  */
SFU_ErrorStatus SFU_COM_Serial_PutByte(uint8_t uParam)
{
 80094fa:	b507      	push	{r0, r1, r2, lr}
  return SFU_LL_UART_Transmit(&uParam, 1U, SFU_COM_LOADER_SERIAL_TIME_OUT);
 80094fc:	2264      	movs	r2, #100	; 0x64
{
 80094fe:	f88d 0007 	strb.w	r0, [sp, #7]
  return SFU_LL_UART_Transmit(&uParam, 1U, SFU_COM_LOADER_SERIAL_TIME_OUT);
 8009502:	2101      	movs	r1, #1
 8009504:	f10d 0007 	add.w	r0, sp, #7
 8009508:	f001 f86a 	bl	800a5e0 <SFU_LL_UART_Transmit>
}
 800950c:	b003      	add	sp, #12
 800950e:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08009514 <SFU_COM_YMODEM_Receive>:
{
 8009514:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009518:	b08b      	sub	sp, #44	; 0x2c
  if ((peCOMStatus == NULL) || (puSize == NULL))
 800951a:	4605      	mov	r5, r0
{
 800951c:	9102      	str	r1, [sp, #8]
  if ((peCOMStatus == NULL) || (puSize == NULL))
 800951e:	b920      	cbnz	r0, 800952a <SFU_COM_YMODEM_Receive+0x16>
                      return SFU_ERROR;
 8009520:	f641 70e1 	movw	r0, #8161	; 0x1fe1
}
 8009524:	b00b      	add	sp, #44	; 0x2c
 8009526:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  if ((peCOMStatus == NULL) || (puSize == NULL))
 800952a:	9b02      	ldr	r3, [sp, #8]
 800952c:	2b00      	cmp	r3, #0
 800952e:	d0f7      	beq.n	8009520 <SFU_COM_YMODEM_Receive+0xc>
  *peCOMStatus = SFU_COM_YMODEM_OK;
 8009530:	2400      	movs	r4, #0
        break;
      default:
        status = HAL_ERROR;
        break;
    }
    *pData = char1;
 8009532:	f8df 8268 	ldr.w	r8, [pc, #616]	; 800979c <SFU_COM_YMODEM_Receive+0x288>
  *peCOMStatus = SFU_COM_YMODEM_OK;
 8009536:	7004      	strb	r4, [r0, #0]
  uint32_t session_begin = 0U;
 8009538:	9401      	str	r4, [sp, #4]
  uint32_t errors = 0U;
 800953a:	4626      	mov	r6, r4
  if (eRetStatus == SFU_SUCCESS)
 800953c:	4f95      	ldr	r7, [pc, #596]	; (8009794 <SFU_COM_YMODEM_Receive+0x280>)
{
 800953e:	f04f 0900 	mov.w	r9, #0
 8009542:	e139      	b.n	80097b8 <SFU_COM_YMODEM_Receive+0x2a4>
    switch (char1)
 8009544:	2b61      	cmp	r3, #97	; 0x61
 8009546:	d03b      	beq.n	80095c0 <SFU_COM_YMODEM_Receive+0xac>
 8009548:	2b72      	cmp	r3, #114	; 0x72
 800954a:	d01e      	beq.n	800958a <SFU_COM_YMODEM_Receive+0x76>
        status = HAL_BUSY;
 800954c:	2b41      	cmp	r3, #65	; 0x41
 800954e:	bf14      	ite	ne
 8009550:	f04f 0b01 	movne.w	fp, #1
 8009554:	f04f 0b02 	moveq.w	fp, #2
  uint32_t packet_size = 0U;
 8009558:	f04f 0a00 	mov.w	sl, #0
 800955c:	e14f      	b.n	80097fe <SFU_COM_YMODEM_Receive+0x2ea>
        if ((SFU_LL_UART_Receive(&char1, 1U, uTimeout) == SFU_SUCCESS) && (char1 == SFU_COM_YMODEM_CA))
 800955e:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8009562:	2101      	movs	r1, #1
 8009564:	f10d 0013 	add.w	r0, sp, #19
 8009568:	f001 f84e 	bl	800a608 <SFU_LL_UART_Receive>
 800956c:	42b8      	cmp	r0, r7
 800956e:	d12a      	bne.n	80095c6 <SFU_COM_YMODEM_Receive+0xb2>
 8009570:	f89d 3013 	ldrb.w	r3, [sp, #19]
    status = HAL_OK;
 8009574:	2b18      	cmp	r3, #24
 8009576:	bf15      	itete	ne
 8009578:	f04f 0b01 	movne.w	fp, #1
 800957c:	f04f 0b00 	moveq.w	fp, #0
 8009580:	f04f 0a00 	movne.w	sl, #0
 8009584:	f04f 0a02 	moveq.w	sl, #2
 8009588:	e139      	b.n	80097fe <SFU_COM_YMODEM_Receive+0x2ea>
        (void) SFU_LL_UART_Receive(&char1, 1U, uTimeout);             /* Ymodem startup sequence : rb ==> 0x72 + 0x62 + 0x0D */
 800958a:	f640 32b8 	movw	r2, #3000	; 0xbb8
 800958e:	2101      	movs	r1, #1
 8009590:	f10d 0013 	add.w	r0, sp, #19
 8009594:	f001 f838 	bl	800a608 <SFU_LL_UART_Receive>
        (void) SFU_LL_UART_Receive(&char1, 1U, uTimeout);
 8009598:	f640 32b8 	movw	r2, #3000	; 0xbb8
 800959c:	2101      	movs	r1, #1
 800959e:	f10d 0013 	add.w	r0, sp, #19
 80095a2:	f001 f831 	bl	800a608 <SFU_LL_UART_Receive>
    status = HAL_OK;
 80095a6:	f04f 0b00 	mov.w	fp, #0
        packet_size = 3U;
 80095aa:	f04f 0a03 	mov.w	sl, #3
        break;
 80095ae:	e126      	b.n	80097fe <SFU_COM_YMODEM_Receive+0x2ea>
    status = HAL_OK;
 80095b0:	f04f 0b00 	mov.w	fp, #0
        packet_size = SFU_COM_YMODEM_PACKET_1K_SIZE;
 80095b4:	f44f 6a80 	mov.w	sl, #1024	; 0x400
 80095b8:	e121      	b.n	80097fe <SFU_COM_YMODEM_Receive+0x2ea>
    status = HAL_OK;
 80095ba:	f04f 0b00 	mov.w	fp, #0
 80095be:	e7cb      	b.n	8009558 <SFU_COM_YMODEM_Receive+0x44>
        status = HAL_BUSY;
 80095c0:	f04f 0b02 	mov.w	fp, #2
 80095c4:	e7c8      	b.n	8009558 <SFU_COM_YMODEM_Receive+0x44>
          status = HAL_ERROR;
 80095c6:	f04f 0b01 	mov.w	fp, #1
 80095ca:	e7c5      	b.n	8009558 <SFU_COM_YMODEM_Receive+0x44>
      switch (ReceivePacket(m_aPacketData, &packet_length, SFU_COM_YMODEM_DOWNLOAD_TIMEOUT))
 80095cc:	f1bb 0f00 	cmp.w	fp, #0
 80095d0:	d012      	beq.n	80095f8 <SFU_COM_YMODEM_Receive+0xe4>
 80095d2:	f1bb 0f02 	cmp.w	fp, #2
 80095d6:	f000 80e3 	beq.w	80097a0 <SFU_COM_YMODEM_Receive+0x28c>
          if (session_begin > 0U)
 80095da:	9b01      	ldr	r3, [sp, #4]
 80095dc:	b103      	cbz	r3, 80095e0 <SFU_COM_YMODEM_Receive+0xcc>
            errors ++;
 80095de:	3601      	adds	r6, #1
          if (errors > SFU_COM_YMODEM_MAX_ERRORS)
 80095e0:	2e03      	cmp	r6, #3
 80095e2:	f240 8150 	bls.w	8009886 <SFU_COM_YMODEM_Receive+0x372>
            (void) SFU_COM_Serial_PutByte(SFU_COM_YMODEM_CA);
 80095e6:	2018      	movs	r0, #24
 80095e8:	f7ff ff87 	bl	80094fa <SFU_COM_Serial_PutByte>
            (void) SFU_COM_Serial_PutByte(SFU_COM_YMODEM_CA);
 80095ec:	2018      	movs	r0, #24
 80095ee:	f7ff ff84 	bl	80094fa <SFU_COM_Serial_PutByte>
            *peCOMStatus = SFU_COM_YMODEM_ABORT;
 80095f2:	2302      	movs	r3, #2
 80095f4:	702b      	strb	r3, [r5, #0]
 80095f6:	e0db      	b.n	80097b0 <SFU_COM_YMODEM_Receive+0x29c>
          switch (packet_length)
 80095f8:	f1ba 0f02 	cmp.w	sl, #2
 80095fc:	d010      	beq.n	8009620 <SFU_COM_YMODEM_Receive+0x10c>
 80095fe:	f1ba 0f03 	cmp.w	sl, #3
 8009602:	d012      	beq.n	800962a <SFU_COM_YMODEM_Receive+0x116>
 8009604:	f1ba 0f00 	cmp.w	sl, #0
 8009608:	f040 812a 	bne.w	8009860 <SFU_COM_YMODEM_Receive+0x34c>
              (void) SFU_COM_Serial_PutByte(SFU_COM_YMODEM_ACK);
 800960c:	2006      	movs	r0, #6
 800960e:	f7ff ff74 	bl	80094fa <SFU_COM_Serial_PutByte>
              *puSize = filesize;
 8009612:	9b02      	ldr	r3, [sp, #8]
 8009614:	4656      	mov	r6, sl
 8009616:	601c      	str	r4, [r3, #0]
  while ((session_done == 0U) && (*peCOMStatus == SFU_COM_YMODEM_OK))
 8009618:	782b      	ldrb	r3, [r5, #0]
 800961a:	2b00      	cmp	r3, #0
 800961c:	d08e      	beq.n	800953c <SFU_COM_YMODEM_Receive+0x28>
 800961e:	e09e      	b.n	800975e <SFU_COM_YMODEM_Receive+0x24a>
              (void) SFU_COM_Serial_PutByte(SFU_COM_YMODEM_ACK);
 8009620:	2006      	movs	r0, #6
 8009622:	f7ff ff6a 	bl	80094fa <SFU_COM_Serial_PutByte>
              *peCOMStatus = SFU_COM_YMODEM_ABORT;
 8009626:	f885 a000 	strb.w	sl, [r5]
              break;
 800962a:	465e      	mov	r6, fp
 800962c:	e0c0      	b.n	80097b0 <SFU_COM_YMODEM_Receive+0x29c>
                      i++;
 800962e:	3301      	adds	r3, #1
                    while ((*file_ptr != 0U) && (i < SFU_COM_YMODEM_FILE_NAME_LENGTH))
 8009630:	f812 1b01 	ldrb.w	r1, [r2], #1
 8009634:	b109      	cbz	r1, 800963a <SFU_COM_YMODEM_Receive+0x126>
 8009636:	2b40      	cmp	r3, #64	; 0x40
 8009638:	d1f9      	bne.n	800962e <SFU_COM_YMODEM_Receive+0x11a>
 800963a:	a805      	add	r0, sp, #20
                    file_ptr = m_aPacketData + SFU_COM_YMODEM_PACKET_DATA_INDEX;
 800963c:	4606      	mov	r6, r0
 800963e:	2300      	movs	r3, #0
 8009640:	e002      	b.n	8009648 <SFU_COM_YMODEM_Receive+0x134>
                      file_size[i] = *file_ptr;
 8009642:	f806 1b01 	strb.w	r1, [r6], #1
                      i++;
 8009646:	3301      	adds	r3, #1
                    while ((*file_ptr != (uint8_t) ' ') && (i < SFU_COM_YMODEM_FILE_SIZE_LENGTH))
 8009648:	5cd1      	ldrb	r1, [r2, r3]
 800964a:	2920      	cmp	r1, #32
 800964c:	d001      	beq.n	8009652 <SFU_COM_YMODEM_Receive+0x13e>
 800964e:	2b10      	cmp	r3, #16
 8009650:	d1f7      	bne.n	8009642 <SFU_COM_YMODEM_Receive+0x12e>
                    file_size[i] = (uint8_t) '\0';
 8009652:	3328      	adds	r3, #40	; 0x28
 8009654:	eb0d 0203 	add.w	r2, sp, r3
 8009658:	2300      	movs	r3, #0
 800965a:	f802 3c14 	strb.w	r3, [r2, #-20]
  if ((pInputStr[0] == (uint8_t)'0') && ((pInputStr[1] == (uint8_t)'x') || (pInputStr[1] == (uint8_t)'X')))
 800965e:	f89d 2014 	ldrb.w	r2, [sp, #20]
 8009662:	2a30      	cmp	r2, #48	; 0x30
 8009664:	d105      	bne.n	8009672 <SFU_COM_YMODEM_Receive+0x15e>
 8009666:	f89d 2015 	ldrb.w	r2, [sp, #21]
 800966a:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 800966e:	2a58      	cmp	r2, #88	; 0x58
 8009670:	d049      	beq.n	8009706 <SFU_COM_YMODEM_Receive+0x1f2>
 8009672:	4619      	mov	r1, r3
        val = (val * 10U) + digit;
 8009674:	260a      	movs	r6, #10
      if (pInputStr[i] == (uint8_t)'\0')
 8009676:	f810 2b01 	ldrb.w	r2, [r0], #1
 800967a:	b132      	cbz	r2, 800968a <SFU_COM_YMODEM_Receive+0x176>
      else if (((pInputStr[i] == (uint8_t)'k') || (pInputStr[i] == (uint8_t)'K')) && (i > 0U))
 800967c:	2a6b      	cmp	r2, #107	; 0x6b
 800967e:	d001      	beq.n	8009684 <SFU_COM_YMODEM_Receive+0x170>
 8009680:	2a4b      	cmp	r2, #75	; 0x4b
 8009682:	d142      	bne.n	800970a <SFU_COM_YMODEM_Receive+0x1f6>
 8009684:	2900      	cmp	r1, #0
 8009686:	d048      	beq.n	800971a <SFU_COM_YMODEM_Receive+0x206>
        val = val << 10U;
 8009688:	029b      	lsls	r3, r3, #10
        res = 1U;
 800968a:	461c      	mov	r4, r3
        res = 1U;
 800968c:	2201      	movs	r2, #1
 800968e:	e04b      	b.n	8009728 <SFU_COM_YMODEM_Receive+0x214>
        digit = CONVERTHEX(pInputStr[i]);
 8009690:	2a09      	cmp	r2, #9
 8009692:	d908      	bls.n	80096a6 <SFU_COM_YMODEM_Receive+0x192>
 8009694:	f1ac 0241 	sub.w	r2, ip, #65	; 0x41
 8009698:	2a05      	cmp	r2, #5
 800969a:	bf94      	ite	ls
 800969c:	f1ac 0237 	subls.w	r2, ip, #55	; 0x37
 80096a0:	f1ac 0257 	subhi.w	r2, ip, #87	; 0x57
 80096a4:	b2d2      	uxtb	r2, r2
      i++;
 80096a6:	3601      	adds	r6, #1
    while ((i < 11U) && (pInputStr[i] != (uint8_t)'\0'))
 80096a8:	2e0b      	cmp	r6, #11
        val = (val << 4U) + digit;
 80096aa:	eb02 1303 	add.w	r3, r2, r3, lsl #4
    while ((i < 11U) && (pInputStr[i] != (uint8_t)'\0'))
 80096ae:	d00e      	beq.n	80096ce <SFU_COM_YMODEM_Receive+0x1ba>
 80096b0:	f810 c006 	ldrb.w	ip, [r0, r6]
 80096b4:	f1bc 0f00 	cmp.w	ip, #0
 80096b8:	d009      	beq.n	80096ce <SFU_COM_YMODEM_Receive+0x1ba>
      if (ISVALIDHEX(pInputStr[i]))
 80096ba:	f1ac 0130 	sub.w	r1, ip, #48	; 0x30
 80096be:	b2ca      	uxtb	r2, r1
 80096c0:	f02c 0120 	bic.w	r1, ip, #32
 80096c4:	3941      	subs	r1, #65	; 0x41
 80096c6:	2905      	cmp	r1, #5
 80096c8:	d9e2      	bls.n	8009690 <SFU_COM_YMODEM_Receive+0x17c>
 80096ca:	2a09      	cmp	r2, #9
 80096cc:	d9eb      	bls.n	80096a6 <SFU_COM_YMODEM_Receive+0x192>
    if (pInputStr[i] == (uint8_t)'\0')
 80096ce:	f106 0228 	add.w	r2, r6, #40	; 0x28
 80096d2:	eb0d 0602 	add.w	r6, sp, r2
 80096d6:	f816 2c14 	ldrb.w	r2, [r6, #-20]
 80096da:	2a00      	cmp	r2, #0
 80096dc:	bf08      	it	eq
 80096de:	461c      	moveq	r4, r3
                    if (SFU_COM_YMODEM_HeaderPktRxCpltCallback((uint32_t) filesize) == SFU_SUCCESS)
 80096e0:	4620      	mov	r0, r4
 80096e2:	f000 fd9f 	bl	800a224 <SFU_COM_YMODEM_HeaderPktRxCpltCallback>
 80096e6:	42b8      	cmp	r0, r7
 80096e8:	d124      	bne.n	8009734 <SFU_COM_YMODEM_Receive+0x220>
                      (void) SFU_COM_Serial_PutByte(SFU_COM_YMODEM_ACK);
 80096ea:	2006      	movs	r0, #6
 80096ec:	f7ff ff05 	bl	80094fa <SFU_COM_Serial_PutByte>
                      (void) SFU_LL_UART_Flush();
 80096f0:	f000 ff9e 	bl	800a630 <SFU_LL_UART_Flush>
                      (void) SFU_COM_Serial_PutByte(SFU_COM_YMODEM_CRC16);
 80096f4:	2043      	movs	r0, #67	; 0x43
                    (void) SFU_COM_Serial_PutByte(SFU_COM_YMODEM_ACK);
 80096f6:	f7ff ff00 	bl	80094fa <SFU_COM_Serial_PutByte>
                session_begin = 1;
 80096fa:	2301      	movs	r3, #1
                packets_received ++;
 80096fc:	f109 0901 	add.w	r9, r9, #1
                session_begin = 1;
 8009700:	9301      	str	r3, [sp, #4]
          errors = 0U;
 8009702:	2600      	movs	r6, #0
    while ((file_done == 0U) && (*peCOMStatus == SFU_COM_YMODEM_OK))
 8009704:	e054      	b.n	80097b0 <SFU_COM_YMODEM_Receive+0x29c>
 8009706:	2602      	movs	r6, #2
 8009708:	e7d2      	b.n	80096b0 <SFU_COM_YMODEM_Receive+0x19c>
      else if (((pInputStr[i] == (uint8_t)'m') || (pInputStr[i] == (uint8_t)'M')) && (i > 0U))
 800970a:	f002 0cdf 	and.w	ip, r2, #223	; 0xdf
 800970e:	f1bc 0f4d 	cmp.w	ip, #77	; 0x4d
 8009712:	d102      	bne.n	800971a <SFU_COM_YMODEM_Receive+0x206>
 8009714:	b109      	cbz	r1, 800971a <SFU_COM_YMODEM_Receive+0x206>
        val = val << 20U;
 8009716:	051b      	lsls	r3, r3, #20
        res = 1U;
 8009718:	e7b7      	b.n	800968a <SFU_COM_YMODEM_Receive+0x176>
      else if (ISVALIDDEC(pInputStr[i]))
 800971a:	3a30      	subs	r2, #48	; 0x30
 800971c:	b2d2      	uxtb	r2, r2
 800971e:	2a09      	cmp	r2, #9
 8009720:	d8de      	bhi.n	80096e0 <SFU_COM_YMODEM_Receive+0x1cc>
        val = (val * 10U) + digit;
 8009722:	fb06 2303 	mla	r3, r6, r3, r2
 8009726:	2200      	movs	r2, #0
      i++;
 8009728:	3101      	adds	r1, #1
    while ((i < 11U) && (res != 1U))
 800972a:	290b      	cmp	r1, #11
 800972c:	d0d8      	beq.n	80096e0 <SFU_COM_YMODEM_Receive+0x1cc>
 800972e:	2a00      	cmp	r2, #0
 8009730:	d0a1      	beq.n	8009676 <SFU_COM_YMODEM_Receive+0x162>
 8009732:	e7d5      	b.n	80096e0 <SFU_COM_YMODEM_Receive+0x1cc>
                      tmp = SFU_COM_YMODEM_CA;
 8009734:	2318      	movs	r3, #24
                      (void) SFU_LL_UART_Transmit(&tmp, 1U, SFU_COM_YMODEM_NAK_TIMEOUT);
 8009736:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800973a:	2101      	movs	r1, #1
 800973c:	f10d 0013 	add.w	r0, sp, #19
                      tmp = SFU_COM_YMODEM_CA;
 8009740:	f88d 3013 	strb.w	r3, [sp, #19]
                      (void) SFU_LL_UART_Transmit(&tmp, 1U, SFU_COM_YMODEM_NAK_TIMEOUT);
 8009744:	f000 ff4c 	bl	800a5e0 <SFU_LL_UART_Transmit>
                      (void) SFU_LL_UART_Transmit(&tmp, 1U, SFU_COM_YMODEM_NAK_TIMEOUT);
 8009748:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800974c:	2101      	movs	r1, #1
 800974e:	f10d 0013 	add.w	r0, sp, #19
 8009752:	f000 ff45 	bl	800a5e0 <SFU_LL_UART_Transmit>
 8009756:	e6e3      	b.n	8009520 <SFU_COM_YMODEM_Receive+0xc>
                    (void) SFU_COM_Serial_PutByte(SFU_COM_YMODEM_ACK);
 8009758:	2006      	movs	r0, #6
 800975a:	f7ff fece 	bl	80094fa <SFU_COM_Serial_PutByte>
  (void) BSP_LED_Off(SFU_STATUS_LED);
 800975e:	2000      	movs	r0, #0
 8009760:	f001 fa0a 	bl	800ab78 <BSP_LED_Off>
  if (*peCOMStatus == SFU_COM_YMODEM_OK)
 8009764:	782b      	ldrb	r3, [r5, #0]
 8009766:	2b00      	cmp	r3, #0
 8009768:	f47f aeda 	bne.w	8009520 <SFU_COM_YMODEM_Receive+0xc>
    return SFU_SUCCESS;
 800976c:	4809      	ldr	r0, [pc, #36]	; (8009794 <SFU_COM_YMODEM_Receive+0x280>)
 800976e:	e6d9      	b.n	8009524 <SFU_COM_YMODEM_Receive+0x10>
                  if (SFU_COM_YMODEM_DataPktRxCpltCallback(&m_aPacketData[SFU_COM_YMODEM_PACKET_DATA_INDEX],
 8009770:	4809      	ldr	r0, [pc, #36]	; (8009798 <SFU_COM_YMODEM_Receive+0x284>)
 8009772:	4651      	mov	r1, sl
 8009774:	f000 fd6a 	bl	800a24c <SFU_COM_YMODEM_DataPktRxCpltCallback>
 8009778:	42b8      	cmp	r0, r7
 800977a:	d101      	bne.n	8009780 <SFU_COM_YMODEM_Receive+0x26c>
                    (void) SFU_COM_Serial_PutByte(SFU_COM_YMODEM_ACK);
 800977c:	2006      	movs	r0, #6
 800977e:	e7ba      	b.n	80096f6 <SFU_COM_YMODEM_Receive+0x1e2>
                    (void) SFU_COM_Serial_PutByte(SFU_COM_YMODEM_CA);
 8009780:	2018      	movs	r0, #24
 8009782:	f7ff feba 	bl	80094fa <SFU_COM_Serial_PutByte>
                    (void) SFU_COM_Serial_PutByte(SFU_COM_YMODEM_CA);
 8009786:	2018      	movs	r0, #24
 8009788:	f7ff feb7 	bl	80094fa <SFU_COM_Serial_PutByte>
                    *peCOMStatus = SFU_COM_YMODEM_DATA;
 800978c:	2304      	movs	r3, #4
 800978e:	702b      	strb	r3, [r5, #0]
 8009790:	e7b3      	b.n	80096fa <SFU_COM_YMODEM_Receive+0x1e6>
 8009792:	bf00      	nop
 8009794:	00122f11 	.word	0x00122f11
 8009798:	2000110c 	.word	0x2000110c
 800979c:	20001108 	.word	0x20001108
          (void) SFU_COM_Serial_PutByte(SFU_COM_YMODEM_CA);
 80097a0:	2018      	movs	r0, #24
 80097a2:	f7ff feaa 	bl	80094fa <SFU_COM_Serial_PutByte>
          (void) SFU_COM_Serial_PutByte(SFU_COM_YMODEM_CA);
 80097a6:	2018      	movs	r0, #24
 80097a8:	f7ff fea7 	bl	80094fa <SFU_COM_Serial_PutByte>
          *peCOMStatus = SFU_COM_YMODEM_ABORT;
 80097ac:	f885 b000 	strb.w	fp, [r5]
    while ((file_done == 0U) && (*peCOMStatus == SFU_COM_YMODEM_OK))
 80097b0:	782b      	ldrb	r3, [r5, #0]
 80097b2:	2b00      	cmp	r3, #0
 80097b4:	f47f af30 	bne.w	8009618 <SFU_COM_YMODEM_Receive+0x104>
  (void) SFU_LL_SECU_IWDG_Refresh();
 80097b8:	f001 f97a 	bl	800aab0 <SFU_LL_SECU_IWDG_Refresh>
  eRetStatus = SFU_LL_UART_Receive(&char1, 1, uTimeout);
 80097bc:	f640 32b8 	movw	r2, #3000	; 0xbb8
 80097c0:	2101      	movs	r1, #1
 80097c2:	f10d 0013 	add.w	r0, sp, #19
 80097c6:	f000 ff1f 	bl	800a608 <SFU_LL_UART_Receive>
  if (eRetStatus == SFU_SUCCESS)
 80097ca:	42b8      	cmp	r0, r7
 80097cc:	f47f af05 	bne.w	80095da <SFU_COM_YMODEM_Receive+0xc6>
    switch (char1)
 80097d0:	f89d 3013 	ldrb.w	r3, [sp, #19]
 80097d4:	2b18      	cmp	r3, #24
 80097d6:	f43f aec2 	beq.w	800955e <SFU_COM_YMODEM_Receive+0x4a>
 80097da:	f63f aeb3 	bhi.w	8009544 <SFU_COM_YMODEM_Receive+0x30>
 80097de:	2b02      	cmp	r3, #2
 80097e0:	f43f aee6 	beq.w	80095b0 <SFU_COM_YMODEM_Receive+0x9c>
 80097e4:	2b04      	cmp	r3, #4
 80097e6:	f43f aee8 	beq.w	80095ba <SFU_COM_YMODEM_Receive+0xa6>
 80097ea:	2b01      	cmp	r3, #1
 80097ec:	bf15      	itete	ne
 80097ee:	f04f 0b01 	movne.w	fp, #1
 80097f2:	f04f 0b00 	moveq.w	fp, #0
 80097f6:	f04f 0a00 	movne.w	sl, #0
 80097fa:	f04f 0a80 	moveq.w	sl, #128	; 0x80
    *pData = char1;
 80097fe:	f89d 2013 	ldrb.w	r2, [sp, #19]
 8009802:	f888 2000 	strb.w	r2, [r8]

    if (packet_size >= SFU_COM_YMODEM_PACKET_SIZE)
 8009806:	f1ba 0f7f 	cmp.w	sl, #127	; 0x7f
 800980a:	f67f aedf 	bls.w	80095cc <SFU_COM_YMODEM_Receive+0xb8>
    {

#ifndef MINICOM_YMODEM
      eRetStatus = SFU_LL_UART_Receive(&pData[SFU_COM_YMODEM_PACKET_NUMBER_INDEX],
 800980e:	4823      	ldr	r0, [pc, #140]	; (800989c <SFU_COM_YMODEM_Receive+0x388>)
 8009810:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8009814:	f10a 0104 	add.w	r1, sl, #4
 8009818:	f000 fef6 	bl	800a608 <SFU_LL_UART_Receive>
        eRetStatus = SFU_SUCCESS;
      }
#endif /* MINICOM_YMODEM */

      /* Simple packet sanity check */
      if (eRetStatus == SFU_SUCCESS)
 800981c:	42b8      	cmp	r0, r7
 800981e:	f47f aedc 	bne.w	80095da <SFU_COM_YMODEM_Receive+0xc6>
      {
        status = HAL_OK;

        if (pData[SFU_COM_YMODEM_PACKET_NUMBER_INDEX] != ((pData[SFU_COM_YMODEM_PACKET_CNUMBER_INDEX]) ^
 8009822:	f898 2003 	ldrb.w	r2, [r8, #3]
 8009826:	f898 1002 	ldrb.w	r1, [r8, #2]
 800982a:	43d2      	mvns	r2, r2
 800982c:	b2d2      	uxtb	r2, r2
 800982e:	4291      	cmp	r1, r2
 8009830:	f47f aed3 	bne.w	80095da <SFU_COM_YMODEM_Receive+0xc6>
          status = HAL_ERROR;
        }
        else
        {
          /* Check packet CRC*/
          crc = (((uint32_t)pData[ packet_size + SFU_COM_YMODEM_PACKET_DATA_INDEX ]) << 8U) & 0x0000FF00U;
 8009834:	eb08 020a 	add.w	r2, r8, sl
          crc += pData[ packet_size + SFU_COM_YMODEM_PACKET_DATA_INDEX + 1U ];

          /*Configure CRC with 16-bit polynomial*/
          if (SFU_LL_CRC_Config(SFU_CRC_CONFIG_16BIT) == SFU_SUCCESS)
 8009838:	2002      	movs	r0, #2
          crc = (((uint32_t)pData[ packet_size + SFU_COM_YMODEM_PACKET_DATA_INDEX ]) << 8U) & 0x0000FF00U;
 800983a:	7913      	ldrb	r3, [r2, #4]
          crc += pData[ packet_size + SFU_COM_YMODEM_PACKET_DATA_INDEX + 1U ];
 800983c:	f892 b005 	ldrb.w	fp, [r2, #5]
          crc = (((uint32_t)pData[ packet_size + SFU_COM_YMODEM_PACKET_DATA_INDEX ]) << 8U) & 0x0000FF00U;
 8009840:	9303      	str	r3, [sp, #12]
          if (SFU_LL_CRC_Config(SFU_CRC_CONFIG_16BIT) == SFU_SUCCESS)
 8009842:	f000 fe57 	bl	800a4f4 <SFU_LL_CRC_Config>
 8009846:	42b8      	cmp	r0, r7
 8009848:	f47f aec7 	bne.w	80095da <SFU_COM_YMODEM_Receive+0xc6>
          {
            if (SFU_LL_CRC_Calculate((uint32_t *)(uint32_t)&pData[SFU_COM_YMODEM_PACKET_DATA_INDEX], packet_size) != crc)
 800984c:	4814      	ldr	r0, [pc, #80]	; (80098a0 <SFU_COM_YMODEM_Receive+0x38c>)
 800984e:	4651      	mov	r1, sl
 8009850:	f000 fe7a 	bl	800a548 <SFU_LL_CRC_Calculate>
          crc += pData[ packet_size + SFU_COM_YMODEM_PACKET_DATA_INDEX + 1U ];
 8009854:	9b03      	ldr	r3, [sp, #12]
 8009856:	eb0b 2b03 	add.w	fp, fp, r3, lsl #8
            if (SFU_LL_CRC_Calculate((uint32_t *)(uint32_t)&pData[SFU_COM_YMODEM_PACKET_DATA_INDEX], packet_size) != crc)
 800985a:	4583      	cmp	fp, r0
 800985c:	f47f aebd 	bne.w	80095da <SFU_COM_YMODEM_Receive+0xc6>
              if (m_aPacketData[SFU_COM_YMODEM_PACKET_NUMBER_INDEX] != (packets_received & 0x000000FFU))
 8009860:	f898 1002 	ldrb.w	r1, [r8, #2]
 8009864:	fa5f f289 	uxtb.w	r2, r9
 8009868:	4291      	cmp	r1, r2
 800986a:	f47f af4a 	bne.w	8009702 <SFU_COM_YMODEM_Receive+0x1ee>
                if (packets_received == 0U)
 800986e:	f1b9 0f00 	cmp.w	r9, #0
 8009872:	f47f af7d 	bne.w	8009770 <SFU_COM_YMODEM_Receive+0x25c>
                  if (m_aPacketData[SFU_COM_YMODEM_PACKET_DATA_INDEX] != 0U)
 8009876:	f898 3004 	ldrb.w	r3, [r8, #4]
 800987a:	2b00      	cmp	r3, #0
 800987c:	f43f af6c 	beq.w	8009758 <SFU_COM_YMODEM_Receive+0x244>
                    file_ptr = m_aPacketData + SFU_COM_YMODEM_PACKET_DATA_INDEX;
 8009880:	4a07      	ldr	r2, [pc, #28]	; (80098a0 <SFU_COM_YMODEM_Receive+0x38c>)
                    i = 0U;
 8009882:	464b      	mov	r3, r9
 8009884:	e6d4      	b.n	8009630 <SFU_COM_YMODEM_Receive+0x11c>
            (void) SFU_COM_Serial_PutByte(SFU_COM_YMODEM_CRC16); /* Ask for a packet */
 8009886:	2043      	movs	r0, #67	; 0x43
 8009888:	f7ff fe37 	bl	80094fa <SFU_COM_Serial_PutByte>
            TRACE("\b.");                                 /* Replace C char by . on display console */
 800988c:	4805      	ldr	r0, [pc, #20]	; (80098a4 <SFU_COM_YMODEM_Receive+0x390>)
 800988e:	f002 f9bb 	bl	800bc08 <iprintf>
            (void) BSP_LED_Toggle(SFU_STATUS_LED);
 8009892:	2000      	movs	r0, #0
 8009894:	f001 f97e 	bl	800ab94 <BSP_LED_Toggle>
 8009898:	e78a      	b.n	80097b0 <SFU_COM_YMODEM_Receive+0x29c>
 800989a:	bf00      	nop
 800989c:	2000110a 	.word	0x2000110a
 80098a0:	2000110c 	.word	0x2000110c
 80098a4:	0800d562 	.word	0x0800d562

080098a8 <SFU_COM_Init>:
  * @brief  SFU Com Init function.
  * @param  None.
  * @retval SFU_ErrorStatus SFU_SUCCESS if successful, SFU_ERROR otherwise.
  */
SFU_ErrorStatus SFU_COM_Init(void)
{
 80098a8:	b508      	push	{r3, lr}
#if defined(__GNUC__)
  setvbuf(stdout, NULL, _IONBF, 0);
 80098aa:	4b06      	ldr	r3, [pc, #24]	; (80098c4 <SFU_COM_Init+0x1c>)
 80098ac:	6818      	ldr	r0, [r3, #0]
 80098ae:	2300      	movs	r3, #0
 80098b0:	4619      	mov	r1, r3
 80098b2:	6880      	ldr	r0, [r0, #8]
 80098b4:	2202      	movs	r2, #2
 80098b6:	f002 fa35 	bl	800bd24 <setvbuf>
#endif /* __GNUC__ */
  return SFU_LL_UART_Init();
}
 80098ba:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  return SFU_LL_UART_Init();
 80098be:	f000 be6b 	b.w	800a598 <SFU_LL_UART_Init>
 80098c2:	bf00      	nop
 80098c4:	20001070 	.word	0x20001070

080098c8 <SFU_COM_DeInit>:
  * @param  None.
  * @retval SFU_ErrorStatus SFU_SUCCESS if successful, SFU_ERROR otherwise.
  */
SFU_ErrorStatus SFU_COM_DeInit(void)
{
  return SFU_LL_UART_DeInit();
 80098c8:	f000 be86 	b.w	800a5d8 <SFU_LL_UART_DeInit>

080098cc <SFU_COM_Serial_PutString>:
SFU_ErrorStatus SFU_COM_Serial_PutString(uint8_t *pString)
{
  uint16_t length = 0U;

  /* Check the pointers allocation */
  if (pString == NULL)
 80098cc:	b140      	cbz	r0, 80098e0 <SFU_COM_Serial_PutString+0x14>
 80098ce:	2300      	movs	r3, #0
 80098d0:	b299      	uxth	r1, r3
  {
    return SFU_ERROR;
  }

  while (pString[length] != (uint8_t)'\0')
 80098d2:	3301      	adds	r3, #1
 80098d4:	5c42      	ldrb	r2, [r0, r1]
 80098d6:	2a00      	cmp	r2, #0
 80098d8:	d1fa      	bne.n	80098d0 <SFU_COM_Serial_PutString+0x4>
  {
    length++;
  }

  return SFU_LL_UART_Transmit(pString, length, SFU_COM_TRACE_SERIAL_TIME_OUT);
 80098da:	2264      	movs	r2, #100	; 0x64
 80098dc:	f000 be80 	b.w	800a5e0 <SFU_LL_UART_Transmit>

}
 80098e0:	f641 70e1 	movw	r0, #8161	; 0x1fe1
 80098e4:	4770      	bx	lr

080098e6 <__io_putchar>:
  * @brief  Retargets the C library printf function to SFU UART.
  * @param  None
  * @retval ch
  */
PUTCHAR_PROTOTYPE
{
 80098e6:	b507      	push	{r0, r1, r2, lr}
  /* Place your implementation of fputc here */
  /* e.g. write a character to the USART1 and Loop until the end of transmission */
  (void) SFU_LL_UART_Transmit((uint8_t *)&ch, 1U, 0xFFFFU);
 80098e8:	f64f 72ff 	movw	r2, #65535	; 0xffff
{
 80098ec:	9001      	str	r0, [sp, #4]
  (void) SFU_LL_UART_Transmit((uint8_t *)&ch, 1U, 0xFFFFU);
 80098ee:	2101      	movs	r1, #1
 80098f0:	a801      	add	r0, sp, #4
 80098f2:	f000 fe75 	bl	800a5e0 <SFU_LL_UART_Transmit>

  return ch;
}
 80098f6:	9801      	ldr	r0, [sp, #4]
 80098f8:	b003      	add	sp, #12
 80098fa:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08009900 <SFU_EXCPT_SetError>:
  * @param  Error Error code.
  * @retval None
  */
void SFU_EXCPT_SetError(SFU_EXCPT_IdTypeDef eExceptionId)
{
  if (eExceptionId <= SFU_EXCPT_UNKNOWN)
 8009900:	2810      	cmp	r0, #16
 8009902:	d805      	bhi.n	8009910 <SFU_EXCPT_SetError+0x10>
  {
#ifdef SFU_DEBUG_MODE
    TRACE("\r\n\t%s",m_aErrorStrings[(uint32_t) eExceptionId]);
 8009904:	4b03      	ldr	r3, [pc, #12]	; (8009914 <SFU_EXCPT_SetError+0x14>)
 8009906:	f853 1020 	ldr.w	r1, [r3, r0, lsl #2]
 800990a:	4803      	ldr	r0, [pc, #12]	; (8009918 <SFU_EXCPT_SetError+0x18>)
 800990c:	f002 b97c 	b.w	800bc08 <iprintf>
#endif /* SFU_DEBUG_MODE */
  }
}
 8009910:	4770      	bx	lr
 8009912:	bf00      	nop
 8009914:	0800cde8 	.word	0x0800cde8
 8009918:	0800d565 	.word	0x0800d565

0800991c <SFU_EXCPT_IrqExceptionHandler>:
  *         it's not possible to continue without compromising the stability or
  *         the security of the solution. A System Reset is forced at the end.
  * @retval None
  */
void SFU_EXCPT_IrqExceptionHandler(SFU_EXCPT_IdTypeDef eExceptionId)
{
 800991c:	b510      	push	{r4, lr}
#ifdef SFU_DEBUG_MODE
  uint8_t message[150];
  uint32_t i = 0U;

  /* Avoid warning with cast frombetween char* and uint8_t* */
  while ((m_aErrorStrings[(uint32_t) eExceptionId][i] != 0u) && (i < 149U))
 800991e:	4b0f      	ldr	r3, [pc, #60]	; (800995c <SFU_EXCPT_IrqExceptionHandler+0x40>)
{
 8009920:	b0a6      	sub	sp, #152	; 0x98
 8009922:	466a      	mov	r2, sp
  while ((m_aErrorStrings[(uint32_t) eExceptionId][i] != 0u) && (i < 149U))
 8009924:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 8009928:	4614      	mov	r4, r2
  uint32_t i = 0U;
 800992a:	2300      	movs	r3, #0
  while ((m_aErrorStrings[(uint32_t) eExceptionId][i] != 0u) && (i < 149U))
 800992c:	5cc1      	ldrb	r1, [r0, r3]
 800992e:	b109      	cbz	r1, 8009934 <SFU_EXCPT_IrqExceptionHandler+0x18>
 8009930:	2b95      	cmp	r3, #149	; 0x95
 8009932:	d10e      	bne.n	8009952 <SFU_EXCPT_IrqExceptionHandler+0x36>
  {
    message[i] = m_aErrorStrings[(uint32_t) eExceptionId][i];
    i++;
  }
  message[i] = 0U;
 8009934:	3398      	adds	r3, #152	; 0x98
 8009936:	446b      	add	r3, sp
 8009938:	2200      	movs	r2, #0
 800993a:	f803 2c98 	strb.w	r2, [r3, #-152]

  /* Print relevant error message */
  TRACE_IRQ((uint8_t *)"\r\n\t  ");
 800993e:	4808      	ldr	r0, [pc, #32]	; (8009960 <SFU_EXCPT_IrqExceptionHandler+0x44>)
 8009940:	f7ff ffc4 	bl	80098cc <SFU_COM_Serial_PutString>
  TRACE_IRQ(message);
 8009944:	4620      	mov	r0, r4
 8009946:	f7ff ffc1 	bl	80098cc <SFU_COM_Serial_PutString>
  /* Try to take an action */
  SFU_EXCPT_RuntimeExceptionHandler(eExceptionId);

  /* It's not possible to continue without compromising the stability or the security of the solution.
  The State Machine needs to be aborted and a Reset must be triggered */
  SFU_BOOT_ForceReboot();
 800994a:	f7ff fc79 	bl	8009240 <SFU_BOOT_ForceReboot>
}
 800994e:	b026      	add	sp, #152	; 0x98
 8009950:	bd10      	pop	{r4, pc}
    message[i] = m_aErrorStrings[(uint32_t) eExceptionId][i];
 8009952:	f802 1b01 	strb.w	r1, [r2], #1
    i++;
 8009956:	3301      	adds	r3, #1
 8009958:	e7e8      	b.n	800992c <SFU_EXCPT_IrqExceptionHandler+0x10>
 800995a:	bf00      	nop
 800995c:	0800cde8 	.word	0x0800cde8
 8009960:	0800d56b 	.word	0x0800d56b

08009964 <SFU_EXCPT_Security_Error>:
  *         This parameter can be a value of @ref SFU_EXCPT_ID_Structure_definition.
  * @retval SFU_ErrorStatus SFU_SUCCESS if successful, SFU_ERROR otherwise.
  */

void SFU_EXCPT_Security_Error(void)
{
 8009964:	b508      	push	{r3, lr}
  TRACE("\r\n= [SBOOT] Security issue : execution stopped !");
 8009966:	480e      	ldr	r0, [pc, #56]	; (80099a0 <SFU_EXCPT_Security_Error+0x3c>)
 8009968:	f002 f94e 	bl	800bc08 <iprintf>
  HAL_Delay(1000);
 800996c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8009970:	f001 f974 	bl	800ac5c <HAL_Delay>
  /* While(1) by-passed by an fault injection attack ==> Reset */
  if (0U != SFU_MPU_IsUnprivileged())
 8009974:	f000 fd8c 	bl	800a490 <SFU_MPU_IsUnprivileged>
 8009978:	b120      	cbz	r0, 8009984 <SFU_EXCPT_Security_Error+0x20>
  }
  else
  {
    NVIC_SystemReset();
  }
}
 800997a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    SFU_MPU_SysCall((uint32_t)SB_SYSCALL_RESET);
 800997e:	2002      	movs	r0, #2
 8009980:	f000 bd82 	b.w	800a488 <SFU_MPU_SysCall>
 8009984:	f3bf 8f4f 	dsb	sy
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8009988:	4906      	ldr	r1, [pc, #24]	; (80099a4 <SFU_EXCPT_Security_Error+0x40>)
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 800998a:	4b07      	ldr	r3, [pc, #28]	; (80099a8 <SFU_EXCPT_Security_Error+0x44>)
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 800998c:	68ca      	ldr	r2, [r1, #12]
 800998e:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8009992:	4313      	orrs	r3, r2
 8009994:	60cb      	str	r3, [r1, #12]
 8009996:	f3bf 8f4f 	dsb	sy
    __NOP();
 800999a:	bf00      	nop
  for(;;)                                                           /* wait until reset */
 800999c:	e7fd      	b.n	800999a <SFU_EXCPT_Security_Error+0x36>
 800999e:	bf00      	nop
 80099a0:	0800d571 	.word	0x0800d571
 80099a4:	e000ed00 	.word	0xe000ed00
 80099a8:	05fa0004 	.word	0x05fa0004

080099ac <SFU_EXCPT_Init>:
       ...
  */
  e_ret_status = SFU_SUCCESS;

  return e_ret_status;
}
 80099ac:	4800      	ldr	r0, [pc, #0]	; (80099b0 <SFU_EXCPT_Init+0x4>)
 80099ae:	4770      	bx	lr
 80099b0:	00122f11 	.word	0x00122f11

080099b4 <SFU_EXCPT_DeInit>:
 80099b4:	4800      	ldr	r0, [pc, #0]	; (80099b8 <SFU_EXCPT_DeInit+0x4>)
 80099b6:	4770      	bx	lr
 80099b8:	00122f11 	.word	0x00122f11

080099bc <MemoryCompare>:
  * @param  pAdd2 Address of the second buffer to compare
  * @param  Size Size of the comparison
  * @retval SFU_ SUCCESS if equal, a SFU_error otherwise.
  */
SFU_ErrorStatus MemoryCompare(uint8_t *pAdd1, uint8_t *pAdd2, uint32_t Size)
{
 80099bc:	b537      	push	{r0, r1, r2, r4, r5, lr}
  /* Use of __IO to force recheck of these variables values */
  uint8_t __IO result = 0x00U;
 80099be:	2300      	movs	r3, #0
 80099c0:	f88d 3003 	strb.w	r3, [sp, #3]
  uint32_t __IO i;
  uint32_t tmp;

  for (i = 0U; i < Size; i++)
 80099c4:	9301      	str	r3, [sp, #4]
 80099c6:	9b01      	ldr	r3, [sp, #4]
 80099c8:	4293      	cmp	r3, r2
 80099ca:	d311      	bcc.n	80099f0 <MemoryCompare+0x34>
    tmp = pAdd1[i];
    tmp ^= pAdd2[i];
    result |= tmp;
  }

  if ((result == 0x00U) && (i == Size)) /* Add check that loop exited normally without any fault injection */
 80099cc:	f89d 3003 	ldrb.w	r3, [sp, #3]
 80099d0:	b9db      	cbnz	r3, 8009a0a <MemoryCompare+0x4e>
 80099d2:	9b01      	ldr	r3, [sp, #4]
 80099d4:	4293      	cmp	r3, r2
 80099d6:	d118      	bne.n	8009a0a <MemoryCompare+0x4e>
  {
    return (((result != 0x00U) || (i != Size))? SFU_ERROR : SFU_SUCCESS);
 80099d8:	f89d 3003 	ldrb.w	r3, [sp, #3]
 80099dc:	b9ab      	cbnz	r3, 8009a0a <MemoryCompare+0x4e>
 80099de:	9901      	ldr	r1, [sp, #4]
 80099e0:	4b0b      	ldr	r3, [pc, #44]	; (8009a10 <MemoryCompare+0x54>)
 80099e2:	f641 70e1 	movw	r0, #8161	; 0x1fe1
 80099e6:	4291      	cmp	r1, r2
 80099e8:	bf08      	it	eq
 80099ea:	4618      	moveq	r0, r3
  }
  else
  {
    return SFU_ERROR;
  }
}
 80099ec:	b003      	add	sp, #12
 80099ee:	bd30      	pop	{r4, r5, pc}
    tmp = pAdd1[i];
 80099f0:	9c01      	ldr	r4, [sp, #4]
    tmp ^= pAdd2[i];
 80099f2:	9d01      	ldr	r5, [sp, #4]
    result |= tmp;
 80099f4:	5d04      	ldrb	r4, [r0, r4]
 80099f6:	5d4d      	ldrb	r5, [r1, r5]
 80099f8:	f89d 3003 	ldrb.w	r3, [sp, #3]
 80099fc:	406c      	eors	r4, r5
 80099fe:	4323      	orrs	r3, r4
 8009a00:	f88d 3003 	strb.w	r3, [sp, #3]
  for (i = 0U; i < Size; i++)
 8009a04:	9b01      	ldr	r3, [sp, #4]
 8009a06:	3301      	adds	r3, #1
 8009a08:	e7dc      	b.n	80099c4 <MemoryCompare+0x8>
    return SFU_ERROR;
 8009a0a:	f641 70e1 	movw	r0, #8161	; 0x1fe1
 8009a0e:	e7ed      	b.n	80099ec <MemoryCompare+0x30>
 8009a10:	00122f11 	.word	0x00122f11

08009a14 <VerifyFwSignatureScatter.part.0>:
  * @param pSE_Payload: pointer to Payload Buffer descriptor.
  * @param SE_FwType: Type of Fw Image.
  *        This parameter can be SE_FW_IMAGE_COMPLETE or SE_FW_IMAGE_PARTIAL.
  * @retval SE_ErrorStatus SE_SUCCESS if successful, SE_ERROR otherwise.
  */
SFU_ErrorStatus VerifyFwSignatureScatter(SE_StatusTypeDef *pSeStatus, uint32_t SlotNumber,
 8009a14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009a18:	f6ad 0d4c 	subw	sp, sp, #2124	; 0x84c
 8009a1c:	4604      	mov	r4, r0
 8009a1e:	9107      	str	r1, [sp, #28]
 8009a20:	4611      	mov	r1, r2
 8009a22:	f8dd 2870 	ldr.w	r2, [sp, #2160]	; 0x870
 8009a26:	461e      	mov	r6, r3
  {
    return SFU_ERROR;
  }

  /* Check the parameters value and set fw_size and fw_tag to check */
  if (SE_FwType == SE_FW_IMAGE_COMPLETE)
 8009a28:	2a00      	cmp	r2, #0
 8009a2a:	f040 8094 	bne.w	8009b56 <VerifyFwSignatureScatter.part.0+0x142>
  {
    fw_size = pSE_Metadata->FwSize;
 8009a2e:	688b      	ldr	r3, [r1, #8]
 8009a30:	9303      	str	r3, [sp, #12]
    fw_tag = pSE_Metadata->FwTag;
 8009a32:	f101 0b14 	add.w	fp, r1, #20
  else
  {
    return SFU_ERROR;
  }

  if ((pSE_Payload->PayloadSize[0] + pSE_Payload->PayloadSize[1]) != fw_size)
 8009a36:	e9d6 3002 	ldrd	r3, r0, [r6, #8]
 8009a3a:	9d03      	ldr	r5, [sp, #12]
 8009a3c:	4403      	add	r3, r0
 8009a3e:	42ab      	cmp	r3, r5
 8009a40:	f040 808b 	bne.w	8009b5a <VerifyFwSignatureScatter.part.0+0x146>
  {
    scatter_nb = 2U;
  }
  else
  {
    scatter_nb = 1U;
 8009a44:	2800      	cmp	r0, #0
  }


  /* Encryption process*/
  se_ret_status = SE_AuthenticateFW_Init(pSeStatus, pSE_Metadata, SE_FwType);
 8009a46:	4620      	mov	r0, r4
    scatter_nb = 1U;
 8009a48:	bf14      	ite	ne
 8009a4a:	2502      	movne	r5, #2
 8009a4c:	2501      	moveq	r5, #1
  se_ret_status = SE_AuthenticateFW_Init(pSeStatus, pSE_Metadata, SE_FwType);
 8009a4e:	f7fe fd25 	bl	800849c <SE_AuthenticateFW_Init>

  /* check for initialization errors */
  if ((se_ret_status == SE_SUCCESS) && (*pSeStatus == SE_OK))
 8009a52:	4a66      	ldr	r2, [pc, #408]	; (8009bec <VerifyFwSignatureScatter.part.0+0x1d8>)
 8009a54:	4290      	cmp	r0, r2
  se_ret_status = SE_AuthenticateFW_Init(pSeStatus, pSE_Metadata, SE_FwType);
 8009a56:	4603      	mov	r3, r0
  if ((se_ret_status == SE_SUCCESS) && (*pSeStatus == SE_OK))
 8009a58:	d17f      	bne.n	8009b5a <VerifyFwSignatureScatter.part.0+0x146>
 8009a5a:	6821      	ldr	r1, [r4, #0]
 8009a5c:	4a64      	ldr	r2, [pc, #400]	; (8009bf0 <VerifyFwSignatureScatter.part.0+0x1dc>)
 8009a5e:	4291      	cmp	r1, r2
 8009a60:	d17b      	bne.n	8009b5a <VerifyFwSignatureScatter.part.0+0x146>
 8009a62:	eb06 0285 	add.w	r2, r6, r5, lsl #2
  SFU_ErrorStatus sfu_ret_status = SFU_SUCCESS;
 8009a66:	4d63      	ldr	r5, [pc, #396]	; (8009bf4 <VerifyFwSignatureScatter.part.0+0x1e0>)
 8009a68:	9206      	str	r2, [sp, #24]
  uint32_t fw_verified_total_size = 0; /* number of bytes that have been processed during authentication check */
 8009a6a:	f04f 0800 	mov.w	r8, #0
    for (j = 0; j < scatter_nb; j++)
    {
      payloadsize = pSE_Payload->PayloadSize[j];
      ppayload = pSE_Payload->pPayload[j];
      i = 0;
      fw_chunk_size = CHUNK_SIZE_SIGN_VERIFICATION;
 8009a6e:	af09      	add	r7, sp, #36	; 0x24
      payloadsize = pSE_Payload->PayloadSize[j];
 8009a70:	68b2      	ldr	r2, [r6, #8]
 8009a72:	9204      	str	r2, [sp, #16]
      fw_chunk_size = CHUNK_SIZE_SIGN_VERIFICATION;
 8009a74:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8009a78:	603a      	str	r2, [r7, #0]

      while ((i < (payloadsize / CHUNK_SIZE_SIGN_VERIFICATION)) && (*pSeStatus == SE_OK) &&
 8009a7a:	9a04      	ldr	r2, [sp, #16]
      ppayload = pSE_Payload->pPayload[j];
 8009a7c:	f856 9b04 	ldr.w	r9, [r6], #4
      while ((i < (payloadsize / CHUNK_SIZE_SIGN_VERIFICATION)) && (*pSeStatus == SE_OK) &&
 8009a80:	0a92      	lsrs	r2, r2, #10
 8009a82:	9205      	str	r2, [sp, #20]
      i = 0;
 8009a84:	f04f 0a00 	mov.w	sl, #0
      while ((i < (payloadsize / CHUNK_SIZE_SIGN_VERIFICATION)) && (*pSeStatus == SE_OK) &&
 8009a88:	9a05      	ldr	r2, [sp, #20]
 8009a8a:	4592      	cmp	sl, r2
 8009a8c:	d006      	beq.n	8009a9c <VerifyFwSignatureScatter.part.0+0x88>
 8009a8e:	6822      	ldr	r2, [r4, #0]
 8009a90:	4957      	ldr	r1, [pc, #348]	; (8009bf0 <VerifyFwSignatureScatter.part.0+0x1dc>)
 8009a92:	428a      	cmp	r2, r1
 8009a94:	d102      	bne.n	8009a9c <VerifyFwSignatureScatter.part.0+0x88>
 8009a96:	4a57      	ldr	r2, [pc, #348]	; (8009bf4 <VerifyFwSignatureScatter.part.0+0x1e0>)
 8009a98:	4295      	cmp	r5, r2
 8009a9a:	d06a      	beq.n	8009b72 <VerifyFwSignatureScatter.part.0+0x15e>
        ppayload += fw_chunk_size;
        fw_verified_total_size += fw_chunk_size;
        i++;
      }
      /* this the last path , size can be smaller */
      fw_chunk_size = pSE_Payload->pPayload[j] + pSE_Payload->PayloadSize[j] - ppayload;
 8009a9c:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8009aa0:	6871      	ldr	r1, [r6, #4]
 8009aa2:	440a      	add	r2, r1
 8009aa4:	eba2 0209 	sub.w	r2, r2, r9
 8009aa8:	603a      	str	r2, [r7, #0]
      if ((fw_chunk_size != 0U) && (se_ret_status == SE_SUCCESS) && (*pSeStatus == SE_OK))
 8009aaa:	b1e2      	cbz	r2, 8009ae6 <VerifyFwSignatureScatter.part.0+0xd2>
 8009aac:	494f      	ldr	r1, [pc, #316]	; (8009bec <VerifyFwSignatureScatter.part.0+0x1d8>)
 8009aae:	428b      	cmp	r3, r1
 8009ab0:	d119      	bne.n	8009ae6 <VerifyFwSignatureScatter.part.0+0xd2>
 8009ab2:	6820      	ldr	r0, [r4, #0]
 8009ab4:	494e      	ldr	r1, [pc, #312]	; (8009bf0 <VerifyFwSignatureScatter.part.0+0x1dc>)
 8009ab6:	4288      	cmp	r0, r1
 8009ab8:	d115      	bne.n	8009ae6 <VerifyFwSignatureScatter.part.0+0xd2>
      {
        sfu_ret_status = SFU_LL_FLASH_Read(fw_image_chunk, (uint8_t *)ppayload, fw_chunk_size) ;
 8009aba:	4649      	mov	r1, r9
 8009abc:	f50d 6089 	add.w	r0, sp, #1096	; 0x448
 8009ac0:	f000 fe56 	bl	800a770 <SFU_LL_FLASH_Read>
        if (sfu_ret_status == SFU_SUCCESS)
 8009ac4:	4b4b      	ldr	r3, [pc, #300]	; (8009bf4 <VerifyFwSignatureScatter.part.0+0x1e0>)
 8009ac6:	4298      	cmp	r0, r3
        sfu_ret_status = SFU_LL_FLASH_Read(fw_image_chunk, (uint8_t *)ppayload, fw_chunk_size) ;
 8009ac8:	4605      	mov	r5, r0
        if (sfu_ret_status == SFU_SUCCESS)
 8009aca:	d171      	bne.n	8009bb0 <VerifyFwSignatureScatter.part.0+0x19c>
        {

          se_ret_status = SE_AuthenticateFW_Append(pSeStatus, fw_image_chunk,
 8009acc:	9a04      	ldr	r2, [sp, #16]
 8009ace:	9700      	str	r7, [sp, #0]
 8009ad0:	ab12      	add	r3, sp, #72	; 0x48
 8009ad2:	eba2 228a 	sub.w	r2, r2, sl, lsl #10
 8009ad6:	f50d 6189 	add.w	r1, sp, #1096	; 0x448
 8009ada:	4620      	mov	r0, r4
 8009adc:	f7fe fd14 	bl	8008508 <SE_AuthenticateFW_Append>
 8009ae0:	4603      	mov	r3, r0
        {
          *pSeStatus = SE_ERR_FLASH_READ;
          se_ret_status = SE_ERROR;
          sfu_ret_status = SFU_ERROR;
        }
        fw_verified_total_size += fw_chunk_size;
 8009ae2:	683a      	ldr	r2, [r7, #0]
 8009ae4:	4490      	add	r8, r2
    for (j = 0; j < scatter_nb; j++)
 8009ae6:	9a06      	ldr	r2, [sp, #24]
 8009ae8:	4296      	cmp	r6, r2
 8009aea:	d1c1      	bne.n	8009a70 <VerifyFwSignatureScatter.part.0+0x5c>
      }
    }
  }

  if ((sfu_ret_status == SFU_SUCCESS) && (se_ret_status == SE_SUCCESS) && (*pSeStatus == SE_OK))
 8009aec:	4a41      	ldr	r2, [pc, #260]	; (8009bf4 <VerifyFwSignatureScatter.part.0+0x1e0>)
 8009aee:	4295      	cmp	r5, r2
 8009af0:	d133      	bne.n	8009b5a <VerifyFwSignatureScatter.part.0+0x146>
 8009af2:	f502 72ff 	add.w	r2, r2, #510	; 0x1fe
 8009af6:	4293      	cmp	r3, r2
 8009af8:	d12f      	bne.n	8009b5a <VerifyFwSignatureScatter.part.0+0x146>
 8009afa:	6826      	ldr	r6, [r4, #0]
 8009afc:	4a3c      	ldr	r2, [pc, #240]	; (8009bf0 <VerifyFwSignatureScatter.part.0+0x1dc>)
 8009afe:	4296      	cmp	r6, r2
 8009b00:	d12b      	bne.n	8009b5a <VerifyFwSignatureScatter.part.0+0x146>
  {
    if (fw_verified_total_size <= fw_size)
 8009b02:	9a03      	ldr	r2, [sp, #12]
 8009b04:	4542      	cmp	r2, r8
 8009b06:	d328      	bcc.n	8009b5a <VerifyFwSignatureScatter.part.0+0x146>
    {
      /* Do the Finalization, check the authentication TAG*/
      fw_tag_len = sizeof(fw_tag_output);
 8009b08:	2220      	movs	r2, #32
 8009b0a:	9208      	str	r2, [sp, #32]
      se_ret_status =   SE_AuthenticateFW_Finish(pSeStatus, fw_tag_output, (int32_t *)&fw_tag_len);
 8009b0c:	a90a      	add	r1, sp, #40	; 0x28
 8009b0e:	446a      	add	r2, sp
 8009b10:	4620      	mov	r0, r4
 8009b12:	9303      	str	r3, [sp, #12]
 8009b14:	f7fe fd36 	bl	8008584 <SE_AuthenticateFW_Finish>

      if ((se_ret_status == SE_SUCCESS) && (*pSeStatus == SE_OK) && (fw_tag_len == SE_TAG_LEN))
 8009b18:	9b03      	ldr	r3, [sp, #12]
 8009b1a:	4298      	cmp	r0, r3
 8009b1c:	d11d      	bne.n	8009b5a <VerifyFwSignatureScatter.part.0+0x146>
 8009b1e:	6823      	ldr	r3, [r4, #0]
 8009b20:	42b3      	cmp	r3, r6
 8009b22:	d11a      	bne.n	8009b5a <VerifyFwSignatureScatter.part.0+0x146>
 8009b24:	9a08      	ldr	r2, [sp, #32]
 8009b26:	2a20      	cmp	r2, #32
 8009b28:	d117      	bne.n	8009b5a <VerifyFwSignatureScatter.part.0+0x146>
      {
        /* Firmware tag verification */
        if (MemoryCompare(fw_tag_output, fw_tag, SE_TAG_LEN) != SFU_SUCCESS)
 8009b2a:	4659      	mov	r1, fp
 8009b2c:	a80a      	add	r0, sp, #40	; 0x28
 8009b2e:	f7ff ff45 	bl	80099bc <MemoryCompare>
          se_ret_status = SE_ERROR;
          sfu_ret_status = SFU_ERROR;

          /* Save result for active slot :
             to avoid single fault attack the signature will be double checked before UserApp execution */
          if ((SlotNumber >= SLOT_ACTIVE_1) && (SlotNumber < SLOT_DWL_1))
 8009b32:	9b07      	ldr	r3, [sp, #28]
        if (MemoryCompare(fw_tag_output, fw_tag, SE_TAG_LEN) != SFU_SUCCESS)
 8009b34:	4602      	mov	r2, r0
 8009b36:	42aa      	cmp	r2, r5
          if ((SlotNumber >= SLOT_ACTIVE_1) && (SlotNumber < SLOT_DWL_1))
 8009b38:	f103 30ff 	add.w	r0, r3, #4294967295	; 0xffffffff
        if (MemoryCompare(fw_tag_output, fw_tag, SE_TAG_LEN) != SFU_SUCCESS)
 8009b3c:	d03e      	beq.n	8009bbc <VerifyFwSignatureScatter.part.0+0x1a8>
          *pSeStatus = SE_SIGNATURE_ERR;
 8009b3e:	4b2e      	ldr	r3, [pc, #184]	; (8009bf8 <VerifyFwSignatureScatter.part.0+0x1e4>)
 8009b40:	6023      	str	r3, [r4, #0]
          if ((SlotNumber >= SLOT_ACTIVE_1) && (SlotNumber < SLOT_DWL_1))
 8009b42:	2802      	cmp	r0, #2
 8009b44:	d809      	bhi.n	8009b5a <VerifyFwSignatureScatter.part.0+0x146>
          {
            (void) memset(&fw_tag_validated[SlotNumber - SLOT_ACTIVE_1][0U], 0x00, SE_TAG_LEN);
 8009b46:	4b2d      	ldr	r3, [pc, #180]	; (8009bfc <VerifyFwSignatureScatter.part.0+0x1e8>)
 8009b48:	2220      	movs	r2, #32
 8009b4a:	2100      	movs	r1, #0
 8009b4c:	eb03 1040 	add.w	r0, r3, r0, lsl #5
 8009b50:	f002 f852 	bl	800bbf8 <memset>
 8009b54:	e001      	b.n	8009b5a <VerifyFwSignatureScatter.part.0+0x146>
  else if (SE_FwType == SE_FW_IMAGE_PARTIAL)
 8009b56:	2a01      	cmp	r2, #1
 8009b58:	d006      	beq.n	8009b68 <VerifyFwSignatureScatter.part.0+0x154>
          sfu_ret_status = SFU_ERROR;
 8009b5a:	f641 72e1 	movw	r2, #8161	; 0x1fe1
  else
  {
    sfu_ret_status = SFU_ERROR;
  }
  return sfu_ret_status;
}
 8009b5e:	4610      	mov	r0, r2
 8009b60:	f60d 0d4c 	addw	sp, sp, #2124	; 0x84c
 8009b64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    fw_size = pSE_Metadata->PartialFwSize;
 8009b68:	690b      	ldr	r3, [r1, #16]
 8009b6a:	9303      	str	r3, [sp, #12]
    fw_tag = pSE_Metadata->PartialFwTag;
 8009b6c:	f101 0b34 	add.w	fp, r1, #52	; 0x34
 8009b70:	e761      	b.n	8009a36 <VerifyFwSignatureScatter.part.0+0x22>
        sfu_ret_status = SFU_LL_FLASH_Read(fw_image_chunk, (uint8_t *)ppayload, fw_chunk_size) ;
 8009b72:	683a      	ldr	r2, [r7, #0]
 8009b74:	4649      	mov	r1, r9
 8009b76:	f50d 6089 	add.w	r0, sp, #1096	; 0x448
 8009b7a:	f000 fdf9 	bl	800a770 <SFU_LL_FLASH_Read>
        if (sfu_ret_status == SFU_SUCCESS)
 8009b7e:	4b1d      	ldr	r3, [pc, #116]	; (8009bf4 <VerifyFwSignatureScatter.part.0+0x1e0>)
 8009b80:	4298      	cmp	r0, r3
        sfu_ret_status = SFU_LL_FLASH_Read(fw_image_chunk, (uint8_t *)ppayload, fw_chunk_size) ;
 8009b82:	4605      	mov	r5, r0
        if (sfu_ret_status == SFU_SUCCESS)
 8009b84:	d10e      	bne.n	8009ba4 <VerifyFwSignatureScatter.part.0+0x190>
          se_ret_status = SE_AuthenticateFW_Append(pSeStatus, fw_image_chunk, (int32_t)fw_chunk_size,
 8009b86:	9700      	str	r7, [sp, #0]
 8009b88:	ab12      	add	r3, sp, #72	; 0x48
 8009b8a:	683a      	ldr	r2, [r7, #0]
 8009b8c:	f50d 6189 	add.w	r1, sp, #1096	; 0x448
 8009b90:	4620      	mov	r0, r4
 8009b92:	f7fe fcb9 	bl	8008508 <SE_AuthenticateFW_Append>
 8009b96:	4603      	mov	r3, r0
        ppayload += fw_chunk_size;
 8009b98:	683a      	ldr	r2, [r7, #0]
        i++;
 8009b9a:	f10a 0a01 	add.w	sl, sl, #1
        ppayload += fw_chunk_size;
 8009b9e:	4491      	add	r9, r2
        fw_verified_total_size += fw_chunk_size;
 8009ba0:	4490      	add	r8, r2
        i++;
 8009ba2:	e771      	b.n	8009a88 <VerifyFwSignatureScatter.part.0+0x74>
          *pSeStatus = SE_ERR_FLASH_READ;
 8009ba4:	4b16      	ldr	r3, [pc, #88]	; (8009c00 <VerifyFwSignatureScatter.part.0+0x1ec>)
 8009ba6:	6023      	str	r3, [r4, #0]
          sfu_ret_status = SFU_ERROR;
 8009ba8:	f641 75e1 	movw	r5, #8161	; 0x1fe1
          se_ret_status = SE_ERROR;
 8009bac:	4b15      	ldr	r3, [pc, #84]	; (8009c04 <VerifyFwSignatureScatter.part.0+0x1f0>)
 8009bae:	e7f3      	b.n	8009b98 <VerifyFwSignatureScatter.part.0+0x184>
          *pSeStatus = SE_ERR_FLASH_READ;
 8009bb0:	4b13      	ldr	r3, [pc, #76]	; (8009c00 <VerifyFwSignatureScatter.part.0+0x1ec>)
 8009bb2:	6023      	str	r3, [r4, #0]
          sfu_ret_status = SFU_ERROR;
 8009bb4:	f641 75e1 	movw	r5, #8161	; 0x1fe1
          se_ret_status = SE_ERROR;
 8009bb8:	4b12      	ldr	r3, [pc, #72]	; (8009c04 <VerifyFwSignatureScatter.part.0+0x1f0>)
 8009bba:	e792      	b.n	8009ae2 <VerifyFwSignatureScatter.part.0+0xce>
          FLOW_STEP(uFlowCryptoValue, FLOW_STEP_INTEGRITY);
 8009bbc:	4912      	ldr	r1, [pc, #72]	; (8009c08 <VerifyFwSignatureScatter.part.0+0x1f4>)
 8009bbe:	680b      	ldr	r3, [r1, #0]
 8009bc0:	f483 432a 	eor.w	r3, r3, #43520	; 0xaa00
 8009bc4:	f083 03b5 	eor.w	r3, r3, #181	; 0xb5
          if ((SlotNumber >= SLOT_ACTIVE_1) && (SlotNumber < SLOT_DWL_1))
 8009bc8:	2802      	cmp	r0, #2
          FLOW_STEP(uFlowCryptoValue, FLOW_STEP_INTEGRITY);
 8009bca:	600b      	str	r3, [r1, #0]
          if ((SlotNumber >= SLOT_ACTIVE_1) && (SlotNumber < SLOT_DWL_1))
 8009bcc:	d8c7      	bhi.n	8009b5e <VerifyFwSignatureScatter.part.0+0x14a>
            (void) memcpy(&fw_tag_validated[SlotNumber - SLOT_ACTIVE_1][0U], fw_tag_output, SE_TAG_LEN);
 8009bce:	4c0b      	ldr	r4, [pc, #44]	; (8009bfc <VerifyFwSignatureScatter.part.0+0x1e8>)
 8009bd0:	ab0a      	add	r3, sp, #40	; 0x28
 8009bd2:	eb04 1440 	add.w	r4, r4, r0, lsl #5
 8009bd6:	ae12      	add	r6, sp, #72	; 0x48
 8009bd8:	461d      	mov	r5, r3
 8009bda:	cd03      	ldmia	r5!, {r0, r1}
 8009bdc:	42b5      	cmp	r5, r6
 8009bde:	6020      	str	r0, [r4, #0]
 8009be0:	6061      	str	r1, [r4, #4]
 8009be2:	462b      	mov	r3, r5
 8009be4:	f104 0408 	add.w	r4, r4, #8
 8009be8:	d1f6      	bne.n	8009bd8 <VerifyFwSignatureScatter.part.0+0x1c4>
 8009bea:	e7b8      	b.n	8009b5e <VerifyFwSignatureScatter.part.0+0x14a>
 8009bec:	0012310f 	.word	0x0012310f
 8009bf0:	0012e223 	.word	0x0012e223
 8009bf4:	00122f11 	.word	0x00122f11
 8009bf8:	00146ac1 	.word	0x00146ac1
 8009bfc:	20001510 	.word	0x20001510
 8009c00:	0014b817 	.word	0x0014b817
 8009c04:	00018799 	.word	0x00018799
 8009c08:	20001004 	.word	0x20001004

08009c0c <VerifyFwSignatureScatter>:
{
 8009c0c:	b430      	push	{r4, r5}
 8009c0e:	9c02      	ldr	r4, [sp, #8]
  if ((pSeStatus == NULL) || (pSE_Metadata == NULL) || (pSE_Payload == NULL))
 8009c10:	b158      	cbz	r0, 8009c2a <VerifyFwSignatureScatter+0x1e>
 8009c12:	b152      	cbz	r2, 8009c2a <VerifyFwSignatureScatter+0x1e>
 8009c14:	b14b      	cbz	r3, 8009c2a <VerifyFwSignatureScatter+0x1e>
  if ((pSE_Payload->pPayload[0] == 0U) || ((pSE_Payload->pPayload[1] == 0U) && (pSE_Payload->PayloadSize[1] != 0U)))
 8009c16:	681d      	ldr	r5, [r3, #0]
 8009c18:	b13d      	cbz	r5, 8009c2a <VerifyFwSignatureScatter+0x1e>
 8009c1a:	685d      	ldr	r5, [r3, #4]
 8009c1c:	b90d      	cbnz	r5, 8009c22 <VerifyFwSignatureScatter+0x16>
 8009c1e:	68dd      	ldr	r5, [r3, #12]
 8009c20:	b91d      	cbnz	r5, 8009c2a <VerifyFwSignatureScatter+0x1e>
 8009c22:	9402      	str	r4, [sp, #8]
}
 8009c24:	bc30      	pop	{r4, r5}
 8009c26:	f7ff bef5 	b.w	8009a14 <VerifyFwSignatureScatter.part.0>
 8009c2a:	f641 70e1 	movw	r0, #8161	; 0x1fe1
 8009c2e:	bc30      	pop	{r4, r5}
 8009c30:	4770      	bx	lr
	...

08009c34 <VerifyFwSignature>:
  * @retval SFU_SUCCESS if successful, a SFU_ErrorStatus error otherwise.
  */
SFU_ErrorStatus VerifyFwSignature(SE_StatusTypeDef  *pSeStatus, uint32_t SlotNumber,
                                  SE_FwRawHeaderTypeDef *pFwImageHeader,
                                  uint32_t SE_FwType)
{
 8009c34:	b570      	push	{r4, r5, r6, lr}
  SE_Ex_PayloadDescTypeDef  pse_payload;
  uint32_t fw_size;
  uint32_t fw_offset;

  /*  put it OK, to discriminate error in SFU FWIMG parts */
  *pSeStatus = SE_OK;
 8009c36:	4c10      	ldr	r4, [pc, #64]	; (8009c78 <VerifyFwSignature+0x44>)
 8009c38:	6004      	str	r4, [r0, #0]
{
 8009c3a:	b086      	sub	sp, #24

  /* Check the parameters value */
  if (pFwImageHeader == NULL)
 8009c3c:	b1c2      	cbz	r2, 8009c70 <VerifyFwSignature+0x3c>
  {
    return SFU_ERROR;
  }
  if ((SE_FwType != SE_FW_IMAGE_PARTIAL) && (SE_FwType != SE_FW_IMAGE_COMPLETE))
 8009c3e:	2b01      	cmp	r3, #1
 8009c40:	d816      	bhi.n	8009c70 <VerifyFwSignature+0x3c>
      fw_size = 0U;
      fw_offset = 0U;
      break;
  }

  pse_payload.pPayload[0] = SlotStartAdd[SlotNumber] + fw_offset + SFU_IMG_IMAGE_OFFSET;
 8009c42:	4c0e      	ldr	r4, [pc, #56]	; (8009c7c <VerifyFwSignature+0x48>)
      fw_size = pFwImageHeader->FwSize;
 8009c44:	bf18      	it	ne
 8009c46:	6895      	ldrne	r5, [r2, #8]
  pse_payload.pPayload[0] = SlotStartAdd[SlotNumber] + fw_offset + SFU_IMG_IMAGE_OFFSET;
 8009c48:	f854 4021 	ldr.w	r4, [r4, r1, lsl #2]
  pse_payload.PayloadSize[0] = fw_size;
  pse_payload.pPayload[1] = 0U;
  pse_payload.PayloadSize[1] = 0U;

  return  VerifyFwSignatureScatter(pSeStatus, SlotNumber, pFwImageHeader, &pse_payload, SE_FwType);
 8009c4c:	9300      	str	r3, [sp, #0]
      fw_offset = pFwImageHeader->PartialFwOffset;
 8009c4e:	bf0c      	ite	eq
 8009c50:	e9d2 6503 	ldrdeq	r6, r5, [r2, #12]
      fw_offset = 0U;
 8009c54:	2600      	movne	r6, #0
  pse_payload.pPayload[0] = SlotStartAdd[SlotNumber] + fw_offset + SFU_IMG_IMAGE_OFFSET;
 8009c56:	f504 7400 	add.w	r4, r4, #512	; 0x200
 8009c5a:	4434      	add	r4, r6
 8009c5c:	9402      	str	r4, [sp, #8]
  return  VerifyFwSignatureScatter(pSeStatus, SlotNumber, pFwImageHeader, &pse_payload, SE_FwType);
 8009c5e:	ab02      	add	r3, sp, #8
  pse_payload.pPayload[1] = 0U;
 8009c60:	2400      	movs	r4, #0
  pse_payload.PayloadSize[0] = fw_size;
 8009c62:	9504      	str	r5, [sp, #16]
  pse_payload.pPayload[1] = 0U;
 8009c64:	9403      	str	r4, [sp, #12]
  pse_payload.PayloadSize[1] = 0U;
 8009c66:	9405      	str	r4, [sp, #20]
  return  VerifyFwSignatureScatter(pSeStatus, SlotNumber, pFwImageHeader, &pse_payload, SE_FwType);
 8009c68:	f7ff ffd0 	bl	8009c0c <VerifyFwSignatureScatter>
}
 8009c6c:	b006      	add	sp, #24
 8009c6e:	bd70      	pop	{r4, r5, r6, pc}
    return SFU_ERROR;
 8009c70:	f641 70e1 	movw	r0, #8161	; 0x1fe1
 8009c74:	e7fa      	b.n	8009c6c <VerifyFwSignature+0x38>
 8009c76:	bf00      	nop
 8009c78:	0012e223 	.word	0x0012e223
 8009c7c:	0800ce2c 	.word	0x0800ce2c

08009c80 <VerifySlot>:
  * @param uSlotSize Size of a slot.
  * @param uFwSize Size of the firmware image.
  * @retval SFU_ErrorStatus SFU_SUCCESS if successful, error code otherwise
  */
SFU_ErrorStatus VerifySlot(uint8_t *pSlotBegin, uint32_t uSlotSize, uint32_t uFwSize)
{
 8009c80:	b410      	push	{r4}
  uint32_t length;
  SFU_ErrorStatus e_ret_status = SFU_ERROR;

  /* Check is already clean */
  pdata = pSlotBegin + SFU_IMG_IMAGE_OFFSET + uFwSize;
  length = uSlotSize - SFU_IMG_IMAGE_OFFSET - uFwSize;
 8009c82:	f5a1 7300 	sub.w	r3, r1, #512	; 0x200
  pdata = pSlotBegin + SFU_IMG_IMAGE_OFFSET + uFwSize;
 8009c86:	f502 7400 	add.w	r4, r2, #512	; 0x200
  e_ret_status = SFU_LL_FLASH_Compare(pdata, 0x00000000U, 0xFFFFFFFFU, length);
 8009c8a:	1a9b      	subs	r3, r3, r2
 8009c8c:	4420      	add	r0, r4
 8009c8e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff

  return e_ret_status;
}
 8009c92:	f85d 4b04 	ldr.w	r4, [sp], #4
  e_ret_status = SFU_LL_FLASH_Compare(pdata, 0x00000000U, 0xFFFFFFFFU, length);
 8009c96:	2100      	movs	r1, #0
 8009c98:	f000 bd71 	b.w	800a77e <SFU_LL_FLASH_Compare>

08009c9c <CleanUpSlot>:
  * @param  uSlotSize Size of a slot.
  * @param  uOffset Offset in the slot to start cleanup, until end of the slot.
  * @retval SFU_ErrorStatus SFU_SUCCESS if successful, SFU_ERROR otherwise.
  */
SFU_ErrorStatus CleanUpSlot(uint8_t *pSlotBegin, uint32_t uSlotSize, uint32_t uOffset)
{
 8009c9c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009c9e:	2300      	movs	r3, #0
  slot_begin = (uint32_t) pSlotBegin;
  for (pdata = slot_begin + uOffset; pdata < (slot_begin + uSlotSize); pdata += sizeof(SFU_LL_FLASH_write_t))
  {
    e_ret_status =  SFU_LL_FLASH_Read((uint8_t *) &value, (uint8_t *) pdata, sizeof(SFU_LL_FLASH_write_t));

    if (e_ret_status == SFU_SUCCESS)
 8009ca0:	4f15      	ldr	r7, [pc, #84]	; (8009cf8 <CleanUpSlot+0x5c>)
 8009ca2:	f88d 3005 	strb.w	r3, [sp, #5]
  for (pdata = slot_begin + uOffset; pdata < (slot_begin + uSlotSize); pdata += sizeof(SFU_LL_FLASH_write_t))
 8009ca6:	1885      	adds	r5, r0, r2
  SFU_ErrorStatus e_ret_status = SFU_ERROR;
 8009ca8:	f641 74e1 	movw	r4, #8161	; 0x1fe1
  for (pdata = slot_begin + uOffset; pdata < (slot_begin + uSlotSize); pdata += sizeof(SFU_LL_FLASH_write_t))
 8009cac:	1846      	adds	r6, r0, r1
 8009cae:	42ae      	cmp	r6, r5
 8009cb0:	d802      	bhi.n	8009cb8 <CleanUpSlot+0x1c>
    {
      (void) SFU_LL_SECU_IWDG_Refresh();
    }
  }
  return e_ret_status;
}
 8009cb2:	4620      	mov	r0, r4
 8009cb4:	b003      	add	sp, #12
 8009cb6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    e_ret_status =  SFU_LL_FLASH_Read((uint8_t *) &value, (uint8_t *) pdata, sizeof(SFU_LL_FLASH_write_t));
 8009cb8:	2201      	movs	r2, #1
 8009cba:	4629      	mov	r1, r5
 8009cbc:	f10d 0006 	add.w	r0, sp, #6
 8009cc0:	f000 fd56 	bl	800a770 <SFU_LL_FLASH_Read>
    if (e_ret_status == SFU_SUCCESS)
 8009cc4:	42b8      	cmp	r0, r7
    e_ret_status =  SFU_LL_FLASH_Read((uint8_t *) &value, (uint8_t *) pdata, sizeof(SFU_LL_FLASH_write_t));
 8009cc6:	4604      	mov	r4, r0
    if (e_ret_status == SFU_SUCCESS)
 8009cc8:	d105      	bne.n	8009cd6 <CleanUpSlot+0x3a>
      if (memcmp((void *) &value, (void *) &pattern, sizeof(SFU_LL_FLASH_write_t)) != 0)
 8009cca:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8009cce:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8009cd2:	429a      	cmp	r2, r3
 8009cd4:	d008      	beq.n	8009ce8 <CleanUpSlot+0x4c>
      e_ret_status = SFU_LL_FLASH_Write(&flash_if_info, (uint8_t *) pdata, (uint8_t *) &pattern,
 8009cd6:	2301      	movs	r3, #1
 8009cd8:	f10d 0205 	add.w	r2, sp, #5
 8009cdc:	4629      	mov	r1, r5
 8009cde:	f10d 0007 	add.w	r0, sp, #7
 8009ce2:	f000 fd3e 	bl	800a762 <SFU_LL_FLASH_Write>
 8009ce6:	4604      	mov	r4, r0
    if ((pdata % 0x1000U) == 0U)
 8009ce8:	f3c5 030b 	ubfx	r3, r5, #0, #12
 8009cec:	b90b      	cbnz	r3, 8009cf2 <CleanUpSlot+0x56>
      (void) SFU_LL_SECU_IWDG_Refresh();
 8009cee:	f000 fedf 	bl	800aab0 <SFU_LL_SECU_IWDG_Refresh>
  for (pdata = slot_begin + uOffset; pdata < (slot_begin + uSlotSize); pdata += sizeof(SFU_LL_FLASH_write_t))
 8009cf2:	3501      	adds	r5, #1
 8009cf4:	e7db      	b.n	8009cae <CleanUpSlot+0x12>
 8009cf6:	bf00      	nop
 8009cf8:	00122f11 	.word	0x00122f11

08009cfc <SFU_IMG_InitImageHandling>:
  *        Must be called first (and once) before calling the other Image handling services.
  * @param  None.
  * @retval SFU_IMG_InitStatusTypeDef SFU_IMG_INIT_OK if successful, an error code otherwise.
  */
SFU_IMG_InitStatusTypeDef SFU_IMG_InitImageHandling(void)
{
 8009cfc:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   * starting with 0s.
   * This causes an issue when calling CLEAN_TRAILER_MAGIC (because of this we added an erase that generated
   * side-effects).
   * To avoid all these problems we can initialize fw_image_header_validated with a non-0  value.
   */
  (void) memset((uint8_t *) &fw_image_header_validated, 0xFE, sizeof(fw_image_header_validated));
 8009cfe:	481c      	ldr	r0, [pc, #112]	; (8009d70 <SFU_IMG_InitImageHandling+0x74>)
   */
  for (i = 0U; i < SFU_NB_MAX_ACTIVE_IMAGE; i++)
  {
#if defined(__GNUC__)
    __IO uint32_t start_add;
    start_add = SlotStartAdd[SLOT_ACTIVE_1 + i];
 8009d00:	4c1c      	ldr	r4, [pc, #112]	; (8009d74 <SFU_IMG_InitImageHandling+0x78>)
  (void) memset((uint8_t *) &fw_image_header_validated, 0xFE, sizeof(fw_image_header_validated));
 8009d02:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8009d06:	21fe      	movs	r1, #254	; 0xfe
 8009d08:	f001 ff76 	bl	800bbf8 <memset>
    start_add = SlotStartAdd[SLOT_ACTIVE_1 + i];
 8009d0c:	9401      	str	r4, [sp, #4]
    if (start_add != 0U)
 8009d0e:	9b01      	ldr	r3, [sp, #4]
 8009d10:	b9fb      	cbnz	r3, 8009d52 <SFU_IMG_InitImageHandling+0x56>
    if (SlotStartAdd[SLOT_ACTIVE_1 + i] != 0U)
#endif /* (__GNUC__) */
    {
      if (!IS_ALIGNED(SlotStartAdd[SLOT_ACTIVE_1 + i]))
      {
        e_ret_status = SFU_IMG_INIT_FLASH_CONSTRAINTS_ERROR;
 8009d12:	2500      	movs	r5, #0
   */
  for (i = 0U; i < SFU_NB_MAX_ACTIVE_IMAGE; i++)
  {
#if defined(__GNUC__)
    __IO uint32_t start_add;
    start_add = SlotStartAdd[SLOT_ACTIVE_1 + i];
 8009d14:	9402      	str	r4, [sp, #8]
    if (start_add != 0U)
 8009d16:	9b02      	ldr	r3, [sp, #8]
 8009d18:	b16b      	cbz	r3, 8009d36 <SFU_IMG_InitImageHandling+0x3a>
#else
    if (SlotStartAdd[SLOT_ACTIVE_1 + i] != 0U)
#endif /* (__GNUC__) */
    {
      if ((SFU_LL_FLASH_GetSector(SlotStartAdd[SLOT_ACTIVE_1 + i])) <= SFU_PROTECT_WRP_PAGE_END_1)
 8009d1a:	4816      	ldr	r0, [pc, #88]	; (8009d74 <SFU_IMG_InitImageHandling+0x78>)
 8009d1c:	f000 fd44 	bl	800a7a8 <SFU_LL_FLASH_GetSector>
 8009d20:	4606      	mov	r6, r0
 8009d22:	4815      	ldr	r0, [pc, #84]	; (8009d78 <SFU_IMG_InitImageHandling+0x7c>)
 8009d24:	f000 fd40 	bl	800a7a8 <SFU_LL_FLASH_GetSector>
 8009d28:	4286      	cmp	r6, r0
 8009d2a:	d804      	bhi.n	8009d36 <SFU_IMG_InitImageHandling+0x3a>
      {
        TRACE("\r\n= [FWIMG] SLOT_ACTIVE_%d overlaps SBSFU code area protected by WRP\r\n", i + 1U);
 8009d2c:	4813      	ldr	r0, [pc, #76]	; (8009d7c <SFU_IMG_InitImageHandling+0x80>)
 8009d2e:	2101      	movs	r1, #1
 8009d30:	f001 ff6a 	bl	800bc08 <iprintf>
        e_ret_status = SFU_IMG_INIT_FLASH_CONSTRAINTS_ERROR;
 8009d34:	2503      	movs	r5, #3

  for (i = 0U; i < SFU_NB_MAX_ACTIVE_IMAGE; i++)
  {
#if defined(__GNUC__)
    __IO uint32_t start_add;
    start_add = SlotStartAdd[SLOT_ACTIVE_1 + i];
 8009d36:	9403      	str	r4, [sp, #12]
    if (start_add != 0U)
 8009d38:	9b03      	ldr	r3, [sp, #12]
 8009d3a:	b13b      	cbz	r3, 8009d4c <SFU_IMG_InitImageHandling+0x50>
#else
    if (SlotStartAdd[SLOT_ACTIVE_1 + i] != 0U)
#endif /* (__GNUC__) */
    {
      if (!((SlotHeaderAdd[SLOT_ACTIVE_1 + i] >= SFU_PROTECT_MPU_HEADER_START)
 8009d3c:	4b10      	ldr	r3, [pc, #64]	; (8009d80 <SFU_IMG_InitImageHandling+0x84>)
 8009d3e:	33c0      	adds	r3, #192	; 0xc0
 8009d40:	d304      	bcc.n	8009d4c <SFU_IMG_InitImageHandling+0x50>
            && ((SlotHeaderAdd[SLOT_ACTIVE_1 + i] + SE_FW_HEADER_TOT_LEN) <=
                (SFU_PROTECT_MPU_HEADER_START + mpu_size))))
      {
        TRACE("\r\n= [FWIMG] Header of SLOT_ACTIVE_%d is not under the MPU protection\r\n", i + 1U);
 8009d42:	4810      	ldr	r0, [pc, #64]	; (8009d84 <SFU_IMG_InitImageHandling+0x88>)
 8009d44:	2101      	movs	r1, #1
 8009d46:	f001 ff5f 	bl	800bc08 <iprintf>
        e_ret_status = SFU_IMG_INIT_FLASH_CONSTRAINTS_ERROR;
 8009d4a:	2503      	movs	r5, #3




  return e_ret_status;
}
 8009d4c:	4628      	mov	r0, r5
 8009d4e:	b004      	add	sp, #16
 8009d50:	bd70      	pop	{r4, r5, r6, pc}
      if (!IS_ALIGNED(SlotStartAdd[SLOT_ACTIVE_1 + i]))
 8009d52:	4620      	mov	r0, r4
 8009d54:	f000 fdfc 	bl	800a950 <SFU_LL_FLASH_INT_GetSector>
 8009d58:	4b0b      	ldr	r3, [pc, #44]	; (8009d88 <SFU_IMG_InitImageHandling+0x8c>)
 8009d5a:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8009d5e:	429c      	cmp	r4, r3
 8009d60:	d0d7      	beq.n	8009d12 <SFU_IMG_InitImageHandling+0x16>
        TRACE("\r\n= [FWIMG] SLOT_ACTIVE_%d (%x) is not properly aligned\r\n",
 8009d62:	480a      	ldr	r0, [pc, #40]	; (8009d8c <SFU_IMG_InitImageHandling+0x90>)
 8009d64:	4622      	mov	r2, r4
 8009d66:	2101      	movs	r1, #1
 8009d68:	f001 ff4e 	bl	800bc08 <iprintf>
        e_ret_status = SFU_IMG_INIT_FLASH_CONSTRAINTS_ERROR;
 8009d6c:	2503      	movs	r5, #3
 8009d6e:	e7d1      	b.n	8009d14 <SFU_IMG_InitImageHandling+0x18>
 8009d70:	20001530 	.word	0x20001530
 8009d74:	08010000 	.word	0x08010000
 8009d78:	0800ffff 	.word	0x0800ffff
 8009d7c:	0800d751 	.word	0x0800d751
 8009d80:	08010140 	.word	0x08010140
 8009d84:	0800d798 	.word	0x0800d798
 8009d88:	20001008 	.word	0x20001008
 8009d8c:	0800d717 	.word	0x0800d717

08009d90 <SFU_IMG_InvalidateCurrentFirmware>:
  *       running the procedure).
  * @param  SlotNumber index of the slot in the list
  * @retval SFU_SUCCESS if successful,SFU_ERROR error otherwise.
  */
SFU_ErrorStatus SFU_IMG_InvalidateCurrentFirmware(uint32_t SlotNumber)
{
 8009d90:	b510      	push	{r4, lr}
 8009d92:	4604      	mov	r4, r0
  SFU_ErrorStatus e_ret_status = SFU_ERROR;

  /* Reload Watchdog */
  (void) SFU_LL_SECU_IWDG_Refresh();
 8009d94:	f000 fe8c 	bl	800aab0 <SFU_LL_SECU_IWDG_Refresh>

  /* erase active slot except Header (under SECoreBin protection) for the anti-rollback check during next Fw update */
  e_ret_status = CleanUpSlot((uint8_t *) SlotStartAdd[SlotNumber], SLOT_SIZE(SlotNumber), SFU_IMG_IMAGE_OFFSET);
 8009d98:	4b06      	ldr	r3, [pc, #24]	; (8009db4 <SFU_IMG_InvalidateCurrentFirmware+0x24>)
 8009d9a:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8009d9e:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8009da2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009da6:	6a19      	ldr	r1, [r3, #32]
 8009da8:	3101      	adds	r1, #1

  return (e_ret_status);
}
 8009daa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  e_ret_status = CleanUpSlot((uint8_t *) SlotStartAdd[SlotNumber], SLOT_SIZE(SlotNumber), SFU_IMG_IMAGE_OFFSET);
 8009dae:	1a09      	subs	r1, r1, r0
 8009db0:	f7ff bf74 	b.w	8009c9c <CleanUpSlot>
 8009db4:	0800ce2c 	.word	0x0800ce2c

08009db8 <SFU_IMG_VerifyActiveImg>:
  *       fw_image_header_validated.
  * @param  SlotNumber index of the slot in the list
  * @retval SFU_ErrorStatus SFU_SUCCESS if successful, error code otherwise
  */
SFU_ErrorStatus SFU_IMG_VerifyActiveImg(uint32_t SlotNumber)
{
 8009db8:	b507      	push	{r0, r1, r2, lr}
  SFU_ErrorStatus e_ret_status = SFU_ERROR;
  SE_StatusTypeDef e_se_status = SE_KO;
 8009dba:	4b05      	ldr	r3, [pc, #20]	; (8009dd0 <SFU_IMG_VerifyActiveImg+0x18>)
 8009dbc:	9301      	str	r3, [sp, #4]
{
 8009dbe:	4601      	mov	r1, r0

  /*
   * fw_image_header_validated MUST have been populated with valid metadata first,
   */
  e_ret_status = VerifyFwSignature(&e_se_status, SlotNumber, &fw_image_header_validated, SE_FW_IMAGE_COMPLETE);
 8009dc0:	4a04      	ldr	r2, [pc, #16]	; (8009dd4 <SFU_IMG_VerifyActiveImg+0x1c>)
 8009dc2:	2300      	movs	r3, #0
 8009dc4:	a801      	add	r0, sp, #4
 8009dc6:	f7ff ff35 	bl	8009c34 <VerifyFwSignature>
    TRACE("\r\n=         SFU_IMG_VerifyActiveImg failure with se_status=%d!", e_se_status);
  }
#endif /* SFU_VERBOSE_DEBUG_MODE */

  return (e_ret_status);
}
 8009dca:	b003      	add	sp, #12
 8009dcc:	f85d fb04 	ldr.w	pc, [sp], #4
 8009dd0:	0013023d 	.word	0x0013023d
 8009dd4:	20001530 	.word	0x20001530

08009dd8 <SFU_IMG_VerifyActiveSlot>:
SFU_ErrorStatus SFU_IMG_VerifyActiveSlot(uint32_t SlotNumber)
{
  /*
   * fw_image_header_validated MUST have been populated with valid metadata first,
   */
  return (VerifySlot((uint8_t *) SlotStartAdd[SlotNumber], SLOT_SIZE(SlotNumber), fw_image_header_validated.FwSize));
 8009dd8:	4b07      	ldr	r3, [pc, #28]	; (8009df8 <SFU_IMG_VerifyActiveSlot+0x20>)
{
 8009dda:	b410      	push	{r4}
  return (VerifySlot((uint8_t *) SlotStartAdd[SlotNumber], SLOT_SIZE(SlotNumber), fw_image_header_validated.FwSize));
 8009ddc:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
 8009de0:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 8009de4:	4620      	mov	r0, r4
 8009de6:	6a19      	ldr	r1, [r3, #32]
 8009de8:	4b04      	ldr	r3, [pc, #16]	; (8009dfc <SFU_IMG_VerifyActiveSlot+0x24>)
 8009dea:	3101      	adds	r1, #1
 8009dec:	1b09      	subs	r1, r1, r4
 8009dee:	6a9a      	ldr	r2, [r3, #40]	; 0x28
}
 8009df0:	f85d 4b04 	ldr.w	r4, [sp], #4
  return (VerifySlot((uint8_t *) SlotStartAdd[SlotNumber], SLOT_SIZE(SlotNumber), fw_image_header_validated.FwSize));
 8009df4:	f7ff bf44 	b.w	8009c80 <VerifySlot>
 8009df8:	0800ce2c 	.word	0x0800ce2c
 8009dfc:	20001510 	.word	0x20001510

08009e00 <SFU_IMG_VerifyEmptyActiveSlot>:
  * @param  SlotNumber index of the slot in the list
  * @retval SFU_ErrorStatus SFU_SUCCESS if successful, error code otherwise
  */
SFU_ErrorStatus SFU_IMG_VerifyEmptyActiveSlot(uint32_t SlotNumber)
{
  return (VerifySlot((uint8_t *) SlotStartAdd[SlotNumber], SLOT_SIZE(SlotNumber), 0U));
 8009e00:	4b07      	ldr	r3, [pc, #28]	; (8009e20 <SFU_IMG_VerifyEmptyActiveSlot+0x20>)
{
 8009e02:	b410      	push	{r4}
  return (VerifySlot((uint8_t *) SlotStartAdd[SlotNumber], SLOT_SIZE(SlotNumber), 0U));
 8009e04:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
 8009e08:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 8009e0c:	2200      	movs	r2, #0
 8009e0e:	6a19      	ldr	r1, [r3, #32]
 8009e10:	3101      	adds	r1, #1
 8009e12:	1b09      	subs	r1, r1, r4
 8009e14:	4620      	mov	r0, r4
}
 8009e16:	f85d 4b04 	ldr.w	r4, [sp], #4
  return (VerifySlot((uint8_t *) SlotStartAdd[SlotNumber], SLOT_SIZE(SlotNumber), 0U));
 8009e1a:	f7ff bf31 	b.w	8009c80 <VerifySlot>
 8009e1e:	bf00      	nop
 8009e20:	0800ce2c 	.word	0x0800ce2c

08009e24 <SFU_IMG_ControlActiveImgTag>:
  * @note   This control will be done twice for security reasons (first control done in VerifyFwSignatureScatter)
  * @param  SlotNumber index of the slot in the list
  * @retval SFU_SUCCESS if successful,SFU_ERROR otherwise.
  */
SFU_ErrorStatus SFU_IMG_ControlActiveImgTag(uint32_t SlotNumber)
{
 8009e24:	b508      	push	{r3, lr}
  /*
   * fw_image_header_validated MUST have been populated with valid metadata first,
   */
  if (MemoryCompare(fw_tag_validated[SlotNumber - SLOT_ACTIVE_1], fw_image_header_validated.FwTag,
 8009e26:	4b0b      	ldr	r3, [pc, #44]	; (8009e54 <SFU_IMG_ControlActiveImgTag+0x30>)
 8009e28:	3801      	subs	r0, #1
 8009e2a:	2220      	movs	r2, #32
 8009e2c:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8009e30:	eb03 1040 	add.w	r0, r3, r0, lsl #5
 8009e34:	f7ff fdc2 	bl	80099bc <MemoryCompare>
 8009e38:	4b07      	ldr	r3, [pc, #28]	; (8009e58 <SFU_IMG_ControlActiveImgTag+0x34>)
 8009e3a:	4298      	cmp	r0, r3
  {
    return SFU_ERROR;
  }
  else
  {
    FLOW_STEP(uFlowCryptoValue, FLOW_STEP_INTEGRITY);
 8009e3c:	bf01      	itttt	eq
 8009e3e:	4a07      	ldreq	r2, [pc, #28]	; (8009e5c <SFU_IMG_ControlActiveImgTag+0x38>)
 8009e40:	6813      	ldreq	r3, [r2, #0]
 8009e42:	f483 432a 	eoreq.w	r3, r3, #43520	; 0xaa00
 8009e46:	f083 03b5 	eoreq.w	r3, r3, #181	; 0xb5
 8009e4a:	bf0c      	ite	eq
 8009e4c:	6013      	streq	r3, [r2, #0]
    return SFU_ERROR;
 8009e4e:	f641 70e1 	movwne	r0, #8161	; 0x1fe1
    return SFU_SUCCESS;
  }

}
 8009e52:	bd08      	pop	{r3, pc}
 8009e54:	20001510 	.word	0x20001510
 8009e58:	00122f11 	.word	0x00122f11
 8009e5c:	20001004 	.word	0x20001004

08009e60 <SFU_IMG_LaunchActiveImg>:
SFU_ErrorStatus SFU_IMG_LaunchActiveImg(uint32_t SlotNumber)
{
  SFU_ErrorStatus e_ret_status = SFU_SUCCESS;

  /* Verify if authentication/integrity/lock SE service performed */
  FLOW_CONTROL_CHECK(uFlowCryptoValue, FLOW_CTRL_LOCK_SERVICE);
 8009e60:	4b09      	ldr	r3, [pc, #36]	; (8009e88 <SFU_IMG_LaunchActiveImg+0x28>)
 8009e62:	681a      	ldr	r2, [r3, #0]
 8009e64:	f243 03f1 	movw	r3, #12529	; 0x30f1
 8009e68:	429a      	cmp	r2, r3
{
 8009e6a:	b510      	push	{r4, lr}
 8009e6c:	4604      	mov	r4, r0
  FLOW_CONTROL_CHECK(uFlowCryptoValue, FLOW_CTRL_LOCK_SERVICE);
 8009e6e:	d001      	beq.n	8009e74 <SFU_IMG_LaunchActiveImg+0x14>
 8009e70:	f7ff fd78 	bl	8009964 <SFU_EXCPT_Security_Error>


  /* this function does not return */
  /* first image identified as master image */
  SFU_MPU_SysCall((uint32_t)SB_SYSCALL_LAUNCH_APP, SlotStartAdd[SlotNumber] + SFU_IMG_IMAGE_OFFSET);
 8009e74:	4b05      	ldr	r3, [pc, #20]	; (8009e8c <SFU_IMG_LaunchActiveImg+0x2c>)
 8009e76:	f853 1024 	ldr.w	r1, [r3, r4, lsl #2]
 8009e7a:	2001      	movs	r0, #1
 8009e7c:	f501 7100 	add.w	r1, r1, #512	; 0x200
 8009e80:	f000 fb02 	bl	800a488 <SFU_MPU_SysCall>

  /* The point below should NOT be reached */
  return (e_ret_status);
}
 8009e84:	4802      	ldr	r0, [pc, #8]	; (8009e90 <SFU_IMG_LaunchActiveImg+0x30>)
 8009e86:	bd10      	pop	{r4, pc}
 8009e88:	20001004 	.word	0x20001004
 8009e8c:	0800ce2c 	.word	0x0800ce2c
 8009e90:	00122f11 	.word	0x00122f11

08009e94 <SFU_IMG_Validation>:
#else

  /* Nothing to do header already written */
  return SFU_SUCCESS;
#endif /* (SECBOOT_LOADER == SECBOOT_USE_STANDALONE_LOADER) */
}
 8009e94:	4800      	ldr	r0, [pc, #0]	; (8009e98 <SFU_IMG_Validation+0x4>)
 8009e96:	4770      	bx	lr
 8009e98:	00122f11 	.word	0x00122f11

08009e9c <SFU_IMG_GetFwImageSlot>:
  * @brief  Get firmware image ID from header.
  * @param  pFwImageHeader pointer to a structure to handle the header info
  * @retval Fw Id : SLOT_ACTIVE_1 / 2 /... / SFU_NB_MAX_ACTIVE_IMAGE
  */
uint32_t SFU_IMG_GetFwImageSlot(SE_FwRawHeaderTypeDef *pFwImageHeader)
{
 8009e9c:	b508      	push	{r3, lr}
  uint32_t active_slot;

  if (memcmp(pFwImageHeader->SFUMagic, SFUM_1, strlen(SFUM_1)) == 0)
 8009e9e:	4904      	ldr	r1, [pc, #16]	; (8009eb0 <SFU_IMG_GetFwImageSlot+0x14>)
 8009ea0:	2204      	movs	r2, #4
 8009ea2:	f001 fe8b 	bl	800bbbc <memcmp>
  {
    active_slot = SLOT_INACTIVE;
  }

  return active_slot;
}
 8009ea6:	fab0 f080 	clz	r0, r0
 8009eaa:	0940      	lsrs	r0, r0, #5
 8009eac:	bd08      	pop	{r3, pc}
 8009eae:	bf00      	nop
 8009eb0:	0800d7df 	.word	0x0800d7df

08009eb4 <VerifyHeaderSignature>:
{
 8009eb4:	b513      	push	{r0, r1, r4, lr}
 8009eb6:	4604      	mov	r4, r0
  if (SFU_IMG_GetFwImageSlot(pFwImageHeader) != SLOT_INACTIVE)
 8009eb8:	f7ff fff0 	bl	8009e9c <SFU_IMG_GetFwImageSlot>
 8009ebc:	b918      	cbnz	r0, 8009ec6 <VerifyHeaderSignature+0x12>
  SFU_ErrorStatus e_ret_status = SFU_ERROR;
 8009ebe:	f641 70e1 	movw	r0, #8161	; 0x1fe1
}
 8009ec2:	b002      	add	sp, #8
 8009ec4:	bd10      	pop	{r4, pc}
 8009ec6:	f104 0264 	add.w	r2, r4, #100	; 0x64
 8009eca:	f104 0180 	add.w	r1, r4, #128	; 0x80
  uint8_t result = 0x00U;
 8009ece:	2300      	movs	r3, #0
      result |= pFwImageHeader->Reserved[i] ^ 0x00U;
 8009ed0:	f812 0b01 	ldrb.w	r0, [r2], #1
    for (i = 0U; i < sizeof(pFwImageHeader->Reserved); i++)
 8009ed4:	428a      	cmp	r2, r1
      result |= pFwImageHeader->Reserved[i] ^ 0x00U;
 8009ed6:	ea43 0300 	orr.w	r3, r3, r0
    for (i = 0U; i < sizeof(pFwImageHeader->Reserved); i++)
 8009eda:	d1f9      	bne.n	8009ed0 <VerifyHeaderSignature+0x1c>
    if (result == 0x00U)
 8009edc:	2b00      	cmp	r3, #0
 8009ede:	d1ee      	bne.n	8009ebe <VerifyHeaderSignature+0xa>
      if (SE_VerifyHeaderSignature(&se_status, pFwImageHeader) == SE_SUCCESS)
 8009ee0:	4621      	mov	r1, r4
 8009ee2:	a801      	add	r0, sp, #4
 8009ee4:	f7fe fb82 	bl	80085ec <SE_VerifyHeaderSignature>
 8009ee8:	4b05      	ldr	r3, [pc, #20]	; (8009f00 <VerifyHeaderSignature+0x4c>)
 8009eea:	4298      	cmp	r0, r3
 8009eec:	d1e7      	bne.n	8009ebe <VerifyHeaderSignature+0xa>
        FLOW_STEP(uFlowCryptoValue, FLOW_STEP_AUTHENTICATE);
 8009eee:	4a05      	ldr	r2, [pc, #20]	; (8009f04 <VerifyHeaderSignature+0x50>)
 8009ef0:	4805      	ldr	r0, [pc, #20]	; (8009f08 <VerifyHeaderSignature+0x54>)
 8009ef2:	6813      	ldr	r3, [r2, #0]
 8009ef4:	f483 43f3 	eor.w	r3, r3, #31104	; 0x7980
 8009ef8:	f083 0319 	eor.w	r3, r3, #25
 8009efc:	6013      	str	r3, [r2, #0]
  return e_ret_status;
 8009efe:	e7e0      	b.n	8009ec2 <VerifyHeaderSignature+0xe>
 8009f00:	0012310f 	.word	0x0012310f
 8009f04:	20001004 	.word	0x20001004
 8009f08:	00122f11 	.word	0x00122f11

08009f0c <CheckAndGetFWHeader>:
  e_ret_status = SFU_LL_FLASH_Read((uint8_t *) pFwImageHeader, (uint8_t *) SlotHeaderAdd[SlotNumber],
 8009f0c:	4b09      	ldr	r3, [pc, #36]	; (8009f34 <CheckAndGetFWHeader+0x28>)
 8009f0e:	eb03 0080 	add.w	r0, r3, r0, lsl #2
{
 8009f12:	b510      	push	{r4, lr}
 8009f14:	460c      	mov	r4, r1
  e_ret_status = SFU_LL_FLASH_Read((uint8_t *) pFwImageHeader, (uint8_t *) SlotHeaderAdd[SlotNumber],
 8009f16:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8009f1a:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8009f1c:	4620      	mov	r0, r4
 8009f1e:	f000 fc27 	bl	800a770 <SFU_LL_FLASH_Read>
  if (e_ret_status == SFU_SUCCESS)
 8009f22:	4b05      	ldr	r3, [pc, #20]	; (8009f38 <CheckAndGetFWHeader+0x2c>)
 8009f24:	4298      	cmp	r0, r3
 8009f26:	d104      	bne.n	8009f32 <CheckAndGetFWHeader+0x26>
    e_ret_status = VerifyHeaderSignature(pFwImageHeader);
 8009f28:	4620      	mov	r0, r4
}
 8009f2a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    e_ret_status = VerifyHeaderSignature(pFwImageHeader);
 8009f2e:	f7ff bfc1 	b.w	8009eb4 <VerifyHeaderSignature>
}
 8009f32:	bd10      	pop	{r4, pc}
 8009f34:	0800ce2c 	.word	0x0800ce2c
 8009f38:	00122f11 	.word	0x00122f11

08009f3c <SFU_IMG_VerifyActiveImgMetadata>:
  return (CheckAndGetFWHeader(SlotNumber, &fw_image_header_validated));
 8009f3c:	4901      	ldr	r1, [pc, #4]	; (8009f44 <SFU_IMG_VerifyActiveImgMetadata+0x8>)
 8009f3e:	f7ff bfe5 	b.w	8009f0c <CheckAndGetFWHeader>
 8009f42:	bf00      	nop
 8009f44:	20001530 	.word	0x20001530

08009f48 <SFU_IMG_GetActiveFwVersion>:
{
 8009f48:	b500      	push	{lr}
 8009f4a:	b0d1      	sub	sp, #324	; 0x144
  e_ret_status = CheckAndGetFWHeader(SlotNumber, &fw_image_header);
 8009f4c:	4669      	mov	r1, sp
 8009f4e:	f7ff ffdd 	bl	8009f0c <CheckAndGetFWHeader>
  if (e_ret_status == SFU_SUCCESS)
 8009f52:	4b04      	ldr	r3, [pc, #16]	; (8009f64 <SFU_IMG_GetActiveFwVersion+0x1c>)
 8009f54:	4298      	cmp	r0, r3
    version = fw_image_header.FwVersion;
 8009f56:	bf0c      	ite	eq
 8009f58:	f8bd 0006 	ldrheq.w	r0, [sp, #6]
  uint16_t version = 0;
 8009f5c:	2000      	movne	r0, #0
}
 8009f5e:	b051      	add	sp, #324	; 0x144
 8009f60:	f85d fb04 	ldr.w	pc, [sp], #4
 8009f64:	00122f11 	.word	0x00122f11

08009f68 <SFU_IMG_DetectFW>:
{
 8009f68:	b570      	push	{r4, r5, r6, lr}
  pbuffer = (uint8_t *) SlotHeaderAdd[SlotNumber];
 8009f6a:	4e11      	ldr	r6, [pc, #68]	; (8009fb0 <SFU_IMG_DetectFW+0x48>)
 8009f6c:	eb06 0380 	add.w	r3, r6, r0, lsl #2
{
 8009f70:	b0d0      	sub	sp, #320	; 0x140
  if (SFU_LL_FLASH_Read(buffer, pbuffer, sizeof(buffer)) == SFU_SUCCESS)
 8009f72:	6c19      	ldr	r1, [r3, #64]	; 0x40
{
 8009f74:	4605      	mov	r5, r0
  if (SFU_LL_FLASH_Read(buffer, pbuffer, sizeof(buffer)) == SFU_SUCCESS)
 8009f76:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8009f7a:	4668      	mov	r0, sp
 8009f7c:	f000 fbf8 	bl	800a770 <SFU_LL_FLASH_Read>
 8009f80:	4b0c      	ldr	r3, [pc, #48]	; (8009fb4 <SFU_IMG_DetectFW+0x4c>)
 8009f82:	4298      	cmp	r0, r3
 8009f84:	4604      	mov	r4, r0
 8009f86:	d004      	beq.n	8009f92 <SFU_IMG_DetectFW+0x2a>
  SFU_ErrorStatus e_ret_status = SFU_ERROR;
 8009f88:	f641 74e1 	movw	r4, #8161	; 0x1fe1
}
 8009f8c:	4620      	mov	r0, r4
 8009f8e:	b050      	add	sp, #320	; 0x140
 8009f90:	bd70      	pop	{r4, r5, r6, pc}
    if (SFU_IMG_GetFwImageSlot(p_header) != SLOT_INACTIVE)
 8009f92:	4668      	mov	r0, sp
 8009f94:	f7ff ff82 	bl	8009e9c <SFU_IMG_GetFwImageSlot>
 8009f98:	2800      	cmp	r0, #0
 8009f9a:	d0f5      	beq.n	8009f88 <SFU_IMG_DetectFW+0x20>
      if (VerifySlot((uint8_t *) SlotStartAdd[SlotNumber], SFU_IMG_IMAGE_OFFSET + 0x20U, 0U) != SFU_SUCCESS)
 8009f9c:	f856 0025 	ldr.w	r0, [r6, r5, lsl #2]
 8009fa0:	2200      	movs	r2, #0
 8009fa2:	f44f 7108 	mov.w	r1, #544	; 0x220
 8009fa6:	f7ff fe6b 	bl	8009c80 <VerifySlot>
 8009faa:	42a0      	cmp	r0, r4
 8009fac:	d1ee      	bne.n	8009f8c <SFU_IMG_DetectFW+0x24>
 8009fae:	e7eb      	b.n	8009f88 <SFU_IMG_DetectFW+0x20>
 8009fb0:	0800ce2c 	.word	0x0800ce2c
 8009fb4:	00122f11 	.word	0x00122f11

08009fb8 <SFU_IMG_CheckFwVersion>:
     * installation of a specific version identified by SFU_FW_VERSION_INIT_NUM.
     */
    if (CandidateVersion == SFU_FW_VERSION_INIT_NUM)
    {
      /* Candidate version is allowed */
      e_ret_status = SFU_SUCCESS;
 8009fb8:	4b05      	ldr	r3, [pc, #20]	; (8009fd0 <SFU_IMG_CheckFwVersion+0x18>)
 8009fba:	f641 70e1 	movw	r0, #8161	; 0x1fe1
  if (CurrentVersion == 0U)
 8009fbe:	b919      	cbnz	r1, 8009fc8 <SFU_IMG_CheckFwVersion+0x10>
      e_ret_status = SFU_SUCCESS;
 8009fc0:	2a01      	cmp	r2, #1
 8009fc2:	bf08      	it	eq
 8009fc4:	4618      	moveq	r0, r3
 8009fc6:	4770      	bx	lr
 8009fc8:	4291      	cmp	r1, r2
 8009fca:	bf98      	it	ls
 8009fcc:	4618      	movls	r0, r3
#endif /* SFU_VERBOSE_DEBUG_MODE */

  }

  return e_ret_status;
}
 8009fce:	4770      	bx	lr
 8009fd0:	00122f11 	.word	0x00122f11

08009fd4 <SFU_LOADER_VerifyFwHeader>:
#elif defined ( __GNUC__ )
__attribute__((optimize("O0")))
#endif /* __ICCARM__ */

static SFU_ErrorStatus SFU_LOADER_VerifyFwHeader(uint8_t *pBuffer)
{
 8009fd4:	b580      	push	{r7, lr}
 8009fd6:	b08c      	sub	sp, #48	; 0x30
 8009fd8:	af00      	add	r7, sp, #0
 8009fda:	6078      	str	r0, [r7, #4]
  SFU_ErrorStatus e_ret_status = SFU_ERROR;
 8009fdc:	f641 73e1 	movw	r3, #8161	; 0x1fe1
 8009fe0:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint16_t                      cur_ver;
  uint16_t                      verif_ver;
  uint32_t                      active_slot;

  /*Parse the received buffer*/
  p_x_fw_raw_header = (SE_FwRawHeaderTypeDef *)(uint32_t)pBuffer;
 8009fe2:	687b      	ldr	r3, [r7, #4]
 8009fe4:	62bb      	str	r3, [r7, #40]	; 0x28

  /*Check if the received header packet is authentic*/
  if (SE_VerifyHeaderSignature(&e_se_status, p_x_fw_raw_header) != SE_ERROR)
 8009fe6:	f107 031c 	add.w	r3, r7, #28
 8009fea:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009fec:	4618      	mov	r0, r3
 8009fee:	f7fe fafd 	bl	80085ec <SE_VerifyHeaderSignature>
 8009ff2:	4603      	mov	r3, r0
 8009ff4:	4a4b      	ldr	r2, [pc, #300]	; (800a124 <SFU_LOADER_VerifyFwHeader+0x150>)
 8009ff6:	4293      	cmp	r3, r2
 8009ff8:	f000 808b 	beq.w	800a112 <SFU_LOADER_VerifyFwHeader+0x13e>
  {
    active_slot = SFU_IMG_GetFwImageSlot(p_x_fw_raw_header);
 8009ffc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009ffe:	f7ff ff4d 	bl	8009e9c <SFU_IMG_GetFwImageSlot>
 800a002:	6278      	str	r0, [r7, #36]	; 0x24
     * 1 slot per image configuration. Identify the download area.
     *   It will be based on SFU magic :
     *   - dwl slot is the active_slot if configured.
     *   - else : SLOT_ACTIVE_1
     */
    m_uDwlSlot = active_slot;
 800a004:	4a48      	ldr	r2, [pc, #288]	; (800a128 <SFU_LOADER_VerifyFwHeader+0x154>)
 800a006:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a008:	6013      	str	r3, [r2, #0]
    if (SLOT_SIZE(m_uDwlSlot) == 1U)
 800a00a:	4b47      	ldr	r3, [pc, #284]	; (800a128 <SFU_LOADER_VerifyFwHeader+0x154>)
 800a00c:	681b      	ldr	r3, [r3, #0]
 800a00e:	4a47      	ldr	r2, [pc, #284]	; (800a12c <SFU_LOADER_VerifyFwHeader+0x158>)
 800a010:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800a014:	4b44      	ldr	r3, [pc, #272]	; (800a128 <SFU_LOADER_VerifyFwHeader+0x154>)
 800a016:	681b      	ldr	r3, [r3, #0]
 800a018:	4945      	ldr	r1, [pc, #276]	; (800a130 <SFU_LOADER_VerifyFwHeader+0x15c>)
 800a01a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800a01e:	429a      	cmp	r2, r3
 800a020:	d102      	bne.n	800a028 <SFU_LOADER_VerifyFwHeader+0x54>
    {
      m_uDwlSlot = SLOT_ACTIVE_1;
 800a022:	4b41      	ldr	r3, [pc, #260]	; (800a128 <SFU_LOADER_VerifyFwHeader+0x154>)
 800a024:	2201      	movs	r2, #1
 800a026:	601a      	str	r2, [r3, #0]
    }
    SFU_IMG_GetDownloadAreaInfo(m_uDwlSlot, &fw_image_flash_data);
 800a028:	4b3f      	ldr	r3, [pc, #252]	; (800a128 <SFU_LOADER_VerifyFwHeader+0x154>)
 800a02a:	681b      	ldr	r3, [r3, #0]
 800a02c:	f107 020c 	add.w	r2, r7, #12
 800a030:	4611      	mov	r1, r2
 800a032:	4618      	mov	r0, r3
 800a034:	f000 fa48 	bl	800a4c8 <SFU_IMG_GetDownloadAreaInfo>

    /* Assign the download flash address to be used during the YMODEM process */
    m_uDwlAreaStart = fw_image_flash_data.DownloadAddr;
 800a038:	693b      	ldr	r3, [r7, #16]
 800a03a:	4a3e      	ldr	r2, [pc, #248]	; (800a134 <SFU_LOADER_VerifyFwHeader+0x160>)
 800a03c:	6013      	str	r3, [r2, #0]
    m_uDwlAreaSize = fw_image_flash_data.MaxSizeInBytes;
 800a03e:	68fb      	ldr	r3, [r7, #12]
 800a040:	4a3d      	ldr	r2, [pc, #244]	; (800a138 <SFU_LOADER_VerifyFwHeader+0x164>)
 800a042:	6013      	str	r3, [r2, #0]

    /*
     * Check if the version is allowed
     * ==> SFU_IMG_GetActiveFwVersion() returns 0 if the header of active firmware is not valid
     */
    cur_ver = SFU_IMG_GetActiveFwVersion(active_slot);
 800a044:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a046:	f7ff ff7f 	bl	8009f48 <SFU_IMG_GetActiveFwVersion>
 800a04a:	4603      	mov	r3, r0
 800a04c:	847b      	strh	r3, [r7, #34]	; 0x22
    if (SFU_IMG_CheckFwVersion(active_slot, cur_ver, p_x_fw_raw_header->FwVersion) == SFU_SUCCESS)
 800a04e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a050:	88da      	ldrh	r2, [r3, #6]
 800a052:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800a054:	4619      	mov	r1, r3
 800a056:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a058:	f7ff ffae 	bl	8009fb8 <SFU_IMG_CheckFwVersion>
 800a05c:	4603      	mov	r3, r0
 800a05e:	4a37      	ldr	r2, [pc, #220]	; (800a13c <SFU_LOADER_VerifyFwHeader+0x168>)
 800a060:	4293      	cmp	r3, r2
 800a062:	d117      	bne.n	800a094 <SFU_LOADER_VerifyFwHeader+0xc0>
    {
      /*
       * Check length : Let's make sure the Firmware image can be written in the destination slot.
       */
      if (p_x_fw_raw_header->FwSize > (SLOT_SIZE(m_uDwlSlot) - SFU_IMG_IMAGE_OFFSET))
 800a064:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a066:	689a      	ldr	r2, [r3, #8]
 800a068:	4b2f      	ldr	r3, [pc, #188]	; (800a128 <SFU_LOADER_VerifyFwHeader+0x154>)
 800a06a:	681b      	ldr	r3, [r3, #0]
 800a06c:	492f      	ldr	r1, [pc, #188]	; (800a12c <SFU_LOADER_VerifyFwHeader+0x158>)
 800a06e:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800a072:	4b2d      	ldr	r3, [pc, #180]	; (800a128 <SFU_LOADER_VerifyFwHeader+0x154>)
 800a074:	681b      	ldr	r3, [r3, #0]
 800a076:	482e      	ldr	r0, [pc, #184]	; (800a130 <SFU_LOADER_VerifyFwHeader+0x15c>)
 800a078:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 800a07c:	1acb      	subs	r3, r1, r3
 800a07e:	f2a3 13ff 	subw	r3, r3, #511	; 0x1ff
 800a082:	429a      	cmp	r2, r3
 800a084:	d903      	bls.n	800a08e <SFU_LOADER_VerifyFwHeader+0xba>
      {
        /* The firmware cannot be written in dwl slot */
        m_LoaderStatus = SFU_LOADER_ERR_FW_LENGTH;
 800a086:	4b2e      	ldr	r3, [pc, #184]	; (800a140 <SFU_LOADER_VerifyFwHeader+0x16c>)
 800a088:	2203      	movs	r2, #3
 800a08a:	701a      	strb	r2, [r3, #0]
 800a08c:	e00d      	b.n	800a0aa <SFU_LOADER_VerifyFwHeader+0xd6>
      }
      else
      {
        /* Installation authorized */
        e_ret_status = SFU_SUCCESS;
 800a08e:	4b2b      	ldr	r3, [pc, #172]	; (800a13c <SFU_LOADER_VerifyFwHeader+0x168>)
 800a090:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a092:	e00a      	b.n	800a0aa <SFU_LOADER_VerifyFwHeader+0xd6>
    }
    else
    {
      /* The installation is forbidden */
      TRACE("\r\n          Anti-rollback: candidate version(%d) rejected | current version(%d) , min.version(%d) !",
            p_x_fw_raw_header->FwVersion, cur_ver, SFU_FW_VERSION_START_NUM);
 800a094:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a096:	88db      	ldrh	r3, [r3, #6]
      TRACE("\r\n          Anti-rollback: candidate version(%d) rejected | current version(%d) , min.version(%d) !",
 800a098:	4619      	mov	r1, r3
 800a09a:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800a09c:	2301      	movs	r3, #1
 800a09e:	4829      	ldr	r0, [pc, #164]	; (800a144 <SFU_LOADER_VerifyFwHeader+0x170>)
 800a0a0:	f001 fdb2 	bl	800bc08 <iprintf>
      m_LoaderStatus = SFU_LOADER_ERR_FW_VERSION;
 800a0a4:	4b26      	ldr	r3, [pc, #152]	; (800a140 <SFU_LOADER_VerifyFwHeader+0x16c>)
 800a0a6:	2204      	movs	r2, #4
 800a0a8:	701a      	strb	r2, [r3, #0]
    /*
     * Control of version and length is done twice to avoid basic hardware attack
     * This more important for the 1 image configuration as the installation is done during the download procedure
     * For the 2 images configuration anti-rollback will be checked again during installation process
     */
    verif_ver = SFU_IMG_GetActiveFwVersion(active_slot);
 800a0aa:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a0ac:	f7ff ff4c 	bl	8009f48 <SFU_IMG_GetActiveFwVersion>
 800a0b0:	4603      	mov	r3, r0
 800a0b2:	843b      	strh	r3, [r7, #32]
    if (SFU_IMG_CheckFwVersion(active_slot, verif_ver, p_x_fw_raw_header->FwVersion) == SFU_SUCCESS)
 800a0b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a0b6:	88da      	ldrh	r2, [r3, #6]
 800a0b8:	8c3b      	ldrh	r3, [r7, #32]
 800a0ba:	4619      	mov	r1, r3
 800a0bc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a0be:	f7ff ff7b 	bl	8009fb8 <SFU_IMG_CheckFwVersion>
 800a0c2:	4603      	mov	r3, r0
 800a0c4:	4a1d      	ldr	r2, [pc, #116]	; (800a13c <SFU_LOADER_VerifyFwHeader+0x168>)
 800a0c6:	4293      	cmp	r3, r2
 800a0c8:	d117      	bne.n	800a0fa <SFU_LOADER_VerifyFwHeader+0x126>
    {
      /*
       * Check length : Let's make sure the Firmware image can be written in the destination slot.
       */
      if (p_x_fw_raw_header->FwSize > (SLOT_SIZE(m_uDwlSlot) - SFU_IMG_IMAGE_OFFSET))
 800a0ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a0cc:	689a      	ldr	r2, [r3, #8]
 800a0ce:	4b16      	ldr	r3, [pc, #88]	; (800a128 <SFU_LOADER_VerifyFwHeader+0x154>)
 800a0d0:	681b      	ldr	r3, [r3, #0]
 800a0d2:	4916      	ldr	r1, [pc, #88]	; (800a12c <SFU_LOADER_VerifyFwHeader+0x158>)
 800a0d4:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800a0d8:	4b13      	ldr	r3, [pc, #76]	; (800a128 <SFU_LOADER_VerifyFwHeader+0x154>)
 800a0da:	681b      	ldr	r3, [r3, #0]
 800a0dc:	4814      	ldr	r0, [pc, #80]	; (800a130 <SFU_LOADER_VerifyFwHeader+0x15c>)
 800a0de:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 800a0e2:	1acb      	subs	r3, r1, r3
 800a0e4:	f2a3 13ff 	subw	r3, r3, #511	; 0x1ff
 800a0e8:	429a      	cmp	r2, r3
 800a0ea:	d903      	bls.n	800a0f4 <SFU_LOADER_VerifyFwHeader+0x120>
      {
        /* The firmware cannot be written in dwl slot */
        m_LoaderStatus = SFU_LOADER_ERR_FW_LENGTH;
 800a0ec:	4b14      	ldr	r3, [pc, #80]	; (800a140 <SFU_LOADER_VerifyFwHeader+0x16c>)
 800a0ee:	2203      	movs	r2, #3
 800a0f0:	701a      	strb	r2, [r3, #0]
 800a0f2:	e011      	b.n	800a118 <SFU_LOADER_VerifyFwHeader+0x144>
      }
      else
      {
        /* Installation authorized */
        e_ret_status = SFU_SUCCESS;
 800a0f4:	4b11      	ldr	r3, [pc, #68]	; (800a13c <SFU_LOADER_VerifyFwHeader+0x168>)
 800a0f6:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a0f8:	e00e      	b.n	800a118 <SFU_LOADER_VerifyFwHeader+0x144>
    }
    else
    {
      /* The installation is forbidden */
      TRACE("\r\n          Anti-rollback: candidate version(%d) rejected | current version(%d) , min.version(%d) !",
            p_x_fw_raw_header->FwVersion, verif_ver, SFU_FW_VERSION_START_NUM);
 800a0fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a0fc:	88db      	ldrh	r3, [r3, #6]
      TRACE("\r\n          Anti-rollback: candidate version(%d) rejected | current version(%d) , min.version(%d) !",
 800a0fe:	4619      	mov	r1, r3
 800a100:	8c3a      	ldrh	r2, [r7, #32]
 800a102:	2301      	movs	r3, #1
 800a104:	480f      	ldr	r0, [pc, #60]	; (800a144 <SFU_LOADER_VerifyFwHeader+0x170>)
 800a106:	f001 fd7f 	bl	800bc08 <iprintf>
      m_LoaderStatus = SFU_LOADER_ERR_FW_VERSION;
 800a10a:	4b0d      	ldr	r3, [pc, #52]	; (800a140 <SFU_LOADER_VerifyFwHeader+0x16c>)
 800a10c:	2204      	movs	r2, #4
 800a10e:	701a      	strb	r2, [r3, #0]
 800a110:	e002      	b.n	800a118 <SFU_LOADER_VerifyFwHeader+0x144>
    }
  }
  else
  {
    /* Header authentication failure */
    m_LoaderStatus = SFU_LOADER_ERR_AUTH_FAILED;
 800a112:	4b0b      	ldr	r3, [pc, #44]	; (800a140 <SFU_LOADER_VerifyFwHeader+0x16c>)
 800a114:	2202      	movs	r2, #2
 800a116:	701a      	strb	r2, [r3, #0]
  }

  return e_ret_status;
 800a118:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 800a11a:	4618      	mov	r0, r3
 800a11c:	3730      	adds	r7, #48	; 0x30
 800a11e:	46bd      	mov	sp, r7
 800a120:	bd80      	pop	{r7, pc}
 800a122:	bf00      	nop
 800a124:	00018799 	.word	0x00018799
 800a128:	2000167c 	.word	0x2000167c
 800a12c:	0800ce4c 	.word	0x0800ce4c
 800a130:	0800ce2c 	.word	0x0800ce2c
 800a134:	20001684 	.word	0x20001684
 800a138:	20001680 	.word	0x20001680
 800a13c:	00122f11 	.word	0x00122f11
 800a140:	20001678 	.word	0x20001678
 800a144:	0800ce8c 	.word	0x0800ce8c

0800a148 <SFU_LOADER_Init>:
}
 800a148:	4800      	ldr	r0, [pc, #0]	; (800a14c <SFU_LOADER_Init+0x4>)
 800a14a:	4770      	bx	lr
 800a14c:	00122f11 	.word	0x00122f11

0800a150 <SFU_LOADER_DeInit>:
 800a150:	4800      	ldr	r0, [pc, #0]	; (800a154 <SFU_LOADER_DeInit+0x4>)
 800a152:	4770      	bx	lr
 800a154:	00122f11 	.word	0x00122f11

0800a158 <SFU_LOADER_DownloadNewUserFw>:
{
 800a158:	e92d 4f70 	stmdb	sp!, {r4, r5, r6, r8, r9, sl, fp, lr}
 800a15c:	b08c      	sub	sp, #48	; 0x30
  SFU_COM_YMODEM_StatusTypeDef e_com_status = SFU_COM_YMODEM_ERROR;
 800a15e:	f04f 0a01 	mov.w	sl, #1
  int32_t fw_tag_len = 0;
 800a162:	2400      	movs	r4, #0
{
 800a164:	4689      	mov	r9, r1
 800a166:	4616      	mov	r6, r2
  SFU_COM_YMODEM_StatusTypeDef e_com_status = SFU_COM_YMODEM_ERROR;
 800a168:	f88d a007 	strb.w	sl, [sp, #7]
  int32_t fw_tag_len = 0;
 800a16c:	9403      	str	r4, [sp, #12]
  if ((peSFU_LOADER_Status == NULL) || (pSize == NULL) || (pDwlSlot == NULL))
 800a16e:	4680      	mov	r8, r0
 800a170:	b920      	cbnz	r0, 800a17c <SFU_LOADER_DownloadNewUserFw+0x24>
    return SFU_ERROR;
 800a172:	f641 70e1 	movw	r0, #8161	; 0x1fe1
}
 800a176:	b00c      	add	sp, #48	; 0x30
 800a178:	e8bd 8f70 	ldmia.w	sp!, {r4, r5, r6, r8, r9, sl, fp, pc}
  if ((peSFU_LOADER_Status == NULL) || (pSize == NULL) || (pDwlSlot == NULL))
 800a17c:	2a00      	cmp	r2, #0
 800a17e:	d0f8      	beq.n	800a172 <SFU_LOADER_DownloadNewUserFw+0x1a>
 800a180:	2900      	cmp	r1, #0
 800a182:	d0f6      	beq.n	800a172 <SFU_LOADER_DownloadNewUserFw+0x1a>
  (void) SFU_LL_SECU_IWDG_Refresh();
 800a184:	f000 fc94 	bl	800aab0 <SFU_LL_SECU_IWDG_Refresh>
  TRACE("\r\n\t  File> Transfer> YMODEM> Send ");
 800a188:	481d      	ldr	r0, [pc, #116]	; (800a200 <SFU_LOADER_DownloadNewUserFw+0xa8>)
  m_uDwlSlot = SLOT_ACTIVE_1;
 800a18a:	f8df b094 	ldr.w	fp, [pc, #148]	; 800a220 <SFU_LOADER_DownloadNewUserFw+0xc8>
  m_LoaderStatus = SFU_LOADER_ERR_COM;
 800a18e:	4d1d      	ldr	r5, [pc, #116]	; (800a204 <SFU_LOADER_DownloadNewUserFw+0xac>)
  TRACE("\r\n\t  File> Transfer> YMODEM> Send ");
 800a190:	f001 fd3a 	bl	800bc08 <iprintf>
  m_uDwlAreaStart = 0U;
 800a194:	4a1c      	ldr	r2, [pc, #112]	; (800a208 <SFU_LOADER_DownloadNewUserFw+0xb0>)
  m_uDwlAreaAddress = 0U;
 800a196:	4b1d      	ldr	r3, [pc, #116]	; (800a20c <SFU_LOADER_DownloadNewUserFw+0xb4>)
  m_uDwlAreaStart = 0U;
 800a198:	6014      	str	r4, [r2, #0]
  m_uDwlAreaSize = 0U;
 800a19a:	4a1d      	ldr	r2, [pc, #116]	; (800a210 <SFU_LOADER_DownloadNewUserFw+0xb8>)
  m_uDwlAreaAddress = 0U;
 800a19c:	601c      	str	r4, [r3, #0]
  if (SFU_COM_YMODEM_Receive(&e_com_status, pSize) == SFU_SUCCESS)
 800a19e:	4631      	mov	r1, r6
 800a1a0:	f10d 0007 	add.w	r0, sp, #7
  m_uNbrBlocksYmodem = 0U;
 800a1a4:	e9c3 4401 	strd	r4, r4, [r3, #4]
  m_uPacketsReceived = 0U;
 800a1a8:	60dc      	str	r4, [r3, #12]
  m_uDwlAreaSize = 0U;
 800a1aa:	6014      	str	r4, [r2, #0]
  m_uDwlSlot = SLOT_ACTIVE_1;
 800a1ac:	f8cb a000 	str.w	sl, [fp]
  m_LoaderStatus = SFU_LOADER_ERR_COM;
 800a1b0:	f885 a000 	strb.w	sl, [r5]
  if (SFU_COM_YMODEM_Receive(&e_com_status, pSize) == SFU_SUCCESS)
 800a1b4:	f7ff f9ae 	bl	8009514 <SFU_COM_YMODEM_Receive>
 800a1b8:	4b16      	ldr	r3, [pc, #88]	; (800a214 <SFU_LOADER_DownloadNewUserFw+0xbc>)
 800a1ba:	4298      	cmp	r0, r3
 800a1bc:	d102      	bne.n	800a1c4 <SFU_LOADER_DownloadNewUserFw+0x6c>
    if (*pSize > 0U)
 800a1be:	6833      	ldr	r3, [r6, #0]
 800a1c0:	b103      	cbz	r3, 800a1c4 <SFU_LOADER_DownloadNewUserFw+0x6c>
      m_LoaderStatus = SFU_LOADER_OK;
 800a1c2:	702c      	strb	r4, [r5, #0]
  *pDwlSlot = m_uDwlSlot;
 800a1c4:	f8db 3000 	ldr.w	r3, [fp]
 800a1c8:	f8c9 3000 	str.w	r3, [r9]
  if (m_LoaderStatus == SFU_LOADER_OK)
 800a1cc:	782b      	ldrb	r3, [r5, #0]
 800a1ce:	b95b      	cbnz	r3, 800a1e8 <SFU_LOADER_DownloadNewUserFw+0x90>
    fw_tag_len = sizeof(fw_tag_output);
 800a1d0:	2320      	movs	r3, #32
    if (SE_Decrypt_Finish(&e_se_status, fw_tag_output, &fw_tag_len) != SE_SUCCESS)
 800a1d2:	aa03      	add	r2, sp, #12
 800a1d4:	a904      	add	r1, sp, #16
 800a1d6:	a802      	add	r0, sp, #8
    fw_tag_len = sizeof(fw_tag_output);
 800a1d8:	9303      	str	r3, [sp, #12]
    if (SE_Decrypt_Finish(&e_se_status, fw_tag_output, &fw_tag_len) != SE_SUCCESS)
 800a1da:	f7fe f92b 	bl	8008434 <SE_Decrypt_Finish>
 800a1de:	4b0e      	ldr	r3, [pc, #56]	; (800a218 <SFU_LOADER_DownloadNewUserFw+0xc0>)
 800a1e0:	4298      	cmp	r0, r3
 800a1e2:	d008      	beq.n	800a1f6 <SFU_LOADER_DownloadNewUserFw+0x9e>
      m_LoaderStatus = SFU_LOADER_ERR_CRYPTO;
 800a1e4:	2306      	movs	r3, #6
 800a1e6:	702b      	strb	r3, [r5, #0]
  *peSFU_LOADER_Status = m_LoaderStatus;
 800a1e8:	782b      	ldrb	r3, [r5, #0]
 800a1ea:	f888 3000 	strb.w	r3, [r8]
  if (m_LoaderStatus == SFU_LOADER_OK)
 800a1ee:	2b00      	cmp	r3, #0
 800a1f0:	d1bf      	bne.n	800a172 <SFU_LOADER_DownloadNewUserFw+0x1a>
    e_ret_status = SFU_SUCCESS;
 800a1f2:	4808      	ldr	r0, [pc, #32]	; (800a214 <SFU_LOADER_DownloadNewUserFw+0xbc>)
 800a1f4:	e7bf      	b.n	800a176 <SFU_LOADER_DownloadNewUserFw+0x1e>
    else if (e_se_status != SE_OK)
 800a1f6:	4b09      	ldr	r3, [pc, #36]	; (800a21c <SFU_LOADER_DownloadNewUserFw+0xc4>)
 800a1f8:	9a02      	ldr	r2, [sp, #8]
 800a1fa:	429a      	cmp	r2, r3
 800a1fc:	d1f2      	bne.n	800a1e4 <SFU_LOADER_DownloadNewUserFw+0x8c>
 800a1fe:	e7f3      	b.n	800a1e8 <SFU_LOADER_DownloadNewUserFw+0x90>
 800a200:	0800cef0 	.word	0x0800cef0
 800a204:	20001678 	.word	0x20001678
 800a208:	20001684 	.word	0x20001684
 800a20c:	20001688 	.word	0x20001688
 800a210:	20001680 	.word	0x20001680
 800a214:	00122f11 	.word	0x00122f11
 800a218:	0012310f 	.word	0x0012310f
 800a21c:	0012e223 	.word	0x0012e223
 800a220:	2000167c 	.word	0x2000167c

0800a224 <SFU_COM_YMODEM_HeaderPktRxCpltCallback>:
{
 800a224:	b508      	push	{r3, lr}
  m_uPacketsReceived = 0U;
 800a226:	4b07      	ldr	r3, [pc, #28]	; (800a244 <SFU_COM_YMODEM_HeaderPktRxCpltCallback+0x20>)
  m_uFileSizeYmodem = uFileSize;
 800a228:	6058      	str	r0, [r3, #4]
  m_uNbrBlocksYmodem = (m_uFileSizeYmodem + (SFU_COM_YMODEM_PACKET_1K_SIZE - 1U)) / SFU_COM_YMODEM_PACKET_1K_SIZE;
 800a22a:	f200 30ff 	addw	r0, r0, #1023	; 0x3ff
 800a22e:	0a80      	lsrs	r0, r0, #10
  m_uPacketsReceived = 0U;
 800a230:	2200      	movs	r2, #0
  m_uNbrBlocksYmodem = (m_uFileSizeYmodem + (SFU_COM_YMODEM_PACKET_1K_SIZE - 1U)) / SFU_COM_YMODEM_PACKET_1K_SIZE;
 800a232:	6098      	str	r0, [r3, #8]
  HAL_Delay(1000U);
 800a234:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
  m_uPacketsReceived = 0U;
 800a238:	60da      	str	r2, [r3, #12]
  HAL_Delay(1000U);
 800a23a:	f000 fd0f 	bl	800ac5c <HAL_Delay>
}
 800a23e:	4802      	ldr	r0, [pc, #8]	; (800a248 <SFU_COM_YMODEM_HeaderPktRxCpltCallback+0x24>)
 800a240:	bd08      	pop	{r3, pc}
 800a242:	bf00      	nop
 800a244:	20001688 	.word	0x20001688
 800a248:	00122f11 	.word	0x00122f11

0800a24c <SFU_COM_YMODEM_DataPktRxCpltCallback>:
{
 800a24c:	e92d 4370 	stmdb	sp!, {r4, r5, r6, r8, r9, lr}
 800a250:	b086      	sub	sp, #24
  SE_StatusTypeDef e_se_status = SE_KO;
 800a252:	4b5e      	ldr	r3, [pc, #376]	; (800a3cc <SFU_COM_YMODEM_DataPktRxCpltCallback+0x180>)
 800a254:	9305      	str	r3, [sp, #20]
{
 800a256:	460d      	mov	r5, r1
  if (p_data == NULL)
 800a258:	4680      	mov	r8, r0
 800a25a:	2800      	cmp	r0, #0
 800a25c:	d06e      	beq.n	800a33c <SFU_COM_YMODEM_DataPktRxCpltCallback+0xf0>
  m_uPacketsReceived++;
 800a25e:	4c5c      	ldr	r4, [pc, #368]	; (800a3d0 <SFU_COM_YMODEM_DataPktRxCpltCallback+0x184>)
 800a260:	68e3      	ldr	r3, [r4, #12]
  if (m_uPacketsReceived == m_uNbrBlocksYmodem)
 800a262:	68a2      	ldr	r2, [r4, #8]
  m_uPacketsReceived++;
 800a264:	3301      	adds	r3, #1
  if (m_uPacketsReceived == m_uNbrBlocksYmodem)
 800a266:	4293      	cmp	r3, r2
  m_uPacketsReceived++;
 800a268:	60e3      	str	r3, [r4, #12]
  if (m_uPacketsReceived == m_uNbrBlocksYmodem)
 800a26a:	d106      	bne.n	800a27a <SFU_COM_YMODEM_DataPktRxCpltCallback+0x2e>
    if (0U == (m_uFileSizeYmodem % SFU_COM_YMODEM_PACKET_1K_SIZE))
 800a26c:	6865      	ldr	r5, [r4, #4]
 800a26e:	f3c5 0509 	ubfx	r5, r5, #0, #10
      rx_size = SFU_COM_YMODEM_PACKET_1K_SIZE;
 800a272:	2d00      	cmp	r5, #0
 800a274:	bf08      	it	eq
 800a276:	f44f 6580 	moveq.w	r5, #1024	; 0x400
  if (m_uPacketsReceived == 1U)
 800a27a:	2b01      	cmp	r3, #1
 800a27c:	d17f      	bne.n	800a37e <SFU_COM_YMODEM_DataPktRxCpltCallback+0x132>
    (void) memcpy(fw_header, p_data, SE_FW_HEADER_TOT_LEN);
 800a27e:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800a282:	4641      	mov	r1, r8
 800a284:	4853      	ldr	r0, [pc, #332]	; (800a3d4 <SFU_COM_YMODEM_DataPktRxCpltCallback+0x188>)
 800a286:	f001 fca9 	bl	800bbdc <memcpy>
    e_ret_status = SFU_LOADER_VerifyFwHeader(p_data);
 800a28a:	4640      	mov	r0, r8
 800a28c:	f7ff fea2 	bl	8009fd4 <SFU_LOADER_VerifyFwHeader>
    if (e_ret_status == SFU_SUCCESS)
 800a290:	4b51      	ldr	r3, [pc, #324]	; (800a3d8 <SFU_COM_YMODEM_DataPktRxCpltCallback+0x18c>)
 800a292:	4298      	cmp	r0, r3
    e_ret_status = SFU_LOADER_VerifyFwHeader(p_data);
 800a294:	4606      	mov	r6, r0
    if (e_ret_status == SFU_SUCCESS)
 800a296:	d11d      	bne.n	800a2d4 <SFU_COM_YMODEM_DataPktRxCpltCallback+0x88>
      m_uDwlAreaAddress = m_uDwlAreaStart;
 800a298:	4b50      	ldr	r3, [pc, #320]	; (800a3dc <SFU_COM_YMODEM_DataPktRxCpltCallback+0x190>)
      if (SFU_LL_FLASH_Erase_Size(&x_flash_info, (uint8_t *) m_uDwlAreaAddress, SLOT_SIZE(m_uDwlSlot)) !=
 800a29a:	4851      	ldr	r0, [pc, #324]	; (800a3e0 <SFU_COM_YMODEM_DataPktRxCpltCallback+0x194>)
      m_uDwlAreaAddress = m_uDwlAreaStart;
 800a29c:	6819      	ldr	r1, [r3, #0]
      m_uDwlImgSize = ((SE_FwRawHeaderTypeDef *)(uint32_t)fw_header)->FwSize + SFU_IMG_IMAGE_OFFSET;
 800a29e:	69a3      	ldr	r3, [r4, #24]
      m_uDwlAreaAddress = m_uDwlAreaStart;
 800a2a0:	6021      	str	r1, [r4, #0]
      m_uDwlImgSize = ((SE_FwRawHeaderTypeDef *)(uint32_t)fw_header)->FwSize + SFU_IMG_IMAGE_OFFSET;
 800a2a2:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800a2a6:	f8c4 3150 	str.w	r3, [r4, #336]	; 0x150
      if (SFU_LL_FLASH_Erase_Size(&x_flash_info, (uint8_t *) m_uDwlAreaAddress, SLOT_SIZE(m_uDwlSlot)) !=
 800a2aa:	4b4e      	ldr	r3, [pc, #312]	; (800a3e4 <SFU_COM_YMODEM_DataPktRxCpltCallback+0x198>)
 800a2ac:	681a      	ldr	r2, [r3, #0]
 800a2ae:	4b4e      	ldr	r3, [pc, #312]	; (800a3e8 <SFU_COM_YMODEM_DataPktRxCpltCallback+0x19c>)
 800a2b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a2b4:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
 800a2b8:	3301      	adds	r3, #1
 800a2ba:	1a9a      	subs	r2, r3, r2
 800a2bc:	f10d 000f 	add.w	r0, sp, #15
 800a2c0:	f000 fa48 	bl	800a754 <SFU_LL_FLASH_Erase_Size>
 800a2c4:	42b0      	cmp	r0, r6
 800a2c6:	4681      	mov	r9, r0
 800a2c8:	d03b      	beq.n	800a342 <SFU_COM_YMODEM_DataPktRxCpltCallback+0xf6>
        m_LoaderStatus = SFU_LOADER_ERR_FLASH;
 800a2ca:	4b48      	ldr	r3, [pc, #288]	; (800a3ec <SFU_COM_YMODEM_DataPktRxCpltCallback+0x1a0>)
 800a2cc:	2205      	movs	r2, #5
      m_LoaderStatus = SFU_LOADER_ERR_FW_LENGTH;
 800a2ce:	701a      	strb	r2, [r3, #0]
      e_ret_status = SFU_ERROR;
 800a2d0:	f641 76e1 	movw	r6, #8161	; 0x1fe1
  if (m_uPacketsReceived == m_uNbrBlocksYmodem)
 800a2d4:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
 800a2d8:	429a      	cmp	r2, r3
    m_uPacketsReceived = 0U;
 800a2da:	bf04      	itt	eq
 800a2dc:	2300      	moveq	r3, #0
 800a2de:	60e3      	streq	r3, [r4, #12]
  if (e_ret_status == SFU_ERROR)
 800a2e0:	f641 73e1 	movw	r3, #8161	; 0x1fe1
 800a2e4:	429e      	cmp	r6, r3
 800a2e6:	d103      	bne.n	800a2f0 <SFU_COM_YMODEM_DataPktRxCpltCallback+0xa4>
    m_uFileSizeYmodem = 0U;
 800a2e8:	2300      	movs	r3, #0
    m_uNbrBlocksYmodem = 0U;
 800a2ea:	e9c4 3302 	strd	r3, r3, [r4, #8]
    m_uFileSizeYmodem = 0U;
 800a2ee:	6063      	str	r3, [r4, #4]
}
 800a2f0:	4630      	mov	r0, r6
 800a2f2:	b006      	add	sp, #24
 800a2f4:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
        rx_size -= (m_uDwlAreaStart + SFU_IMG_IMAGE_OFFSET - m_uDwlAreaAddress);
 800a2f8:	f5a3 7100 	sub.w	r1, r3, #512	; 0x200
 800a2fc:	1a09      	subs	r1, r1, r0
        p_data += (m_uDwlAreaStart + SFU_IMG_IMAGE_OFFSET - m_uDwlAreaAddress);
 800a2fe:	1ad3      	subs	r3, r2, r3
        rx_size -= (m_uDwlAreaStart + SFU_IMG_IMAGE_OFFSET - m_uDwlAreaAddress);
 800a300:	440d      	add	r5, r1
        p_data += (m_uDwlAreaStart + SFU_IMG_IMAGE_OFFSET - m_uDwlAreaAddress);
 800a302:	4498      	add	r8, r3
        m_uDwlAreaAddress += (m_uDwlAreaStart + SFU_IMG_IMAGE_OFFSET - m_uDwlAreaAddress);
 800a304:	6022      	str	r2, [r4, #0]
    if (rx_size != 0U)
 800a306:	2d00      	cmp	r5, #0
 800a308:	d045      	beq.n	800a396 <SFU_COM_YMODEM_DataPktRxCpltCallback+0x14a>
          && (SE_Decrypt_Append(&e_se_status, p_data, rx_size, fw_decrypted_chunk, &fw_decrypted_chunk_size)
 800a30a:	ab04      	add	r3, sp, #16
 800a30c:	9300      	str	r3, [sp, #0]
 800a30e:	462a      	mov	r2, r5
 800a310:	4b37      	ldr	r3, [pc, #220]	; (800a3f0 <SFU_COM_YMODEM_DataPktRxCpltCallback+0x1a4>)
      fw_decrypted_chunk_size = rx_size;
 800a312:	9504      	str	r5, [sp, #16]
          && (SE_Decrypt_Append(&e_se_status, p_data, rx_size, fw_decrypted_chunk, &fw_decrypted_chunk_size)
 800a314:	4641      	mov	r1, r8
 800a316:	a805      	add	r0, sp, #20
 800a318:	f7fe f84e 	bl	80083b8 <SE_Decrypt_Append>
 800a31c:	4b35      	ldr	r3, [pc, #212]	; (800a3f4 <SFU_COM_YMODEM_DataPktRxCpltCallback+0x1a8>)
 800a31e:	4298      	cmp	r0, r3
 800a320:	d106      	bne.n	800a330 <SFU_COM_YMODEM_DataPktRxCpltCallback+0xe4>
      else if ((e_se_status != SE_OK) || (fw_decrypted_chunk_size != rx_size))
 800a322:	4b35      	ldr	r3, [pc, #212]	; (800a3f8 <SFU_COM_YMODEM_DataPktRxCpltCallback+0x1ac>)
 800a324:	9a05      	ldr	r2, [sp, #20]
 800a326:	429a      	cmp	r2, r3
 800a328:	d102      	bne.n	800a330 <SFU_COM_YMODEM_DataPktRxCpltCallback+0xe4>
 800a32a:	9b04      	ldr	r3, [sp, #16]
 800a32c:	429d      	cmp	r5, r3
 800a32e:	d032      	beq.n	800a396 <SFU_COM_YMODEM_DataPktRxCpltCallback+0x14a>
        m_LoaderStatus = SFU_LOADER_ERR_CRYPTO;
 800a330:	4b2e      	ldr	r3, [pc, #184]	; (800a3ec <SFU_COM_YMODEM_DataPktRxCpltCallback+0x1a0>)
 800a332:	2206      	movs	r2, #6
 800a334:	e7cb      	b.n	800a2ce <SFU_COM_YMODEM_DataPktRxCpltCallback+0x82>
      m_LoaderStatus = SFU_LOADER_ERR_FW_LENGTH;
 800a336:	4b2d      	ldr	r3, [pc, #180]	; (800a3ec <SFU_COM_YMODEM_DataPktRxCpltCallback+0x1a0>)
 800a338:	2203      	movs	r2, #3
 800a33a:	e7c8      	b.n	800a2ce <SFU_COM_YMODEM_DataPktRxCpltCallback+0x82>
    return SFU_ERROR;
 800a33c:	f641 76e1 	movw	r6, #8161	; 0x1fe1
 800a340:	e7d6      	b.n	800a2f0 <SFU_COM_YMODEM_DataPktRxCpltCallback+0xa4>
      if (SE_Decrypt_Init(&e_se_status, (SE_FwRawHeaderTypeDef *)fw_header, SE_FW_IMAGE_COMPLETE) != SE_SUCCESS)
 800a342:	4924      	ldr	r1, [pc, #144]	; (800a3d4 <SFU_COM_YMODEM_DataPktRxCpltCallback+0x188>)
 800a344:	2200      	movs	r2, #0
 800a346:	a805      	add	r0, sp, #20
 800a348:	f7fe f800 	bl	800834c <SE_Decrypt_Init>
 800a34c:	4b29      	ldr	r3, [pc, #164]	; (800a3f4 <SFU_COM_YMODEM_DataPktRxCpltCallback+0x1a8>)
 800a34e:	4298      	cmp	r0, r3
 800a350:	d1ee      	bne.n	800a330 <SFU_COM_YMODEM_DataPktRxCpltCallback+0xe4>
      else if (e_se_status != SE_OK)
 800a352:	4b29      	ldr	r3, [pc, #164]	; (800a3f8 <SFU_COM_YMODEM_DataPktRxCpltCallback+0x1ac>)
 800a354:	9a05      	ldr	r2, [sp, #20]
 800a356:	429a      	cmp	r2, r3
 800a358:	d1ea      	bne.n	800a330 <SFU_COM_YMODEM_DataPktRxCpltCallback+0xe4>
        if (SFU_LL_FLASH_Write(&x_flash_info, (uint8_t *)m_uDwlAreaAddress, p_data, SE_FW_HEADER_TOT_LEN) ==
 800a35a:	6821      	ldr	r1, [r4, #0]
 800a35c:	f44f 73a0 	mov.w	r3, #320	; 0x140
 800a360:	4642      	mov	r2, r8
 800a362:	f10d 000f 	add.w	r0, sp, #15
 800a366:	f000 f9fc 	bl	800a762 <SFU_LL_FLASH_Write>
 800a36a:	4548      	cmp	r0, r9
 800a36c:	d1ad      	bne.n	800a2ca <SFU_COM_YMODEM_DataPktRxCpltCallback+0x7e>
          m_uDwlAreaAddress += SE_FW_HEADER_TOT_LEN;
 800a36e:	6823      	ldr	r3, [r4, #0]
 800a370:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 800a374:	6023      	str	r3, [r4, #0]
          rx_size -= SE_FW_HEADER_TOT_LEN;
 800a376:	f5a5 75a0 	sub.w	r5, r5, #320	; 0x140
          p_data += SE_FW_HEADER_TOT_LEN;
 800a37a:	f508 78a0 	add.w	r8, r8, #320	; 0x140
    if (m_uDwlAreaAddress < (m_uDwlAreaStart + SFU_IMG_IMAGE_OFFSET))
 800a37e:	4e17      	ldr	r6, [pc, #92]	; (800a3dc <SFU_COM_YMODEM_DataPktRxCpltCallback+0x190>)
 800a380:	6823      	ldr	r3, [r4, #0]
 800a382:	6830      	ldr	r0, [r6, #0]
 800a384:	f500 7200 	add.w	r2, r0, #512	; 0x200
 800a388:	429a      	cmp	r2, r3
 800a38a:	d9bc      	bls.n	800a306 <SFU_COM_YMODEM_DataPktRxCpltCallback+0xba>
      if ((m_uDwlAreaAddress + rx_size) < (m_uDwlAreaStart + SFU_IMG_IMAGE_OFFSET))
 800a38c:	1959      	adds	r1, r3, r5
 800a38e:	428a      	cmp	r2, r1
 800a390:	d9b2      	bls.n	800a2f8 <SFU_COM_YMODEM_DataPktRxCpltCallback+0xac>
        m_uDwlAreaAddress += rx_size;
 800a392:	6021      	str	r1, [r4, #0]
        rx_size = 0U;
 800a394:	2500      	movs	r5, #0
    if ((m_uDwlAreaAddress + rx_size) > (m_uDwlAreaStart + m_uDwlImgSize))
 800a396:	6821      	ldr	r1, [r4, #0]
 800a398:	6833      	ldr	r3, [r6, #0]
 800a39a:	f8d4 2150 	ldr.w	r2, [r4, #336]	; 0x150
 800a39e:	1948      	adds	r0, r1, r5
 800a3a0:	441a      	add	r2, r3
 800a3a2:	4290      	cmp	r0, r2
 800a3a4:	d8c7      	bhi.n	800a336 <SFU_COM_YMODEM_DataPktRxCpltCallback+0xea>
    if ((m_uDwlAreaAddress + rx_size) > (m_uDwlAreaStart + m_uDwlAreaSize))
 800a3a6:	4a15      	ldr	r2, [pc, #84]	; (800a3fc <SFU_COM_YMODEM_DataPktRxCpltCallback+0x1b0>)
 800a3a8:	6812      	ldr	r2, [r2, #0]
 800a3aa:	4413      	add	r3, r2
 800a3ac:	4298      	cmp	r0, r3
 800a3ae:	d8c2      	bhi.n	800a336 <SFU_COM_YMODEM_DataPktRxCpltCallback+0xea>
    if (SFU_LL_FLASH_Write(&x_flash_info, (uint8_t *)m_uDwlAreaAddress, fw_decrypted_chunk, rx_size) == SFU_SUCCESS)
 800a3b0:	462b      	mov	r3, r5
 800a3b2:	4a0f      	ldr	r2, [pc, #60]	; (800a3f0 <SFU_COM_YMODEM_DataPktRxCpltCallback+0x1a4>)
 800a3b4:	f10d 000f 	add.w	r0, sp, #15
 800a3b8:	f000 f9d3 	bl	800a762 <SFU_LL_FLASH_Write>
 800a3bc:	4b06      	ldr	r3, [pc, #24]	; (800a3d8 <SFU_COM_YMODEM_DataPktRxCpltCallback+0x18c>)
 800a3be:	4298      	cmp	r0, r3
 800a3c0:	4606      	mov	r6, r0
 800a3c2:	d182      	bne.n	800a2ca <SFU_COM_YMODEM_DataPktRxCpltCallback+0x7e>
      m_uDwlAreaAddress += (rx_size);
 800a3c4:	6821      	ldr	r1, [r4, #0]
 800a3c6:	4429      	add	r1, r5
 800a3c8:	6021      	str	r1, [r4, #0]
 800a3ca:	e783      	b.n	800a2d4 <SFU_COM_YMODEM_DataPktRxCpltCallback+0x88>
 800a3cc:	0013023d 	.word	0x0013023d
 800a3d0:	20001688 	.word	0x20001688
 800a3d4:	20001698 	.word	0x20001698
 800a3d8:	00122f11 	.word	0x00122f11
 800a3dc:	20001684 	.word	0x20001684
 800a3e0:	0800ce2c 	.word	0x0800ce2c
 800a3e4:	2000167c 	.word	0x2000167c
 800a3e8:	0800ce4c 	.word	0x0800ce4c
 800a3ec:	20001678 	.word	0x20001678
 800a3f0:	200017dc 	.word	0x200017dc
 800a3f4:	0012310f 	.word	0x0012310f
 800a3f8:	0012e223 	.word	0x0012e223
 800a3fc:	20001680 	.word	0x20001680

0800a400 <SFU_MPU_SVC_Handler>:
  *             The first argument is the identifier of the requested operation.
  * @retval void
  */
void SFU_MPU_SVC_Handler(uint32_t *args)
{
  switch (args[0])
 800a400:	6803      	ldr	r3, [r0, #0]
 800a402:	2b06      	cmp	r3, #6
{
 800a404:	b510      	push	{r4, lr}
 800a406:	4604      	mov	r4, r0
  switch (args[0])
 800a408:	d807      	bhi.n	800a41a <SFU_MPU_SVC_Handler+0x1a>
 800a40a:	2b02      	cmp	r3, #2
 800a40c:	d829      	bhi.n	800a462 <SFU_MPU_SVC_Handler+0x62>
 800a40e:	2b01      	cmp	r3, #1
 800a410:	d009      	beq.n	800a426 <SFU_MPU_SVC_Handler+0x26>
    default:
      /* Force a reset */
      HAL_NVIC_SystemReset();
      break;
  }
}
 800a412:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_NVIC_SystemReset();
 800a416:	f000 bc81 	b.w	800ad1c <HAL_NVIC_SystemReset>
  switch (args[0])
 800a41a:	2b07      	cmp	r3, #7
 800a41c:	d1f9      	bne.n	800a412 <SFU_MPU_SVC_Handler+0x12>
}
 800a41e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_SuspendTick();
 800a422:	f000 bc2f 	b.w	800ac84 <HAL_SuspendTick>
  __ASM volatile ("MRS %0, control" : "=r" (result) );
 800a426:	f3ef 8314 	mrs	r3, CONTROL
      __set_CONTROL(__get_CONTROL() & ~0x3U); /* clear process stack & unprivileged bit */
 800a42a:	f023 0303 	bic.w	r3, r3, #3
  __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
 800a42e:	f383 8814 	msr	CONTROL, r3
      HAL_SuspendTick();
 800a432:	f000 fc27 	bl	800ac84 <HAL_SuspendTick>
    SCB->CPACR &= ~((3UL << 10*2)|(3UL << 11*2));  /* reset CP10 and CP11 Full Access */
 800a436:	4a0b      	ldr	r2, [pc, #44]	; (800a464 <SFU_MPU_SVC_Handler+0x64>)
      launch_application(args[1], (uint32_t)jump_to_function);
 800a438:	490b      	ldr	r1, [pc, #44]	; (800a468 <SFU_MPU_SVC_Handler+0x68>)
    SCB->CPACR &= ~((3UL << 10*2)|(3UL << 11*2));  /* reset CP10 and CP11 Full Access */
 800a43a:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 800a43e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800a442:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    FPU->FPCCR &= ~FPU_FPCCR_LSPEN_Msk; /* Disable automatic lazy state preservation for floating-point context */
 800a446:	4b09      	ldr	r3, [pc, #36]	; (800a46c <SFU_MPU_SVC_Handler+0x6c>)
 800a448:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a44a:	f022 4280 	bic.w	r2, r2, #1073741824	; 0x40000000
 800a44e:	635a      	str	r2, [r3, #52]	; 0x34
    FPU->FPCCR &= ~FPU_FPCCR_LSPACT_Msk; /* Clear the lazy state preservation for floating-point context */
 800a450:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a452:	f022 0201 	bic.w	r2, r2, #1
 800a456:	635a      	str	r2, [r3, #52]	; 0x34
      launch_application(args[1], (uint32_t)jump_to_function);
 800a458:	6860      	ldr	r0, [r4, #4]
}
 800a45a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      launch_application(args[1], (uint32_t)jump_to_function);
 800a45e:	f7fe ba77 	b.w	8008950 <launch_application>
}
 800a462:	bd10      	pop	{r4, pc}
 800a464:	e000ed00 	.word	0xe000ed00
 800a468:	08008948 	.word	0x08008948
 800a46c:	e000ef00 	.word	0xe000ef00

0800a470 <MPU_SVC_Handler>:
  uint8_t code = ((uint8_t *)args[6])[-2];
 800a470:	6983      	ldr	r3, [r0, #24]
 800a472:	f813 3c02 	ldrb.w	r3, [r3, #-2]
  switch (code)
 800a476:	b11b      	cbz	r3, 800a480 <MPU_SVC_Handler+0x10>
 800a478:	2b01      	cmp	r3, #1
 800a47a:	d003      	beq.n	800a484 <MPU_SVC_Handler+0x14>
      HAL_NVIC_SystemReset();
 800a47c:	f000 bc4e 	b.w	800ad1c <HAL_NVIC_SystemReset>
      SE_SVC_Handler(args);
 800a480:	f7fe b8fa 	b.w	8008678 <SE_SVC_Handler>
      SFU_MPU_SVC_Handler(args);
 800a484:	f7ff bfbc 	b.w	800a400 <SFU_MPU_SVC_Handler>

0800a488 <SFU_MPU_SysCall>:
  * @param syscall The identifier of the operation to be called (see @ref SFU_MPU_PrivilegedOpId)
  * @param arguments arguments of the privileged operation
  * @retval void
  */
void SFU_MPU_SysCall(uint32_t syscall, ...)
{
 800a488:	b40f      	push	{r0, r1, r2, r3}
  /*
    * You cannot directly change to privileged mode from unprivileged mode without going through an exception, for
    * example an SVC.
    * Handled by @ref MPU_SVC_Handler() and finally @ref SFU_MPU_SVC_Handler()
    */
  __ASM volatile("SVC #1");   /* 1 is the hard-coded value to indicate a SB_SFU syscall */
 800a48a:	df01      	svc	1
}
 800a48c:	b004      	add	sp, #16
 800a48e:	4770      	bx	lr

0800a490 <SFU_MPU_IsUnprivileged>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a490:	f3ef 8305 	mrs	r3, IPSR
  * @param void
  * @retval 0 if we are in privileged mode, 1 if we are in non-privileged mode
  */
uint32_t SFU_MPU_IsUnprivileged(void)
{
  return ((__get_IPSR() == 0U) && ((__get_CONTROL() & 1U) == 1U));
 800a494:	b923      	cbnz	r3, 800a4a0 <SFU_MPU_IsUnprivileged+0x10>
  __ASM volatile ("MRS %0, control" : "=r" (result) );
 800a496:	f3ef 8014 	mrs	r0, CONTROL
 800a49a:	f000 0001 	and.w	r0, r0, #1
 800a49e:	4770      	bx	lr
 800a4a0:	2000      	movs	r0, #0
}
 800a4a2:	4770      	bx	lr

0800a4a4 <SFU_MPU_EnterUnprivilegedMode>:
  __ASM volatile ("MRS %0, msp" : "=r" (result) );
 800a4a4:	f3ef 8308 	mrs	r3, MSP
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
 800a4a8:	f383 8809 	msr	PSP, r3
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 800a4ac:	4b05      	ldr	r3, [pc, #20]	; (800a4c4 <SFU_MPU_EnterUnprivilegedMode+0x20>)
 800a4ae:	f383 8808 	msr	MSP, r3
  __ASM volatile ("MRS %0, control" : "=r" (result) );
 800a4b2:	f3ef 8314 	mrs	r3, CONTROL
  */
void SFU_MPU_EnterUnprivilegedMode(void)
{
  __set_PSP(__get_MSP()); /* set up Process Stack Pointer to current stack pointer */
  __set_MSP(SE_REGION_RAM_STACK_TOP); /* change main stack to point on privileged stack */
  __set_CONTROL(__get_CONTROL() | 3U); /* bit 0 = 1: unpriviledged      bit 1=1: stack=PSP */
 800a4b6:	f043 0303 	orr.w	r3, r3, #3
  __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
 800a4ba:	f383 8814 	msr	CONTROL, r3
  __ASM volatile ("isb 0xF":::"memory");
 800a4be:	f3bf 8f6f 	isb	sy
  __ISB();
}
 800a4c2:	4770      	bx	lr
 800a4c4:	20000400 	.word	0x20000400

0800a4c8 <SFU_IMG_GetDownloadAreaInfo>:
  * @param  pArea pointer to area descriptor
  * @retval none
  */
void SFU_IMG_GetDownloadAreaInfo(uint32_t DwlSlot, SFU_FwImageFlashTypeDef *pArea)
{
  pArea->DownloadAddr = SlotStartAdd[DwlSlot];
 800a4c8:	4b06      	ldr	r3, [pc, #24]	; (800a4e4 <SFU_IMG_GetDownloadAreaInfo+0x1c>)
 800a4ca:	f853 2020 	ldr.w	r2, [r3, r0, lsl #2]
  pArea->MaxSizeInBytes = (uint32_t)SLOT_SIZE(DwlSlot);
 800a4ce:	4b06      	ldr	r3, [pc, #24]	; (800a4e8 <SFU_IMG_GetDownloadAreaInfo+0x20>)
  pArea->DownloadAddr = SlotStartAdd[DwlSlot];
 800a4d0:	604a      	str	r2, [r1, #4]
  pArea->MaxSizeInBytes = (uint32_t)SLOT_SIZE(DwlSlot);
 800a4d2:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 800a4d6:	3301      	adds	r3, #1
 800a4d8:	1a9b      	subs	r3, r3, r2
 800a4da:	600b      	str	r3, [r1, #0]
  pArea->ImageOffsetInBytes = SFU_IMG_IMAGE_OFFSET;
 800a4dc:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a4e0:	608b      	str	r3, [r1, #8]
}
 800a4e2:	4770      	bx	lr
 800a4e4:	0800ce2c 	.word	0x0800ce2c
 800a4e8:	0800ce4c 	.word	0x0800ce4c

0800a4ec <SFU_LL_DeInit>:

  /* ADD SRC CODE HERE
       ...
  */
  return e_ret_status;
}
 800a4ec:	f641 70e1 	movw	r0, #8161	; 0x1fe1
 800a4f0:	4770      	bx	lr
	...

0800a4f4 <SFU_LL_CRC_Config>:
  * @param  eCRCConfg: SFU_CRC_ConfigTypeDef.
  *         This parameter can be a value of @ref SFU_CRC_ConfigTypeDef.
  * @retval SFU_ErrorStatus SFU_SUCCESS if successful, SFU_ERROR otherwise.
  */
SFU_ErrorStatus SFU_LL_CRC_Config(SFU_CRC_ConfigTypeDef eCRCConfg)
{
 800a4f4:	b508      	push	{r3, lr}

  /* Check the parameters */
  assert_param(IS_SFU_CRC_CONF(eCRCConfg));

  /* Switch to the selected configuration */
  CrcHandle.Instance = CRC;
 800a4f6:	4806      	ldr	r0, [pc, #24]	; (800a510 <SFU_LL_CRC_Config+0x1c>)
 800a4f8:	4b06      	ldr	r3, [pc, #24]	; (800a514 <SFU_LL_CRC_Config+0x20>)
 800a4fa:	6003      	str	r3, [r0, #0]


  /* Proceed to CRC Init (Correct Parameters) */
  if (e_ret_status == SFU_SUCCESS)
  {
    if (HAL_CRC_Init(&CrcHandle) != HAL_OK)
 800a4fc:	f000 fc35 	bl	800ad6a <HAL_CRC_Init>
      e_ret_status = SFU_ERROR;
    }
  }

  return e_ret_status;
}
 800a500:	4a05      	ldr	r2, [pc, #20]	; (800a518 <SFU_LL_CRC_Config+0x24>)
 800a502:	f641 73e1 	movw	r3, #8161	; 0x1fe1
 800a506:	2800      	cmp	r0, #0
 800a508:	bf0c      	ite	eq
 800a50a:	4610      	moveq	r0, r2
 800a50c:	4618      	movne	r0, r3
 800a50e:	bd08      	pop	{r3, pc}
 800a510:	20001bdc 	.word	0x20001bdc
 800a514:	40023000 	.word	0x40023000
 800a518:	00122f11 	.word	0x00122f11

0800a51c <SFU_LL_CRC_Init>:
{
 800a51c:	b082      	sub	sp, #8
  __HAL_RCC_CRC_CLK_ENABLE();
 800a51e:	2300      	movs	r3, #0
 800a520:	9301      	str	r3, [sp, #4]
 800a522:	4b07      	ldr	r3, [pc, #28]	; (800a540 <SFU_LL_CRC_Init+0x24>)
 800a524:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a526:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800a52a:	631a      	str	r2, [r3, #48]	; 0x30
 800a52c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a52e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800a532:	9301      	str	r3, [sp, #4]
 800a534:	9b01      	ldr	r3, [sp, #4]
  e_ret_status = SFU_LL_CRC_Config(SFU_CRC_CONFIG_DEFAULT);
 800a536:	2001      	movs	r0, #1
}
 800a538:	b002      	add	sp, #8
  e_ret_status = SFU_LL_CRC_Config(SFU_CRC_CONFIG_DEFAULT);
 800a53a:	f7ff bfdb 	b.w	800a4f4 <SFU_LL_CRC_Config>
 800a53e:	bf00      	nop
 800a540:	40023800 	.word	0x40023800

0800a544 <SFU_LL_Init>:
  e_ret_status = SFU_LL_CRC_Init();
 800a544:	f7ff bfea 	b.w	800a51c <SFU_LL_CRC_Init>

0800a548 <SFU_LL_CRC_Calculate>:
  * @param  pBuffer: pointer to data buffer.
  * @param  BufferLength: buffer length in bytes.
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
uint32_t SFU_LL_CRC_Calculate(uint32_t pBuffer[], uint32_t BufferLength)
{
 800a548:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a54a:	1e43      	subs	r3, r0, #1
  /* F4 and L1 HAL can only calculate a 32 bits CRC, we need a 16 bits CRC
     so define specials functions for this platform                       */
  return ((uint32_t) SFU_LL_CRCSW_Calculate((uint8_t *) pBuffer, (uint16_t) BufferLength));
 800a54c:	b289      	uxth	r1, r1
static uint16_t SFU_LL_CRCSW_Calculate(const uint8_t *pdata, uint16_t size)
{
  uint16_t crc;
  uint8_t i;

  for (crc = 0; size > 0; size--, pdata++)
 800a54e:	2000      	movs	r0, #0
    out ^= 0x1021;
 800a550:	f241 0521 	movw	r5, #4129	; 0x1021
  for (crc = 0; size > 0; size--, pdata++)
 800a554:	b961      	cbnz	r1, 800a570 <SFU_LL_CRC_Calculate+0x28>
 800a556:	2310      	movs	r3, #16
    out ^= 0x1021;
 800a558:	f241 0221 	movw	r2, #4129	; 0x1021
  uint16_t xor = crc_in >> 15;
 800a55c:	0bc1      	lsrs	r1, r0, #15
  uint16_t out = crc_in << 1;
 800a55e:	0040      	lsls	r0, r0, #1
 800a560:	b280      	uxth	r0, r0
  if (xor)
 800a562:	b101      	cbz	r1, 800a566 <SFU_LL_CRC_Calculate+0x1e>
    out ^= 0x1021;
 800a564:	4050      	eors	r0, r2
    for (i = 0x80; i; i >>= 1)
    {
      crc = SFU_LL_CRCSW_Update(crc, *pdata & i);
    }
  }
  for (i = 0; i < 16; i++)
 800a566:	3b01      	subs	r3, #1
 800a568:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
 800a56c:	d1f6      	bne.n	800a55c <SFU_LL_CRC_Calculate+0x14>
}
 800a56e:	bdf0      	pop	{r4, r5, r6, r7, pc}
      crc = SFU_LL_CRCSW_Update(crc, *pdata & i);
 800a570:	f813 6f01 	ldrb.w	r6, [r3, #1]!
 800a574:	2208      	movs	r2, #8
    for (i = 0x80; i; i >>= 1)
 800a576:	2480      	movs	r4, #128	; 0x80
  uint16_t xor = crc_in >> 15;
 800a578:	0bc7      	lsrs	r7, r0, #15
  uint16_t out = crc_in << 1;
 800a57a:	0040      	lsls	r0, r0, #1
 800a57c:	b280      	uxth	r0, r0
  if (incr)
 800a57e:	4226      	tst	r6, r4
    out++;
 800a580:	bf1c      	itt	ne
 800a582:	3001      	addne	r0, #1
 800a584:	b280      	uxthne	r0, r0
  if (xor)
 800a586:	b107      	cbz	r7, 800a58a <SFU_LL_CRC_Calculate+0x42>
    out ^= 0x1021;
 800a588:	4068      	eors	r0, r5
    for (i = 0x80; i; i >>= 1)
 800a58a:	3a01      	subs	r2, #1
 800a58c:	ea4f 0454 	mov.w	r4, r4, lsr #1
 800a590:	d1f2      	bne.n	800a578 <SFU_LL_CRC_Calculate+0x30>
  for (crc = 0; size > 0; size--, pdata++)
 800a592:	3901      	subs	r1, #1
 800a594:	b289      	uxth	r1, r1
 800a596:	e7dd      	b.n	800a554 <SFU_LL_CRC_Calculate+0xc>

0800a598 <SFU_LL_UART_Init>:
  UartHandle.Instance = SFU_UART;
 800a598:	480c      	ldr	r0, [pc, #48]	; (800a5cc <SFU_LL_UART_Init+0x34>)
  UartHandle.Init.BaudRate = 115200U;
 800a59a:	4a0d      	ldr	r2, [pc, #52]	; (800a5d0 <SFU_LL_UART_Init+0x38>)
{
 800a59c:	b508      	push	{r3, lr}
  UartHandle.Init.BaudRate = 115200U;
 800a59e:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 800a5a2:	e9c0 2302 	strd	r2, r3, [r0, #8]
  UartHandle.Init.WordLength = UART_WORDLENGTH_8B;
 800a5a6:	2300      	movs	r3, #0
  UartHandle.Init.StopBits = UART_STOPBITS_1;
 800a5a8:	e9c0 3304 	strd	r3, r3, [r0, #16]
  UartHandle.Init.Parity = UART_PARITY_NONE;
 800a5ac:	6183      	str	r3, [r0, #24]
  UartHandle.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800a5ae:	6203      	str	r3, [r0, #32]
  UartHandle.Init.Mode = UART_MODE_RX | UART_MODE_TX;
 800a5b0:	230c      	movs	r3, #12
 800a5b2:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&UartHandle) == HAL_OK)
 800a5b4:	3008      	adds	r0, #8
 800a5b6:	f001 f9f7 	bl	800b9a8 <HAL_UART_Init>
}
 800a5ba:	4b06      	ldr	r3, [pc, #24]	; (800a5d4 <SFU_LL_UART_Init+0x3c>)
 800a5bc:	f641 72e1 	movw	r2, #8161	; 0x1fe1
 800a5c0:	2800      	cmp	r0, #0
 800a5c2:	bf14      	ite	ne
 800a5c4:	4610      	movne	r0, r2
 800a5c6:	4618      	moveq	r0, r3
 800a5c8:	bd08      	pop	{r3, pc}
 800a5ca:	bf00      	nop
 800a5cc:	20001bdc 	.word	0x20001bdc
 800a5d0:	40011000 	.word	0x40011000
 800a5d4:	00122f11 	.word	0x00122f11

0800a5d8 <SFU_LL_UART_DeInit>:
}
 800a5d8:	4800      	ldr	r0, [pc, #0]	; (800a5dc <SFU_LL_UART_DeInit+0x4>)
 800a5da:	4770      	bx	lr
 800a5dc:	00122f11 	.word	0x00122f11

0800a5e0 <SFU_LL_UART_Transmit>:
{
 800a5e0:	b508      	push	{r3, lr}
 800a5e2:	4613      	mov	r3, r2
  if (pData == NULL)
 800a5e4:	b910      	cbnz	r0, 800a5ec <SFU_LL_UART_Transmit+0xc>
    return SFU_ERROR;
 800a5e6:	f641 70e1 	movw	r0, #8161	; 0x1fe1
}
 800a5ea:	bd08      	pop	{r3, pc}
  if (HAL_UART_Transmit(&UartHandle, (uint8_t *)pData, DataLength, Timeout) == HAL_OK)
 800a5ec:	460a      	mov	r2, r1
 800a5ee:	4601      	mov	r1, r0
 800a5f0:	4803      	ldr	r0, [pc, #12]	; (800a600 <SFU_LL_UART_Transmit+0x20>)
 800a5f2:	f001 fa07 	bl	800ba04 <HAL_UART_Transmit>
 800a5f6:	2800      	cmp	r0, #0
 800a5f8:	d1f5      	bne.n	800a5e6 <SFU_LL_UART_Transmit+0x6>
    e_ret_status = SFU_SUCCESS;
 800a5fa:	4802      	ldr	r0, [pc, #8]	; (800a604 <SFU_LL_UART_Transmit+0x24>)
 800a5fc:	e7f5      	b.n	800a5ea <SFU_LL_UART_Transmit+0xa>
 800a5fe:	bf00      	nop
 800a600:	20001be4 	.word	0x20001be4
 800a604:	00122f11 	.word	0x00122f11

0800a608 <SFU_LL_UART_Receive>:
{
 800a608:	b508      	push	{r3, lr}
 800a60a:	4613      	mov	r3, r2
  if (pData == NULL)
 800a60c:	b910      	cbnz	r0, 800a614 <SFU_LL_UART_Receive+0xc>
    return SFU_ERROR;
 800a60e:	f641 70e1 	movw	r0, #8161	; 0x1fe1
}
 800a612:	bd08      	pop	{r3, pc}
  if (HAL_UART_Receive(&UartHandle, (uint8_t *)pData, DataLength, Timeout) == HAL_OK)
 800a614:	460a      	mov	r2, r1
 800a616:	4601      	mov	r1, r0
 800a618:	4803      	ldr	r0, [pc, #12]	; (800a628 <SFU_LL_UART_Receive+0x20>)
 800a61a:	f001 fa48 	bl	800baae <HAL_UART_Receive>
 800a61e:	2800      	cmp	r0, #0
 800a620:	d1f5      	bne.n	800a60e <SFU_LL_UART_Receive+0x6>
    e_ret_status = SFU_SUCCESS;
 800a622:	4802      	ldr	r0, [pc, #8]	; (800a62c <SFU_LL_UART_Receive+0x24>)
 800a624:	e7f5      	b.n	800a612 <SFU_LL_UART_Receive+0xa>
 800a626:	bf00      	nop
 800a628:	20001be4 	.word	0x20001be4
 800a62c:	00122f11 	.word	0x00122f11

0800a630 <SFU_LL_UART_Flush>:
  __HAL_UART_FLUSH_DRREGISTER(&UartHandle);
 800a630:	4b02      	ldr	r3, [pc, #8]	; (800a63c <SFU_LL_UART_Flush+0xc>)
}
 800a632:	4803      	ldr	r0, [pc, #12]	; (800a640 <SFU_LL_UART_Flush+0x10>)
  __HAL_UART_FLUSH_DRREGISTER(&UartHandle);
 800a634:	689b      	ldr	r3, [r3, #8]
 800a636:	685b      	ldr	r3, [r3, #4]
}
 800a638:	4770      	bx	lr
 800a63a:	bf00      	nop
 800a63c:	20001bdc 	.word	0x20001bdc
 800a640:	00122f11 	.word	0x00122f11

0800a644 <SFU_LL_UART_MspInit>:
{
 800a644:	b5f0      	push	{r4, r5, r6, r7, lr}
  if (huart->Instance == SFU_UART)
 800a646:	6802      	ldr	r2, [r0, #0]
 800a648:	4b1f      	ldr	r3, [pc, #124]	; (800a6c8 <SFU_LL_UART_MspInit+0x84>)
 800a64a:	429a      	cmp	r2, r3
{
 800a64c:	b089      	sub	sp, #36	; 0x24
  if (huart->Instance == SFU_UART)
 800a64e:	d139      	bne.n	800a6c4 <SFU_LL_UART_MspInit+0x80>
    SFU_UART_CLK_ENABLE();
 800a650:	f503 3394 	add.w	r3, r3, #75776	; 0x12800
 800a654:	2400      	movs	r4, #0
 800a656:	9400      	str	r4, [sp, #0]
 800a658:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    HAL_GPIO_Init(SFU_UART_TX_GPIO_PORT, &GPIO_InitStruct);
 800a65a:	481c      	ldr	r0, [pc, #112]	; (800a6cc <SFU_LL_UART_MspInit+0x88>)
    SFU_UART_CLK_ENABLE();
 800a65c:	f042 0210 	orr.w	r2, r2, #16
 800a660:	645a      	str	r2, [r3, #68]	; 0x44
 800a662:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a664:	f002 0210 	and.w	r2, r2, #16
 800a668:	9200      	str	r2, [sp, #0]
 800a66a:	9a00      	ldr	r2, [sp, #0]
    SFU_UART_TX_GPIO_CLK_ENABLE();
 800a66c:	9401      	str	r4, [sp, #4]
 800a66e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a670:	f042 0201 	orr.w	r2, r2, #1
 800a674:	631a      	str	r2, [r3, #48]	; 0x30
 800a676:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a678:	f002 0201 	and.w	r2, r2, #1
 800a67c:	9201      	str	r2, [sp, #4]
 800a67e:	9a01      	ldr	r2, [sp, #4]
    SFU_UART_RX_GPIO_CLK_ENABLE();
 800a680:	9402      	str	r4, [sp, #8]
 800a682:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a684:	f042 0201 	orr.w	r2, r2, #1
 800a688:	631a      	str	r2, [r3, #48]	; 0x30
 800a68a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a68c:	9405      	str	r4, [sp, #20]
    SFU_UART_RX_GPIO_CLK_ENABLE();
 800a68e:	f003 0301 	and.w	r3, r3, #1
 800a692:	9302      	str	r3, [sp, #8]
 800a694:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a696:	2702      	movs	r7, #2
 800a698:	f44f 7300 	mov.w	r3, #512	; 0x200
    GPIO_InitStruct.Alternate = SFU_UART_TX_AF;
 800a69c:	2603      	movs	r6, #3
 800a69e:	2507      	movs	r5, #7
    HAL_GPIO_Init(SFU_UART_TX_GPIO_PORT, &GPIO_InitStruct);
 800a6a0:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a6a2:	e9cd 3703 	strd	r3, r7, [sp, #12]
    GPIO_InitStruct.Alternate = SFU_UART_TX_AF;
 800a6a6:	e9cd 6506 	strd	r6, r5, [sp, #24]
    HAL_GPIO_Init(SFU_UART_TX_GPIO_PORT, &GPIO_InitStruct);
 800a6aa:	f000 fd63 	bl	800b174 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = SFU_UART_RX_PIN;
 800a6ae:	f44f 6380 	mov.w	r3, #1024	; 0x400
    HAL_GPIO_Init(SFU_UART_RX_GPIO_PORT, &GPIO_InitStruct);
 800a6b2:	4806      	ldr	r0, [pc, #24]	; (800a6cc <SFU_LL_UART_MspInit+0x88>)
    GPIO_InitStruct.Alternate = SFU_UART_RX_AF;
 800a6b4:	9507      	str	r5, [sp, #28]
    HAL_GPIO_Init(SFU_UART_RX_GPIO_PORT, &GPIO_InitStruct);
 800a6b6:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a6b8:	e9cd 3703 	strd	r3, r7, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a6bc:	e9cd 4605 	strd	r4, r6, [sp, #20]
    HAL_GPIO_Init(SFU_UART_RX_GPIO_PORT, &GPIO_InitStruct);
 800a6c0:	f000 fd58 	bl	800b174 <HAL_GPIO_Init>
}
 800a6c4:	b009      	add	sp, #36	; 0x24
 800a6c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a6c8:	40011000 	.word	0x40011000
 800a6cc:	40020000 	.word	0x40020000

0800a6d0 <SFU_LL_BufferCheck_in_se_ram>:
  * @param pBuff: Secure Engine protected function ID.
  * @param length: length of buffer in bytes
  * @retval SE_ErrorStatus SE_SUCCESS for buffer in se ram, SE_ERROR otherwise.
  */
SFU_ErrorStatus SFU_LL_BufferCheck_in_se_ram(const void *pBuff, uint32_t length)
{
 800a6d0:	4602      	mov	r2, r0
  SFU_ErrorStatus e_ret_status = SFU_ERROR;
  uint32_t addr_start = (uint32_t)pBuff;
  uint32_t addr_end = addr_start + length - 1U;

  /* Check if length is positive with no overflow and included in the correct range */
  if ((length != 0U) && (!((0xFFFFFFFFUL - addr_start) < length))
 800a6d2:	b179      	cbz	r1, 800a6f4 <SFU_LL_BufferCheck_in_se_ram+0x24>
 800a6d4:	43c3      	mvns	r3, r0
 800a6d6:	428b      	cmp	r3, r1
 800a6d8:	d30c      	bcc.n	800a6f4 <SFU_LL_BufferCheck_in_se_ram+0x24>
      && ((addr_end  <= SE_REGION_RAM_END) && (addr_start >= SE_REGION_RAM_START)))
 800a6da:	4b08      	ldr	r3, [pc, #32]	; (800a6fc <SFU_LL_BufferCheck_in_se_ram+0x2c>)
  uint32_t addr_end = addr_start + length - 1U;
 800a6dc:	3901      	subs	r1, #1
 800a6de:	4401      	add	r1, r0
      && ((addr_end  <= SE_REGION_RAM_END) && (addr_start >= SE_REGION_RAM_START)))
 800a6e0:	4299      	cmp	r1, r3
 800a6e2:	d807      	bhi.n	800a6f4 <SFU_LL_BufferCheck_in_se_ram+0x24>
  {
    e_ret_status = SFU_SUCCESS;
 800a6e4:	4906      	ldr	r1, [pc, #24]	; (800a700 <SFU_LL_BufferCheck_in_se_ram+0x30>)
 800a6e6:	4807      	ldr	r0, [pc, #28]	; (800a704 <SFU_LL_BufferCheck_in_se_ram+0x34>)
 800a6e8:	f641 73e1 	movw	r3, #8161	; 0x1fe1
 800a6ec:	428a      	cmp	r2, r1
 800a6ee:	bf38      	it	cc
 800a6f0:	4618      	movcc	r0, r3
 800a6f2:	4770      	bx	lr
  }
  else
  {
    e_ret_status = SFU_ERROR;
 800a6f4:	f641 70e1 	movw	r0, #8161	; 0x1fe1
  }
  return e_ret_status;
}
 800a6f8:	4770      	bx	lr
 800a6fa:	bf00      	nop
 800a6fc:	20000fff 	.word	0x20000fff
 800a700:	20000000 	.word	0x20000000
 800a704:	00122f11 	.word	0x00122f11

0800a708 <SFU_LL_Buffer_in_ram>:
  SFU_ErrorStatus ret = SFU_ERROR;
  uint32_t addr_start = (uint32_t)pBuff;
  uint32_t addr_end = addr_start + Length - 1U;

  /* Check if length is positive with no overflow and included in the correct range */
    if ((Length != 0U) && (!((0xFFFFFFFFUL - addr_start) < Length))
 800a708:	b179      	cbz	r1, 800a72a <SFU_LL_Buffer_in_ram+0x22>
 800a70a:	43c3      	mvns	r3, r0
 800a70c:	428b      	cmp	r3, r1
 800a70e:	d30c      	bcc.n	800a72a <SFU_LL_Buffer_in_ram+0x22>
        && (addr_start >= SRAM1_BASE) && (addr_end < 0x2004FFFFU))
 800a710:	f1b0 5f00 	cmp.w	r0, #536870912	; 0x20000000
 800a714:	d309      	bcc.n	800a72a <SFU_LL_Buffer_in_ram+0x22>
      {
        ret = SFU_SUCCESS;
 800a716:	4a06      	ldr	r2, [pc, #24]	; (800a730 <SFU_LL_Buffer_in_ram+0x28>)
 800a718:	4b06      	ldr	r3, [pc, #24]	; (800a734 <SFU_LL_Buffer_in_ram+0x2c>)
  uint32_t addr_end = addr_start + Length - 1U;
 800a71a:	3901      	subs	r1, #1
 800a71c:	4401      	add	r1, r0
        ret = SFU_SUCCESS;
 800a71e:	f641 70e1 	movw	r0, #8161	; 0x1fe1
 800a722:	4291      	cmp	r1, r2
 800a724:	bf38      	it	cc
 800a726:	4618      	movcc	r0, r3
 800a728:	4770      	bx	lr
  SFU_ErrorStatus ret = SFU_ERROR;
 800a72a:	f641 70e1 	movw	r0, #8161	; 0x1fe1
      }
  return ret;
}
 800a72e:	4770      	bx	lr
 800a730:	2004ffff 	.word	0x2004ffff
 800a734:	00122f11 	.word	0x00122f11

0800a738 <SFU_LL_FLASH_Init>:
  * @brief  Initialize internal and external flash interface (OSPI/QSPI)
  * @param  none
  * @retval SFU_ErrorStatus SFU_SUCCESS if successful, SFU_ERROR otherwise.
  */
SFU_ErrorStatus SFU_LL_FLASH_Init(void)
{
 800a738:	b508      	push	{r3, lr}
  SFU_ErrorStatus e_ret_status = SFU_SUCCESS;

  e_ret_status = SFU_LL_FLASH_INT_Init();
 800a73a:	f000 f867 	bl	800a80c <SFU_LL_FLASH_INT_Init>
  if (e_ret_status == SFU_SUCCESS)
 800a73e:	4b04      	ldr	r3, [pc, #16]	; (800a750 <SFU_LL_FLASH_Init+0x18>)
 800a740:	4298      	cmp	r0, r3
 800a742:	d103      	bne.n	800a74c <SFU_LL_FLASH_Init+0x14>
  {
    e_ret_status = SFU_LL_FLASH_EXT_Init();
  }
  return e_ret_status;
}
 800a744:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    e_ret_status = SFU_LL_FLASH_EXT_Init();
 800a748:	f000 b836 	b.w	800a7b8 <SFU_LL_FLASH_EXT_Init>
}
 800a74c:	bd08      	pop	{r3, pc}
 800a74e:	bf00      	nop
 800a750:	00122f11 	.word	0x00122f11

0800a754 <SFU_LL_FLASH_Erase_Size>:
  */
SFU_ErrorStatus SFU_LL_FLASH_Erase_Size(SFU_FLASH_StatusTypeDef *pFlashStatus, uint8_t *pStart, uint32_t Length)
{

  /* Check Flash start address */
  if ((uint32_t) pStart < EXTERNAL_FLASH_ADDRESS)
 800a754:	f1b1 4f10 	cmp.w	r1, #2415919104	; 0x90000000
 800a758:	d201      	bcs.n	800a75e <SFU_LL_FLASH_Erase_Size+0xa>
  {
    return SFU_LL_FLASH_INT_Erase_Size(pFlashStatus, pStart, Length);
 800a75a:	f000 b907 	b.w	800a96c <SFU_LL_FLASH_INT_Erase_Size>
  }
  else
  {
    return SFU_LL_FLASH_EXT_Erase_Size(pFlashStatus, pStart, Length);
 800a75e:	f000 b82f 	b.w	800a7c0 <SFU_LL_FLASH_EXT_Erase_Size>

0800a762 <SFU_LL_FLASH_Write>:
  */
SFU_ErrorStatus SFU_LL_FLASH_Write(SFU_FLASH_StatusTypeDef *pFlashStatus, uint8_t  *pDestination,
                                   const uint8_t *pSource, uint32_t Length)
{
  /* Check Flash destination address */
  if ((uint32_t) pDestination < EXTERNAL_FLASH_ADDRESS)
 800a762:	f1b1 4f10 	cmp.w	r1, #2415919104	; 0x90000000
 800a766:	d201      	bcs.n	800a76c <SFU_LL_FLASH_Write+0xa>
  {
    return SFU_LL_FLASH_INT_Write(pFlashStatus, pDestination, pSource, Length);
 800a768:	f000 b854 	b.w	800a814 <SFU_LL_FLASH_INT_Write>
  }
  else
  {
    return SFU_LL_FLASH_EXT_Write(pFlashStatus, pDestination, pSource, Length);
 800a76c:	f000 b82b 	b.w	800a7c6 <SFU_LL_FLASH_EXT_Write>

0800a770 <SFU_LL_FLASH_Read>:
  * @retval SFU_ErrorStatus SFU_SUCCESS if successful, SFU_ERROR otherwise.
  */
SFU_ErrorStatus SFU_LL_FLASH_Read(uint8_t *pDestination, const uint8_t *pSource, uint32_t Length)
{
  /* Check Flash source address */
  if ((uint32_t) pSource < EXTERNAL_FLASH_ADDRESS)
 800a770:	f1b1 4f10 	cmp.w	r1, #2415919104	; 0x90000000
 800a774:	d201      	bcs.n	800a77a <SFU_LL_FLASH_Read+0xa>
  {
    return SFU_LL_FLASH_INT_Read(pDestination, pSource, Length);
 800a776:	f000 b8b5 	b.w	800a8e4 <SFU_LL_FLASH_INT_Read>
  }
  else
  {
    return SFU_LL_FLASH_EXT_Read(pDestination, pSource, Length);
 800a77a:	f000 b827 	b.w	800a7cc <SFU_LL_FLASH_EXT_Read>

0800a77e <SFU_LL_FLASH_Compare>:
  * @retval SFU_ErrorStatus SFU_SUCCESS if successful, SFU_ERROR otherwise.
  */
SFU_ErrorStatus SFU_LL_FLASH_Compare(const uint8_t *pFlash, const uint32_t Pattern1, const uint32_t Pattern2, uint32_t Length)
{
  /* Check Flash source address */
  if ((uint32_t) pFlash < EXTERNAL_FLASH_ADDRESS)
 800a77e:	f1b0 4f10 	cmp.w	r0, #2415919104	; 0x90000000
 800a782:	d201      	bcs.n	800a788 <SFU_LL_FLASH_Compare+0xa>
  {
    return SFU_LL_FLASH_INT_Compare(pFlash, Pattern1, Pattern2, Length);
 800a784:	f000 b8d2 	b.w	800a92c <SFU_LL_FLASH_INT_Compare>
  }
  else
  {
    return SFU_LL_FLASH_EXT_Compare(pFlash, Pattern1, Pattern2, Length);
 800a788:	f000 b823 	b.w	800a7d2 <SFU_LL_FLASH_EXT_Compare>

0800a78c <SFU_LL_FLASH_Config_Exe>:
   * Internal flash : nothing to do
   * External flash : configure memory mapped mode
   */

  /* Check Flash address */
  if (SlotStartAdd[SlotNumber] < EXTERNAL_FLASH_ADDRESS)
 800a78c:	4b04      	ldr	r3, [pc, #16]	; (800a7a0 <SFU_LL_FLASH_Config_Exe+0x14>)
 800a78e:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 800a792:	f1b3 4f10 	cmp.w	r3, #2415919104	; 0x90000000
 800a796:	d301      	bcc.n	800a79c <SFU_LL_FLASH_Config_Exe+0x10>
  {
    return SFU_SUCCESS;
  }
  else
  {
    return SFU_LL_FLASH_EXT_Config_Exe(SlotNumber);
 800a798:	f000 b81e 	b.w	800a7d8 <SFU_LL_FLASH_EXT_Config_Exe>
  }
}
 800a79c:	4801      	ldr	r0, [pc, #4]	; (800a7a4 <SFU_LL_FLASH_Config_Exe+0x18>)
 800a79e:	4770      	bx	lr
 800a7a0:	0800ce2c 	.word	0x0800ce2c
 800a7a4:	00122f11 	.word	0x00122f11

0800a7a8 <SFU_LL_FLASH_GetSector>:
  * @retval The sector of a given address
  */
uint32_t SFU_LL_FLASH_GetSector(uint32_t Addr)
{
  /* Check Flash address */
  if (Addr < EXTERNAL_FLASH_ADDRESS)
 800a7a8:	f1b0 4f10 	cmp.w	r0, #2415919104	; 0x90000000
 800a7ac:	d201      	bcs.n	800a7b2 <SFU_LL_FLASH_GetSector+0xa>
  {
    return SFU_LL_FLASH_INT_GetSector(Addr);
 800a7ae:	f000 b8cf 	b.w	800a950 <SFU_LL_FLASH_INT_GetSector>
  }
  else
  {
    return INVALID_SECTOR;                       /* Sector number is not used in SBSFU application for external flash */
  }
}
 800a7b2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a7b6:	4770      	bx	lr

0800a7b8 <SFU_LL_FLASH_EXT_Init>:
       systematically during startup phase */

SFU_ErrorStatus SFU_LL_FLASH_EXT_Init(void)
{
  return SFU_SUCCESS;
}
 800a7b8:	4800      	ldr	r0, [pc, #0]	; (800a7bc <SFU_LL_FLASH_EXT_Init+0x4>)
 800a7ba:	4770      	bx	lr
 800a7bc:	00122f11 	.word	0x00122f11

0800a7c0 <SFU_LL_FLASH_EXT_Erase_Size>:
{
  UNUSED(pFlashStatus);
  UNUSED(pStart);
  UNUSED(Length);
  return SFU_ERROR;
}
 800a7c0:	f641 70e1 	movw	r0, #8161	; 0x1fe1
 800a7c4:	4770      	bx	lr

0800a7c6 <SFU_LL_FLASH_EXT_Write>:
  UNUSED(pFlashStatus);
  UNUSED(pDestination);
  UNUSED(pSource);
  UNUSED(Length);
  return SFU_ERROR;
}
 800a7c6:	f641 70e1 	movw	r0, #8161	; 0x1fe1
 800a7ca:	4770      	bx	lr

0800a7cc <SFU_LL_FLASH_EXT_Read>:
 800a7cc:	f641 70e1 	movw	r0, #8161	; 0x1fe1
 800a7d0:	4770      	bx	lr

0800a7d2 <SFU_LL_FLASH_EXT_Compare>:
  UNUSED(pFlash);
  UNUSED(Pattern1);
  UNUSED(Pattern2);
  UNUSED(Length);
  return SFU_ERROR;
}
 800a7d2:	f641 70e1 	movw	r0, #8161	; 0x1fe1
 800a7d6:	4770      	bx	lr

0800a7d8 <SFU_LL_FLASH_EXT_Config_Exe>:
SFU_ErrorStatus SFU_LL_FLASH_EXT_Config_Exe(uint32_t SlotNumber)
{
  UNUSED(SlotNumber);
  return SFU_SUCCESS;
}
 800a7d8:	4800      	ldr	r0, [pc, #0]	; (800a7dc <SFU_LL_FLASH_EXT_Config_Exe+0x4>)
 800a7da:	4770      	bx	lr
 800a7dc:	00122f11 	.word	0x00122f11

0800a7e0 <SFU_LL_FLASH_INT_Clear_Error>:
  * @brief  Clear error flags raised during previous operation
  * @param  None.
  * @retval SFU_ErrorStatus SFU_SUCCESS if successful, SFU_ERROR otherwise.
  */
static SFU_ErrorStatus SFU_LL_FLASH_INT_Clear_Error(void)
{
 800a7e0:	b508      	push	{r3, lr}
  SFU_ErrorStatus e_ret_status = SFU_ERROR;

  /* Unlock the Program memory */
  if (HAL_FLASH_Unlock() == HAL_OK)
 800a7e2:	f000 fb53 	bl	800ae8c <HAL_FLASH_Unlock>
 800a7e6:	b110      	cbz	r0, 800a7ee <SFU_LL_FLASH_INT_Clear_Error+0xe>
  SFU_ErrorStatus e_ret_status = SFU_ERROR;
 800a7e8:	f641 70e1 	movw	r0, #8161	; 0x1fe1
    }
  }

  return e_ret_status;

}
 800a7ec:	bd08      	pop	{r3, pc}
    __HAL_FLASH_CLEAR_FLAG(FLASH_SR_WRPERR | FLASH_SR_PGAERR | FLASH_SR_PGPERR | FLASH_SR_PGSERR | FLASH_SR_RDERR);
 800a7ee:	4b05      	ldr	r3, [pc, #20]	; (800a804 <SFU_LL_FLASH_INT_Clear_Error+0x24>)
 800a7f0:	f44f 72f8 	mov.w	r2, #496	; 0x1f0
 800a7f4:	60da      	str	r2, [r3, #12]
    if (HAL_FLASH_Lock() == HAL_OK)
 800a7f6:	f000 fb5b 	bl	800aeb0 <HAL_FLASH_Lock>
 800a7fa:	2800      	cmp	r0, #0
 800a7fc:	d1f4      	bne.n	800a7e8 <SFU_LL_FLASH_INT_Clear_Error+0x8>
      e_ret_status = SFU_SUCCESS;
 800a7fe:	4802      	ldr	r0, [pc, #8]	; (800a808 <SFU_LL_FLASH_INT_Clear_Error+0x28>)
  return e_ret_status;
 800a800:	e7f4      	b.n	800a7ec <SFU_LL_FLASH_INT_Clear_Error+0xc>
 800a802:	bf00      	nop
 800a804:	40023c00 	.word	0x40023c00
 800a808:	00122f11 	.word	0x00122f11

0800a80c <SFU_LL_FLASH_INT_Init>:
}
 800a80c:	4800      	ldr	r0, [pc, #0]	; (800a810 <SFU_LL_FLASH_INT_Init+0x4>)
 800a80e:	4770      	bx	lr
 800a810:	00122f11 	.word	0x00122f11

0800a814 <SFU_LL_FLASH_INT_Write>:
{
 800a814:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a818:	460c      	mov	r4, r1
 800a81a:	4616      	mov	r6, r2
 800a81c:	461f      	mov	r7, r3
  uint32_t destination = (uint32_t)pDestination;
 800a81e:	4688      	mov	r8, r1
  if ((pFlashStatus == NULL) || (pSource == NULL))
 800a820:	4605      	mov	r5, r0
 800a822:	2800      	cmp	r0, #0
 800a824:	d033      	beq.n	800a88e <SFU_LL_FLASH_INT_Write+0x7a>
 800a826:	b392      	cbz	r2, 800a88e <SFU_LL_FLASH_INT_Write+0x7a>
    if ((destination >= SlotHeaderAdd[SLOT_ACTIVE_1 + i]) &&
 800a828:	482b      	ldr	r0, [pc, #172]	; (800a8d8 <SFU_LL_FLASH_INT_Write+0xc4>)
 800a82a:	6840      	ldr	r0, [r0, #4]
 800a82c:	4288      	cmp	r0, r1
 800a82e:	d816      	bhi.n	800a85e <SFU_LL_FLASH_INT_Write+0x4a>
        ((destination + Length) <= (SlotHeaderAdd[SLOT_ACTIVE_1 + i] + SFU_IMG_IMAGE_OFFSET)))
 800a830:	441c      	add	r4, r3
 800a832:	f500 7000 	add.w	r0, r0, #512	; 0x200
    if ((destination >= SlotHeaderAdd[SLOT_ACTIVE_1 + i]) &&
 800a836:	4284      	cmp	r4, r0
 800a838:	d811      	bhi.n	800a85e <SFU_LL_FLASH_INT_Write+0x4a>
  if ((inside_header == 1U) && (Length != 0U))
 800a83a:	b183      	cbz	r3, 800a85e <SFU_LL_FLASH_INT_Write+0x4a>
    SE_ErrorStatus se_ret_status = SE_SFU_IMG_Write(&se_status, (uint8_t *)destination, pSource, Length);
 800a83c:	a801      	add	r0, sp, #4
 800a83e:	f7fd fd19 	bl	8008274 <SE_SFU_IMG_Write>
    if (se_ret_status == SE_SUCCESS)
 800a842:	4b26      	ldr	r3, [pc, #152]	; (800a8dc <SFU_LL_FLASH_INT_Write+0xc8>)
      *pFlashStatus = SFU_FLASH_ERROR;
 800a844:	4c26      	ldr	r4, [pc, #152]	; (800a8e0 <SFU_LL_FLASH_INT_Write+0xcc>)
 800a846:	4298      	cmp	r0, r3
 800a848:	f641 70e1 	movw	r0, #8161	; 0x1fe1
 800a84c:	bf0e      	itee	eq
 800a84e:	2305      	moveq	r3, #5
 800a850:	2300      	movne	r3, #0
 800a852:	4604      	movne	r4, r0
        *pFlashStatus = SFU_FLASH_ERR_HAL;
 800a854:	702b      	strb	r3, [r5, #0]
}
 800a856:	4620      	mov	r0, r4
 800a858:	b003      	add	sp, #12
 800a85a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    *pFlashStatus = SFU_FLASH_ERROR;
 800a85e:	2300      	movs	r3, #0
 800a860:	702b      	strb	r3, [r5, #0]
    e_ret_status = SFU_LL_FLASH_INT_Clear_Error();
 800a862:	f7ff ffbd 	bl	800a7e0 <SFU_LL_FLASH_INT_Clear_Error>
    if (e_ret_status == SFU_SUCCESS)
 800a866:	4b1e      	ldr	r3, [pc, #120]	; (800a8e0 <SFU_LL_FLASH_INT_Write+0xcc>)
 800a868:	4298      	cmp	r0, r3
    e_ret_status = SFU_LL_FLASH_INT_Clear_Error();
 800a86a:	4604      	mov	r4, r0
    if (e_ret_status == SFU_SUCCESS)
 800a86c:	d1f3      	bne.n	800a856 <SFU_LL_FLASH_INT_Write+0x42>
      if (HAL_FLASH_Unlock() != HAL_OK)
 800a86e:	f000 fb0d 	bl	800ae8c <HAL_FLASH_Unlock>
 800a872:	4681      	mov	r9, r0
 800a874:	b970      	cbnz	r0, 800a894 <SFU_LL_FLASH_INT_Write+0x80>
 800a876:	4437      	add	r7, r6
        for (i = 0U; (i < Length) && (e_ret_status == SFU_SUCCESS); i += sizeof(SFU_LL_FLASH_write_t))
 800a878:	46a2      	mov	sl, r4
            *pFlashStatus = SFU_FLASH_ERR_WRITING;
 800a87a:	f04f 0b03 	mov.w	fp, #3
        for (i = 0U; (i < Length) && (e_ret_status == SFU_SUCCESS); i += sizeof(SFU_LL_FLASH_write_t))
 800a87e:	42be      	cmp	r6, r7
 800a880:	d113      	bne.n	800a8aa <SFU_LL_FLASH_INT_Write+0x96>
        if (HAL_FLASH_Lock() != HAL_OK)
 800a882:	f000 fb15 	bl	800aeb0 <HAL_FLASH_Lock>
 800a886:	2800      	cmp	r0, #0
 800a888:	d0e5      	beq.n	800a856 <SFU_LL_FLASH_INT_Write+0x42>
          *pFlashStatus = SFU_FLASH_ERR_HAL;
 800a88a:	2301      	movs	r3, #1
 800a88c:	702b      	strb	r3, [r5, #0]
    return SFU_ERROR;
 800a88e:	f641 74e1 	movw	r4, #8161	; 0x1fe1
 800a892:	e7e0      	b.n	800a856 <SFU_LL_FLASH_INT_Write+0x42>
        *pFlashStatus = SFU_FLASH_ERR_HAL;
 800a894:	2301      	movs	r3, #1
 800a896:	e7dd      	b.n	800a854 <SFU_LL_FLASH_INT_Write+0x40>
              *pFlashStatus = SFU_FLASH_SUCCESS;
 800a898:	2305      	movs	r3, #5
              destination = destination + sizeof(SFU_LL_FLASH_write_t);
 800a89a:	f108 0801 	add.w	r8, r8, #1
              *pFlashStatus = SFU_FLASH_SUCCESS;
 800a89e:	702b      	strb	r3, [r5, #0]
        for (i = 0U; (i < Length) && (e_ret_status == SFU_SUCCESS); i += sizeof(SFU_LL_FLASH_write_t))
 800a8a0:	3601      	adds	r6, #1
 800a8a2:	e7ec      	b.n	800a87e <SFU_LL_FLASH_INT_Write+0x6a>
            *pFlashStatus = SFU_FLASH_ERR_WRITING;
 800a8a4:	f885 b000 	strb.w	fp, [r5]
 800a8a8:	e012      	b.n	800a8d0 <SFU_LL_FLASH_INT_Write+0xbc>
        for (i = 0U; (i < Length) && (e_ret_status == SFU_SUCCESS); i += sizeof(SFU_LL_FLASH_write_t))
 800a8aa:	4554      	cmp	r4, sl
 800a8ac:	d1e9      	bne.n	800a882 <SFU_LL_FLASH_INT_Write+0x6e>
          *pFlashStatus = SFU_FLASH_ERROR;
 800a8ae:	f885 9000 	strb.w	r9, [r5]
          if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_BYTE, destination, *((uint8_t *)(source + i))) == HAL_OK)
 800a8b2:	2300      	movs	r3, #0
 800a8b4:	7832      	ldrb	r2, [r6, #0]
 800a8b6:	4641      	mov	r1, r8
 800a8b8:	4618      	mov	r0, r3
 800a8ba:	f000 fb47 	bl	800af4c <HAL_FLASH_Program>
 800a8be:	2800      	cmp	r0, #0
 800a8c0:	d1f0      	bne.n	800a8a4 <SFU_LL_FLASH_INT_Write+0x90>
            if (*(uint8_t *)destination != *(uint8_t *)(source + i))
 800a8c2:	f898 2000 	ldrb.w	r2, [r8]
 800a8c6:	7833      	ldrb	r3, [r6, #0]
 800a8c8:	429a      	cmp	r2, r3
 800a8ca:	d0e5      	beq.n	800a898 <SFU_LL_FLASH_INT_Write+0x84>
              *pFlashStatus = SFU_FLASH_ERR_WRITINGCTRL;
 800a8cc:	2304      	movs	r3, #4
 800a8ce:	702b      	strb	r3, [r5, #0]
            e_ret_status = SFU_ERROR;
 800a8d0:	f641 74e1 	movw	r4, #8161	; 0x1fe1
 800a8d4:	e7e4      	b.n	800a8a0 <SFU_LL_FLASH_INT_Write+0x8c>
 800a8d6:	bf00      	nop
 800a8d8:	0800ce6c 	.word	0x0800ce6c
 800a8dc:	0012310f 	.word	0x0012310f
 800a8e0:	00122f11 	.word	0x00122f11

0800a8e4 <SFU_LL_FLASH_INT_Read>:
    if ((source >= SlotHeaderAdd[SLOT_ACTIVE_1 + i]) &&
 800a8e4:	4b0e      	ldr	r3, [pc, #56]	; (800a920 <SFU_LL_FLASH_INT_Read+0x3c>)
 800a8e6:	685b      	ldr	r3, [r3, #4]
 800a8e8:	428b      	cmp	r3, r1
{
 800a8ea:	b513      	push	{r0, r1, r4, lr}
    if ((source >= SlotHeaderAdd[SLOT_ACTIVE_1 + i]) &&
 800a8ec:	d814      	bhi.n	800a918 <SFU_LL_FLASH_INT_Read+0x34>
        ((source + Length) <= (SlotHeaderAdd[SLOT_ACTIVE_1 + i] + SFU_IMG_IMAGE_OFFSET)))
 800a8ee:	188c      	adds	r4, r1, r2
 800a8f0:	f503 7300 	add.w	r3, r3, #512	; 0x200
    if ((source >= SlotHeaderAdd[SLOT_ACTIVE_1 + i]) &&
 800a8f4:	429c      	cmp	r4, r3
 800a8f6:	d80f      	bhi.n	800a918 <SFU_LL_FLASH_INT_Read+0x34>
    se_ret_status = SE_SFU_IMG_Read(&se_status, pDestination, (uint8_t *)source, Length);
 800a8f8:	4613      	mov	r3, r2
 800a8fa:	460a      	mov	r2, r1
 800a8fc:	4601      	mov	r1, r0
 800a8fe:	a801      	add	r0, sp, #4
 800a900:	f7fd fc80 	bl	8008204 <SE_SFU_IMG_Read>
  SFU_ErrorStatus e_ret_status = SFU_ERROR;
 800a904:	4907      	ldr	r1, [pc, #28]	; (800a924 <SFU_LL_FLASH_INT_Read+0x40>)
 800a906:	4b08      	ldr	r3, [pc, #32]	; (800a928 <SFU_LL_FLASH_INT_Read+0x44>)
 800a908:	f641 72e1 	movw	r2, #8161	; 0x1fe1
 800a90c:	4288      	cmp	r0, r1
 800a90e:	bf18      	it	ne
 800a910:	4613      	movne	r3, r2
}
 800a912:	4618      	mov	r0, r3
 800a914:	b002      	add	sp, #8
 800a916:	bd10      	pop	{r4, pc}
    (void) memcpy(pDestination, (uint8_t *)source, Length);
 800a918:	f001 f960 	bl	800bbdc <memcpy>
    e_ret_status = SFU_SUCCESS;
 800a91c:	4b02      	ldr	r3, [pc, #8]	; (800a928 <SFU_LL_FLASH_INT_Read+0x44>)
 800a91e:	e7f8      	b.n	800a912 <SFU_LL_FLASH_INT_Read+0x2e>
 800a920:	0800ce6c 	.word	0x0800ce6c
 800a924:	0012310f 	.word	0x0012310f
 800a928:	00122f11 	.word	0x00122f11

0800a92c <SFU_LL_FLASH_INT_Compare>:
{
 800a92c:	b530      	push	{r4, r5, lr}
  for ( i = 0U; i < Length; i += 4U)
 800a92e:	2400      	movs	r4, #0
 800a930:	429c      	cmp	r4, r3
 800a932:	d301      	bcc.n	800a938 <SFU_LL_FLASH_INT_Compare+0xc>
  return SFU_SUCCESS;
 800a934:	4805      	ldr	r0, [pc, #20]	; (800a94c <SFU_LL_FLASH_INT_Compare+0x20>)
}
 800a936:	bd30      	pop	{r4, r5, pc}
    if ((*(uint32_t *)(flash + i) != Pattern1) &&  (*(uint32_t *)(flash + i) != Pattern2))
 800a938:	5905      	ldr	r5, [r0, r4]
 800a93a:	428d      	cmp	r5, r1
 800a93c:	d001      	beq.n	800a942 <SFU_LL_FLASH_INT_Compare+0x16>
 800a93e:	4295      	cmp	r5, r2
 800a940:	d101      	bne.n	800a946 <SFU_LL_FLASH_INT_Compare+0x1a>
  for ( i = 0U; i < Length; i += 4U)
 800a942:	3404      	adds	r4, #4
 800a944:	e7f4      	b.n	800a930 <SFU_LL_FLASH_INT_Compare+0x4>
      return SFU_ERROR;
 800a946:	f641 70e1 	movw	r0, #8161	; 0x1fe1
 800a94a:	e7f4      	b.n	800a936 <SFU_LL_FLASH_INT_Compare+0xa>
 800a94c:	00122f11 	.word	0x00122f11

0800a950 <SFU_LL_FLASH_INT_GetSector>:
{
 800a950:	b510      	push	{r4, lr}
  while (Add >= FlashSectorsAddress[sector + 1U])
 800a952:	4c05      	ldr	r4, [pc, #20]	; (800a968 <SFU_LL_FLASH_INT_GetSector+0x18>)
{
 800a954:	4602      	mov	r2, r0
  uint32_t sector = 0U;
 800a956:	2300      	movs	r3, #0
  while (Add >= FlashSectorsAddress[sector + 1U])
 800a958:	4618      	mov	r0, r3
 800a95a:	3301      	adds	r3, #1
 800a95c:	f854 1023 	ldr.w	r1, [r4, r3, lsl #2]
 800a960:	4291      	cmp	r1, r2
 800a962:	d9f9      	bls.n	800a958 <SFU_LL_FLASH_INT_GetSector+0x8>
}
 800a964:	bd10      	pop	{r4, pc}
 800a966:	bf00      	nop
 800a968:	20001008 	.word	0x20001008

0800a96c <SFU_LL_FLASH_INT_Erase_Size>:
{
 800a96c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a970:	b087      	sub	sp, #28
  uint32_t sector_error = 0U;
 800a972:	2300      	movs	r3, #0
{
 800a974:	4689      	mov	r9, r1
 800a976:	4614      	mov	r4, r2
  uint32_t sector_error = 0U;
 800a978:	9300      	str	r3, [sp, #0]
  if (pFlashStatus == NULL)
 800a97a:	4606      	mov	r6, r0
 800a97c:	b3a8      	cbz	r0, 800a9ea <SFU_LL_FLASH_INT_Erase_Size+0x7e>
  *pFlashStatus = SFU_FLASH_SUCCESS;
 800a97e:	2305      	movs	r3, #5
 800a980:	7003      	strb	r3, [r0, #0]
  e_ret_status = SFU_LL_FLASH_INT_Clear_Error();
 800a982:	f7ff ff2d 	bl	800a7e0 <SFU_LL_FLASH_INT_Clear_Error>
  if (e_ret_status == SFU_SUCCESS)
 800a986:	4b1d      	ldr	r3, [pc, #116]	; (800a9fc <SFU_LL_FLASH_INT_Erase_Size+0x90>)
 800a988:	4298      	cmp	r0, r3
  e_ret_status = SFU_LL_FLASH_INT_Clear_Error();
 800a98a:	4605      	mov	r5, r0
  if (e_ret_status == SFU_SUCCESS)
 800a98c:	d132      	bne.n	800a9f4 <SFU_LL_FLASH_INT_Erase_Size+0x88>
    if (HAL_FLASH_Unlock() == HAL_OK)
 800a98e:	f000 fa7d 	bl	800ae8c <HAL_FLASH_Unlock>
 800a992:	4680      	mov	r8, r0
 800a994:	bb60      	cbnz	r0, 800a9f0 <SFU_LL_FLASH_INT_Erase_Size+0x84>
      first_sector = SFU_LL_FLASH_INT_GetSector(start);
 800a996:	4648      	mov	r0, r9
 800a998:	f7ff ffda 	bl	800a950 <SFU_LL_FLASH_INT_GetSector>
 800a99c:	4607      	mov	r7, r0
      nb_sectors = SFU_LL_FLASH_INT_GetSector(start + length - 1U) - first_sector + 1U;
 800a99e:	1e60      	subs	r0, r4, #1
 800a9a0:	4448      	add	r0, r9
 800a9a2:	f7ff ffd5 	bl	800a950 <SFU_LL_FLASH_INT_GetSector>
      p_erase_init.TypeErase     = FLASH_TYPEERASE_SECTORS;
 800a9a6:	f8cd 8004 	str.w	r8, [sp, #4]
      nb_sectors = SFU_LL_FLASH_INT_GetSector(start + length - 1U) - first_sector + 1U;
 800a9aa:	1c44      	adds	r4, r0, #1
      p_erase_init.VoltageRange  = FLASH_VOLTAGE_RANGE_3;
 800a9ac:	f04f 0802 	mov.w	r8, #2
      nb_sectors = SFU_LL_FLASH_INT_GetSector(start + length - 1U) - first_sector + 1U;
 800a9b0:	1be4      	subs	r4, r4, r7
      p_erase_init.VoltageRange  = FLASH_VOLTAGE_RANGE_3;
 800a9b2:	f8cd 8014 	str.w	r8, [sp, #20]
        chunk_nb_sectors = (nb_sectors >= NB_PAGE_SECTOR_PER_ERASE) ? NB_PAGE_SECTOR_PER_ERASE : nb_sectors;
 800a9b6:	2c02      	cmp	r4, #2
 800a9b8:	4623      	mov	r3, r4
        if (HAL_FLASHEx_Erase(&p_erase_init, &sector_error) != HAL_OK)
 800a9ba:	4669      	mov	r1, sp
        chunk_nb_sectors = (nb_sectors >= NB_PAGE_SECTOR_PER_ERASE) ? NB_PAGE_SECTOR_PER_ERASE : nb_sectors;
 800a9bc:	bf28      	it	cs
 800a9be:	2302      	movcs	r3, #2
        if (HAL_FLASHEx_Erase(&p_erase_init, &sector_error) != HAL_OK)
 800a9c0:	a801      	add	r0, sp, #4
        p_erase_init.NbSectors = chunk_nb_sectors;
 800a9c2:	e9cd 7303 	strd	r7, r3, [sp, #12]
        nb_sectors -= chunk_nb_sectors;
 800a9c6:	1ae4      	subs	r4, r4, r3
        first_sector += chunk_nb_sectors;
 800a9c8:	441f      	add	r7, r3
        if (HAL_FLASHEx_Erase(&p_erase_init, &sector_error) != HAL_OK)
 800a9ca:	f000 fb83 	bl	800b0d4 <HAL_FLASHEx_Erase>
 800a9ce:	b118      	cbz	r0, 800a9d8 <SFU_LL_FLASH_INT_Erase_Size+0x6c>
          *pFlashStatus = SFU_FLASH_ERR_ERASE;
 800a9d0:	f886 8000 	strb.w	r8, [r6]
          e_ret_status = SFU_ERROR;
 800a9d4:	f641 75e1 	movw	r5, #8161	; 0x1fe1
        SFU_LL_SECU_IWDG_Refresh(); /* calling this function which checks the compiler switch */
 800a9d8:	f000 f86a 	bl	800aab0 <SFU_LL_SECU_IWDG_Refresh>
      } while (nb_sectors > 0U);
 800a9dc:	2c00      	cmp	r4, #0
 800a9de:	d1ea      	bne.n	800a9b6 <SFU_LL_FLASH_INT_Erase_Size+0x4a>
      if (HAL_FLASH_Lock() != HAL_OK)
 800a9e0:	f000 fa66 	bl	800aeb0 <HAL_FLASH_Lock>
 800a9e4:	b130      	cbz	r0, 800a9f4 <SFU_LL_FLASH_INT_Erase_Size+0x88>
        *pFlashStatus = SFU_FLASH_ERR_HAL;
 800a9e6:	2301      	movs	r3, #1
 800a9e8:	7033      	strb	r3, [r6, #0]
    return SFU_ERROR;
 800a9ea:	f641 75e1 	movw	r5, #8161	; 0x1fe1
 800a9ee:	e001      	b.n	800a9f4 <SFU_LL_FLASH_INT_Erase_Size+0x88>
      *pFlashStatus = SFU_FLASH_ERR_HAL;
 800a9f0:	2301      	movs	r3, #1
 800a9f2:	7033      	strb	r3, [r6, #0]
}
 800a9f4:	4628      	mov	r0, r5
 800a9f6:	b007      	add	sp, #28
 800a9f8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a9fc:	00122f11 	.word	0x00122f11

0800aa00 <NMI_Handler>:
  * @param  None.
  * @retval None.
  */
void NMI_Handler(void)
{
  while (1 == 1)
 800aa00:	e7fe      	b.n	800aa00 <NMI_Handler>

0800aa02 <HardFault_Handler>:
  * @param  None.
  * @retval None.
  */
void HardFault_Handler(void)
{
  SFU_EXCPT_IrqExceptionHandler(SFU_EXCPT_HARD_FAULT);
 800aa02:	2002      	movs	r0, #2
 800aa04:	f7fe bf8a 	b.w	800991c <SFU_EXCPT_IrqExceptionHandler>

0800aa08 <SFU_LL_SECU_CheckApplyStaticProtections>:
  *         flash sections in order to maximize the security level for the specific MCU.
  * @retval uint32_t CRC (returned value is the combination of all the applied protections.
  *         If different from SFU_STD_PROTECTION_ALL, 1 or more protections cannot be applied)
  */
SFU_ErrorStatus SFU_LL_SECU_CheckApplyStaticProtections(void)
{
 800aa08:	b510      	push	{r4, lr}
 800aa0a:	b088      	sub	sp, #32
  FLASH_OBProgramInitTypeDef flash_option_bytes;
  SFU_BoolTypeDef is_protection_to_be_applied = SFU_FALSE;
  SFU_ErrorStatus e_ret_status = SFU_SUCCESS;

  /* Unlock the Flash to enable the flash control register access *************/
  (void) HAL_FLASH_Unlock();
 800aa0c:	f000 fa3e 	bl	800ae8c <HAL_FLASH_Unlock>


  /* Unlock the Options Bytes *************************************************/
  (void) HAL_FLASH_OB_Unlock();
 800aa10:	4c11      	ldr	r4, [pc, #68]	; (800aa58 <SFU_LL_SECU_CheckApplyStaticProtections+0x50>)
 800aa12:	f000 fa57 	bl	800aec4 <HAL_FLASH_OB_Unlock>

  (void) HAL_FLASHEx_OBGetConfig(&flash_option_bytes);
 800aa16:	a801      	add	r0, sp, #4
 800aa18:	f000 faf0 	bl	800affc <HAL_FLASHEx_OBGetConfig>

  /* Check/Apply RDP_Level 1. This is the minimum protection allowed */
  /* if RDP_Level 2 is already applied it's not possible to modify the OptionBytes anymore */
  if (flash_option_bytes.RDPLevel == OB_RDP_LEVEL_2)
 800aa1c:	9b05      	ldr	r3, [sp, #20]

  e_ret_status = SFU_SUCCESS;
  if (e_ret_status == SFU_SUCCESS)
  {
    /* Execution stopped if flow control failed */
    FLOW_CONTROL_STEP(uFlowProtectValue, FLOW_STEP_UBE, FLOW_CTRL_UBE);
 800aa1e:	6822      	ldr	r2, [r4, #0]
  if (flash_option_bytes.RDPLevel == OB_RDP_LEVEL_2)
 800aa20:	2bcc      	cmp	r3, #204	; 0xcc
 800aa22:	f246 7387 	movw	r3, #26503	; 0x6787
    FLOW_CONTROL_STEP(uFlowProtectValue, FLOW_STEP_UBE, FLOW_CTRL_UBE);
 800aa26:	ea83 0302 	eor.w	r3, r3, r2
 800aa2a:	6023      	str	r3, [r4, #0]
 800aa2c:	f245 7376 	movw	r3, #22390	; 0x5776
  if (flash_option_bytes.RDPLevel == OB_RDP_LEVEL_2)
 800aa30:	d106      	bne.n	800aa40 <SFU_LL_SECU_CheckApplyStaticProtections+0x38>
    FLOW_CONTROL_STEP(uFlowProtectValue, FLOW_STEP_UBE, FLOW_CTRL_UBE);
 800aa32:	429a      	cmp	r2, r3
 800aa34:	d008      	beq.n	800aa48 <SFU_LL_SECU_CheckApplyStaticProtections+0x40>
 800aa36:	f7fe ff95 	bl	8009964 <SFU_EXCPT_Security_Error>
    FLOW_CONTROL_STEP(uFlowProtectValue, FLOW_STEP_RDP, FLOW_CTRL_RDP);
 800aa3a:	6822      	ldr	r2, [r4, #0]
 800aa3c:	f243 03f1 	movw	r3, #12529	; 0x30f1
 800aa40:	429a      	cmp	r2, r3
 800aa42:	d001      	beq.n	800aa48 <SFU_LL_SECU_CheckApplyStaticProtections+0x40>
 800aa44:	f7fe ff8e 	bl	8009964 <SFU_EXCPT_Security_Error>
  (void) HAL_FLASH_OB_Lock();
 800aa48:	f000 fa4e 	bl	800aee8 <HAL_FLASH_OB_Lock>
  (void) HAL_FLASH_Lock();
 800aa4c:	f000 fa30 	bl	800aeb0 <HAL_FLASH_Lock>
}
 800aa50:	4802      	ldr	r0, [pc, #8]	; (800aa5c <SFU_LL_SECU_CheckApplyStaticProtections+0x54>)
 800aa52:	b008      	add	sp, #32
 800aa54:	bd10      	pop	{r4, pc}
 800aa56:	bf00      	nop
 800aa58:	20001000 	.word	0x20001000
 800aa5c:	00122f11 	.word	0x00122f11

0800aa60 <SFU_LL_SECU_CheckApplyRuntimeProtections>:
}
 800aa60:	4800      	ldr	r0, [pc, #0]	; (800aa64 <SFU_LL_SECU_CheckApplyRuntimeProtections+0x4>)
 800aa62:	4770      	bx	lr
 800aa64:	00122f11 	.word	0x00122f11

0800aa68 <SFU_LL_SECU_GetResetSources>:
  if ((__HAL_RCC_GET_FLAG(RCC_FLAG_IWDGRST) != RESET) ||
 800aa68:	4b0c      	ldr	r3, [pc, #48]	; (800aa9c <SFU_LL_SECU_GetResetSources+0x34>)
 800aa6a:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 800aa6c:	0092      	lsls	r2, r2, #2
 800aa6e:	d402      	bmi.n	800aa76 <SFU_LL_SECU_GetResetSources+0xe>
      (__HAL_RCC_GET_FLAG(RCC_FLAG_WWDGRST) != RESET))
 800aa70:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  if ((__HAL_RCC_GET_FLAG(RCC_FLAG_IWDGRST) != RESET) ||
 800aa72:	0051      	lsls	r1, r2, #1
 800aa74:	d502      	bpl.n	800aa7c <SFU_LL_SECU_GetResetSources+0x14>
    *peResetpSourceId = SFU_RESET_WDG_RESET;
 800aa76:	2301      	movs	r3, #1
    *peResetpSourceId = SFU_RESET_UNKNOWN;
 800aa78:	7003      	strb	r3, [r0, #0]
}
 800aa7a:	4770      	bx	lr
  else if (__HAL_RCC_GET_FLAG(RCC_FLAG_LPWRRST) != RESET)
 800aa7c:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 800aa7e:	2a00      	cmp	r2, #0
 800aa80:	da01      	bge.n	800aa86 <SFU_LL_SECU_GetResetSources+0x1e>
    *peResetpSourceId = SFU_RESET_LOW_POWER;
 800aa82:	2302      	movs	r3, #2
 800aa84:	e7f8      	b.n	800aa78 <SFU_LL_SECU_GetResetSources+0x10>
  else if (__HAL_RCC_GET_FLAG(RCC_FLAG_SFTRST) != RESET)
 800aa86:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 800aa88:	00d2      	lsls	r2, r2, #3
 800aa8a:	d501      	bpl.n	800aa90 <SFU_LL_SECU_GetResetSources+0x28>
    *peResetpSourceId = SFU_RESET_SW_RESET;
 800aa8c:	2305      	movs	r3, #5
 800aa8e:	e7f3      	b.n	800aa78 <SFU_LL_SECU_GetResetSources+0x10>
  else if (__HAL_RCC_GET_FLAG(RCC_FLAG_PINRST) != RESET)
 800aa90:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800aa92:	f013 6380 	ands.w	r3, r3, #67108864	; 0x4000000
    *peResetpSourceId = SFU_RESET_HW_RESET;
 800aa96:	bf18      	it	ne
 800aa98:	2303      	movne	r3, #3
 800aa9a:	e7ed      	b.n	800aa78 <SFU_LL_SECU_GetResetSources+0x10>
 800aa9c:	40023800 	.word	0x40023800

0800aaa0 <SFU_LL_SECU_ClearResetSources>:
  __HAL_RCC_CLEAR_RESET_FLAGS();
 800aaa0:	4a02      	ldr	r2, [pc, #8]	; (800aaac <SFU_LL_SECU_ClearResetSources+0xc>)
 800aaa2:	6f53      	ldr	r3, [r2, #116]	; 0x74
 800aaa4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800aaa8:	6753      	str	r3, [r2, #116]	; 0x74
}
 800aaaa:	4770      	bx	lr
 800aaac:	40023800 	.word	0x40023800

0800aab0 <SFU_LL_SECU_IWDG_Refresh>:
}
 800aab0:	4800      	ldr	r0, [pc, #0]	; (800aab4 <SFU_LL_SECU_IWDG_Refresh+0x4>)
 800aab2:	4770      	bx	lr
 800aab4:	00122f11 	.word	0x00122f11

0800aab8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack       /* set stack pointer */
 800aab8:	f8df d034 	ldr.w	sp, [pc, #52]	; 800aaf0 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */
  movs  r1, #0
 800aabc:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800aabe:	e003      	b.n	800aac8 <LoopCopyDataInit>

0800aac0 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800aac0:	4b0c      	ldr	r3, [pc, #48]	; (800aaf4 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800aac2:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800aac4:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800aac6:	3104      	adds	r1, #4

0800aac8 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr  r0, =_sdata
 800aac8:	480b      	ldr	r0, [pc, #44]	; (800aaf8 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800aaca:	4b0c      	ldr	r3, [pc, #48]	; (800aafc <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800aacc:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800aace:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800aad0:	d3f6      	bcc.n	800aac0 <CopyDataInit>
  ldr  r2, =_sbss
 800aad2:	4a0b      	ldr	r2, [pc, #44]	; (800ab00 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800aad4:	e002      	b.n	800aadc <LoopFillZerobss>

0800aad6 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs  r3, #0
 800aad6:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800aad8:	f842 3b04 	str.w	r3, [r2], #4

0800aadc <LoopFillZerobss>:

LoopFillZerobss:
  ldr  r3, = _ebss
 800aadc:	4b09      	ldr	r3, [pc, #36]	; (800ab04 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800aade:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800aae0:	d3f9      	bcc.n	800aad6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit
 800aae2:	f000 f863 	bl	800abac <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800aae6:	f001 f845 	bl	800bb74 <__libc_init_array>
/* Call the application entry point.*/
  bl  main
 800aaea:	f7fe f91b 	bl	8008d24 <main>
  bx  lr
 800aaee:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 800aaf0:	2000c000 	.word	0x2000c000
  ldr  r3, =_sidata
 800aaf4:	0800d898 	.word	0x0800d898
  ldr  r0, =_sdata
 800aaf8:	20001000 	.word	0x20001000
  ldr  r3, =_edata
 800aafc:	200010d8 	.word	0x200010d8
  ldr  r2, =_sbss
 800ab00:	200010d8 	.word	0x200010d8
  ldr  r3, = _ebss
 800ab04:	20001c5c 	.word	0x20001c5c

0800ab08 <ADC_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800ab08:	e7fe      	b.n	800ab08 <ADC_IRQHandler>
	...

0800ab0c <BSP_LED_Init>:
  *          This parameter can be one of the following values:
  *            @arg  LED3
  *            @arg  LED4
  */
void BSP_LED_Init(Led_TypeDef Led)
{
 800ab0c:	b500      	push	{lr}
 800ab0e:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef  gpio_init_structure;
  
  LEDx_GPIO_CLK_ENABLE(Led);
 800ab10:	b9e0      	cbnz	r0, 800ab4c <BSP_LED_Init+0x40>
 800ab12:	4b16      	ldr	r3, [pc, #88]	; (800ab6c <BSP_LED_Init+0x60>)
 800ab14:	9001      	str	r0, [sp, #4]
 800ab16:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ab18:	f042 0204 	orr.w	r2, r2, #4
 800ab1c:	631a      	str	r2, [r3, #48]	; 0x30
 800ab1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ab20:	f003 0304 	and.w	r3, r3, #4
 800ab24:	9301      	str	r3, [sp, #4]
 800ab26:	9b01      	ldr	r3, [sp, #4]
  /* Configure the GPIO_LED pin */
  gpio_init_structure.Pin   = GPIO_PIN[Led];
 800ab28:	4b11      	ldr	r3, [pc, #68]	; (800ab70 <BSP_LED_Init+0x64>)
 800ab2a:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 800ab2e:	9303      	str	r3, [sp, #12]
  gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 800ab30:	2301      	movs	r3, #1
  gpio_init_structure.Pull  = GPIO_PULLUP;
 800ab32:	e9cd 3304 	strd	r3, r3, [sp, #16]
  gpio_init_structure.Speed = GPIO_SPEED_HIGH;
 800ab36:	2303      	movs	r3, #3
 800ab38:	9306      	str	r3, [sp, #24]
  
  HAL_GPIO_Init(GPIO_PORT[Led], &gpio_init_structure);
 800ab3a:	4b0e      	ldr	r3, [pc, #56]	; (800ab74 <BSP_LED_Init+0x68>)
 800ab3c:	a903      	add	r1, sp, #12
 800ab3e:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 800ab42:	f000 fb17 	bl	800b174 <HAL_GPIO_Init>
}
 800ab46:	b009      	add	sp, #36	; 0x24
 800ab48:	f85d fb04 	ldr.w	pc, [sp], #4
  LEDx_GPIO_CLK_ENABLE(Led);
 800ab4c:	2801      	cmp	r0, #1
 800ab4e:	d1eb      	bne.n	800ab28 <BSP_LED_Init+0x1c>
 800ab50:	2300      	movs	r3, #0
 800ab52:	9302      	str	r3, [sp, #8]
 800ab54:	4b05      	ldr	r3, [pc, #20]	; (800ab6c <BSP_LED_Init+0x60>)
 800ab56:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ab58:	f042 0210 	orr.w	r2, r2, #16
 800ab5c:	631a      	str	r2, [r3, #48]	; 0x30
 800ab5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ab60:	f003 0310 	and.w	r3, r3, #16
 800ab64:	9302      	str	r3, [sp, #8]
 800ab66:	9b02      	ldr	r3, [sp, #8]
 800ab68:	e7de      	b.n	800ab28 <BSP_LED_Init+0x1c>
 800ab6a:	bf00      	nop
 800ab6c:	40023800 	.word	0x40023800
 800ab70:	0800cf14 	.word	0x0800cf14
 800ab74:	2000104c 	.word	0x2000104c

0800ab78 <BSP_LED_Off>:
  *            @arg  LED3
  *            @arg  LED4
  */
void BSP_LED_Off(Led_TypeDef Led)
{
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_RESET);
 800ab78:	4b04      	ldr	r3, [pc, #16]	; (800ab8c <BSP_LED_Off+0x14>)
 800ab7a:	f833 1020 	ldrh.w	r1, [r3, r0, lsl #2]
 800ab7e:	4b04      	ldr	r3, [pc, #16]	; (800ab90 <BSP_LED_Off+0x18>)
 800ab80:	2200      	movs	r2, #0
 800ab82:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 800ab86:	f000 bbcf 	b.w	800b328 <HAL_GPIO_WritePin>
 800ab8a:	bf00      	nop
 800ab8c:	0800cf14 	.word	0x0800cf14
 800ab90:	2000104c 	.word	0x2000104c

0800ab94 <BSP_LED_Toggle>:
  *            @arg  LED3
  *            @arg  LED4
  */
void BSP_LED_Toggle(Led_TypeDef Led)
{
  HAL_GPIO_TogglePin(GPIO_PORT[Led], GPIO_PIN[Led]);
 800ab94:	4b03      	ldr	r3, [pc, #12]	; (800aba4 <BSP_LED_Toggle+0x10>)
 800ab96:	f833 1020 	ldrh.w	r1, [r3, r0, lsl #2]
 800ab9a:	4b03      	ldr	r3, [pc, #12]	; (800aba8 <BSP_LED_Toggle+0x14>)
 800ab9c:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 800aba0:	f000 bbc7 	b.w	800b332 <HAL_GPIO_TogglePin>
 800aba4:	0800cf14 	.word	0x0800cf14
 800aba8:	2000104c 	.word	0x2000104c

0800abac <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800abac:	4a03      	ldr	r2, [pc, #12]	; (800abbc <SystemInit+0x10>)
 800abae:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 800abb2:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800abb6:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800abba:	4770      	bx	lr
 800abbc:	e000ed00 	.word	0xe000ed00

0800abc0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800abc0:	b570      	push	{r4, r5, r6, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800abc2:	4a0e      	ldr	r2, [pc, #56]	; (800abfc <HAL_InitTick+0x3c>)
 800abc4:	4e0e      	ldr	r6, [pc, #56]	; (800ac00 <HAL_InitTick+0x40>)
{
 800abc6:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800abc8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800abcc:	7830      	ldrb	r0, [r6, #0]
 800abce:	fbb3 f3f0 	udiv	r3, r3, r0
 800abd2:	6810      	ldr	r0, [r2, #0]
 800abd4:	fbb0 f0f3 	udiv	r0, r0, r3
 800abd8:	f000 f8b2 	bl	800ad40 <HAL_SYSTICK_Config>
 800abdc:	4604      	mov	r4, r0
 800abde:	b950      	cbnz	r0, 800abf6 <HAL_InitTick+0x36>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800abe0:	2d0f      	cmp	r5, #15
 800abe2:	d808      	bhi.n	800abf6 <HAL_InitTick+0x36>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800abe4:	4602      	mov	r2, r0
 800abe6:	4629      	mov	r1, r5
 800abe8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800abec:	f000 f864 	bl	800acb8 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800abf0:	6075      	str	r5, [r6, #4]
 800abf2:	4620      	mov	r0, r4
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 800abf4:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 800abf6:	2001      	movs	r0, #1
 800abf8:	e7fc      	b.n	800abf4 <HAL_InitTick+0x34>
 800abfa:	bf00      	nop
 800abfc:	20001064 	.word	0x20001064
 800ac00:	20001068 	.word	0x20001068

0800ac04 <HAL_Init>:
{
 800ac04:	b508      	push	{r3, lr}
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800ac06:	4b0b      	ldr	r3, [pc, #44]	; (800ac34 <HAL_Init+0x30>)
 800ac08:	681a      	ldr	r2, [r3, #0]
 800ac0a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800ac0e:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800ac10:	681a      	ldr	r2, [r3, #0]
 800ac12:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800ac16:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800ac18:	681a      	ldr	r2, [r3, #0]
 800ac1a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800ac1e:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800ac20:	2003      	movs	r0, #3
 800ac22:	f000 f837 	bl	800ac94 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 800ac26:	200f      	movs	r0, #15
 800ac28:	f7ff ffca 	bl	800abc0 <HAL_InitTick>
  HAL_MspInit();
 800ac2c:	f7fe f8c8 	bl	8008dc0 <HAL_MspInit>
}
 800ac30:	2000      	movs	r0, #0
 800ac32:	bd08      	pop	{r3, pc}
 800ac34:	40023c00 	.word	0x40023c00

0800ac38 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 800ac38:	4a03      	ldr	r2, [pc, #12]	; (800ac48 <HAL_IncTick+0x10>)
 800ac3a:	4b04      	ldr	r3, [pc, #16]	; (800ac4c <HAL_IncTick+0x14>)
 800ac3c:	6811      	ldr	r1, [r2, #0]
 800ac3e:	781b      	ldrb	r3, [r3, #0]
 800ac40:	440b      	add	r3, r1
 800ac42:	6013      	str	r3, [r2, #0]
}
 800ac44:	4770      	bx	lr
 800ac46:	bf00      	nop
 800ac48:	20001c28 	.word	0x20001c28
 800ac4c:	20001068 	.word	0x20001068

0800ac50 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 800ac50:	4b01      	ldr	r3, [pc, #4]	; (800ac58 <HAL_GetTick+0x8>)
 800ac52:	6818      	ldr	r0, [r3, #0]
}
 800ac54:	4770      	bx	lr
 800ac56:	bf00      	nop
 800ac58:	20001c28 	.word	0x20001c28

0800ac5c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800ac5c:	b538      	push	{r3, r4, r5, lr}
 800ac5e:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 800ac60:	f7ff fff6 	bl	800ac50 <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800ac64:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 800ac66:	bf1c      	itt	ne
 800ac68:	4b05      	ldrne	r3, [pc, #20]	; (800ac80 <HAL_Delay+0x24>)
 800ac6a:	781b      	ldrbne	r3, [r3, #0]
  uint32_t tickstart = HAL_GetTick();
 800ac6c:	4605      	mov	r5, r0
    wait += (uint32_t)(uwTickFreq);
 800ac6e:	bf18      	it	ne
 800ac70:	18e4      	addne	r4, r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 800ac72:	f7ff ffed 	bl	800ac50 <HAL_GetTick>
 800ac76:	1b43      	subs	r3, r0, r5
 800ac78:	42a3      	cmp	r3, r4
 800ac7a:	d3fa      	bcc.n	800ac72 <HAL_Delay+0x16>
  {
  }
}
 800ac7c:	bd38      	pop	{r3, r4, r5, pc}
 800ac7e:	bf00      	nop
 800ac80:	20001068 	.word	0x20001068

0800ac84 <HAL_SuspendTick>:
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
  /* Disable SysTick Interrupt */
  SysTick->CTRL &= ~SysTick_CTRL_TICKINT_Msk;
 800ac84:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
 800ac88:	6913      	ldr	r3, [r2, #16]
 800ac8a:	f023 0302 	bic.w	r3, r3, #2
 800ac8e:	6113      	str	r3, [r2, #16]
}
 800ac90:	4770      	bx	lr
	...

0800ac94 <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800ac94:	4907      	ldr	r1, [pc, #28]	; (800acb4 <HAL_NVIC_SetPriorityGrouping+0x20>)
 800ac96:	68ca      	ldr	r2, [r1, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800ac98:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800ac9c:	0203      	lsls	r3, r0, #8
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800ac9e:	0412      	lsls	r2, r2, #16
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800aca0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800aca4:	0c12      	lsrs	r2, r2, #16
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800aca6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800aca8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800acac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 800acb0:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 800acb2:	4770      	bx	lr
 800acb4:	e000ed00 	.word	0xe000ed00

0800acb8 <HAL_NVIC_SetPriority>:
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800acb8:	4b16      	ldr	r3, [pc, #88]	; (800ad14 <HAL_NVIC_SetPriority+0x5c>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800acba:	b530      	push	{r4, r5, lr}
 800acbc:	68dc      	ldr	r4, [r3, #12]
 800acbe:	f3c4 2402 	ubfx	r4, r4, #8, #3
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800acc2:	f1c4 0507 	rsb	r5, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800acc6:	1d23      	adds	r3, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800acc8:	2d04      	cmp	r5, #4
 800acca:	bf28      	it	cs
 800accc:	2504      	movcs	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800acce:	2b06      	cmp	r3, #6
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800acd0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800acd4:	bf8c      	ite	hi
 800acd6:	3c03      	subhi	r4, #3
 800acd8:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800acda:	fa03 f505 	lsl.w	r5, r3, r5
 800acde:	ea21 0105 	bic.w	r1, r1, r5
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800ace2:	40a3      	lsls	r3, r4
 800ace4:	ea22 0203 	bic.w	r2, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800ace8:	40a1      	lsls	r1, r4
  if ((int32_t)(IRQn) >= 0)
 800acea:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800acec:	ea41 0302 	orr.w	r3, r1, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800acf0:	bfac      	ite	ge
 800acf2:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800acf6:	4a08      	ldrlt	r2, [pc, #32]	; (800ad18 <HAL_NVIC_SetPriority+0x60>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800acf8:	ea4f 1303 	mov.w	r3, r3, lsl #4
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800acfc:	bfb8      	it	lt
 800acfe:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800ad02:	b2db      	uxtb	r3, r3
 800ad04:	bfaa      	itet	ge
 800ad06:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800ad0a:	5413      	strblt	r3, [r2, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800ad0c:	f880 3300 	strbge.w	r3, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 800ad10:	bd30      	pop	{r4, r5, pc}
 800ad12:	bf00      	nop
 800ad14:	e000ed00 	.word	0xe000ed00
 800ad18:	e000ed14 	.word	0xe000ed14

0800ad1c <HAL_NVIC_SystemReset>:
  __ASM volatile ("dsb 0xF":::"memory");
 800ad1c:	f3bf 8f4f 	dsb	sy
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 800ad20:	4905      	ldr	r1, [pc, #20]	; (800ad38 <HAL_NVIC_SystemReset+0x1c>)
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 800ad22:	4b06      	ldr	r3, [pc, #24]	; (800ad3c <HAL_NVIC_SystemReset+0x20>)
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 800ad24:	68ca      	ldr	r2, [r1, #12]
 800ad26:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 800ad2a:	4313      	orrs	r3, r2
 800ad2c:	60cb      	str	r3, [r1, #12]
 800ad2e:	f3bf 8f4f 	dsb	sy
    __NOP();
 800ad32:	bf00      	nop
  for(;;)                                                           /* wait until reset */
 800ad34:	e7fd      	b.n	800ad32 <HAL_NVIC_SystemReset+0x16>
 800ad36:	bf00      	nop
 800ad38:	e000ed00 	.word	0xe000ed00
 800ad3c:	05fa0004 	.word	0x05fa0004

0800ad40 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800ad40:	3801      	subs	r0, #1
 800ad42:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800ad46:	d20b      	bcs.n	800ad60 <HAL_SYSTICK_Config+0x20>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800ad48:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800ad4c:	4a05      	ldr	r2, [pc, #20]	; (800ad64 <HAL_SYSTICK_Config+0x24>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800ad4e:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800ad50:	21f0      	movs	r1, #240	; 0xf0
 800ad52:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800ad56:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800ad58:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800ad5a:	6198      	str	r0, [r3, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800ad5c:	611a      	str	r2, [r3, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800ad5e:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 800ad60:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 800ad62:	4770      	bx	lr
 800ad64:	e000ed00 	.word	0xe000ed00

0800ad68 <HAL_CRC_MspInit>:
  UNUSED(hcrc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_CRC_MspInit can be implemented in the user file
   */
}
 800ad68:	4770      	bx	lr

0800ad6a <HAL_CRC_Init>:
{
 800ad6a:	b510      	push	{r4, lr}
  if (hcrc == NULL)
 800ad6c:	4604      	mov	r4, r0
 800ad6e:	b150      	cbz	r0, 800ad86 <HAL_CRC_Init+0x1c>
  if (hcrc->State == HAL_CRC_STATE_RESET)
 800ad70:	7943      	ldrb	r3, [r0, #5]
 800ad72:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800ad76:	b913      	cbnz	r3, 800ad7e <HAL_CRC_Init+0x14>
    hcrc->Lock = HAL_UNLOCKED;
 800ad78:	7102      	strb	r2, [r0, #4]
    HAL_CRC_MspInit(hcrc);
 800ad7a:	f7ff fff5 	bl	800ad68 <HAL_CRC_MspInit>
  hcrc->State = HAL_CRC_STATE_READY;
 800ad7e:	2301      	movs	r3, #1
 800ad80:	7163      	strb	r3, [r4, #5]
  return HAL_OK;
 800ad82:	2000      	movs	r0, #0
}
 800ad84:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 800ad86:	2001      	movs	r0, #1
 800ad88:	e7fc      	b.n	800ad84 <HAL_CRC_Init+0x1a>
	...

0800ad8c <FLASH_Program_DoubleWord>:
{
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800ad8c:	4909      	ldr	r1, [pc, #36]	; (800adb4 <FLASH_Program_DoubleWord+0x28>)
{
 800ad8e:	b510      	push	{r4, lr}
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800ad90:	690c      	ldr	r4, [r1, #16]
 800ad92:	f424 7440 	bic.w	r4, r4, #768	; 0x300
 800ad96:	610c      	str	r4, [r1, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 800ad98:	690c      	ldr	r4, [r1, #16]
 800ad9a:	f444 7440 	orr.w	r4, r4, #768	; 0x300
 800ad9e:	610c      	str	r4, [r1, #16]
  FLASH->CR |= FLASH_CR_PG;
 800ada0:	690c      	ldr	r4, [r1, #16]
 800ada2:	f044 0401 	orr.w	r4, r4, #1
 800ada6:	610c      	str	r4, [r1, #16]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 800ada8:	6002      	str	r2, [r0, #0]
  __ASM volatile ("isb 0xF":::"memory");
 800adaa:	f3bf 8f6f 	isb	sy
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 800adae:	6043      	str	r3, [r0, #4]
}
 800adb0:	bd10      	pop	{r4, pc}
 800adb2:	bf00      	nop
 800adb4:	40023c00 	.word	0x40023c00

0800adb8 <FLASH_Program_Word>:
{
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800adb8:	4b07      	ldr	r3, [pc, #28]	; (800add8 <FLASH_Program_Word+0x20>)
 800adba:	691a      	ldr	r2, [r3, #16]
 800adbc:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800adc0:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 800adc2:	691a      	ldr	r2, [r3, #16]
 800adc4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800adc8:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_CR_PG;
 800adca:	691a      	ldr	r2, [r3, #16]
 800adcc:	f042 0201 	orr.w	r2, r2, #1
 800add0:	611a      	str	r2, [r3, #16]

  *(__IO uint32_t*)Address = Data;
 800add2:	6001      	str	r1, [r0, #0]
}
 800add4:	4770      	bx	lr
 800add6:	bf00      	nop
 800add8:	40023c00 	.word	0x40023c00

0800addc <FLASH_Program_HalfWord>:
{
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800addc:	4b07      	ldr	r3, [pc, #28]	; (800adfc <FLASH_Program_HalfWord+0x20>)
 800adde:	691a      	ldr	r2, [r3, #16]
 800ade0:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800ade4:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 800ade6:	691a      	ldr	r2, [r3, #16]
 800ade8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800adec:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_CR_PG;
 800adee:	691a      	ldr	r2, [r3, #16]
 800adf0:	f042 0201 	orr.w	r2, r2, #1
 800adf4:	611a      	str	r2, [r3, #16]

  *(__IO uint16_t*)Address = Data;
 800adf6:	8001      	strh	r1, [r0, #0]
}
 800adf8:	4770      	bx	lr
 800adfa:	bf00      	nop
 800adfc:	40023c00 	.word	0x40023c00

0800ae00 <FLASH_SetErrorCode>:
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 800ae00:	4b20      	ldr	r3, [pc, #128]	; (800ae84 <FLASH_SetErrorCode+0x84>)
 800ae02:	68da      	ldr	r2, [r3, #12]
 800ae04:	06d0      	lsls	r0, r2, #27
 800ae06:	d506      	bpl.n	800ae16 <FLASH_SetErrorCode+0x16>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 800ae08:	491f      	ldr	r1, [pc, #124]	; (800ae88 <FLASH_SetErrorCode+0x88>)
 800ae0a:	69ca      	ldr	r2, [r1, #28]
 800ae0c:	f042 0210 	orr.w	r2, r2, #16
 800ae10:	61ca      	str	r2, [r1, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 800ae12:	2210      	movs	r2, #16
 800ae14:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 800ae16:	68da      	ldr	r2, [r3, #12]
 800ae18:	0691      	lsls	r1, r2, #26
 800ae1a:	d506      	bpl.n	800ae2a <FLASH_SetErrorCode+0x2a>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 800ae1c:	491a      	ldr	r1, [pc, #104]	; (800ae88 <FLASH_SetErrorCode+0x88>)
 800ae1e:	69ca      	ldr	r2, [r1, #28]
 800ae20:	f042 0208 	orr.w	r2, r2, #8
 800ae24:	61ca      	str	r2, [r1, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 800ae26:	2220      	movs	r2, #32
 800ae28:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 800ae2a:	4b16      	ldr	r3, [pc, #88]	; (800ae84 <FLASH_SetErrorCode+0x84>)
 800ae2c:	68da      	ldr	r2, [r3, #12]
 800ae2e:	0652      	lsls	r2, r2, #25
 800ae30:	d506      	bpl.n	800ae40 <FLASH_SetErrorCode+0x40>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 800ae32:	4915      	ldr	r1, [pc, #84]	; (800ae88 <FLASH_SetErrorCode+0x88>)
 800ae34:	69ca      	ldr	r2, [r1, #28]
 800ae36:	f042 0204 	orr.w	r2, r2, #4
 800ae3a:	61ca      	str	r2, [r1, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 800ae3c:	2240      	movs	r2, #64	; 0x40
 800ae3e:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 800ae40:	68da      	ldr	r2, [r3, #12]
 800ae42:	0610      	lsls	r0, r2, #24
 800ae44:	d506      	bpl.n	800ae54 <FLASH_SetErrorCode+0x54>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 800ae46:	4910      	ldr	r1, [pc, #64]	; (800ae88 <FLASH_SetErrorCode+0x88>)
 800ae48:	69ca      	ldr	r2, [r1, #28]
 800ae4a:	f042 0202 	orr.w	r2, r2, #2
 800ae4e:	61ca      	str	r2, [r1, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 800ae50:	2280      	movs	r2, #128	; 0x80
 800ae52:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR) 
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR) != RESET)
 800ae54:	4b0b      	ldr	r3, [pc, #44]	; (800ae84 <FLASH_SetErrorCode+0x84>)
 800ae56:	68da      	ldr	r2, [r3, #12]
 800ae58:	05d1      	lsls	r1, r2, #23
 800ae5a:	d507      	bpl.n	800ae6c <FLASH_SetErrorCode+0x6c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 800ae5c:	490a      	ldr	r1, [pc, #40]	; (800ae88 <FLASH_SetErrorCode+0x88>)
 800ae5e:	69ca      	ldr	r2, [r1, #28]
 800ae60:	f042 0201 	orr.w	r2, r2, #1
 800ae64:	61ca      	str	r2, [r1, #28]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
 800ae66:	f44f 7280 	mov.w	r2, #256	; 0x100
 800ae6a:	60da      	str	r2, [r3, #12]
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 800ae6c:	68da      	ldr	r2, [r3, #12]
 800ae6e:	0792      	lsls	r2, r2, #30
 800ae70:	d506      	bpl.n	800ae80 <FLASH_SetErrorCode+0x80>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 800ae72:	4905      	ldr	r1, [pc, #20]	; (800ae88 <FLASH_SetErrorCode+0x88>)
 800ae74:	69ca      	ldr	r2, [r1, #28]
 800ae76:	f042 0220 	orr.w	r2, r2, #32
 800ae7a:	61ca      	str	r2, [r1, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 800ae7c:	2202      	movs	r2, #2
 800ae7e:	60da      	str	r2, [r3, #12]
  }
}
 800ae80:	4770      	bx	lr
 800ae82:	bf00      	nop
 800ae84:	40023c00 	.word	0x40023c00
 800ae88:	20001c2c 	.word	0x20001c2c

0800ae8c <HAL_FLASH_Unlock>:
  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800ae8c:	4b06      	ldr	r3, [pc, #24]	; (800aea8 <HAL_FLASH_Unlock+0x1c>)
 800ae8e:	691a      	ldr	r2, [r3, #16]
 800ae90:	2a00      	cmp	r2, #0
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 800ae92:	bfbf      	itttt	lt
 800ae94:	4a05      	ldrlt	r2, [pc, #20]	; (800aeac <HAL_FLASH_Unlock+0x20>)
 800ae96:	605a      	strlt	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 800ae98:	f102 3288 	addlt.w	r2, r2, #2290649224	; 0x88888888
 800ae9c:	605a      	strlt	r2, [r3, #4]
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800ae9e:	bfba      	itte	lt
 800aea0:	6918      	ldrlt	r0, [r3, #16]
  HAL_StatusTypeDef status = HAL_OK;
 800aea2:	0fc0      	lsrlt	r0, r0, #31
 800aea4:	2000      	movge	r0, #0
}
 800aea6:	4770      	bx	lr
 800aea8:	40023c00 	.word	0x40023c00
 800aeac:	45670123 	.word	0x45670123

0800aeb0 <HAL_FLASH_Lock>:
  FLASH->CR |= FLASH_CR_LOCK;
 800aeb0:	4a03      	ldr	r2, [pc, #12]	; (800aec0 <HAL_FLASH_Lock+0x10>)
 800aeb2:	6913      	ldr	r3, [r2, #16]
 800aeb4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800aeb8:	6113      	str	r3, [r2, #16]
}
 800aeba:	2000      	movs	r0, #0
 800aebc:	4770      	bx	lr
 800aebe:	bf00      	nop
 800aec0:	40023c00 	.word	0x40023c00

0800aec4 <HAL_FLASH_OB_Unlock>:
  if((FLASH->OPTCR & FLASH_OPTCR_OPTLOCK) != RESET)
 800aec4:	4b06      	ldr	r3, [pc, #24]	; (800aee0 <HAL_FLASH_OB_Unlock+0x1c>)
 800aec6:	695a      	ldr	r2, [r3, #20]
 800aec8:	07d2      	lsls	r2, r2, #31
    FLASH->OPTKEYR = FLASH_OPT_KEY1;
 800aeca:	bf41      	itttt	mi
 800aecc:	4a05      	ldrmi	r2, [pc, #20]	; (800aee4 <HAL_FLASH_OB_Unlock+0x20>)
 800aece:	609a      	strmi	r2, [r3, #8]
    FLASH->OPTKEYR = FLASH_OPT_KEY2;
 800aed0:	f102 3244 	addmi.w	r2, r2, #1145324612	; 0x44444444
  return HAL_OK;  
 800aed4:	2000      	movmi	r0, #0
    FLASH->OPTKEYR = FLASH_OPT_KEY2;
 800aed6:	bf4c      	ite	mi
 800aed8:	609a      	strmi	r2, [r3, #8]
    return HAL_ERROR;
 800aeda:	2001      	movpl	r0, #1
}
 800aedc:	4770      	bx	lr
 800aede:	bf00      	nop
 800aee0:	40023c00 	.word	0x40023c00
 800aee4:	08192a3b 	.word	0x08192a3b

0800aee8 <HAL_FLASH_OB_Lock>:
  FLASH->OPTCR |= FLASH_OPTCR_OPTLOCK;
 800aee8:	4a03      	ldr	r2, [pc, #12]	; (800aef8 <HAL_FLASH_OB_Lock+0x10>)
 800aeea:	6953      	ldr	r3, [r2, #20]
 800aeec:	f043 0301 	orr.w	r3, r3, #1
 800aef0:	6153      	str	r3, [r2, #20]
}
 800aef2:	2000      	movs	r0, #0
 800aef4:	4770      	bx	lr
 800aef6:	bf00      	nop
 800aef8:	40023c00 	.word	0x40023c00

0800aefc <FLASH_WaitForLastOperation>:
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800aefc:	4b11      	ldr	r3, [pc, #68]	; (800af44 <FLASH_WaitForLastOperation+0x48>)
{ 
 800aefe:	b570      	push	{r4, r5, r6, lr}
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800af00:	2200      	movs	r2, #0
{ 
 800af02:	4604      	mov	r4, r0
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800af04:	61da      	str	r2, [r3, #28]
  tickstart = HAL_GetTick();
 800af06:	f7ff fea3 	bl	800ac50 <HAL_GetTick>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 800af0a:	4d0f      	ldr	r5, [pc, #60]	; (800af48 <FLASH_WaitForLastOperation+0x4c>)
  tickstart = HAL_GetTick();
 800af0c:	4606      	mov	r6, r0
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 800af0e:	68eb      	ldr	r3, [r5, #12]
 800af10:	03da      	lsls	r2, r3, #15
 800af12:	d40c      	bmi.n	800af2e <FLASH_WaitForLastOperation+0x32>
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 800af14:	68eb      	ldr	r3, [r5, #12]
 800af16:	07db      	lsls	r3, r3, #31
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 800af18:	bf44      	itt	mi
 800af1a:	2301      	movmi	r3, #1
 800af1c:	60eb      	strmi	r3, [r5, #12]
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 800af1e:	68e8      	ldr	r0, [r5, #12]
 800af20:	f410 70f9 	ands.w	r0, r0, #498	; 0x1f2
 800af24:	d007      	beq.n	800af36 <FLASH_WaitForLastOperation+0x3a>
    FLASH_SetErrorCode();
 800af26:	f7ff ff6b 	bl	800ae00 <FLASH_SetErrorCode>
    return HAL_ERROR;
 800af2a:	2001      	movs	r0, #1
 800af2c:	e003      	b.n	800af36 <FLASH_WaitForLastOperation+0x3a>
    if(Timeout != HAL_MAX_DELAY)
 800af2e:	1c61      	adds	r1, r4, #1
 800af30:	d0ed      	beq.n	800af0e <FLASH_WaitForLastOperation+0x12>
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 800af32:	b90c      	cbnz	r4, 800af38 <FLASH_WaitForLastOperation+0x3c>
        return HAL_TIMEOUT;
 800af34:	2003      	movs	r0, #3
}  
 800af36:	bd70      	pop	{r4, r5, r6, pc}
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 800af38:	f7ff fe8a 	bl	800ac50 <HAL_GetTick>
 800af3c:	1b80      	subs	r0, r0, r6
 800af3e:	42a0      	cmp	r0, r4
 800af40:	d9e5      	bls.n	800af0e <FLASH_WaitForLastOperation+0x12>
 800af42:	e7f7      	b.n	800af34 <FLASH_WaitForLastOperation+0x38>
 800af44:	20001c2c 	.word	0x20001c2c
 800af48:	40023c00 	.word	0x40023c00

0800af4c <HAL_FLASH_Program>:
{
 800af4c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  __HAL_LOCK(&pFlash);
 800af4e:	4e20      	ldr	r6, [pc, #128]	; (800afd0 <HAL_FLASH_Program+0x84>)
{
 800af50:	9301      	str	r3, [sp, #4]
 800af52:	4614      	mov	r4, r2
  __HAL_LOCK(&pFlash);
 800af54:	7e32      	ldrb	r2, [r6, #24]
 800af56:	2a01      	cmp	r2, #1
{
 800af58:	4607      	mov	r7, r0
 800af5a:	460d      	mov	r5, r1
  __HAL_LOCK(&pFlash);
 800af5c:	d035      	beq.n	800afca <HAL_FLASH_Program+0x7e>
 800af5e:	2201      	movs	r2, #1
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800af60:	f24c 3050 	movw	r0, #50000	; 0xc350
  __HAL_LOCK(&pFlash);
 800af64:	7632      	strb	r2, [r6, #24]
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800af66:	f7ff ffc9 	bl	800aefc <FLASH_WaitForLastOperation>
  if(status == HAL_OK)
 800af6a:	b9b8      	cbnz	r0, 800af9c <HAL_FLASH_Program+0x50>
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 800af6c:	9b01      	ldr	r3, [sp, #4]
 800af6e:	b9cf      	cbnz	r7, 800afa4 <HAL_FLASH_Program+0x58>
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800af70:	4b18      	ldr	r3, [pc, #96]	; (800afd4 <HAL_FLASH_Program+0x88>)
 800af72:	691a      	ldr	r2, [r3, #16]
 800af74:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800af78:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 800af7a:	691a      	ldr	r2, [r3, #16]
 800af7c:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_CR_PG;
 800af7e:	691a      	ldr	r2, [r3, #16]
      FLASH_Program_Byte(Address, (uint8_t) Data);
 800af80:	b2e4      	uxtb	r4, r4
  FLASH->CR |= FLASH_CR_PG;
 800af82:	f042 0201 	orr.w	r2, r2, #1
 800af86:	611a      	str	r2, [r3, #16]
  *(__IO uint8_t*)Address = Data;
 800af88:	702c      	strb	r4, [r5, #0]
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800af8a:	f24c 3050 	movw	r0, #50000	; 0xc350
 800af8e:	f7ff ffb5 	bl	800aefc <FLASH_WaitForLastOperation>
    FLASH->CR &= (~FLASH_CR_PG);  
 800af92:	4a10      	ldr	r2, [pc, #64]	; (800afd4 <HAL_FLASH_Program+0x88>)
 800af94:	6913      	ldr	r3, [r2, #16]
 800af96:	f023 0301 	bic.w	r3, r3, #1
 800af9a:	6113      	str	r3, [r2, #16]
  __HAL_UNLOCK(&pFlash);
 800af9c:	2300      	movs	r3, #0
 800af9e:	7633      	strb	r3, [r6, #24]
}
 800afa0:	b003      	add	sp, #12
 800afa2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 800afa4:	2f01      	cmp	r7, #1
 800afa6:	d104      	bne.n	800afb2 <HAL_FLASH_Program+0x66>
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 800afa8:	b2a1      	uxth	r1, r4
 800afaa:	4628      	mov	r0, r5
 800afac:	f7ff ff16 	bl	800addc <FLASH_Program_HalfWord>
 800afb0:	e7eb      	b.n	800af8a <HAL_FLASH_Program+0x3e>
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 800afb2:	2f02      	cmp	r7, #2
 800afb4:	d104      	bne.n	800afc0 <HAL_FLASH_Program+0x74>
      FLASH_Program_Word(Address, (uint32_t) Data);
 800afb6:	4621      	mov	r1, r4
 800afb8:	4628      	mov	r0, r5
 800afba:	f7ff fefd 	bl	800adb8 <FLASH_Program_Word>
 800afbe:	e7e4      	b.n	800af8a <HAL_FLASH_Program+0x3e>
      FLASH_Program_DoubleWord(Address, Data);
 800afc0:	4622      	mov	r2, r4
 800afc2:	4628      	mov	r0, r5
 800afc4:	f7ff fee2 	bl	800ad8c <FLASH_Program_DoubleWord>
 800afc8:	e7df      	b.n	800af8a <HAL_FLASH_Program+0x3e>
  __HAL_LOCK(&pFlash);
 800afca:	2002      	movs	r0, #2
 800afcc:	e7e8      	b.n	800afa0 <HAL_FLASH_Program+0x54>
 800afce:	bf00      	nop
 800afd0:	20001c2c 	.word	0x20001c2c
 800afd4:	40023c00 	.word	0x40023c00

0800afd8 <FLASH_MassErase.constprop.0>:
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));
  
  /* If the previous operation is completed, proceed to erase all sectors */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800afd8:	4b07      	ldr	r3, [pc, #28]	; (800aff8 <FLASH_MassErase.constprop.0+0x20>)
 800afda:	6919      	ldr	r1, [r3, #16]
 800afdc:	f421 7140 	bic.w	r1, r1, #768	; 0x300
 800afe0:	6119      	str	r1, [r3, #16]
  FLASH->CR |= FLASH_CR_MER;
 800afe2:	6919      	ldr	r1, [r3, #16]
 800afe4:	f041 0104 	orr.w	r1, r1, #4
 800afe8:	6119      	str	r1, [r3, #16]
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange <<8U);
 800afea:	691a      	ldr	r2, [r3, #16]
 800afec:	ea42 2000 	orr.w	r0, r2, r0, lsl #8
 800aff0:	f440 3080 	orr.w	r0, r0, #65536	; 0x10000
 800aff4:	6118      	str	r0, [r3, #16]
}
 800aff6:	4770      	bx	lr
 800aff8:	40023c00 	.word	0x40023c00

0800affc <HAL_FLASHEx_OBGetConfig>:
  pOBInit->OptionType = OPTIONBYTE_WRP | OPTIONBYTE_RDP | OPTIONBYTE_USER | OPTIONBYTE_BOR;
 800affc:	230f      	movs	r3, #15
 800affe:	6003      	str	r3, [r0, #0]
  * @retval uint16_t FLASH Write Protection Option Bytes value
  */
static uint16_t FLASH_OB_GetWRP(void)
{
  /* Return the FLASH write protection Register value */
  return (*(__IO uint16_t *)(OPTCR_BYTE2_ADDRESS));
 800b000:	4b0a      	ldr	r3, [pc, #40]	; (800b02c <HAL_FLASHEx_OBGetConfig+0x30>)
 800b002:	8ada      	ldrh	r2, [r3, #22]
 800b004:	b292      	uxth	r2, r2
  pOBInit->WRPSector = (uint32_t)FLASH_OB_GetWRP();
 800b006:	6082      	str	r2, [r0, #8]
  */
static uint8_t FLASH_OB_GetRDP(void)
{
  uint8_t readstatus = OB_RDP_LEVEL_0;

  if((*(__IO uint8_t*)(OPTCR_BYTE1_ADDRESS) == (uint8_t)OB_RDP_LEVEL_2))
 800b008:	7d59      	ldrb	r1, [r3, #21]
 800b00a:	29cc      	cmp	r1, #204	; 0xcc
 800b00c:	b2ca      	uxtb	r2, r1
 800b00e:	d003      	beq.n	800b018 <HAL_FLASHEx_OBGetConfig+0x1c>
  {
    readstatus = OB_RDP_LEVEL_2;
  }
  else if((*(__IO uint8_t*)(OPTCR_BYTE1_ADDRESS) == (uint8_t)OB_RDP_LEVEL_0))
 800b010:	7d5a      	ldrb	r2, [r3, #21]
  {
    readstatus = OB_RDP_LEVEL_0;
  }
  else 
  {
    readstatus = OB_RDP_LEVEL_1;
 800b012:	2aaa      	cmp	r2, #170	; 0xaa
 800b014:	bf18      	it	ne
 800b016:	2255      	movne	r2, #85	; 0x55
  pOBInit->RDPLevel = (uint32_t)FLASH_OB_GetRDP();
 800b018:	6102      	str	r2, [r0, #16]
  return ((uint8_t)(FLASH->OPTCR & 0xE0));
 800b01a:	695a      	ldr	r2, [r3, #20]
 800b01c:	f022 021f 	bic.w	r2, r2, #31
  pOBInit->USERConfig = (uint8_t)FLASH_OB_GetUser();
 800b020:	7602      	strb	r2, [r0, #24]
  *           - OB_BOR_OFF   : Supply voltage ranges from 1.62 to 2.1 V  
  */
static uint8_t FLASH_OB_GetBOR(void)
{
  /* Return the FLASH BOR level */
  return (uint8_t)(*(__IO uint8_t *)(OPTCR_BYTE0_ADDRESS) & (uint8_t)0x0C);
 800b022:	7d1b      	ldrb	r3, [r3, #20]
  pOBInit->BORLevel = (uint32_t)FLASH_OB_GetBOR();
 800b024:	f003 030c 	and.w	r3, r3, #12
 800b028:	6143      	str	r3, [r0, #20]
}
 800b02a:	4770      	bx	lr
 800b02c:	40023c00 	.word	0x40023c00

0800b030 <FLASH_Erase_Sector>:
  if(VoltageRange == FLASH_VOLTAGE_RANGE_1)
 800b030:	b139      	cbz	r1, 800b042 <FLASH_Erase_Sector+0x12>
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_2)
 800b032:	2901      	cmp	r1, #1
 800b034:	d01c      	beq.n	800b070 <FLASH_Erase_Sector+0x40>
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 800b036:	2902      	cmp	r1, #2
 800b038:	bf0c      	ite	eq
 800b03a:	f44f 7100 	moveq.w	r1, #512	; 0x200
 800b03e:	f44f 7140 	movne.w	r1, #768	; 0x300
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800b042:	4b0d      	ldr	r3, [pc, #52]	; (800b078 <FLASH_Erase_Sector+0x48>)
 800b044:	691a      	ldr	r2, [r3, #16]
 800b046:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800b04a:	611a      	str	r2, [r3, #16]
  FLASH->CR |= tmp_psize;
 800b04c:	691a      	ldr	r2, [r3, #16]
 800b04e:	4311      	orrs	r1, r2
 800b050:	6119      	str	r1, [r3, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 800b052:	691a      	ldr	r2, [r3, #16]
 800b054:	f022 0278 	bic.w	r2, r2, #120	; 0x78
 800b058:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 800b05a:	691a      	ldr	r2, [r3, #16]
 800b05c:	ea42 00c0 	orr.w	r0, r2, r0, lsl #3
 800b060:	f040 0002 	orr.w	r0, r0, #2
 800b064:	6118      	str	r0, [r3, #16]
  FLASH->CR |= FLASH_CR_STRT;
 800b066:	691a      	ldr	r2, [r3, #16]
 800b068:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800b06c:	611a      	str	r2, [r3, #16]
}
 800b06e:	4770      	bx	lr
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 800b070:	f44f 7180 	mov.w	r1, #256	; 0x100
 800b074:	e7e5      	b.n	800b042 <FLASH_Erase_Sector+0x12>
 800b076:	bf00      	nop
 800b078:	40023c00 	.word	0x40023c00

0800b07c <FLASH_FlushCaches>:
  * @retval None
  */
void FLASH_FlushCaches(void)
{
  /* Flush instruction cache  */
  if(READ_BIT(FLASH->ACR, FLASH_ACR_ICEN)!= RESET)
 800b07c:	4b14      	ldr	r3, [pc, #80]	; (800b0d0 <FLASH_FlushCaches+0x54>)
 800b07e:	681a      	ldr	r2, [r3, #0]
 800b080:	0591      	lsls	r1, r2, #22
 800b082:	d50f      	bpl.n	800b0a4 <FLASH_FlushCaches+0x28>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 800b084:	681a      	ldr	r2, [r3, #0]
 800b086:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800b08a:	601a      	str	r2, [r3, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 800b08c:	681a      	ldr	r2, [r3, #0]
 800b08e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800b092:	601a      	str	r2, [r3, #0]
 800b094:	681a      	ldr	r2, [r3, #0]
 800b096:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800b09a:	601a      	str	r2, [r3, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800b09c:	681a      	ldr	r2, [r3, #0]
 800b09e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b0a2:	601a      	str	r2, [r3, #0]
  }
  
  /* Flush data cache */
  if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 800b0a4:	4b0a      	ldr	r3, [pc, #40]	; (800b0d0 <FLASH_FlushCaches+0x54>)
 800b0a6:	681a      	ldr	r2, [r3, #0]
 800b0a8:	0552      	lsls	r2, r2, #21
 800b0aa:	d50f      	bpl.n	800b0cc <FLASH_FlushCaches+0x50>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 800b0ac:	681a      	ldr	r2, [r3, #0]
 800b0ae:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b0b2:	601a      	str	r2, [r3, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 800b0b4:	681a      	ldr	r2, [r3, #0]
 800b0b6:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800b0ba:	601a      	str	r2, [r3, #0]
 800b0bc:	681a      	ldr	r2, [r3, #0]
 800b0be:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800b0c2:	601a      	str	r2, [r3, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 800b0c4:	681a      	ldr	r2, [r3, #0]
 800b0c6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800b0ca:	601a      	str	r2, [r3, #0]
  }
}
 800b0cc:	4770      	bx	lr
 800b0ce:	bf00      	nop
 800b0d0:	40023c00 	.word	0x40023c00

0800b0d4 <HAL_FLASHEx_Erase>:
{
 800b0d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  __HAL_LOCK(&pFlash);
 800b0d8:	f8df 8094 	ldr.w	r8, [pc, #148]	; 800b170 <HAL_FLASHEx_Erase+0x9c>
 800b0dc:	f898 3018 	ldrb.w	r3, [r8, #24]
 800b0e0:	2b01      	cmp	r3, #1
{
 800b0e2:	4605      	mov	r5, r0
 800b0e4:	460f      	mov	r7, r1
  __HAL_LOCK(&pFlash);
 800b0e6:	d03f      	beq.n	800b168 <HAL_FLASHEx_Erase+0x94>
 800b0e8:	2301      	movs	r3, #1
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800b0ea:	f24c 3050 	movw	r0, #50000	; 0xc350
  __HAL_LOCK(&pFlash);
 800b0ee:	f888 3018 	strb.w	r3, [r8, #24]
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800b0f2:	f7ff ff03 	bl	800aefc <FLASH_WaitForLastOperation>
  if(status == HAL_OK)
 800b0f6:	4604      	mov	r4, r0
 800b0f8:	b9a0      	cbnz	r0, 800b124 <HAL_FLASHEx_Erase+0x50>
    *SectorError = 0xFFFFFFFFU;
 800b0fa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b0fe:	603b      	str	r3, [r7, #0]
    if(pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 800b100:	682b      	ldr	r3, [r5, #0]
 800b102:	2b01      	cmp	r3, #1
 800b104:	d114      	bne.n	800b130 <HAL_FLASHEx_Erase+0x5c>
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 800b106:	7c28      	ldrb	r0, [r5, #16]
 800b108:	f7ff ff66 	bl	800afd8 <FLASH_MassErase.constprop.0>
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800b10c:	f24c 3050 	movw	r0, #50000	; 0xc350
 800b110:	f7ff fef4 	bl	800aefc <FLASH_WaitForLastOperation>
      FLASH->CR &= (~FLASH_MER_BIT);
 800b114:	4a15      	ldr	r2, [pc, #84]	; (800b16c <HAL_FLASHEx_Erase+0x98>)
 800b116:	6913      	ldr	r3, [r2, #16]
 800b118:	f023 0304 	bic.w	r3, r3, #4
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800b11c:	4604      	mov	r4, r0
      FLASH->CR &= (~FLASH_MER_BIT);
 800b11e:	6113      	str	r3, [r2, #16]
    FLASH_FlushCaches();    
 800b120:	f7ff ffac 	bl	800b07c <FLASH_FlushCaches>
  __HAL_UNLOCK(&pFlash);
 800b124:	2300      	movs	r3, #0
 800b126:	f888 3018 	strb.w	r3, [r8, #24]
}
 800b12a:	4620      	mov	r0, r4
 800b12c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 800b130:	68ae      	ldr	r6, [r5, #8]
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 800b132:	f8df 9038 	ldr.w	r9, [pc, #56]	; 800b16c <HAL_FLASHEx_Erase+0x98>
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 800b136:	e9d5 2302 	ldrd	r2, r3, [r5, #8]
 800b13a:	4413      	add	r3, r2
 800b13c:	42b3      	cmp	r3, r6
 800b13e:	d9ef      	bls.n	800b120 <HAL_FLASHEx_Erase+0x4c>
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 800b140:	7c29      	ldrb	r1, [r5, #16]
 800b142:	4630      	mov	r0, r6
 800b144:	f7ff ff74 	bl	800b030 <FLASH_Erase_Sector>
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800b148:	f24c 3050 	movw	r0, #50000	; 0xc350
 800b14c:	f7ff fed6 	bl	800aefc <FLASH_WaitForLastOperation>
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 800b150:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800b154:	f023 037a 	bic.w	r3, r3, #122	; 0x7a
 800b158:	f8c9 3010 	str.w	r3, [r9, #16]
        if(status != HAL_OK) 
 800b15c:	b110      	cbz	r0, 800b164 <HAL_FLASHEx_Erase+0x90>
          *SectorError = index;
 800b15e:	603e      	str	r6, [r7, #0]
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800b160:	4604      	mov	r4, r0
          break;
 800b162:	e7dd      	b.n	800b120 <HAL_FLASHEx_Erase+0x4c>
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 800b164:	3601      	adds	r6, #1
 800b166:	e7e6      	b.n	800b136 <HAL_FLASHEx_Erase+0x62>
  __HAL_LOCK(&pFlash);
 800b168:	2402      	movs	r4, #2
 800b16a:	e7de      	b.n	800b12a <HAL_FLASHEx_Erase+0x56>
 800b16c:	40023c00 	.word	0x40023c00
 800b170:	20001c2c 	.word	0x20001c2c

0800b174 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800b174:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800b178:	f8df 919c 	ldr.w	r9, [pc, #412]	; 800b318 <HAL_GPIO_Init+0x1a4>
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800b17c:	4a64      	ldr	r2, [pc, #400]	; (800b310 <HAL_GPIO_Init+0x19c>)
  for(position = 0U; position < GPIO_NUMBER; position++)
 800b17e:	2300      	movs	r3, #0
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800b180:	680d      	ldr	r5, [r1, #0]
    ioposition = 0x01U << position;
 800b182:	2401      	movs	r4, #1
 800b184:	409c      	lsls	r4, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800b186:	ea04 0c05 	and.w	ip, r4, r5
    if(iocurrent == ioposition)
 800b18a:	43ac      	bics	r4, r5
 800b18c:	f040 80ac 	bne.w	800b2e8 <HAL_GPIO_Init+0x174>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800b190:	684d      	ldr	r5, [r1, #4]
 800b192:	f005 0403 	and.w	r4, r5, #3
 800b196:	ea4f 0843 	mov.w	r8, r3, lsl #1
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800b19a:	2603      	movs	r6, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800b19c:	1e67      	subs	r7, r4, #1
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800b19e:	fa06 f608 	lsl.w	r6, r6, r8
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800b1a2:	2f01      	cmp	r7, #1
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800b1a4:	ea6f 0606 	mvn.w	r6, r6
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800b1a8:	d834      	bhi.n	800b214 <HAL_GPIO_Init+0xa0>
        temp = GPIOx->OSPEEDR; 
 800b1aa:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800b1ac:	ea07 0e06 	and.w	lr, r7, r6
        temp |= (GPIO_Init->Speed << (position * 2U));
 800b1b0:	68cf      	ldr	r7, [r1, #12]
 800b1b2:	fa07 f708 	lsl.w	r7, r7, r8
 800b1b6:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OSPEEDR = temp;
 800b1ba:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 800b1bc:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800b1be:	ea27 0e0c 	bic.w	lr, r7, ip
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800b1c2:	f3c5 1700 	ubfx	r7, r5, #4, #1
 800b1c6:	409f      	lsls	r7, r3
 800b1c8:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OTYPER = temp;
 800b1cc:	6047      	str	r7, [r0, #4]
        temp = GPIOx->PUPDR;
 800b1ce:	68c7      	ldr	r7, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800b1d0:	ea07 0e06 	and.w	lr, r7, r6
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800b1d4:	688f      	ldr	r7, [r1, #8]
 800b1d6:	fa07 f708 	lsl.w	r7, r7, r8
 800b1da:	ea47 070e 	orr.w	r7, r7, lr
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800b1de:	2c02      	cmp	r4, #2
        GPIOx->PUPDR = temp;
 800b1e0:	60c7      	str	r7, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800b1e2:	d119      	bne.n	800b218 <HAL_GPIO_Init+0xa4>
        temp = GPIOx->AFR[position >> 3U];
 800b1e4:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
 800b1e8:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800b1ec:	f003 0b07 	and.w	fp, r3, #7
        temp = GPIOx->AFR[position >> 3U];
 800b1f0:	f8da 7020 	ldr.w	r7, [sl, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800b1f4:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 800b1f8:	f04f 0e0f 	mov.w	lr, #15
 800b1fc:	fa0e fe0b 	lsl.w	lr, lr, fp
 800b200:	ea27 0e0e 	bic.w	lr, r7, lr
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800b204:	690f      	ldr	r7, [r1, #16]
 800b206:	fa07 f70b 	lsl.w	r7, r7, fp
 800b20a:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->AFR[position >> 3U] = temp;
 800b20e:	f8ca 7020 	str.w	r7, [sl, #32]
 800b212:	e001      	b.n	800b218 <HAL_GPIO_Init+0xa4>
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800b214:	2c03      	cmp	r4, #3
 800b216:	d1da      	bne.n	800b1ce <HAL_GPIO_Init+0x5a>
      temp = GPIOx->MODER;
 800b218:	6807      	ldr	r7, [r0, #0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800b21a:	fa04 f408 	lsl.w	r4, r4, r8
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800b21e:	403e      	ands	r6, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800b220:	4326      	orrs	r6, r4
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800b222:	00ec      	lsls	r4, r5, #3
      GPIOx->MODER = temp;
 800b224:	6006      	str	r6, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800b226:	d55f      	bpl.n	800b2e8 <HAL_GPIO_Init+0x174>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800b228:	f04f 0a00 	mov.w	sl, #0
 800b22c:	f8cd a004 	str.w	sl, [sp, #4]
 800b230:	f8d9 6044 	ldr.w	r6, [r9, #68]	; 0x44
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800b234:	4c37      	ldr	r4, [pc, #220]	; (800b314 <HAL_GPIO_Init+0x1a0>)
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800b236:	f446 4680 	orr.w	r6, r6, #16384	; 0x4000
 800b23a:	f8c9 6044 	str.w	r6, [r9, #68]	; 0x44
 800b23e:	f8d9 6044 	ldr.w	r6, [r9, #68]	; 0x44
 800b242:	f406 4680 	and.w	r6, r6, #16384	; 0x4000
 800b246:	9601      	str	r6, [sp, #4]
 800b248:	9e01      	ldr	r6, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 800b24a:	f023 0603 	bic.w	r6, r3, #3
 800b24e:	f106 4680 	add.w	r6, r6, #1073741824	; 0x40000000
 800b252:	f506 369c 	add.w	r6, r6, #79872	; 0x13800
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800b256:	f003 0e03 	and.w	lr, r3, #3
        temp = SYSCFG->EXTICR[position >> 2U];
 800b25a:	f8d6 8008 	ldr.w	r8, [r6, #8]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800b25e:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 800b262:	270f      	movs	r7, #15
 800b264:	fa07 f70e 	lsl.w	r7, r7, lr
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800b268:	42a0      	cmp	r0, r4
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800b26a:	ea28 0707 	bic.w	r7, r8, r7
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800b26e:	d042      	beq.n	800b2f6 <HAL_GPIO_Init+0x182>
 800b270:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 800b274:	42a0      	cmp	r0, r4
 800b276:	d040      	beq.n	800b2fa <HAL_GPIO_Init+0x186>
 800b278:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 800b27c:	42a0      	cmp	r0, r4
 800b27e:	d03e      	beq.n	800b2fe <HAL_GPIO_Init+0x18a>
 800b280:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 800b284:	42a0      	cmp	r0, r4
 800b286:	d03c      	beq.n	800b302 <HAL_GPIO_Init+0x18e>
 800b288:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 800b28c:	42a0      	cmp	r0, r4
 800b28e:	d03a      	beq.n	800b306 <HAL_GPIO_Init+0x192>
 800b290:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 800b294:	42a0      	cmp	r0, r4
 800b296:	d038      	beq.n	800b30a <HAL_GPIO_Init+0x196>
 800b298:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 800b29c:	42a0      	cmp	r0, r4
 800b29e:	bf0c      	ite	eq
 800b2a0:	2406      	moveq	r4, #6
 800b2a2:	2407      	movne	r4, #7
 800b2a4:	fa04 f40e 	lsl.w	r4, r4, lr
 800b2a8:	433c      	orrs	r4, r7
        SYSCFG->EXTICR[position >> 2U] = temp;
 800b2aa:	60b4      	str	r4, [r6, #8]
        temp = EXTI->IMR;
 800b2ac:	6814      	ldr	r4, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 800b2ae:	ea6f 060c 	mvn.w	r6, ip
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800b2b2:	03ef      	lsls	r7, r5, #15
        temp &= ~((uint32_t)iocurrent);
 800b2b4:	bf54      	ite	pl
 800b2b6:	4034      	andpl	r4, r6
        {
          temp |= iocurrent;
 800b2b8:	ea4c 0404 	orrmi.w	r4, ip, r4
        }
        EXTI->IMR = temp;
 800b2bc:	6014      	str	r4, [r2, #0]

        temp = EXTI->EMR;
 800b2be:	6854      	ldr	r4, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800b2c0:	03af      	lsls	r7, r5, #14
        temp &= ~((uint32_t)iocurrent);
 800b2c2:	bf54      	ite	pl
 800b2c4:	4034      	andpl	r4, r6
        {
          temp |= iocurrent;
 800b2c6:	ea4c 0404 	orrmi.w	r4, ip, r4
        }
        EXTI->EMR = temp;
 800b2ca:	6054      	str	r4, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800b2cc:	6894      	ldr	r4, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800b2ce:	02ef      	lsls	r7, r5, #11
        temp &= ~((uint32_t)iocurrent);
 800b2d0:	bf54      	ite	pl
 800b2d2:	4034      	andpl	r4, r6
        {
          temp |= iocurrent;
 800b2d4:	ea4c 0404 	orrmi.w	r4, ip, r4
        }
        EXTI->RTSR = temp;
 800b2d8:	6094      	str	r4, [r2, #8]

        temp = EXTI->FTSR;
 800b2da:	68d4      	ldr	r4, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800b2dc:	02ad      	lsls	r5, r5, #10
        temp &= ~((uint32_t)iocurrent);
 800b2de:	bf54      	ite	pl
 800b2e0:	4034      	andpl	r4, r6
        {
          temp |= iocurrent;
 800b2e2:	ea4c 0404 	orrmi.w	r4, ip, r4
        }
        EXTI->FTSR = temp;
 800b2e6:	60d4      	str	r4, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800b2e8:	3301      	adds	r3, #1
 800b2ea:	2b10      	cmp	r3, #16
 800b2ec:	f47f af48 	bne.w	800b180 <HAL_GPIO_Init+0xc>
      }
    }
  }
}
 800b2f0:	b003      	add	sp, #12
 800b2f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800b2f6:	4654      	mov	r4, sl
 800b2f8:	e7d4      	b.n	800b2a4 <HAL_GPIO_Init+0x130>
 800b2fa:	2401      	movs	r4, #1
 800b2fc:	e7d2      	b.n	800b2a4 <HAL_GPIO_Init+0x130>
 800b2fe:	2402      	movs	r4, #2
 800b300:	e7d0      	b.n	800b2a4 <HAL_GPIO_Init+0x130>
 800b302:	2403      	movs	r4, #3
 800b304:	e7ce      	b.n	800b2a4 <HAL_GPIO_Init+0x130>
 800b306:	2404      	movs	r4, #4
 800b308:	e7cc      	b.n	800b2a4 <HAL_GPIO_Init+0x130>
 800b30a:	2405      	movs	r4, #5
 800b30c:	e7ca      	b.n	800b2a4 <HAL_GPIO_Init+0x130>
 800b30e:	bf00      	nop
 800b310:	40013c00 	.word	0x40013c00
 800b314:	40020000 	.word	0x40020000
 800b318:	40023800 	.word	0x40023800

0800b31c <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800b31c:	6903      	ldr	r3, [r0, #16]
 800b31e:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 800b320:	bf14      	ite	ne
 800b322:	2001      	movne	r0, #1
 800b324:	2000      	moveq	r0, #0
 800b326:	4770      	bx	lr

0800b328 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800b328:	b10a      	cbz	r2, 800b32e <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800b32a:	6181      	str	r1, [r0, #24]
  }
}
 800b32c:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800b32e:	0409      	lsls	r1, r1, #16
 800b330:	e7fb      	b.n	800b32a <HAL_GPIO_WritePin+0x2>

0800b332 <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 800b332:	6943      	ldr	r3, [r0, #20]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800b334:	ea01 0203 	and.w	r2, r1, r3
 800b338:	ea21 0103 	bic.w	r1, r1, r3
 800b33c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800b340:	6181      	str	r1, [r0, #24]
}
 800b342:	4770      	bx	lr

0800b344 <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800b344:	4913      	ldr	r1, [pc, #76]	; (800b394 <HAL_RCC_GetSysClockFreq+0x50>)
{
 800b346:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800b348:	688b      	ldr	r3, [r1, #8]
 800b34a:	f003 030c 	and.w	r3, r3, #12
 800b34e:	2b04      	cmp	r3, #4
 800b350:	d01c      	beq.n	800b38c <HAL_RCC_GetSysClockFreq+0x48>
 800b352:	2b08      	cmp	r3, #8
 800b354:	d11c      	bne.n	800b390 <HAL_RCC_GetSysClockFreq+0x4c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800b356:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800b358:	684b      	ldr	r3, [r1, #4]
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800b35a:	6849      	ldr	r1, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800b35c:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800b360:	bf14      	ite	ne
 800b362:	480d      	ldrne	r0, [pc, #52]	; (800b398 <HAL_RCC_GetSysClockFreq+0x54>)
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800b364:	480d      	ldreq	r0, [pc, #52]	; (800b39c <HAL_RCC_GetSysClockFreq+0x58>)
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800b366:	f3c1 1188 	ubfx	r1, r1, #6, #9
 800b36a:	bf18      	it	ne
 800b36c:	2300      	movne	r3, #0
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800b36e:	f002 023f 	and.w	r2, r2, #63	; 0x3f
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800b372:	fba1 0100 	umull	r0, r1, r1, r0
 800b376:	f7fd fb53 	bl	8008a20 <__aeabi_uldivmod>
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800b37a:	4b06      	ldr	r3, [pc, #24]	; (800b394 <HAL_RCC_GetSysClockFreq+0x50>)
 800b37c:	685b      	ldr	r3, [r3, #4]
 800b37e:	f3c3 4301 	ubfx	r3, r3, #16, #2
 800b382:	3301      	adds	r3, #1
 800b384:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco/pllp;
 800b386:	fbb0 f0f3 	udiv	r0, r0, r3
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 800b38a:	bd08      	pop	{r3, pc}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800b38c:	4802      	ldr	r0, [pc, #8]	; (800b398 <HAL_RCC_GetSysClockFreq+0x54>)
 800b38e:	e7fc      	b.n	800b38a <HAL_RCC_GetSysClockFreq+0x46>
      sysclockfreq = HSI_VALUE;
 800b390:	4802      	ldr	r0, [pc, #8]	; (800b39c <HAL_RCC_GetSysClockFreq+0x58>)
  return sysclockfreq;
 800b392:	e7fa      	b.n	800b38a <HAL_RCC_GetSysClockFreq+0x46>
 800b394:	40023800 	.word	0x40023800
 800b398:	007a1200 	.word	0x007a1200
 800b39c:	00f42400 	.word	0x00f42400

0800b3a0 <HAL_RCC_ClockConfig>:
{
 800b3a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b3a4:	460d      	mov	r5, r1
  if(RCC_ClkInitStruct == NULL)
 800b3a6:	4604      	mov	r4, r0
 800b3a8:	b910      	cbnz	r0, 800b3b0 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 800b3aa:	2001      	movs	r0, #1
}
 800b3ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800b3b0:	4b44      	ldr	r3, [pc, #272]	; (800b4c4 <HAL_RCC_ClockConfig+0x124>)
 800b3b2:	681a      	ldr	r2, [r3, #0]
 800b3b4:	f002 0207 	and.w	r2, r2, #7
 800b3b8:	428a      	cmp	r2, r1
 800b3ba:	d328      	bcc.n	800b40e <HAL_RCC_ClockConfig+0x6e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800b3bc:	6822      	ldr	r2, [r4, #0]
 800b3be:	0797      	lsls	r7, r2, #30
 800b3c0:	d42d      	bmi.n	800b41e <HAL_RCC_ClockConfig+0x7e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800b3c2:	07d0      	lsls	r0, r2, #31
 800b3c4:	d441      	bmi.n	800b44a <HAL_RCC_ClockConfig+0xaa>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800b3c6:	4b3f      	ldr	r3, [pc, #252]	; (800b4c4 <HAL_RCC_ClockConfig+0x124>)
 800b3c8:	681a      	ldr	r2, [r3, #0]
 800b3ca:	f002 0207 	and.w	r2, r2, #7
 800b3ce:	42aa      	cmp	r2, r5
 800b3d0:	d866      	bhi.n	800b4a0 <HAL_RCC_ClockConfig+0x100>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800b3d2:	6822      	ldr	r2, [r4, #0]
 800b3d4:	0751      	lsls	r1, r2, #29
 800b3d6:	d46c      	bmi.n	800b4b2 <HAL_RCC_ClockConfig+0x112>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800b3d8:	0713      	lsls	r3, r2, #28
 800b3da:	d507      	bpl.n	800b3ec <HAL_RCC_ClockConfig+0x4c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800b3dc:	4a3a      	ldr	r2, [pc, #232]	; (800b4c8 <HAL_RCC_ClockConfig+0x128>)
 800b3de:	6921      	ldr	r1, [r4, #16]
 800b3e0:	6893      	ldr	r3, [r2, #8]
 800b3e2:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 800b3e6:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 800b3ea:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800b3ec:	f7ff ffaa 	bl	800b344 <HAL_RCC_GetSysClockFreq>
 800b3f0:	4b35      	ldr	r3, [pc, #212]	; (800b4c8 <HAL_RCC_ClockConfig+0x128>)
 800b3f2:	4a36      	ldr	r2, [pc, #216]	; (800b4cc <HAL_RCC_ClockConfig+0x12c>)
 800b3f4:	689b      	ldr	r3, [r3, #8]
 800b3f6:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800b3fa:	5cd3      	ldrb	r3, [r2, r3]
 800b3fc:	40d8      	lsrs	r0, r3
 800b3fe:	4b34      	ldr	r3, [pc, #208]	; (800b4d0 <HAL_RCC_ClockConfig+0x130>)
 800b400:	6018      	str	r0, [r3, #0]
  HAL_InitTick (uwTickPrio);
 800b402:	4b34      	ldr	r3, [pc, #208]	; (800b4d4 <HAL_RCC_ClockConfig+0x134>)
 800b404:	6818      	ldr	r0, [r3, #0]
 800b406:	f7ff fbdb 	bl	800abc0 <HAL_InitTick>
  return HAL_OK;
 800b40a:	2000      	movs	r0, #0
 800b40c:	e7ce      	b.n	800b3ac <HAL_RCC_ClockConfig+0xc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800b40e:	b2ca      	uxtb	r2, r1
 800b410:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800b412:	681b      	ldr	r3, [r3, #0]
 800b414:	f003 0307 	and.w	r3, r3, #7
 800b418:	428b      	cmp	r3, r1
 800b41a:	d1c6      	bne.n	800b3aa <HAL_RCC_ClockConfig+0xa>
 800b41c:	e7ce      	b.n	800b3bc <HAL_RCC_ClockConfig+0x1c>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800b41e:	4b2a      	ldr	r3, [pc, #168]	; (800b4c8 <HAL_RCC_ClockConfig+0x128>)
 800b420:	f012 0f04 	tst.w	r2, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800b424:	bf1e      	ittt	ne
 800b426:	6899      	ldrne	r1, [r3, #8]
 800b428:	f441 51e0 	orrne.w	r1, r1, #7168	; 0x1c00
 800b42c:	6099      	strne	r1, [r3, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800b42e:	0716      	lsls	r6, r2, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800b430:	bf42      	ittt	mi
 800b432:	6899      	ldrmi	r1, [r3, #8]
 800b434:	f441 4160 	orrmi.w	r1, r1, #57344	; 0xe000
 800b438:	6099      	strmi	r1, [r3, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800b43a:	4923      	ldr	r1, [pc, #140]	; (800b4c8 <HAL_RCC_ClockConfig+0x128>)
 800b43c:	68a0      	ldr	r0, [r4, #8]
 800b43e:	688b      	ldr	r3, [r1, #8]
 800b440:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800b444:	4303      	orrs	r3, r0
 800b446:	608b      	str	r3, [r1, #8]
 800b448:	e7bb      	b.n	800b3c2 <HAL_RCC_ClockConfig+0x22>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800b44a:	6862      	ldr	r2, [r4, #4]
 800b44c:	4b1e      	ldr	r3, [pc, #120]	; (800b4c8 <HAL_RCC_ClockConfig+0x128>)
 800b44e:	2a01      	cmp	r2, #1
 800b450:	d11c      	bne.n	800b48c <HAL_RCC_ClockConfig+0xec>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800b452:	681b      	ldr	r3, [r3, #0]
 800b454:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800b458:	d0a7      	beq.n	800b3aa <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800b45a:	4e1b      	ldr	r6, [pc, #108]	; (800b4c8 <HAL_RCC_ClockConfig+0x128>)
 800b45c:	68b3      	ldr	r3, [r6, #8]
 800b45e:	f023 0303 	bic.w	r3, r3, #3
 800b462:	4313      	orrs	r3, r2
 800b464:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 800b466:	f7ff fbf3 	bl	800ac50 <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800b46a:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 800b46e:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800b470:	68b3      	ldr	r3, [r6, #8]
 800b472:	6862      	ldr	r2, [r4, #4]
 800b474:	f003 030c 	and.w	r3, r3, #12
 800b478:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 800b47c:	d0a3      	beq.n	800b3c6 <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800b47e:	f7ff fbe7 	bl	800ac50 <HAL_GetTick>
 800b482:	1bc0      	subs	r0, r0, r7
 800b484:	4540      	cmp	r0, r8
 800b486:	d9f3      	bls.n	800b470 <HAL_RCC_ClockConfig+0xd0>
        return HAL_TIMEOUT;
 800b488:	2003      	movs	r0, #3
 800b48a:	e78f      	b.n	800b3ac <HAL_RCC_ClockConfig+0xc>
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800b48c:	1e91      	subs	r1, r2, #2
 800b48e:	2901      	cmp	r1, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800b490:	681b      	ldr	r3, [r3, #0]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800b492:	d802      	bhi.n	800b49a <HAL_RCC_ClockConfig+0xfa>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800b494:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 800b498:	e7de      	b.n	800b458 <HAL_RCC_ClockConfig+0xb8>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800b49a:	f013 0f02 	tst.w	r3, #2
 800b49e:	e7db      	b.n	800b458 <HAL_RCC_ClockConfig+0xb8>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800b4a0:	b2ea      	uxtb	r2, r5
 800b4a2:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800b4a4:	681b      	ldr	r3, [r3, #0]
 800b4a6:	f003 0307 	and.w	r3, r3, #7
 800b4aa:	42ab      	cmp	r3, r5
 800b4ac:	f47f af7d 	bne.w	800b3aa <HAL_RCC_ClockConfig+0xa>
 800b4b0:	e78f      	b.n	800b3d2 <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800b4b2:	4905      	ldr	r1, [pc, #20]	; (800b4c8 <HAL_RCC_ClockConfig+0x128>)
 800b4b4:	68e0      	ldr	r0, [r4, #12]
 800b4b6:	688b      	ldr	r3, [r1, #8]
 800b4b8:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 800b4bc:	4303      	orrs	r3, r0
 800b4be:	608b      	str	r3, [r1, #8]
 800b4c0:	e78a      	b.n	800b3d8 <HAL_RCC_ClockConfig+0x38>
 800b4c2:	bf00      	nop
 800b4c4:	40023c00 	.word	0x40023c00
 800b4c8:	40023800 	.word	0x40023800
 800b4cc:	0800cf28 	.word	0x0800cf28
 800b4d0:	20001064 	.word	0x20001064
 800b4d4:	2000106c 	.word	0x2000106c

0800b4d8 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800b4d8:	4b04      	ldr	r3, [pc, #16]	; (800b4ec <HAL_RCC_GetPCLK1Freq+0x14>)
 800b4da:	4a05      	ldr	r2, [pc, #20]	; (800b4f0 <HAL_RCC_GetPCLK1Freq+0x18>)
 800b4dc:	689b      	ldr	r3, [r3, #8]
 800b4de:	f3c3 2382 	ubfx	r3, r3, #10, #3
 800b4e2:	5cd3      	ldrb	r3, [r2, r3]
 800b4e4:	4a03      	ldr	r2, [pc, #12]	; (800b4f4 <HAL_RCC_GetPCLK1Freq+0x1c>)
 800b4e6:	6810      	ldr	r0, [r2, #0]
}
 800b4e8:	40d8      	lsrs	r0, r3
 800b4ea:	4770      	bx	lr
 800b4ec:	40023800 	.word	0x40023800
 800b4f0:	0800cf38 	.word	0x0800cf38
 800b4f4:	20001064 	.word	0x20001064

0800b4f8 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800b4f8:	4b04      	ldr	r3, [pc, #16]	; (800b50c <HAL_RCC_GetPCLK2Freq+0x14>)
 800b4fa:	4a05      	ldr	r2, [pc, #20]	; (800b510 <HAL_RCC_GetPCLK2Freq+0x18>)
 800b4fc:	689b      	ldr	r3, [r3, #8]
 800b4fe:	f3c3 3342 	ubfx	r3, r3, #13, #3
 800b502:	5cd3      	ldrb	r3, [r2, r3]
 800b504:	4a03      	ldr	r2, [pc, #12]	; (800b514 <HAL_RCC_GetPCLK2Freq+0x1c>)
 800b506:	6810      	ldr	r0, [r2, #0]
}
 800b508:	40d8      	lsrs	r0, r3
 800b50a:	4770      	bx	lr
 800b50c:	40023800 	.word	0x40023800
 800b510:	0800cf38 	.word	0x0800cf38
 800b514:	20001064 	.word	0x20001064

0800b518 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800b518:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800b51c:	4604      	mov	r4, r0
 800b51e:	b340      	cbz	r0, 800b572 <HAL_RCC_OscConfig+0x5a>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800b520:	6803      	ldr	r3, [r0, #0]
 800b522:	07dd      	lsls	r5, r3, #31
 800b524:	d410      	bmi.n	800b548 <HAL_RCC_OscConfig+0x30>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800b526:	6823      	ldr	r3, [r4, #0]
 800b528:	0798      	lsls	r0, r3, #30
 800b52a:	d45e      	bmi.n	800b5ea <HAL_RCC_OscConfig+0xd2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800b52c:	6823      	ldr	r3, [r4, #0]
 800b52e:	071a      	lsls	r2, r3, #28
 800b530:	f100 80a0 	bmi.w	800b674 <HAL_RCC_OscConfig+0x15c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800b534:	6823      	ldr	r3, [r4, #0]
 800b536:	075b      	lsls	r3, r3, #29
 800b538:	f100 80c0 	bmi.w	800b6bc <HAL_RCC_OscConfig+0x1a4>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800b53c:	69a0      	ldr	r0, [r4, #24]
 800b53e:	2800      	cmp	r0, #0
 800b540:	f040 8128 	bne.w	800b794 <HAL_RCC_OscConfig+0x27c>
          return HAL_ERROR;
        }
      }
    }
  }
  return HAL_OK;
 800b544:	2000      	movs	r0, #0
 800b546:	e02b      	b.n	800b5a0 <HAL_RCC_OscConfig+0x88>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800b548:	4b8f      	ldr	r3, [pc, #572]	; (800b788 <HAL_RCC_OscConfig+0x270>)
 800b54a:	689a      	ldr	r2, [r3, #8]
 800b54c:	f002 020c 	and.w	r2, r2, #12
 800b550:	2a04      	cmp	r2, #4
 800b552:	d007      	beq.n	800b564 <HAL_RCC_OscConfig+0x4c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800b554:	689a      	ldr	r2, [r3, #8]
 800b556:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800b55a:	2a08      	cmp	r2, #8
 800b55c:	d10b      	bne.n	800b576 <HAL_RCC_OscConfig+0x5e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800b55e:	685a      	ldr	r2, [r3, #4]
 800b560:	0251      	lsls	r1, r2, #9
 800b562:	d508      	bpl.n	800b576 <HAL_RCC_OscConfig+0x5e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800b564:	4b88      	ldr	r3, [pc, #544]	; (800b788 <HAL_RCC_OscConfig+0x270>)
 800b566:	681b      	ldr	r3, [r3, #0]
 800b568:	039a      	lsls	r2, r3, #14
 800b56a:	d5dc      	bpl.n	800b526 <HAL_RCC_OscConfig+0xe>
 800b56c:	6863      	ldr	r3, [r4, #4]
 800b56e:	2b00      	cmp	r3, #0
 800b570:	d1d9      	bne.n	800b526 <HAL_RCC_OscConfig+0xe>
          return HAL_ERROR;
 800b572:	2001      	movs	r0, #1
 800b574:	e014      	b.n	800b5a0 <HAL_RCC_OscConfig+0x88>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800b576:	6862      	ldr	r2, [r4, #4]
 800b578:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 800b57c:	d113      	bne.n	800b5a6 <HAL_RCC_OscConfig+0x8e>
 800b57e:	681a      	ldr	r2, [r3, #0]
 800b580:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800b584:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800b586:	f7ff fb63 	bl	800ac50 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800b58a:	4e7f      	ldr	r6, [pc, #508]	; (800b788 <HAL_RCC_OscConfig+0x270>)
        tickstart = HAL_GetTick();
 800b58c:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800b58e:	6833      	ldr	r3, [r6, #0]
 800b590:	039b      	lsls	r3, r3, #14
 800b592:	d4c8      	bmi.n	800b526 <HAL_RCC_OscConfig+0xe>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800b594:	f7ff fb5c 	bl	800ac50 <HAL_GetTick>
 800b598:	1b40      	subs	r0, r0, r5
 800b59a:	2864      	cmp	r0, #100	; 0x64
 800b59c:	d9f7      	bls.n	800b58e <HAL_RCC_OscConfig+0x76>
            return HAL_TIMEOUT;
 800b59e:	2003      	movs	r0, #3
}
 800b5a0:	b002      	add	sp, #8
 800b5a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800b5a6:	4d78      	ldr	r5, [pc, #480]	; (800b788 <HAL_RCC_OscConfig+0x270>)
 800b5a8:	f5b2 2fa0 	cmp.w	r2, #327680	; 0x50000
 800b5ac:	682b      	ldr	r3, [r5, #0]
 800b5ae:	d107      	bne.n	800b5c0 <HAL_RCC_OscConfig+0xa8>
 800b5b0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800b5b4:	602b      	str	r3, [r5, #0]
 800b5b6:	682b      	ldr	r3, [r5, #0]
 800b5b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b5bc:	602b      	str	r3, [r5, #0]
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800b5be:	e7e2      	b.n	800b586 <HAL_RCC_OscConfig+0x6e>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800b5c0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b5c4:	602b      	str	r3, [r5, #0]
 800b5c6:	682b      	ldr	r3, [r5, #0]
 800b5c8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800b5cc:	602b      	str	r3, [r5, #0]
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800b5ce:	2a00      	cmp	r2, #0
 800b5d0:	d1d9      	bne.n	800b586 <HAL_RCC_OscConfig+0x6e>
        tickstart = HAL_GetTick();
 800b5d2:	f7ff fb3d 	bl	800ac50 <HAL_GetTick>
 800b5d6:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800b5d8:	682b      	ldr	r3, [r5, #0]
 800b5da:	039f      	lsls	r7, r3, #14
 800b5dc:	d5a3      	bpl.n	800b526 <HAL_RCC_OscConfig+0xe>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800b5de:	f7ff fb37 	bl	800ac50 <HAL_GetTick>
 800b5e2:	1b80      	subs	r0, r0, r6
 800b5e4:	2864      	cmp	r0, #100	; 0x64
 800b5e6:	d9f7      	bls.n	800b5d8 <HAL_RCC_OscConfig+0xc0>
 800b5e8:	e7d9      	b.n	800b59e <HAL_RCC_OscConfig+0x86>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800b5ea:	4b67      	ldr	r3, [pc, #412]	; (800b788 <HAL_RCC_OscConfig+0x270>)
 800b5ec:	689a      	ldr	r2, [r3, #8]
 800b5ee:	f012 0f0c 	tst.w	r2, #12
 800b5f2:	d007      	beq.n	800b604 <HAL_RCC_OscConfig+0xec>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800b5f4:	689a      	ldr	r2, [r3, #8]
 800b5f6:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800b5fa:	2a08      	cmp	r2, #8
 800b5fc:	d111      	bne.n	800b622 <HAL_RCC_OscConfig+0x10a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800b5fe:	685b      	ldr	r3, [r3, #4]
 800b600:	025e      	lsls	r6, r3, #9
 800b602:	d40e      	bmi.n	800b622 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800b604:	4a60      	ldr	r2, [pc, #384]	; (800b788 <HAL_RCC_OscConfig+0x270>)
 800b606:	6813      	ldr	r3, [r2, #0]
 800b608:	079d      	lsls	r5, r3, #30
 800b60a:	d502      	bpl.n	800b612 <HAL_RCC_OscConfig+0xfa>
 800b60c:	68e3      	ldr	r3, [r4, #12]
 800b60e:	2b01      	cmp	r3, #1
 800b610:	d1af      	bne.n	800b572 <HAL_RCC_OscConfig+0x5a>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800b612:	6813      	ldr	r3, [r2, #0]
 800b614:	6921      	ldr	r1, [r4, #16]
 800b616:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800b61a:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 800b61e:	6013      	str	r3, [r2, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800b620:	e784      	b.n	800b52c <HAL_RCC_OscConfig+0x14>
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800b622:	68e2      	ldr	r2, [r4, #12]
 800b624:	4b59      	ldr	r3, [pc, #356]	; (800b78c <HAL_RCC_OscConfig+0x274>)
 800b626:	b1b2      	cbz	r2, 800b656 <HAL_RCC_OscConfig+0x13e>
        __HAL_RCC_HSI_ENABLE();
 800b628:	2201      	movs	r2, #1
 800b62a:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800b62c:	f7ff fb10 	bl	800ac50 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800b630:	4d55      	ldr	r5, [pc, #340]	; (800b788 <HAL_RCC_OscConfig+0x270>)
        tickstart = HAL_GetTick();
 800b632:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800b634:	682b      	ldr	r3, [r5, #0]
 800b636:	0798      	lsls	r0, r3, #30
 800b638:	d507      	bpl.n	800b64a <HAL_RCC_OscConfig+0x132>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800b63a:	682b      	ldr	r3, [r5, #0]
 800b63c:	6922      	ldr	r2, [r4, #16]
 800b63e:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800b642:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 800b646:	602b      	str	r3, [r5, #0]
 800b648:	e770      	b.n	800b52c <HAL_RCC_OscConfig+0x14>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800b64a:	f7ff fb01 	bl	800ac50 <HAL_GetTick>
 800b64e:	1b80      	subs	r0, r0, r6
 800b650:	2802      	cmp	r0, #2
 800b652:	d9ef      	bls.n	800b634 <HAL_RCC_OscConfig+0x11c>
 800b654:	e7a3      	b.n	800b59e <HAL_RCC_OscConfig+0x86>
        __HAL_RCC_HSI_DISABLE();
 800b656:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800b658:	f7ff fafa 	bl	800ac50 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800b65c:	4e4a      	ldr	r6, [pc, #296]	; (800b788 <HAL_RCC_OscConfig+0x270>)
        tickstart = HAL_GetTick();
 800b65e:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800b660:	6833      	ldr	r3, [r6, #0]
 800b662:	0799      	lsls	r1, r3, #30
 800b664:	f57f af62 	bpl.w	800b52c <HAL_RCC_OscConfig+0x14>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800b668:	f7ff faf2 	bl	800ac50 <HAL_GetTick>
 800b66c:	1b40      	subs	r0, r0, r5
 800b66e:	2802      	cmp	r0, #2
 800b670:	d9f6      	bls.n	800b660 <HAL_RCC_OscConfig+0x148>
 800b672:	e794      	b.n	800b59e <HAL_RCC_OscConfig+0x86>
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800b674:	6962      	ldr	r2, [r4, #20]
 800b676:	4b45      	ldr	r3, [pc, #276]	; (800b78c <HAL_RCC_OscConfig+0x274>)
 800b678:	b182      	cbz	r2, 800b69c <HAL_RCC_OscConfig+0x184>
      __HAL_RCC_LSI_ENABLE();
 800b67a:	2201      	movs	r2, #1
 800b67c:	f8c3 2e80 	str.w	r2, [r3, #3712]	; 0xe80
      tickstart = HAL_GetTick();
 800b680:	f7ff fae6 	bl	800ac50 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800b684:	4e40      	ldr	r6, [pc, #256]	; (800b788 <HAL_RCC_OscConfig+0x270>)
      tickstart = HAL_GetTick();
 800b686:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800b688:	6f73      	ldr	r3, [r6, #116]	; 0x74
 800b68a:	079f      	lsls	r7, r3, #30
 800b68c:	f53f af52 	bmi.w	800b534 <HAL_RCC_OscConfig+0x1c>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800b690:	f7ff fade 	bl	800ac50 <HAL_GetTick>
 800b694:	1b40      	subs	r0, r0, r5
 800b696:	2802      	cmp	r0, #2
 800b698:	d9f6      	bls.n	800b688 <HAL_RCC_OscConfig+0x170>
 800b69a:	e780      	b.n	800b59e <HAL_RCC_OscConfig+0x86>
      __HAL_RCC_LSI_DISABLE();
 800b69c:	f8c3 2e80 	str.w	r2, [r3, #3712]	; 0xe80
      tickstart = HAL_GetTick();
 800b6a0:	f7ff fad6 	bl	800ac50 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800b6a4:	4e38      	ldr	r6, [pc, #224]	; (800b788 <HAL_RCC_OscConfig+0x270>)
      tickstart = HAL_GetTick();
 800b6a6:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800b6a8:	6f73      	ldr	r3, [r6, #116]	; 0x74
 800b6aa:	0798      	lsls	r0, r3, #30
 800b6ac:	f57f af42 	bpl.w	800b534 <HAL_RCC_OscConfig+0x1c>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800b6b0:	f7ff face 	bl	800ac50 <HAL_GetTick>
 800b6b4:	1b40      	subs	r0, r0, r5
 800b6b6:	2802      	cmp	r0, #2
 800b6b8:	d9f6      	bls.n	800b6a8 <HAL_RCC_OscConfig+0x190>
 800b6ba:	e770      	b.n	800b59e <HAL_RCC_OscConfig+0x86>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800b6bc:	4b32      	ldr	r3, [pc, #200]	; (800b788 <HAL_RCC_OscConfig+0x270>)
 800b6be:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800b6c0:	f012 5280 	ands.w	r2, r2, #268435456	; 0x10000000
 800b6c4:	d128      	bne.n	800b718 <HAL_RCC_OscConfig+0x200>
      __HAL_RCC_PWR_CLK_ENABLE();
 800b6c6:	9201      	str	r2, [sp, #4]
 800b6c8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800b6ca:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800b6ce:	641a      	str	r2, [r3, #64]	; 0x40
 800b6d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b6d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b6d6:	9301      	str	r3, [sp, #4]
 800b6d8:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 800b6da:	2701      	movs	r7, #1
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800b6dc:	4d2c      	ldr	r5, [pc, #176]	; (800b790 <HAL_RCC_OscConfig+0x278>)
 800b6de:	682b      	ldr	r3, [r5, #0]
 800b6e0:	05d9      	lsls	r1, r3, #23
 800b6e2:	d51b      	bpl.n	800b71c <HAL_RCC_OscConfig+0x204>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800b6e4:	68a3      	ldr	r3, [r4, #8]
 800b6e6:	4d28      	ldr	r5, [pc, #160]	; (800b788 <HAL_RCC_OscConfig+0x270>)
 800b6e8:	2b01      	cmp	r3, #1
 800b6ea:	d127      	bne.n	800b73c <HAL_RCC_OscConfig+0x224>
 800b6ec:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800b6ee:	f043 0301 	orr.w	r3, r3, #1
 800b6f2:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
 800b6f4:	f7ff faac 	bl	800ac50 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800b6f8:	4e23      	ldr	r6, [pc, #140]	; (800b788 <HAL_RCC_OscConfig+0x270>)
      tickstart = HAL_GetTick();
 800b6fa:	4605      	mov	r5, r0
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800b6fc:	f241 3888 	movw	r8, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800b700:	6f33      	ldr	r3, [r6, #112]	; 0x70
 800b702:	079b      	lsls	r3, r3, #30
 800b704:	d539      	bpl.n	800b77a <HAL_RCC_OscConfig+0x262>
    if(pwrclkchanged == SET)
 800b706:	2f00      	cmp	r7, #0
 800b708:	f43f af18 	beq.w	800b53c <HAL_RCC_OscConfig+0x24>
      __HAL_RCC_PWR_CLK_DISABLE();
 800b70c:	4a1e      	ldr	r2, [pc, #120]	; (800b788 <HAL_RCC_OscConfig+0x270>)
 800b70e:	6c13      	ldr	r3, [r2, #64]	; 0x40
 800b710:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800b714:	6413      	str	r3, [r2, #64]	; 0x40
 800b716:	e711      	b.n	800b53c <HAL_RCC_OscConfig+0x24>
    FlagStatus       pwrclkchanged = RESET;
 800b718:	2700      	movs	r7, #0
 800b71a:	e7df      	b.n	800b6dc <HAL_RCC_OscConfig+0x1c4>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800b71c:	682b      	ldr	r3, [r5, #0]
 800b71e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b722:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 800b724:	f7ff fa94 	bl	800ac50 <HAL_GetTick>
 800b728:	4606      	mov	r6, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800b72a:	682b      	ldr	r3, [r5, #0]
 800b72c:	05da      	lsls	r2, r3, #23
 800b72e:	d4d9      	bmi.n	800b6e4 <HAL_RCC_OscConfig+0x1cc>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800b730:	f7ff fa8e 	bl	800ac50 <HAL_GetTick>
 800b734:	1b80      	subs	r0, r0, r6
 800b736:	2802      	cmp	r0, #2
 800b738:	d9f7      	bls.n	800b72a <HAL_RCC_OscConfig+0x212>
 800b73a:	e730      	b.n	800b59e <HAL_RCC_OscConfig+0x86>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800b73c:	2b05      	cmp	r3, #5
 800b73e:	d104      	bne.n	800b74a <HAL_RCC_OscConfig+0x232>
 800b740:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800b742:	f043 0304 	orr.w	r3, r3, #4
 800b746:	672b      	str	r3, [r5, #112]	; 0x70
 800b748:	e7d0      	b.n	800b6ec <HAL_RCC_OscConfig+0x1d4>
 800b74a:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 800b74c:	f022 0201 	bic.w	r2, r2, #1
 800b750:	672a      	str	r2, [r5, #112]	; 0x70
 800b752:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 800b754:	f022 0204 	bic.w	r2, r2, #4
 800b758:	672a      	str	r2, [r5, #112]	; 0x70
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800b75a:	2b00      	cmp	r3, #0
 800b75c:	d1ca      	bne.n	800b6f4 <HAL_RCC_OscConfig+0x1dc>
      tickstart = HAL_GetTick();
 800b75e:	f7ff fa77 	bl	800ac50 <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800b762:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 800b766:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800b768:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800b76a:	0798      	lsls	r0, r3, #30
 800b76c:	d5cb      	bpl.n	800b706 <HAL_RCC_OscConfig+0x1ee>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800b76e:	f7ff fa6f 	bl	800ac50 <HAL_GetTick>
 800b772:	1b80      	subs	r0, r0, r6
 800b774:	4540      	cmp	r0, r8
 800b776:	d9f7      	bls.n	800b768 <HAL_RCC_OscConfig+0x250>
 800b778:	e711      	b.n	800b59e <HAL_RCC_OscConfig+0x86>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800b77a:	f7ff fa69 	bl	800ac50 <HAL_GetTick>
 800b77e:	1b40      	subs	r0, r0, r5
 800b780:	4540      	cmp	r0, r8
 800b782:	d9bd      	bls.n	800b700 <HAL_RCC_OscConfig+0x1e8>
 800b784:	e70b      	b.n	800b59e <HAL_RCC_OscConfig+0x86>
 800b786:	bf00      	nop
 800b788:	40023800 	.word	0x40023800
 800b78c:	42470000 	.word	0x42470000
 800b790:	40007000 	.word	0x40007000
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800b794:	4d3b      	ldr	r5, [pc, #236]	; (800b884 <HAL_RCC_OscConfig+0x36c>)
 800b796:	68ab      	ldr	r3, [r5, #8]
 800b798:	f003 030c 	and.w	r3, r3, #12
 800b79c:	2b08      	cmp	r3, #8
 800b79e:	d040      	beq.n	800b822 <HAL_RCC_OscConfig+0x30a>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800b7a0:	4b39      	ldr	r3, [pc, #228]	; (800b888 <HAL_RCC_OscConfig+0x370>)
 800b7a2:	2200      	movs	r2, #0
 800b7a4:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 800b7a6:	661a      	str	r2, [r3, #96]	; 0x60
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800b7a8:	d12e      	bne.n	800b808 <HAL_RCC_OscConfig+0x2f0>
        tickstart = HAL_GetTick();
 800b7aa:	f7ff fa51 	bl	800ac50 <HAL_GetTick>
 800b7ae:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800b7b0:	682b      	ldr	r3, [r5, #0]
 800b7b2:	0199      	lsls	r1, r3, #6
 800b7b4:	d422      	bmi.n	800b7fc <HAL_RCC_OscConfig+0x2e4>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800b7b6:	e9d4 3207 	ldrd	r3, r2, [r4, #28]
 800b7ba:	4313      	orrs	r3, r2
 800b7bc:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800b7be:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 800b7c2:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800b7c4:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800b7c8:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800b7ca:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
 800b7ce:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800b7d0:	0852      	lsrs	r2, r2, #1
 800b7d2:	3a01      	subs	r2, #1
 800b7d4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b7d8:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 800b7da:	4b2b      	ldr	r3, [pc, #172]	; (800b888 <HAL_RCC_OscConfig+0x370>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800b7dc:	4d29      	ldr	r5, [pc, #164]	; (800b884 <HAL_RCC_OscConfig+0x36c>)
        __HAL_RCC_PLL_ENABLE();
 800b7de:	2201      	movs	r2, #1
 800b7e0:	661a      	str	r2, [r3, #96]	; 0x60
        tickstart = HAL_GetTick();
 800b7e2:	f7ff fa35 	bl	800ac50 <HAL_GetTick>
 800b7e6:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800b7e8:	682b      	ldr	r3, [r5, #0]
 800b7ea:	019a      	lsls	r2, r3, #6
 800b7ec:	f53f aeaa 	bmi.w	800b544 <HAL_RCC_OscConfig+0x2c>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800b7f0:	f7ff fa2e 	bl	800ac50 <HAL_GetTick>
 800b7f4:	1b00      	subs	r0, r0, r4
 800b7f6:	2802      	cmp	r0, #2
 800b7f8:	d9f6      	bls.n	800b7e8 <HAL_RCC_OscConfig+0x2d0>
 800b7fa:	e6d0      	b.n	800b59e <HAL_RCC_OscConfig+0x86>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800b7fc:	f7ff fa28 	bl	800ac50 <HAL_GetTick>
 800b800:	1b80      	subs	r0, r0, r6
 800b802:	2802      	cmp	r0, #2
 800b804:	d9d4      	bls.n	800b7b0 <HAL_RCC_OscConfig+0x298>
 800b806:	e6ca      	b.n	800b59e <HAL_RCC_OscConfig+0x86>
        tickstart = HAL_GetTick();
 800b808:	f7ff fa22 	bl	800ac50 <HAL_GetTick>
 800b80c:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800b80e:	682b      	ldr	r3, [r5, #0]
 800b810:	019b      	lsls	r3, r3, #6
 800b812:	f57f ae97 	bpl.w	800b544 <HAL_RCC_OscConfig+0x2c>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800b816:	f7ff fa1b 	bl	800ac50 <HAL_GetTick>
 800b81a:	1b00      	subs	r0, r0, r4
 800b81c:	2802      	cmp	r0, #2
 800b81e:	d9f6      	bls.n	800b80e <HAL_RCC_OscConfig+0x2f6>
 800b820:	e6bd      	b.n	800b59e <HAL_RCC_OscConfig+0x86>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800b822:	2801      	cmp	r0, #1
 800b824:	f43f aebc 	beq.w	800b5a0 <HAL_RCC_OscConfig+0x88>
        pll_config = RCC->PLLCFGR;
 800b828:	686b      	ldr	r3, [r5, #4]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800b82a:	69e2      	ldr	r2, [r4, #28]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800b82c:	f403 0180 	and.w	r1, r3, #4194304	; 0x400000
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800b830:	4291      	cmp	r1, r2
 800b832:	f47f ae9e 	bne.w	800b572 <HAL_RCC_OscConfig+0x5a>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800b836:	6a21      	ldr	r1, [r4, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800b838:	f003 023f 	and.w	r2, r3, #63	; 0x3f
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800b83c:	428a      	cmp	r2, r1
 800b83e:	f47f ae98 	bne.w	800b572 <HAL_RCC_OscConfig+0x5a>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800b842:	6a61      	ldr	r1, [r4, #36]	; 0x24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800b844:	f647 72c0 	movw	r2, #32704	; 0x7fc0
 800b848:	401a      	ands	r2, r3
 800b84a:	ebb2 1f81 	cmp.w	r2, r1, lsl #6
 800b84e:	f47f ae90 	bne.w	800b572 <HAL_RCC_OscConfig+0x5a>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800b852:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800b854:	0852      	lsrs	r2, r2, #1
 800b856:	f403 3140 	and.w	r1, r3, #196608	; 0x30000
 800b85a:	3a01      	subs	r2, #1
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800b85c:	ebb1 4f02 	cmp.w	r1, r2, lsl #16
 800b860:	f47f ae87 	bne.w	800b572 <HAL_RCC_OscConfig+0x5a>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800b864:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800b866:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800b86a:	ebb2 6f01 	cmp.w	r2, r1, lsl #24
 800b86e:	f47f ae80 	bne.w	800b572 <HAL_RCC_OscConfig+0x5a>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 800b872:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800b874:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800b878:	ebb3 7f02 	cmp.w	r3, r2, lsl #28
 800b87c:	f43f ae62 	beq.w	800b544 <HAL_RCC_OscConfig+0x2c>
 800b880:	e677      	b.n	800b572 <HAL_RCC_OscConfig+0x5a>
 800b882:	bf00      	nop
 800b884:	40023800 	.word	0x40023800
 800b888:	42470000 	.word	0x42470000

0800b88c <UART_SetConfig>:
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800b88c:	6803      	ldr	r3, [r0, #0]
 800b88e:	68c1      	ldr	r1, [r0, #12]
 800b890:	691a      	ldr	r2, [r3, #16]
 800b892:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 800b896:	430a      	orrs	r2, r1
{
 800b898:	b570      	push	{r4, r5, r6, lr}
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800b89a:	611a      	str	r2, [r3, #16]
{
 800b89c:	4605      	mov	r5, r0
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800b89e:	6882      	ldr	r2, [r0, #8]
 800b8a0:	6900      	ldr	r0, [r0, #16]
  MODIFY_REG(huart->Instance->CR1,
 800b8a2:	68d9      	ldr	r1, [r3, #12]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800b8a4:	4302      	orrs	r2, r0
 800b8a6:	6968      	ldr	r0, [r5, #20]
 800b8a8:	4302      	orrs	r2, r0
 800b8aa:	69e8      	ldr	r0, [r5, #28]
  MODIFY_REG(huart->Instance->CR1,
 800b8ac:	f421 4116 	bic.w	r1, r1, #38400	; 0x9600
 800b8b0:	f021 010c 	bic.w	r1, r1, #12
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800b8b4:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1,
 800b8b6:	430a      	orrs	r2, r1
 800b8b8:	60da      	str	r2, [r3, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800b8ba:	695a      	ldr	r2, [r3, #20]
 800b8bc:	69a9      	ldr	r1, [r5, #24]
 800b8be:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800b8c2:	430a      	orrs	r2, r1
 800b8c4:	615a      	str	r2, [r3, #20]


#if defined(USART6) && defined(UART9) && defined(UART10)
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
 800b8c6:	4a23      	ldr	r2, [pc, #140]	; (800b954 <UART_SetConfig+0xc8>)
 800b8c8:	4293      	cmp	r3, r2
 800b8ca:	d00b      	beq.n	800b8e4 <UART_SetConfig+0x58>
 800b8cc:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800b8d0:	4293      	cmp	r3, r2
 800b8d2:	d007      	beq.n	800b8e4 <UART_SetConfig+0x58>
 800b8d4:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800b8d8:	4293      	cmp	r3, r2
 800b8da:	d003      	beq.n	800b8e4 <UART_SetConfig+0x58>
 800b8dc:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800b8e0:	4293      	cmp	r3, r2
 800b8e2:	d123      	bne.n	800b92c <UART_SetConfig+0xa0>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800b8e4:	f7ff fe08 	bl	800b4f8 <HAL_RCC_GetPCLK2Freq>
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800b8e8:	69eb      	ldr	r3, [r5, #28]
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800b8ea:	2119      	movs	r1, #25
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800b8ec:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800b8f0:	e9d5 4600 	ldrd	r4, r6, [r5]
 800b8f4:	fba0 0101 	umull	r0, r1, r0, r1
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800b8f8:	d11b      	bne.n	800b932 <UART_SetConfig+0xa6>
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800b8fa:	19b2      	adds	r2, r6, r6
 800b8fc:	f04f 0300 	mov.w	r3, #0
 800b900:	415b      	adcs	r3, r3
 800b902:	f7fd f88d 	bl	8008a20 <__aeabi_uldivmod>
 800b906:	2164      	movs	r1, #100	; 0x64
 800b908:	fbb0 f5f1 	udiv	r5, r0, r1
 800b90c:	fb01 0315 	mls	r3, r1, r5, r0
 800b910:	00db      	lsls	r3, r3, #3
 800b912:	3332      	adds	r3, #50	; 0x32
 800b914:	fbb3 f3f1 	udiv	r3, r3, r1
 800b918:	f003 0207 	and.w	r2, r3, #7
 800b91c:	005b      	lsls	r3, r3, #1
 800b91e:	eb02 1205 	add.w	r2, r2, r5, lsl #4
 800b922:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800b926:	4413      	add	r3, r2
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800b928:	60a3      	str	r3, [r4, #8]
  }
}
 800b92a:	bd70      	pop	{r4, r5, r6, pc}
      pclk = HAL_RCC_GetPCLK1Freq();
 800b92c:	f7ff fdd4 	bl	800b4d8 <HAL_RCC_GetPCLK1Freq>
 800b930:	e7da      	b.n	800b8e8 <UART_SetConfig+0x5c>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800b932:	00b2      	lsls	r2, r6, #2
 800b934:	0fb3      	lsrs	r3, r6, #30
 800b936:	f7fd f873 	bl	8008a20 <__aeabi_uldivmod>
 800b93a:	2264      	movs	r2, #100	; 0x64
 800b93c:	fbb0 f1f2 	udiv	r1, r0, r2
 800b940:	fb02 0311 	mls	r3, r2, r1, r0
 800b944:	011b      	lsls	r3, r3, #4
 800b946:	3332      	adds	r3, #50	; 0x32
 800b948:	fbb3 f3f2 	udiv	r3, r3, r2
 800b94c:	eb03 1301 	add.w	r3, r3, r1, lsl #4
 800b950:	e7ea      	b.n	800b928 <UART_SetConfig+0x9c>
 800b952:	bf00      	nop
 800b954:	40011000 	.word	0x40011000

0800b958 <UART_WaitOnFlagUntilTimeout.constprop.0>:
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
 800b958:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b95a:	4604      	mov	r4, r0
 800b95c:	460e      	mov	r6, r1
 800b95e:	4617      	mov	r7, r2
 800b960:	461d      	mov	r5, r3
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b962:	6822      	ldr	r2, [r4, #0]
 800b964:	6813      	ldr	r3, [r2, #0]
 800b966:	ea36 0303 	bics.w	r3, r6, r3
 800b96a:	d101      	bne.n	800b970 <UART_WaitOnFlagUntilTimeout.constprop.0+0x18>
  return HAL_OK;
 800b96c:	2000      	movs	r0, #0
 800b96e:	e014      	b.n	800b99a <UART_WaitOnFlagUntilTimeout.constprop.0+0x42>
    if (Timeout != HAL_MAX_DELAY)
 800b970:	1c6b      	adds	r3, r5, #1
 800b972:	d0f7      	beq.n	800b964 <UART_WaitOnFlagUntilTimeout.constprop.0+0xc>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800b974:	b995      	cbnz	r5, 800b99c <UART_WaitOnFlagUntilTimeout.constprop.0+0x44>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800b976:	6823      	ldr	r3, [r4, #0]
 800b978:	68da      	ldr	r2, [r3, #12]
 800b97a:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800b97e:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b980:	695a      	ldr	r2, [r3, #20]
 800b982:	f022 0201 	bic.w	r2, r2, #1
 800b986:	615a      	str	r2, [r3, #20]
        huart->gState  = HAL_UART_STATE_READY;
 800b988:	2320      	movs	r3, #32
 800b98a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800b98e:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        __HAL_UNLOCK(huart);
 800b992:	2300      	movs	r3, #0
 800b994:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
 800b998:	2003      	movs	r0, #3
}
 800b99a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800b99c:	f7ff f958 	bl	800ac50 <HAL_GetTick>
 800b9a0:	1bc0      	subs	r0, r0, r7
 800b9a2:	4285      	cmp	r5, r0
 800b9a4:	d2dd      	bcs.n	800b962 <UART_WaitOnFlagUntilTimeout.constprop.0+0xa>
 800b9a6:	e7e6      	b.n	800b976 <UART_WaitOnFlagUntilTimeout.constprop.0+0x1e>

0800b9a8 <HAL_UART_Init>:
{
 800b9a8:	b510      	push	{r4, lr}
  if (huart == NULL)
 800b9aa:	4604      	mov	r4, r0
 800b9ac:	b340      	cbz	r0, 800ba00 <HAL_UART_Init+0x58>
  if (huart->gState == HAL_UART_STATE_RESET)
 800b9ae:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800b9b2:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800b9b6:	b91b      	cbnz	r3, 800b9c0 <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 800b9b8:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_UART_MspInit(huart);
 800b9bc:	f7fd fa34 	bl	8008e28 <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 800b9c0:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 800b9c2:	2324      	movs	r3, #36	; 0x24
 800b9c4:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UART_DISABLE(huart);
 800b9c8:	68d3      	ldr	r3, [r2, #12]
 800b9ca:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800b9ce:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 800b9d0:	4620      	mov	r0, r4
 800b9d2:	f7ff ff5b 	bl	800b88c <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800b9d6:	6823      	ldr	r3, [r4, #0]
 800b9d8:	691a      	ldr	r2, [r3, #16]
 800b9da:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800b9de:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800b9e0:	695a      	ldr	r2, [r3, #20]
 800b9e2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800b9e6:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 800b9e8:	68da      	ldr	r2, [r3, #12]
 800b9ea:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800b9ee:	60da      	str	r2, [r3, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b9f0:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 800b9f2:	2320      	movs	r3, #32
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b9f4:	6420      	str	r0, [r4, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800b9f6:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800b9fa:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
}
 800b9fe:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 800ba00:	2001      	movs	r0, #1
 800ba02:	e7fc      	b.n	800b9fe <HAL_UART_Init+0x56>

0800ba04 <HAL_UART_Transmit>:
{
 800ba04:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ba06:	4617      	mov	r7, r2
  if (huart->gState == HAL_UART_STATE_READY)
 800ba08:	f890 203d 	ldrb.w	r2, [r0, #61]	; 0x3d
{
 800ba0c:	9300      	str	r3, [sp, #0]
  if (huart->gState == HAL_UART_STATE_READY)
 800ba0e:	2a20      	cmp	r2, #32
{
 800ba10:	4604      	mov	r4, r0
 800ba12:	460e      	mov	r6, r1
  if (huart->gState == HAL_UART_STATE_READY)
 800ba14:	d149      	bne.n	800baaa <HAL_UART_Transmit+0xa6>
    if ((pData == NULL) || (Size == 0U))
 800ba16:	2900      	cmp	r1, #0
 800ba18:	d045      	beq.n	800baa6 <HAL_UART_Transmit+0xa2>
 800ba1a:	2f00      	cmp	r7, #0
 800ba1c:	d043      	beq.n	800baa6 <HAL_UART_Transmit+0xa2>
    __HAL_LOCK(huart);
 800ba1e:	f890 203c 	ldrb.w	r2, [r0, #60]	; 0x3c
 800ba22:	2a01      	cmp	r2, #1
 800ba24:	d041      	beq.n	800baaa <HAL_UART_Transmit+0xa6>
 800ba26:	2201      	movs	r2, #1
 800ba28:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ba2c:	2500      	movs	r5, #0
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800ba2e:	2221      	movs	r2, #33	; 0x21
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ba30:	6405      	str	r5, [r0, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800ba32:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
    tickstart = HAL_GetTick();
 800ba36:	f7ff f90b 	bl	800ac50 <HAL_GetTick>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800ba3a:	68a1      	ldr	r1, [r4, #8]
 800ba3c:	9b00      	ldr	r3, [sp, #0]
    huart->TxXferSize = Size;
 800ba3e:	84a7      	strh	r7, [r4, #36]	; 0x24
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800ba40:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
    tickstart = HAL_GetTick();
 800ba44:	4602      	mov	r2, r0
    huart->TxXferCount = Size;
 800ba46:	84e7      	strh	r7, [r4, #38]	; 0x26
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800ba48:	d103      	bne.n	800ba52 <HAL_UART_Transmit+0x4e>
 800ba4a:	6921      	ldr	r1, [r4, #16]
 800ba4c:	b909      	cbnz	r1, 800ba52 <HAL_UART_Transmit+0x4e>
 800ba4e:	4635      	mov	r5, r6
      pdata8bits  = NULL;
 800ba50:	460e      	mov	r6, r1
    __HAL_UNLOCK(huart);
 800ba52:	2100      	movs	r1, #0
 800ba54:	f884 103c 	strb.w	r1, [r4, #60]	; 0x3c
    while (huart->TxXferCount > 0U)
 800ba58:	8ce1      	ldrh	r1, [r4, #38]	; 0x26
 800ba5a:	b289      	uxth	r1, r1
 800ba5c:	b941      	cbnz	r1, 800ba70 <HAL_UART_Transmit+0x6c>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800ba5e:	2140      	movs	r1, #64	; 0x40
 800ba60:	4620      	mov	r0, r4
 800ba62:	f7ff ff79 	bl	800b958 <UART_WaitOnFlagUntilTimeout.constprop.0>
 800ba66:	b960      	cbnz	r0, 800ba82 <HAL_UART_Transmit+0x7e>
    huart->gState = HAL_UART_STATE_READY;
 800ba68:	2320      	movs	r3, #32
 800ba6a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    return HAL_OK;
 800ba6e:	e009      	b.n	800ba84 <HAL_UART_Transmit+0x80>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800ba70:	2180      	movs	r1, #128	; 0x80
 800ba72:	4620      	mov	r0, r4
 800ba74:	e9cd 2300 	strd	r2, r3, [sp]
 800ba78:	f7ff ff6e 	bl	800b958 <UART_WaitOnFlagUntilTimeout.constprop.0>
 800ba7c:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ba80:	b110      	cbz	r0, 800ba88 <HAL_UART_Transmit+0x84>
        return HAL_TIMEOUT;
 800ba82:	2003      	movs	r0, #3
}
 800ba84:	b003      	add	sp, #12
 800ba86:	bdf0      	pop	{r4, r5, r6, r7, pc}
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800ba88:	6820      	ldr	r0, [r4, #0]
      if (pdata8bits == NULL)
 800ba8a:	b94e      	cbnz	r6, 800baa0 <HAL_UART_Transmit+0x9c>
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800ba8c:	f835 1b02 	ldrh.w	r1, [r5], #2
 800ba90:	f3c1 0108 	ubfx	r1, r1, #0, #9
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800ba94:	6041      	str	r1, [r0, #4]
      huart->TxXferCount--;
 800ba96:	8ce1      	ldrh	r1, [r4, #38]	; 0x26
 800ba98:	3901      	subs	r1, #1
 800ba9a:	b289      	uxth	r1, r1
 800ba9c:	84e1      	strh	r1, [r4, #38]	; 0x26
 800ba9e:	e7db      	b.n	800ba58 <HAL_UART_Transmit+0x54>
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800baa0:	f816 1b01 	ldrb.w	r1, [r6], #1
 800baa4:	e7f6      	b.n	800ba94 <HAL_UART_Transmit+0x90>
      return  HAL_ERROR;
 800baa6:	2001      	movs	r0, #1
 800baa8:	e7ec      	b.n	800ba84 <HAL_UART_Transmit+0x80>
    return HAL_BUSY;
 800baaa:	2002      	movs	r0, #2
 800baac:	e7ea      	b.n	800ba84 <HAL_UART_Transmit+0x80>

0800baae <HAL_UART_Receive>:
{
 800baae:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bab2:	4699      	mov	r9, r3
  if (huart->RxState == HAL_UART_STATE_READY)
 800bab4:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
 800bab8:	2b20      	cmp	r3, #32
{
 800baba:	4604      	mov	r4, r0
 800babc:	460f      	mov	r7, r1
 800babe:	4615      	mov	r5, r2
  if (huart->RxState == HAL_UART_STATE_READY)
 800bac0:	d14d      	bne.n	800bb5e <HAL_UART_Receive+0xb0>
    if ((pData == NULL) || (Size == 0U))
 800bac2:	2900      	cmp	r1, #0
 800bac4:	d049      	beq.n	800bb5a <HAL_UART_Receive+0xac>
 800bac6:	2a00      	cmp	r2, #0
 800bac8:	d047      	beq.n	800bb5a <HAL_UART_Receive+0xac>
    __HAL_LOCK(huart);
 800baca:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 800bace:	2b01      	cmp	r3, #1
 800bad0:	d045      	beq.n	800bb5e <HAL_UART_Receive+0xb0>
 800bad2:	2301      	movs	r3, #1
 800bad4:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bad8:	2600      	movs	r6, #0
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800bada:	2322      	movs	r3, #34	; 0x22
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800badc:	6406      	str	r6, [r0, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800bade:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bae2:	6306      	str	r6, [r0, #48]	; 0x30
    tickstart = HAL_GetTick();
 800bae4:	f7ff f8b4 	bl	800ac50 <HAL_GetTick>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800bae8:	68a3      	ldr	r3, [r4, #8]
    huart->RxXferSize = Size;
 800baea:	85a5      	strh	r5, [r4, #44]	; 0x2c
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800baec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
    tickstart = HAL_GetTick();
 800baf0:	4680      	mov	r8, r0
    huart->RxXferCount = Size;
 800baf2:	85e5      	strh	r5, [r4, #46]	; 0x2e
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800baf4:	d103      	bne.n	800bafe <HAL_UART_Receive+0x50>
 800baf6:	6923      	ldr	r3, [r4, #16]
 800baf8:	b90b      	cbnz	r3, 800bafe <HAL_UART_Receive+0x50>
 800bafa:	463e      	mov	r6, r7
      pdata8bits  = NULL;
 800bafc:	461f      	mov	r7, r3
    __HAL_UNLOCK(huart);
 800bafe:	2300      	movs	r3, #0
 800bb00:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    while (huart->RxXferCount > 0U)
 800bb04:	8de5      	ldrh	r5, [r4, #46]	; 0x2e
 800bb06:	b2a8      	uxth	r0, r5
 800bb08:	b920      	cbnz	r0, 800bb14 <HAL_UART_Receive+0x66>
    huart->RxState = HAL_UART_STATE_READY;
 800bb0a:	2320      	movs	r3, #32
 800bb0c:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
}
 800bb10:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800bb14:	464b      	mov	r3, r9
 800bb16:	4642      	mov	r2, r8
 800bb18:	2120      	movs	r1, #32
 800bb1a:	4620      	mov	r0, r4
 800bb1c:	f7ff ff1c 	bl	800b958 <UART_WaitOnFlagUntilTimeout.constprop.0>
 800bb20:	b9f8      	cbnz	r0, 800bb62 <HAL_UART_Receive+0xb4>
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 800bb22:	6823      	ldr	r3, [r4, #0]
      if (pdata8bits == NULL)
 800bb24:	b94f      	cbnz	r7, 800bb3a <HAL_UART_Receive+0x8c>
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 800bb26:	685b      	ldr	r3, [r3, #4]
 800bb28:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bb2c:	f826 3b02 	strh.w	r3, [r6], #2
      huart->RxXferCount--;
 800bb30:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
 800bb32:	3b01      	subs	r3, #1
 800bb34:	b29b      	uxth	r3, r3
 800bb36:	85e3      	strh	r3, [r4, #46]	; 0x2e
 800bb38:	e7e4      	b.n	800bb04 <HAL_UART_Receive+0x56>
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800bb3a:	68a2      	ldr	r2, [r4, #8]
 800bb3c:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 800bb40:	d002      	beq.n	800bb48 <HAL_UART_Receive+0x9a>
 800bb42:	b932      	cbnz	r2, 800bb52 <HAL_UART_Receive+0xa4>
 800bb44:	6922      	ldr	r2, [r4, #16]
 800bb46:	b922      	cbnz	r2, 800bb52 <HAL_UART_Receive+0xa4>
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800bb48:	6859      	ldr	r1, [r3, #4]
 800bb4a:	b2c9      	uxtb	r1, r1
 800bb4c:	f807 1b01 	strb.w	r1, [r7], #1
        pdata8bits++;
 800bb50:	e7ee      	b.n	800bb30 <HAL_UART_Receive+0x82>
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800bb52:	6859      	ldr	r1, [r3, #4]
 800bb54:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 800bb58:	e7f8      	b.n	800bb4c <HAL_UART_Receive+0x9e>
      return  HAL_ERROR;
 800bb5a:	2001      	movs	r0, #1
 800bb5c:	e7d8      	b.n	800bb10 <HAL_UART_Receive+0x62>
    return HAL_BUSY;
 800bb5e:	2002      	movs	r0, #2
 800bb60:	e7d6      	b.n	800bb10 <HAL_UART_Receive+0x62>
        return HAL_TIMEOUT;
 800bb62:	2003      	movs	r0, #3
 800bb64:	e7d4      	b.n	800bb10 <HAL_UART_Receive+0x62>
	...

0800bb68 <__errno>:
 800bb68:	4b01      	ldr	r3, [pc, #4]	; (800bb70 <__errno+0x8>)
 800bb6a:	6818      	ldr	r0, [r3, #0]
 800bb6c:	4770      	bx	lr
 800bb6e:	bf00      	nop
 800bb70:	20001070 	.word	0x20001070

0800bb74 <__libc_init_array>:
 800bb74:	b570      	push	{r4, r5, r6, lr}
 800bb76:	4d0d      	ldr	r5, [pc, #52]	; (800bbac <__libc_init_array+0x38>)
 800bb78:	4c0d      	ldr	r4, [pc, #52]	; (800bbb0 <__libc_init_array+0x3c>)
 800bb7a:	1b64      	subs	r4, r4, r5
 800bb7c:	10a4      	asrs	r4, r4, #2
 800bb7e:	2600      	movs	r6, #0
 800bb80:	42a6      	cmp	r6, r4
 800bb82:	d109      	bne.n	800bb98 <__libc_init_array+0x24>
 800bb84:	4d0b      	ldr	r5, [pc, #44]	; (800bbb4 <__libc_init_array+0x40>)
 800bb86:	4c0c      	ldr	r4, [pc, #48]	; (800bbb8 <__libc_init_array+0x44>)
 800bb88:	f001 f910 	bl	800cdac <_init>
 800bb8c:	1b64      	subs	r4, r4, r5
 800bb8e:	10a4      	asrs	r4, r4, #2
 800bb90:	2600      	movs	r6, #0
 800bb92:	42a6      	cmp	r6, r4
 800bb94:	d105      	bne.n	800bba2 <__libc_init_array+0x2e>
 800bb96:	bd70      	pop	{r4, r5, r6, pc}
 800bb98:	f855 3b04 	ldr.w	r3, [r5], #4
 800bb9c:	4798      	blx	r3
 800bb9e:	3601      	adds	r6, #1
 800bba0:	e7ee      	b.n	800bb80 <__libc_init_array+0xc>
 800bba2:	f855 3b04 	ldr.w	r3, [r5], #4
 800bba6:	4798      	blx	r3
 800bba8:	3601      	adds	r6, #1
 800bbaa:	e7f2      	b.n	800bb92 <__libc_init_array+0x1e>
 800bbac:	0800d888 	.word	0x0800d888
 800bbb0:	0800d888 	.word	0x0800d888
 800bbb4:	0800d888 	.word	0x0800d888
 800bbb8:	0800d88c 	.word	0x0800d88c

0800bbbc <memcmp>:
 800bbbc:	b510      	push	{r4, lr}
 800bbbe:	3901      	subs	r1, #1
 800bbc0:	4402      	add	r2, r0
 800bbc2:	4290      	cmp	r0, r2
 800bbc4:	d101      	bne.n	800bbca <memcmp+0xe>
 800bbc6:	2000      	movs	r0, #0
 800bbc8:	e005      	b.n	800bbd6 <memcmp+0x1a>
 800bbca:	7803      	ldrb	r3, [r0, #0]
 800bbcc:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800bbd0:	42a3      	cmp	r3, r4
 800bbd2:	d001      	beq.n	800bbd8 <memcmp+0x1c>
 800bbd4:	1b18      	subs	r0, r3, r4
 800bbd6:	bd10      	pop	{r4, pc}
 800bbd8:	3001      	adds	r0, #1
 800bbda:	e7f2      	b.n	800bbc2 <memcmp+0x6>

0800bbdc <memcpy>:
 800bbdc:	440a      	add	r2, r1
 800bbde:	4291      	cmp	r1, r2
 800bbe0:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800bbe4:	d100      	bne.n	800bbe8 <memcpy+0xc>
 800bbe6:	4770      	bx	lr
 800bbe8:	b510      	push	{r4, lr}
 800bbea:	f811 4b01 	ldrb.w	r4, [r1], #1
 800bbee:	f803 4f01 	strb.w	r4, [r3, #1]!
 800bbf2:	4291      	cmp	r1, r2
 800bbf4:	d1f9      	bne.n	800bbea <memcpy+0xe>
 800bbf6:	bd10      	pop	{r4, pc}

0800bbf8 <memset>:
 800bbf8:	4402      	add	r2, r0
 800bbfa:	4603      	mov	r3, r0
 800bbfc:	4293      	cmp	r3, r2
 800bbfe:	d100      	bne.n	800bc02 <memset+0xa>
 800bc00:	4770      	bx	lr
 800bc02:	f803 1b01 	strb.w	r1, [r3], #1
 800bc06:	e7f9      	b.n	800bbfc <memset+0x4>

0800bc08 <iprintf>:
 800bc08:	b40f      	push	{r0, r1, r2, r3}
 800bc0a:	4b0a      	ldr	r3, [pc, #40]	; (800bc34 <iprintf+0x2c>)
 800bc0c:	b513      	push	{r0, r1, r4, lr}
 800bc0e:	681c      	ldr	r4, [r3, #0]
 800bc10:	b124      	cbz	r4, 800bc1c <iprintf+0x14>
 800bc12:	69a3      	ldr	r3, [r4, #24]
 800bc14:	b913      	cbnz	r3, 800bc1c <iprintf+0x14>
 800bc16:	4620      	mov	r0, r4
 800bc18:	f000 fb24 	bl	800c264 <__sinit>
 800bc1c:	ab05      	add	r3, sp, #20
 800bc1e:	9a04      	ldr	r2, [sp, #16]
 800bc20:	68a1      	ldr	r1, [r4, #8]
 800bc22:	9301      	str	r3, [sp, #4]
 800bc24:	4620      	mov	r0, r4
 800bc26:	f000 fd35 	bl	800c694 <_vfiprintf_r>
 800bc2a:	b002      	add	sp, #8
 800bc2c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bc30:	b004      	add	sp, #16
 800bc32:	4770      	bx	lr
 800bc34:	20001070 	.word	0x20001070

0800bc38 <_puts_r>:
 800bc38:	b570      	push	{r4, r5, r6, lr}
 800bc3a:	460e      	mov	r6, r1
 800bc3c:	4605      	mov	r5, r0
 800bc3e:	b118      	cbz	r0, 800bc48 <_puts_r+0x10>
 800bc40:	6983      	ldr	r3, [r0, #24]
 800bc42:	b90b      	cbnz	r3, 800bc48 <_puts_r+0x10>
 800bc44:	f000 fb0e 	bl	800c264 <__sinit>
 800bc48:	69ab      	ldr	r3, [r5, #24]
 800bc4a:	68ac      	ldr	r4, [r5, #8]
 800bc4c:	b913      	cbnz	r3, 800bc54 <_puts_r+0x1c>
 800bc4e:	4628      	mov	r0, r5
 800bc50:	f000 fb08 	bl	800c264 <__sinit>
 800bc54:	4b2c      	ldr	r3, [pc, #176]	; (800bd08 <_puts_r+0xd0>)
 800bc56:	429c      	cmp	r4, r3
 800bc58:	d120      	bne.n	800bc9c <_puts_r+0x64>
 800bc5a:	686c      	ldr	r4, [r5, #4]
 800bc5c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800bc5e:	07db      	lsls	r3, r3, #31
 800bc60:	d405      	bmi.n	800bc6e <_puts_r+0x36>
 800bc62:	89a3      	ldrh	r3, [r4, #12]
 800bc64:	0598      	lsls	r0, r3, #22
 800bc66:	d402      	bmi.n	800bc6e <_puts_r+0x36>
 800bc68:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800bc6a:	f000 fb99 	bl	800c3a0 <__retarget_lock_acquire_recursive>
 800bc6e:	89a3      	ldrh	r3, [r4, #12]
 800bc70:	0719      	lsls	r1, r3, #28
 800bc72:	d51d      	bpl.n	800bcb0 <_puts_r+0x78>
 800bc74:	6923      	ldr	r3, [r4, #16]
 800bc76:	b1db      	cbz	r3, 800bcb0 <_puts_r+0x78>
 800bc78:	3e01      	subs	r6, #1
 800bc7a:	68a3      	ldr	r3, [r4, #8]
 800bc7c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800bc80:	3b01      	subs	r3, #1
 800bc82:	60a3      	str	r3, [r4, #8]
 800bc84:	bb39      	cbnz	r1, 800bcd6 <_puts_r+0x9e>
 800bc86:	2b00      	cmp	r3, #0
 800bc88:	da38      	bge.n	800bcfc <_puts_r+0xc4>
 800bc8a:	4622      	mov	r2, r4
 800bc8c:	210a      	movs	r1, #10
 800bc8e:	4628      	mov	r0, r5
 800bc90:	f000 f90e 	bl	800beb0 <__swbuf_r>
 800bc94:	3001      	adds	r0, #1
 800bc96:	d011      	beq.n	800bcbc <_puts_r+0x84>
 800bc98:	250a      	movs	r5, #10
 800bc9a:	e011      	b.n	800bcc0 <_puts_r+0x88>
 800bc9c:	4b1b      	ldr	r3, [pc, #108]	; (800bd0c <_puts_r+0xd4>)
 800bc9e:	429c      	cmp	r4, r3
 800bca0:	d101      	bne.n	800bca6 <_puts_r+0x6e>
 800bca2:	68ac      	ldr	r4, [r5, #8]
 800bca4:	e7da      	b.n	800bc5c <_puts_r+0x24>
 800bca6:	4b1a      	ldr	r3, [pc, #104]	; (800bd10 <_puts_r+0xd8>)
 800bca8:	429c      	cmp	r4, r3
 800bcaa:	bf08      	it	eq
 800bcac:	68ec      	ldreq	r4, [r5, #12]
 800bcae:	e7d5      	b.n	800bc5c <_puts_r+0x24>
 800bcb0:	4621      	mov	r1, r4
 800bcb2:	4628      	mov	r0, r5
 800bcb4:	f000 f94e 	bl	800bf54 <__swsetup_r>
 800bcb8:	2800      	cmp	r0, #0
 800bcba:	d0dd      	beq.n	800bc78 <_puts_r+0x40>
 800bcbc:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 800bcc0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800bcc2:	07da      	lsls	r2, r3, #31
 800bcc4:	d405      	bmi.n	800bcd2 <_puts_r+0x9a>
 800bcc6:	89a3      	ldrh	r3, [r4, #12]
 800bcc8:	059b      	lsls	r3, r3, #22
 800bcca:	d402      	bmi.n	800bcd2 <_puts_r+0x9a>
 800bccc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800bcce:	f000 fb68 	bl	800c3a2 <__retarget_lock_release_recursive>
 800bcd2:	4628      	mov	r0, r5
 800bcd4:	bd70      	pop	{r4, r5, r6, pc}
 800bcd6:	2b00      	cmp	r3, #0
 800bcd8:	da04      	bge.n	800bce4 <_puts_r+0xac>
 800bcda:	69a2      	ldr	r2, [r4, #24]
 800bcdc:	429a      	cmp	r2, r3
 800bcde:	dc06      	bgt.n	800bcee <_puts_r+0xb6>
 800bce0:	290a      	cmp	r1, #10
 800bce2:	d004      	beq.n	800bcee <_puts_r+0xb6>
 800bce4:	6823      	ldr	r3, [r4, #0]
 800bce6:	1c5a      	adds	r2, r3, #1
 800bce8:	6022      	str	r2, [r4, #0]
 800bcea:	7019      	strb	r1, [r3, #0]
 800bcec:	e7c5      	b.n	800bc7a <_puts_r+0x42>
 800bcee:	4622      	mov	r2, r4
 800bcf0:	4628      	mov	r0, r5
 800bcf2:	f000 f8dd 	bl	800beb0 <__swbuf_r>
 800bcf6:	3001      	adds	r0, #1
 800bcf8:	d1bf      	bne.n	800bc7a <_puts_r+0x42>
 800bcfa:	e7df      	b.n	800bcbc <_puts_r+0x84>
 800bcfc:	6823      	ldr	r3, [r4, #0]
 800bcfe:	250a      	movs	r5, #10
 800bd00:	1c5a      	adds	r2, r3, #1
 800bd02:	6022      	str	r2, [r4, #0]
 800bd04:	701d      	strb	r5, [r3, #0]
 800bd06:	e7db      	b.n	800bcc0 <_puts_r+0x88>
 800bd08:	0800d808 	.word	0x0800d808
 800bd0c:	0800d828 	.word	0x0800d828
 800bd10:	0800d7e8 	.word	0x0800d7e8

0800bd14 <puts>:
 800bd14:	4b02      	ldr	r3, [pc, #8]	; (800bd20 <puts+0xc>)
 800bd16:	4601      	mov	r1, r0
 800bd18:	6818      	ldr	r0, [r3, #0]
 800bd1a:	f7ff bf8d 	b.w	800bc38 <_puts_r>
 800bd1e:	bf00      	nop
 800bd20:	20001070 	.word	0x20001070

0800bd24 <setvbuf>:
 800bd24:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800bd28:	461d      	mov	r5, r3
 800bd2a:	4b5d      	ldr	r3, [pc, #372]	; (800bea0 <setvbuf+0x17c>)
 800bd2c:	681f      	ldr	r7, [r3, #0]
 800bd2e:	4604      	mov	r4, r0
 800bd30:	460e      	mov	r6, r1
 800bd32:	4690      	mov	r8, r2
 800bd34:	b127      	cbz	r7, 800bd40 <setvbuf+0x1c>
 800bd36:	69bb      	ldr	r3, [r7, #24]
 800bd38:	b913      	cbnz	r3, 800bd40 <setvbuf+0x1c>
 800bd3a:	4638      	mov	r0, r7
 800bd3c:	f000 fa92 	bl	800c264 <__sinit>
 800bd40:	4b58      	ldr	r3, [pc, #352]	; (800bea4 <setvbuf+0x180>)
 800bd42:	429c      	cmp	r4, r3
 800bd44:	d167      	bne.n	800be16 <setvbuf+0xf2>
 800bd46:	687c      	ldr	r4, [r7, #4]
 800bd48:	f1b8 0f02 	cmp.w	r8, #2
 800bd4c:	d006      	beq.n	800bd5c <setvbuf+0x38>
 800bd4e:	f1b8 0f01 	cmp.w	r8, #1
 800bd52:	f200 809f 	bhi.w	800be94 <setvbuf+0x170>
 800bd56:	2d00      	cmp	r5, #0
 800bd58:	f2c0 809c 	blt.w	800be94 <setvbuf+0x170>
 800bd5c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800bd5e:	07db      	lsls	r3, r3, #31
 800bd60:	d405      	bmi.n	800bd6e <setvbuf+0x4a>
 800bd62:	89a3      	ldrh	r3, [r4, #12]
 800bd64:	0598      	lsls	r0, r3, #22
 800bd66:	d402      	bmi.n	800bd6e <setvbuf+0x4a>
 800bd68:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800bd6a:	f000 fb19 	bl	800c3a0 <__retarget_lock_acquire_recursive>
 800bd6e:	4621      	mov	r1, r4
 800bd70:	4638      	mov	r0, r7
 800bd72:	f000 f9e3 	bl	800c13c <_fflush_r>
 800bd76:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800bd78:	b141      	cbz	r1, 800bd8c <setvbuf+0x68>
 800bd7a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800bd7e:	4299      	cmp	r1, r3
 800bd80:	d002      	beq.n	800bd88 <setvbuf+0x64>
 800bd82:	4638      	mov	r0, r7
 800bd84:	f000 fb7c 	bl	800c480 <_free_r>
 800bd88:	2300      	movs	r3, #0
 800bd8a:	6363      	str	r3, [r4, #52]	; 0x34
 800bd8c:	2300      	movs	r3, #0
 800bd8e:	61a3      	str	r3, [r4, #24]
 800bd90:	6063      	str	r3, [r4, #4]
 800bd92:	89a3      	ldrh	r3, [r4, #12]
 800bd94:	0619      	lsls	r1, r3, #24
 800bd96:	d503      	bpl.n	800bda0 <setvbuf+0x7c>
 800bd98:	6921      	ldr	r1, [r4, #16]
 800bd9a:	4638      	mov	r0, r7
 800bd9c:	f000 fb70 	bl	800c480 <_free_r>
 800bda0:	89a3      	ldrh	r3, [r4, #12]
 800bda2:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 800bda6:	f023 0303 	bic.w	r3, r3, #3
 800bdaa:	f1b8 0f02 	cmp.w	r8, #2
 800bdae:	81a3      	strh	r3, [r4, #12]
 800bdb0:	d06c      	beq.n	800be8c <setvbuf+0x168>
 800bdb2:	ab01      	add	r3, sp, #4
 800bdb4:	466a      	mov	r2, sp
 800bdb6:	4621      	mov	r1, r4
 800bdb8:	4638      	mov	r0, r7
 800bdba:	f000 faf3 	bl	800c3a4 <__swhatbuf_r>
 800bdbe:	89a3      	ldrh	r3, [r4, #12]
 800bdc0:	4318      	orrs	r0, r3
 800bdc2:	81a0      	strh	r0, [r4, #12]
 800bdc4:	2d00      	cmp	r5, #0
 800bdc6:	d130      	bne.n	800be2a <setvbuf+0x106>
 800bdc8:	9d00      	ldr	r5, [sp, #0]
 800bdca:	4628      	mov	r0, r5
 800bdcc:	f000 fb50 	bl	800c470 <malloc>
 800bdd0:	4606      	mov	r6, r0
 800bdd2:	2800      	cmp	r0, #0
 800bdd4:	d155      	bne.n	800be82 <setvbuf+0x15e>
 800bdd6:	f8dd 9000 	ldr.w	r9, [sp]
 800bdda:	45a9      	cmp	r9, r5
 800bddc:	d14a      	bne.n	800be74 <setvbuf+0x150>
 800bdde:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 800bde2:	2200      	movs	r2, #0
 800bde4:	60a2      	str	r2, [r4, #8]
 800bde6:	f104 0247 	add.w	r2, r4, #71	; 0x47
 800bdea:	6022      	str	r2, [r4, #0]
 800bdec:	6122      	str	r2, [r4, #16]
 800bdee:	2201      	movs	r2, #1
 800bdf0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bdf4:	6162      	str	r2, [r4, #20]
 800bdf6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800bdf8:	f043 0302 	orr.w	r3, r3, #2
 800bdfc:	07d2      	lsls	r2, r2, #31
 800bdfe:	81a3      	strh	r3, [r4, #12]
 800be00:	d405      	bmi.n	800be0e <setvbuf+0xea>
 800be02:	f413 7f00 	tst.w	r3, #512	; 0x200
 800be06:	d102      	bne.n	800be0e <setvbuf+0xea>
 800be08:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800be0a:	f000 faca 	bl	800c3a2 <__retarget_lock_release_recursive>
 800be0e:	4628      	mov	r0, r5
 800be10:	b003      	add	sp, #12
 800be12:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800be16:	4b24      	ldr	r3, [pc, #144]	; (800bea8 <setvbuf+0x184>)
 800be18:	429c      	cmp	r4, r3
 800be1a:	d101      	bne.n	800be20 <setvbuf+0xfc>
 800be1c:	68bc      	ldr	r4, [r7, #8]
 800be1e:	e793      	b.n	800bd48 <setvbuf+0x24>
 800be20:	4b22      	ldr	r3, [pc, #136]	; (800beac <setvbuf+0x188>)
 800be22:	429c      	cmp	r4, r3
 800be24:	bf08      	it	eq
 800be26:	68fc      	ldreq	r4, [r7, #12]
 800be28:	e78e      	b.n	800bd48 <setvbuf+0x24>
 800be2a:	2e00      	cmp	r6, #0
 800be2c:	d0cd      	beq.n	800bdca <setvbuf+0xa6>
 800be2e:	69bb      	ldr	r3, [r7, #24]
 800be30:	b913      	cbnz	r3, 800be38 <setvbuf+0x114>
 800be32:	4638      	mov	r0, r7
 800be34:	f000 fa16 	bl	800c264 <__sinit>
 800be38:	f1b8 0f01 	cmp.w	r8, #1
 800be3c:	bf08      	it	eq
 800be3e:	89a3      	ldrheq	r3, [r4, #12]
 800be40:	6026      	str	r6, [r4, #0]
 800be42:	bf04      	itt	eq
 800be44:	f043 0301 	orreq.w	r3, r3, #1
 800be48:	81a3      	strheq	r3, [r4, #12]
 800be4a:	89a2      	ldrh	r2, [r4, #12]
 800be4c:	f012 0308 	ands.w	r3, r2, #8
 800be50:	e9c4 6504 	strd	r6, r5, [r4, #16]
 800be54:	d01c      	beq.n	800be90 <setvbuf+0x16c>
 800be56:	07d3      	lsls	r3, r2, #31
 800be58:	bf41      	itttt	mi
 800be5a:	2300      	movmi	r3, #0
 800be5c:	426d      	negmi	r5, r5
 800be5e:	60a3      	strmi	r3, [r4, #8]
 800be60:	61a5      	strmi	r5, [r4, #24]
 800be62:	bf58      	it	pl
 800be64:	60a5      	strpl	r5, [r4, #8]
 800be66:	6e65      	ldr	r5, [r4, #100]	; 0x64
 800be68:	f015 0501 	ands.w	r5, r5, #1
 800be6c:	d115      	bne.n	800be9a <setvbuf+0x176>
 800be6e:	f412 7f00 	tst.w	r2, #512	; 0x200
 800be72:	e7c8      	b.n	800be06 <setvbuf+0xe2>
 800be74:	4648      	mov	r0, r9
 800be76:	f000 fafb 	bl	800c470 <malloc>
 800be7a:	4606      	mov	r6, r0
 800be7c:	2800      	cmp	r0, #0
 800be7e:	d0ae      	beq.n	800bdde <setvbuf+0xba>
 800be80:	464d      	mov	r5, r9
 800be82:	89a3      	ldrh	r3, [r4, #12]
 800be84:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800be88:	81a3      	strh	r3, [r4, #12]
 800be8a:	e7d0      	b.n	800be2e <setvbuf+0x10a>
 800be8c:	2500      	movs	r5, #0
 800be8e:	e7a8      	b.n	800bde2 <setvbuf+0xbe>
 800be90:	60a3      	str	r3, [r4, #8]
 800be92:	e7e8      	b.n	800be66 <setvbuf+0x142>
 800be94:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 800be98:	e7b9      	b.n	800be0e <setvbuf+0xea>
 800be9a:	2500      	movs	r5, #0
 800be9c:	e7b7      	b.n	800be0e <setvbuf+0xea>
 800be9e:	bf00      	nop
 800bea0:	20001070 	.word	0x20001070
 800bea4:	0800d808 	.word	0x0800d808
 800bea8:	0800d828 	.word	0x0800d828
 800beac:	0800d7e8 	.word	0x0800d7e8

0800beb0 <__swbuf_r>:
 800beb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800beb2:	460e      	mov	r6, r1
 800beb4:	4614      	mov	r4, r2
 800beb6:	4605      	mov	r5, r0
 800beb8:	b118      	cbz	r0, 800bec2 <__swbuf_r+0x12>
 800beba:	6983      	ldr	r3, [r0, #24]
 800bebc:	b90b      	cbnz	r3, 800bec2 <__swbuf_r+0x12>
 800bebe:	f000 f9d1 	bl	800c264 <__sinit>
 800bec2:	4b21      	ldr	r3, [pc, #132]	; (800bf48 <__swbuf_r+0x98>)
 800bec4:	429c      	cmp	r4, r3
 800bec6:	d12b      	bne.n	800bf20 <__swbuf_r+0x70>
 800bec8:	686c      	ldr	r4, [r5, #4]
 800beca:	69a3      	ldr	r3, [r4, #24]
 800becc:	60a3      	str	r3, [r4, #8]
 800bece:	89a3      	ldrh	r3, [r4, #12]
 800bed0:	071a      	lsls	r2, r3, #28
 800bed2:	d52f      	bpl.n	800bf34 <__swbuf_r+0x84>
 800bed4:	6923      	ldr	r3, [r4, #16]
 800bed6:	b36b      	cbz	r3, 800bf34 <__swbuf_r+0x84>
 800bed8:	6923      	ldr	r3, [r4, #16]
 800beda:	6820      	ldr	r0, [r4, #0]
 800bedc:	1ac0      	subs	r0, r0, r3
 800bede:	6963      	ldr	r3, [r4, #20]
 800bee0:	b2f6      	uxtb	r6, r6
 800bee2:	4283      	cmp	r3, r0
 800bee4:	4637      	mov	r7, r6
 800bee6:	dc04      	bgt.n	800bef2 <__swbuf_r+0x42>
 800bee8:	4621      	mov	r1, r4
 800beea:	4628      	mov	r0, r5
 800beec:	f000 f926 	bl	800c13c <_fflush_r>
 800bef0:	bb30      	cbnz	r0, 800bf40 <__swbuf_r+0x90>
 800bef2:	68a3      	ldr	r3, [r4, #8]
 800bef4:	3b01      	subs	r3, #1
 800bef6:	60a3      	str	r3, [r4, #8]
 800bef8:	6823      	ldr	r3, [r4, #0]
 800befa:	1c5a      	adds	r2, r3, #1
 800befc:	6022      	str	r2, [r4, #0]
 800befe:	701e      	strb	r6, [r3, #0]
 800bf00:	6963      	ldr	r3, [r4, #20]
 800bf02:	3001      	adds	r0, #1
 800bf04:	4283      	cmp	r3, r0
 800bf06:	d004      	beq.n	800bf12 <__swbuf_r+0x62>
 800bf08:	89a3      	ldrh	r3, [r4, #12]
 800bf0a:	07db      	lsls	r3, r3, #31
 800bf0c:	d506      	bpl.n	800bf1c <__swbuf_r+0x6c>
 800bf0e:	2e0a      	cmp	r6, #10
 800bf10:	d104      	bne.n	800bf1c <__swbuf_r+0x6c>
 800bf12:	4621      	mov	r1, r4
 800bf14:	4628      	mov	r0, r5
 800bf16:	f000 f911 	bl	800c13c <_fflush_r>
 800bf1a:	b988      	cbnz	r0, 800bf40 <__swbuf_r+0x90>
 800bf1c:	4638      	mov	r0, r7
 800bf1e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bf20:	4b0a      	ldr	r3, [pc, #40]	; (800bf4c <__swbuf_r+0x9c>)
 800bf22:	429c      	cmp	r4, r3
 800bf24:	d101      	bne.n	800bf2a <__swbuf_r+0x7a>
 800bf26:	68ac      	ldr	r4, [r5, #8]
 800bf28:	e7cf      	b.n	800beca <__swbuf_r+0x1a>
 800bf2a:	4b09      	ldr	r3, [pc, #36]	; (800bf50 <__swbuf_r+0xa0>)
 800bf2c:	429c      	cmp	r4, r3
 800bf2e:	bf08      	it	eq
 800bf30:	68ec      	ldreq	r4, [r5, #12]
 800bf32:	e7ca      	b.n	800beca <__swbuf_r+0x1a>
 800bf34:	4621      	mov	r1, r4
 800bf36:	4628      	mov	r0, r5
 800bf38:	f000 f80c 	bl	800bf54 <__swsetup_r>
 800bf3c:	2800      	cmp	r0, #0
 800bf3e:	d0cb      	beq.n	800bed8 <__swbuf_r+0x28>
 800bf40:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800bf44:	e7ea      	b.n	800bf1c <__swbuf_r+0x6c>
 800bf46:	bf00      	nop
 800bf48:	0800d808 	.word	0x0800d808
 800bf4c:	0800d828 	.word	0x0800d828
 800bf50:	0800d7e8 	.word	0x0800d7e8

0800bf54 <__swsetup_r>:
 800bf54:	4b32      	ldr	r3, [pc, #200]	; (800c020 <__swsetup_r+0xcc>)
 800bf56:	b570      	push	{r4, r5, r6, lr}
 800bf58:	681d      	ldr	r5, [r3, #0]
 800bf5a:	4606      	mov	r6, r0
 800bf5c:	460c      	mov	r4, r1
 800bf5e:	b125      	cbz	r5, 800bf6a <__swsetup_r+0x16>
 800bf60:	69ab      	ldr	r3, [r5, #24]
 800bf62:	b913      	cbnz	r3, 800bf6a <__swsetup_r+0x16>
 800bf64:	4628      	mov	r0, r5
 800bf66:	f000 f97d 	bl	800c264 <__sinit>
 800bf6a:	4b2e      	ldr	r3, [pc, #184]	; (800c024 <__swsetup_r+0xd0>)
 800bf6c:	429c      	cmp	r4, r3
 800bf6e:	d10f      	bne.n	800bf90 <__swsetup_r+0x3c>
 800bf70:	686c      	ldr	r4, [r5, #4]
 800bf72:	89a3      	ldrh	r3, [r4, #12]
 800bf74:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800bf78:	0719      	lsls	r1, r3, #28
 800bf7a:	d42c      	bmi.n	800bfd6 <__swsetup_r+0x82>
 800bf7c:	06dd      	lsls	r5, r3, #27
 800bf7e:	d411      	bmi.n	800bfa4 <__swsetup_r+0x50>
 800bf80:	2309      	movs	r3, #9
 800bf82:	6033      	str	r3, [r6, #0]
 800bf84:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800bf88:	81a3      	strh	r3, [r4, #12]
 800bf8a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800bf8e:	e03e      	b.n	800c00e <__swsetup_r+0xba>
 800bf90:	4b25      	ldr	r3, [pc, #148]	; (800c028 <__swsetup_r+0xd4>)
 800bf92:	429c      	cmp	r4, r3
 800bf94:	d101      	bne.n	800bf9a <__swsetup_r+0x46>
 800bf96:	68ac      	ldr	r4, [r5, #8]
 800bf98:	e7eb      	b.n	800bf72 <__swsetup_r+0x1e>
 800bf9a:	4b24      	ldr	r3, [pc, #144]	; (800c02c <__swsetup_r+0xd8>)
 800bf9c:	429c      	cmp	r4, r3
 800bf9e:	bf08      	it	eq
 800bfa0:	68ec      	ldreq	r4, [r5, #12]
 800bfa2:	e7e6      	b.n	800bf72 <__swsetup_r+0x1e>
 800bfa4:	0758      	lsls	r0, r3, #29
 800bfa6:	d512      	bpl.n	800bfce <__swsetup_r+0x7a>
 800bfa8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800bfaa:	b141      	cbz	r1, 800bfbe <__swsetup_r+0x6a>
 800bfac:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800bfb0:	4299      	cmp	r1, r3
 800bfb2:	d002      	beq.n	800bfba <__swsetup_r+0x66>
 800bfb4:	4630      	mov	r0, r6
 800bfb6:	f000 fa63 	bl	800c480 <_free_r>
 800bfba:	2300      	movs	r3, #0
 800bfbc:	6363      	str	r3, [r4, #52]	; 0x34
 800bfbe:	89a3      	ldrh	r3, [r4, #12]
 800bfc0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800bfc4:	81a3      	strh	r3, [r4, #12]
 800bfc6:	2300      	movs	r3, #0
 800bfc8:	6063      	str	r3, [r4, #4]
 800bfca:	6923      	ldr	r3, [r4, #16]
 800bfcc:	6023      	str	r3, [r4, #0]
 800bfce:	89a3      	ldrh	r3, [r4, #12]
 800bfd0:	f043 0308 	orr.w	r3, r3, #8
 800bfd4:	81a3      	strh	r3, [r4, #12]
 800bfd6:	6923      	ldr	r3, [r4, #16]
 800bfd8:	b94b      	cbnz	r3, 800bfee <__swsetup_r+0x9a>
 800bfda:	89a3      	ldrh	r3, [r4, #12]
 800bfdc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800bfe0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800bfe4:	d003      	beq.n	800bfee <__swsetup_r+0x9a>
 800bfe6:	4621      	mov	r1, r4
 800bfe8:	4630      	mov	r0, r6
 800bfea:	f000 fa01 	bl	800c3f0 <__smakebuf_r>
 800bfee:	89a0      	ldrh	r0, [r4, #12]
 800bff0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800bff4:	f010 0301 	ands.w	r3, r0, #1
 800bff8:	d00a      	beq.n	800c010 <__swsetup_r+0xbc>
 800bffa:	2300      	movs	r3, #0
 800bffc:	60a3      	str	r3, [r4, #8]
 800bffe:	6963      	ldr	r3, [r4, #20]
 800c000:	425b      	negs	r3, r3
 800c002:	61a3      	str	r3, [r4, #24]
 800c004:	6923      	ldr	r3, [r4, #16]
 800c006:	b943      	cbnz	r3, 800c01a <__swsetup_r+0xc6>
 800c008:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800c00c:	d1ba      	bne.n	800bf84 <__swsetup_r+0x30>
 800c00e:	bd70      	pop	{r4, r5, r6, pc}
 800c010:	0781      	lsls	r1, r0, #30
 800c012:	bf58      	it	pl
 800c014:	6963      	ldrpl	r3, [r4, #20]
 800c016:	60a3      	str	r3, [r4, #8]
 800c018:	e7f4      	b.n	800c004 <__swsetup_r+0xb0>
 800c01a:	2000      	movs	r0, #0
 800c01c:	e7f7      	b.n	800c00e <__swsetup_r+0xba>
 800c01e:	bf00      	nop
 800c020:	20001070 	.word	0x20001070
 800c024:	0800d808 	.word	0x0800d808
 800c028:	0800d828 	.word	0x0800d828
 800c02c:	0800d7e8 	.word	0x0800d7e8

0800c030 <__sflush_r>:
 800c030:	898a      	ldrh	r2, [r1, #12]
 800c032:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c036:	4605      	mov	r5, r0
 800c038:	0710      	lsls	r0, r2, #28
 800c03a:	460c      	mov	r4, r1
 800c03c:	d458      	bmi.n	800c0f0 <__sflush_r+0xc0>
 800c03e:	684b      	ldr	r3, [r1, #4]
 800c040:	2b00      	cmp	r3, #0
 800c042:	dc05      	bgt.n	800c050 <__sflush_r+0x20>
 800c044:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800c046:	2b00      	cmp	r3, #0
 800c048:	dc02      	bgt.n	800c050 <__sflush_r+0x20>
 800c04a:	2000      	movs	r0, #0
 800c04c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c050:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c052:	2e00      	cmp	r6, #0
 800c054:	d0f9      	beq.n	800c04a <__sflush_r+0x1a>
 800c056:	2300      	movs	r3, #0
 800c058:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800c05c:	682f      	ldr	r7, [r5, #0]
 800c05e:	602b      	str	r3, [r5, #0]
 800c060:	d032      	beq.n	800c0c8 <__sflush_r+0x98>
 800c062:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800c064:	89a3      	ldrh	r3, [r4, #12]
 800c066:	075a      	lsls	r2, r3, #29
 800c068:	d505      	bpl.n	800c076 <__sflush_r+0x46>
 800c06a:	6863      	ldr	r3, [r4, #4]
 800c06c:	1ac0      	subs	r0, r0, r3
 800c06e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800c070:	b10b      	cbz	r3, 800c076 <__sflush_r+0x46>
 800c072:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800c074:	1ac0      	subs	r0, r0, r3
 800c076:	2300      	movs	r3, #0
 800c078:	4602      	mov	r2, r0
 800c07a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c07c:	6a21      	ldr	r1, [r4, #32]
 800c07e:	4628      	mov	r0, r5
 800c080:	47b0      	blx	r6
 800c082:	1c43      	adds	r3, r0, #1
 800c084:	89a3      	ldrh	r3, [r4, #12]
 800c086:	d106      	bne.n	800c096 <__sflush_r+0x66>
 800c088:	6829      	ldr	r1, [r5, #0]
 800c08a:	291d      	cmp	r1, #29
 800c08c:	d82c      	bhi.n	800c0e8 <__sflush_r+0xb8>
 800c08e:	4a2a      	ldr	r2, [pc, #168]	; (800c138 <__sflush_r+0x108>)
 800c090:	40ca      	lsrs	r2, r1
 800c092:	07d6      	lsls	r6, r2, #31
 800c094:	d528      	bpl.n	800c0e8 <__sflush_r+0xb8>
 800c096:	2200      	movs	r2, #0
 800c098:	6062      	str	r2, [r4, #4]
 800c09a:	04d9      	lsls	r1, r3, #19
 800c09c:	6922      	ldr	r2, [r4, #16]
 800c09e:	6022      	str	r2, [r4, #0]
 800c0a0:	d504      	bpl.n	800c0ac <__sflush_r+0x7c>
 800c0a2:	1c42      	adds	r2, r0, #1
 800c0a4:	d101      	bne.n	800c0aa <__sflush_r+0x7a>
 800c0a6:	682b      	ldr	r3, [r5, #0]
 800c0a8:	b903      	cbnz	r3, 800c0ac <__sflush_r+0x7c>
 800c0aa:	6560      	str	r0, [r4, #84]	; 0x54
 800c0ac:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c0ae:	602f      	str	r7, [r5, #0]
 800c0b0:	2900      	cmp	r1, #0
 800c0b2:	d0ca      	beq.n	800c04a <__sflush_r+0x1a>
 800c0b4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c0b8:	4299      	cmp	r1, r3
 800c0ba:	d002      	beq.n	800c0c2 <__sflush_r+0x92>
 800c0bc:	4628      	mov	r0, r5
 800c0be:	f000 f9df 	bl	800c480 <_free_r>
 800c0c2:	2000      	movs	r0, #0
 800c0c4:	6360      	str	r0, [r4, #52]	; 0x34
 800c0c6:	e7c1      	b.n	800c04c <__sflush_r+0x1c>
 800c0c8:	6a21      	ldr	r1, [r4, #32]
 800c0ca:	2301      	movs	r3, #1
 800c0cc:	4628      	mov	r0, r5
 800c0ce:	47b0      	blx	r6
 800c0d0:	1c41      	adds	r1, r0, #1
 800c0d2:	d1c7      	bne.n	800c064 <__sflush_r+0x34>
 800c0d4:	682b      	ldr	r3, [r5, #0]
 800c0d6:	2b00      	cmp	r3, #0
 800c0d8:	d0c4      	beq.n	800c064 <__sflush_r+0x34>
 800c0da:	2b1d      	cmp	r3, #29
 800c0dc:	d001      	beq.n	800c0e2 <__sflush_r+0xb2>
 800c0de:	2b16      	cmp	r3, #22
 800c0e0:	d101      	bne.n	800c0e6 <__sflush_r+0xb6>
 800c0e2:	602f      	str	r7, [r5, #0]
 800c0e4:	e7b1      	b.n	800c04a <__sflush_r+0x1a>
 800c0e6:	89a3      	ldrh	r3, [r4, #12]
 800c0e8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c0ec:	81a3      	strh	r3, [r4, #12]
 800c0ee:	e7ad      	b.n	800c04c <__sflush_r+0x1c>
 800c0f0:	690f      	ldr	r7, [r1, #16]
 800c0f2:	2f00      	cmp	r7, #0
 800c0f4:	d0a9      	beq.n	800c04a <__sflush_r+0x1a>
 800c0f6:	0793      	lsls	r3, r2, #30
 800c0f8:	680e      	ldr	r6, [r1, #0]
 800c0fa:	bf08      	it	eq
 800c0fc:	694b      	ldreq	r3, [r1, #20]
 800c0fe:	600f      	str	r7, [r1, #0]
 800c100:	bf18      	it	ne
 800c102:	2300      	movne	r3, #0
 800c104:	eba6 0807 	sub.w	r8, r6, r7
 800c108:	608b      	str	r3, [r1, #8]
 800c10a:	f1b8 0f00 	cmp.w	r8, #0
 800c10e:	dd9c      	ble.n	800c04a <__sflush_r+0x1a>
 800c110:	6a21      	ldr	r1, [r4, #32]
 800c112:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800c114:	4643      	mov	r3, r8
 800c116:	463a      	mov	r2, r7
 800c118:	4628      	mov	r0, r5
 800c11a:	47b0      	blx	r6
 800c11c:	2800      	cmp	r0, #0
 800c11e:	dc06      	bgt.n	800c12e <__sflush_r+0xfe>
 800c120:	89a3      	ldrh	r3, [r4, #12]
 800c122:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c126:	81a3      	strh	r3, [r4, #12]
 800c128:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c12c:	e78e      	b.n	800c04c <__sflush_r+0x1c>
 800c12e:	4407      	add	r7, r0
 800c130:	eba8 0800 	sub.w	r8, r8, r0
 800c134:	e7e9      	b.n	800c10a <__sflush_r+0xda>
 800c136:	bf00      	nop
 800c138:	20400001 	.word	0x20400001

0800c13c <_fflush_r>:
 800c13c:	b538      	push	{r3, r4, r5, lr}
 800c13e:	690b      	ldr	r3, [r1, #16]
 800c140:	4605      	mov	r5, r0
 800c142:	460c      	mov	r4, r1
 800c144:	b913      	cbnz	r3, 800c14c <_fflush_r+0x10>
 800c146:	2500      	movs	r5, #0
 800c148:	4628      	mov	r0, r5
 800c14a:	bd38      	pop	{r3, r4, r5, pc}
 800c14c:	b118      	cbz	r0, 800c156 <_fflush_r+0x1a>
 800c14e:	6983      	ldr	r3, [r0, #24]
 800c150:	b90b      	cbnz	r3, 800c156 <_fflush_r+0x1a>
 800c152:	f000 f887 	bl	800c264 <__sinit>
 800c156:	4b14      	ldr	r3, [pc, #80]	; (800c1a8 <_fflush_r+0x6c>)
 800c158:	429c      	cmp	r4, r3
 800c15a:	d11b      	bne.n	800c194 <_fflush_r+0x58>
 800c15c:	686c      	ldr	r4, [r5, #4]
 800c15e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c162:	2b00      	cmp	r3, #0
 800c164:	d0ef      	beq.n	800c146 <_fflush_r+0xa>
 800c166:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800c168:	07d0      	lsls	r0, r2, #31
 800c16a:	d404      	bmi.n	800c176 <_fflush_r+0x3a>
 800c16c:	0599      	lsls	r1, r3, #22
 800c16e:	d402      	bmi.n	800c176 <_fflush_r+0x3a>
 800c170:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c172:	f000 f915 	bl	800c3a0 <__retarget_lock_acquire_recursive>
 800c176:	4628      	mov	r0, r5
 800c178:	4621      	mov	r1, r4
 800c17a:	f7ff ff59 	bl	800c030 <__sflush_r>
 800c17e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c180:	07da      	lsls	r2, r3, #31
 800c182:	4605      	mov	r5, r0
 800c184:	d4e0      	bmi.n	800c148 <_fflush_r+0xc>
 800c186:	89a3      	ldrh	r3, [r4, #12]
 800c188:	059b      	lsls	r3, r3, #22
 800c18a:	d4dd      	bmi.n	800c148 <_fflush_r+0xc>
 800c18c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c18e:	f000 f908 	bl	800c3a2 <__retarget_lock_release_recursive>
 800c192:	e7d9      	b.n	800c148 <_fflush_r+0xc>
 800c194:	4b05      	ldr	r3, [pc, #20]	; (800c1ac <_fflush_r+0x70>)
 800c196:	429c      	cmp	r4, r3
 800c198:	d101      	bne.n	800c19e <_fflush_r+0x62>
 800c19a:	68ac      	ldr	r4, [r5, #8]
 800c19c:	e7df      	b.n	800c15e <_fflush_r+0x22>
 800c19e:	4b04      	ldr	r3, [pc, #16]	; (800c1b0 <_fflush_r+0x74>)
 800c1a0:	429c      	cmp	r4, r3
 800c1a2:	bf08      	it	eq
 800c1a4:	68ec      	ldreq	r4, [r5, #12]
 800c1a6:	e7da      	b.n	800c15e <_fflush_r+0x22>
 800c1a8:	0800d808 	.word	0x0800d808
 800c1ac:	0800d828 	.word	0x0800d828
 800c1b0:	0800d7e8 	.word	0x0800d7e8

0800c1b4 <std>:
 800c1b4:	2300      	movs	r3, #0
 800c1b6:	b510      	push	{r4, lr}
 800c1b8:	4604      	mov	r4, r0
 800c1ba:	e9c0 3300 	strd	r3, r3, [r0]
 800c1be:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800c1c2:	6083      	str	r3, [r0, #8]
 800c1c4:	8181      	strh	r1, [r0, #12]
 800c1c6:	6643      	str	r3, [r0, #100]	; 0x64
 800c1c8:	81c2      	strh	r2, [r0, #14]
 800c1ca:	6183      	str	r3, [r0, #24]
 800c1cc:	4619      	mov	r1, r3
 800c1ce:	2208      	movs	r2, #8
 800c1d0:	305c      	adds	r0, #92	; 0x5c
 800c1d2:	f7ff fd11 	bl	800bbf8 <memset>
 800c1d6:	4b05      	ldr	r3, [pc, #20]	; (800c1ec <std+0x38>)
 800c1d8:	6263      	str	r3, [r4, #36]	; 0x24
 800c1da:	4b05      	ldr	r3, [pc, #20]	; (800c1f0 <std+0x3c>)
 800c1dc:	62a3      	str	r3, [r4, #40]	; 0x28
 800c1de:	4b05      	ldr	r3, [pc, #20]	; (800c1f4 <std+0x40>)
 800c1e0:	62e3      	str	r3, [r4, #44]	; 0x2c
 800c1e2:	4b05      	ldr	r3, [pc, #20]	; (800c1f8 <std+0x44>)
 800c1e4:	6224      	str	r4, [r4, #32]
 800c1e6:	6323      	str	r3, [r4, #48]	; 0x30
 800c1e8:	bd10      	pop	{r4, pc}
 800c1ea:	bf00      	nop
 800c1ec:	0800cc3d 	.word	0x0800cc3d
 800c1f0:	0800cc5f 	.word	0x0800cc5f
 800c1f4:	0800cc97 	.word	0x0800cc97
 800c1f8:	0800ccbb 	.word	0x0800ccbb

0800c1fc <_cleanup_r>:
 800c1fc:	4901      	ldr	r1, [pc, #4]	; (800c204 <_cleanup_r+0x8>)
 800c1fe:	f000 b8af 	b.w	800c360 <_fwalk_reent>
 800c202:	bf00      	nop
 800c204:	0800c13d 	.word	0x0800c13d

0800c208 <__sfmoreglue>:
 800c208:	b570      	push	{r4, r5, r6, lr}
 800c20a:	2268      	movs	r2, #104	; 0x68
 800c20c:	1e4d      	subs	r5, r1, #1
 800c20e:	4355      	muls	r5, r2
 800c210:	460e      	mov	r6, r1
 800c212:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800c216:	f000 f99f 	bl	800c558 <_malloc_r>
 800c21a:	4604      	mov	r4, r0
 800c21c:	b140      	cbz	r0, 800c230 <__sfmoreglue+0x28>
 800c21e:	2100      	movs	r1, #0
 800c220:	e9c0 1600 	strd	r1, r6, [r0]
 800c224:	300c      	adds	r0, #12
 800c226:	60a0      	str	r0, [r4, #8]
 800c228:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800c22c:	f7ff fce4 	bl	800bbf8 <memset>
 800c230:	4620      	mov	r0, r4
 800c232:	bd70      	pop	{r4, r5, r6, pc}

0800c234 <__sfp_lock_acquire>:
 800c234:	4801      	ldr	r0, [pc, #4]	; (800c23c <__sfp_lock_acquire+0x8>)
 800c236:	f000 b8b3 	b.w	800c3a0 <__retarget_lock_acquire_recursive>
 800c23a:	bf00      	nop
 800c23c:	20001c4e 	.word	0x20001c4e

0800c240 <__sfp_lock_release>:
 800c240:	4801      	ldr	r0, [pc, #4]	; (800c248 <__sfp_lock_release+0x8>)
 800c242:	f000 b8ae 	b.w	800c3a2 <__retarget_lock_release_recursive>
 800c246:	bf00      	nop
 800c248:	20001c4e 	.word	0x20001c4e

0800c24c <__sinit_lock_acquire>:
 800c24c:	4801      	ldr	r0, [pc, #4]	; (800c254 <__sinit_lock_acquire+0x8>)
 800c24e:	f000 b8a7 	b.w	800c3a0 <__retarget_lock_acquire_recursive>
 800c252:	bf00      	nop
 800c254:	20001c4f 	.word	0x20001c4f

0800c258 <__sinit_lock_release>:
 800c258:	4801      	ldr	r0, [pc, #4]	; (800c260 <__sinit_lock_release+0x8>)
 800c25a:	f000 b8a2 	b.w	800c3a2 <__retarget_lock_release_recursive>
 800c25e:	bf00      	nop
 800c260:	20001c4f 	.word	0x20001c4f

0800c264 <__sinit>:
 800c264:	b510      	push	{r4, lr}
 800c266:	4604      	mov	r4, r0
 800c268:	f7ff fff0 	bl	800c24c <__sinit_lock_acquire>
 800c26c:	69a3      	ldr	r3, [r4, #24]
 800c26e:	b11b      	cbz	r3, 800c278 <__sinit+0x14>
 800c270:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c274:	f7ff bff0 	b.w	800c258 <__sinit_lock_release>
 800c278:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800c27c:	6523      	str	r3, [r4, #80]	; 0x50
 800c27e:	4b13      	ldr	r3, [pc, #76]	; (800c2cc <__sinit+0x68>)
 800c280:	4a13      	ldr	r2, [pc, #76]	; (800c2d0 <__sinit+0x6c>)
 800c282:	681b      	ldr	r3, [r3, #0]
 800c284:	62a2      	str	r2, [r4, #40]	; 0x28
 800c286:	42a3      	cmp	r3, r4
 800c288:	bf04      	itt	eq
 800c28a:	2301      	moveq	r3, #1
 800c28c:	61a3      	streq	r3, [r4, #24]
 800c28e:	4620      	mov	r0, r4
 800c290:	f000 f820 	bl	800c2d4 <__sfp>
 800c294:	6060      	str	r0, [r4, #4]
 800c296:	4620      	mov	r0, r4
 800c298:	f000 f81c 	bl	800c2d4 <__sfp>
 800c29c:	60a0      	str	r0, [r4, #8]
 800c29e:	4620      	mov	r0, r4
 800c2a0:	f000 f818 	bl	800c2d4 <__sfp>
 800c2a4:	2200      	movs	r2, #0
 800c2a6:	60e0      	str	r0, [r4, #12]
 800c2a8:	2104      	movs	r1, #4
 800c2aa:	6860      	ldr	r0, [r4, #4]
 800c2ac:	f7ff ff82 	bl	800c1b4 <std>
 800c2b0:	68a0      	ldr	r0, [r4, #8]
 800c2b2:	2201      	movs	r2, #1
 800c2b4:	2109      	movs	r1, #9
 800c2b6:	f7ff ff7d 	bl	800c1b4 <std>
 800c2ba:	68e0      	ldr	r0, [r4, #12]
 800c2bc:	2202      	movs	r2, #2
 800c2be:	2112      	movs	r1, #18
 800c2c0:	f7ff ff78 	bl	800c1b4 <std>
 800c2c4:	2301      	movs	r3, #1
 800c2c6:	61a3      	str	r3, [r4, #24]
 800c2c8:	e7d2      	b.n	800c270 <__sinit+0xc>
 800c2ca:	bf00      	nop
 800c2cc:	0800d7e4 	.word	0x0800d7e4
 800c2d0:	0800c1fd 	.word	0x0800c1fd

0800c2d4 <__sfp>:
 800c2d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c2d6:	4607      	mov	r7, r0
 800c2d8:	f7ff ffac 	bl	800c234 <__sfp_lock_acquire>
 800c2dc:	4b1e      	ldr	r3, [pc, #120]	; (800c358 <__sfp+0x84>)
 800c2de:	681e      	ldr	r6, [r3, #0]
 800c2e0:	69b3      	ldr	r3, [r6, #24]
 800c2e2:	b913      	cbnz	r3, 800c2ea <__sfp+0x16>
 800c2e4:	4630      	mov	r0, r6
 800c2e6:	f7ff ffbd 	bl	800c264 <__sinit>
 800c2ea:	3648      	adds	r6, #72	; 0x48
 800c2ec:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800c2f0:	3b01      	subs	r3, #1
 800c2f2:	d503      	bpl.n	800c2fc <__sfp+0x28>
 800c2f4:	6833      	ldr	r3, [r6, #0]
 800c2f6:	b30b      	cbz	r3, 800c33c <__sfp+0x68>
 800c2f8:	6836      	ldr	r6, [r6, #0]
 800c2fa:	e7f7      	b.n	800c2ec <__sfp+0x18>
 800c2fc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800c300:	b9d5      	cbnz	r5, 800c338 <__sfp+0x64>
 800c302:	4b16      	ldr	r3, [pc, #88]	; (800c35c <__sfp+0x88>)
 800c304:	60e3      	str	r3, [r4, #12]
 800c306:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800c30a:	6665      	str	r5, [r4, #100]	; 0x64
 800c30c:	f000 f847 	bl	800c39e <__retarget_lock_init_recursive>
 800c310:	f7ff ff96 	bl	800c240 <__sfp_lock_release>
 800c314:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800c318:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800c31c:	6025      	str	r5, [r4, #0]
 800c31e:	61a5      	str	r5, [r4, #24]
 800c320:	2208      	movs	r2, #8
 800c322:	4629      	mov	r1, r5
 800c324:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800c328:	f7ff fc66 	bl	800bbf8 <memset>
 800c32c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800c330:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800c334:	4620      	mov	r0, r4
 800c336:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c338:	3468      	adds	r4, #104	; 0x68
 800c33a:	e7d9      	b.n	800c2f0 <__sfp+0x1c>
 800c33c:	2104      	movs	r1, #4
 800c33e:	4638      	mov	r0, r7
 800c340:	f7ff ff62 	bl	800c208 <__sfmoreglue>
 800c344:	4604      	mov	r4, r0
 800c346:	6030      	str	r0, [r6, #0]
 800c348:	2800      	cmp	r0, #0
 800c34a:	d1d5      	bne.n	800c2f8 <__sfp+0x24>
 800c34c:	f7ff ff78 	bl	800c240 <__sfp_lock_release>
 800c350:	230c      	movs	r3, #12
 800c352:	603b      	str	r3, [r7, #0]
 800c354:	e7ee      	b.n	800c334 <__sfp+0x60>
 800c356:	bf00      	nop
 800c358:	0800d7e4 	.word	0x0800d7e4
 800c35c:	ffff0001 	.word	0xffff0001

0800c360 <_fwalk_reent>:
 800c360:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c364:	4606      	mov	r6, r0
 800c366:	4688      	mov	r8, r1
 800c368:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800c36c:	2700      	movs	r7, #0
 800c36e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800c372:	f1b9 0901 	subs.w	r9, r9, #1
 800c376:	d505      	bpl.n	800c384 <_fwalk_reent+0x24>
 800c378:	6824      	ldr	r4, [r4, #0]
 800c37a:	2c00      	cmp	r4, #0
 800c37c:	d1f7      	bne.n	800c36e <_fwalk_reent+0xe>
 800c37e:	4638      	mov	r0, r7
 800c380:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c384:	89ab      	ldrh	r3, [r5, #12]
 800c386:	2b01      	cmp	r3, #1
 800c388:	d907      	bls.n	800c39a <_fwalk_reent+0x3a>
 800c38a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800c38e:	3301      	adds	r3, #1
 800c390:	d003      	beq.n	800c39a <_fwalk_reent+0x3a>
 800c392:	4629      	mov	r1, r5
 800c394:	4630      	mov	r0, r6
 800c396:	47c0      	blx	r8
 800c398:	4307      	orrs	r7, r0
 800c39a:	3568      	adds	r5, #104	; 0x68
 800c39c:	e7e9      	b.n	800c372 <_fwalk_reent+0x12>

0800c39e <__retarget_lock_init_recursive>:
 800c39e:	4770      	bx	lr

0800c3a0 <__retarget_lock_acquire_recursive>:
 800c3a0:	4770      	bx	lr

0800c3a2 <__retarget_lock_release_recursive>:
 800c3a2:	4770      	bx	lr

0800c3a4 <__swhatbuf_r>:
 800c3a4:	b570      	push	{r4, r5, r6, lr}
 800c3a6:	460e      	mov	r6, r1
 800c3a8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c3ac:	2900      	cmp	r1, #0
 800c3ae:	b096      	sub	sp, #88	; 0x58
 800c3b0:	4614      	mov	r4, r2
 800c3b2:	461d      	mov	r5, r3
 800c3b4:	da08      	bge.n	800c3c8 <__swhatbuf_r+0x24>
 800c3b6:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800c3ba:	2200      	movs	r2, #0
 800c3bc:	602a      	str	r2, [r5, #0]
 800c3be:	061a      	lsls	r2, r3, #24
 800c3c0:	d410      	bmi.n	800c3e4 <__swhatbuf_r+0x40>
 800c3c2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c3c6:	e00e      	b.n	800c3e6 <__swhatbuf_r+0x42>
 800c3c8:	466a      	mov	r2, sp
 800c3ca:	f000 fc9d 	bl	800cd08 <_fstat_r>
 800c3ce:	2800      	cmp	r0, #0
 800c3d0:	dbf1      	blt.n	800c3b6 <__swhatbuf_r+0x12>
 800c3d2:	9a01      	ldr	r2, [sp, #4]
 800c3d4:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800c3d8:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800c3dc:	425a      	negs	r2, r3
 800c3de:	415a      	adcs	r2, r3
 800c3e0:	602a      	str	r2, [r5, #0]
 800c3e2:	e7ee      	b.n	800c3c2 <__swhatbuf_r+0x1e>
 800c3e4:	2340      	movs	r3, #64	; 0x40
 800c3e6:	2000      	movs	r0, #0
 800c3e8:	6023      	str	r3, [r4, #0]
 800c3ea:	b016      	add	sp, #88	; 0x58
 800c3ec:	bd70      	pop	{r4, r5, r6, pc}
	...

0800c3f0 <__smakebuf_r>:
 800c3f0:	898b      	ldrh	r3, [r1, #12]
 800c3f2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800c3f4:	079d      	lsls	r5, r3, #30
 800c3f6:	4606      	mov	r6, r0
 800c3f8:	460c      	mov	r4, r1
 800c3fa:	d507      	bpl.n	800c40c <__smakebuf_r+0x1c>
 800c3fc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800c400:	6023      	str	r3, [r4, #0]
 800c402:	6123      	str	r3, [r4, #16]
 800c404:	2301      	movs	r3, #1
 800c406:	6163      	str	r3, [r4, #20]
 800c408:	b002      	add	sp, #8
 800c40a:	bd70      	pop	{r4, r5, r6, pc}
 800c40c:	ab01      	add	r3, sp, #4
 800c40e:	466a      	mov	r2, sp
 800c410:	f7ff ffc8 	bl	800c3a4 <__swhatbuf_r>
 800c414:	9900      	ldr	r1, [sp, #0]
 800c416:	4605      	mov	r5, r0
 800c418:	4630      	mov	r0, r6
 800c41a:	f000 f89d 	bl	800c558 <_malloc_r>
 800c41e:	b948      	cbnz	r0, 800c434 <__smakebuf_r+0x44>
 800c420:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c424:	059a      	lsls	r2, r3, #22
 800c426:	d4ef      	bmi.n	800c408 <__smakebuf_r+0x18>
 800c428:	f023 0303 	bic.w	r3, r3, #3
 800c42c:	f043 0302 	orr.w	r3, r3, #2
 800c430:	81a3      	strh	r3, [r4, #12]
 800c432:	e7e3      	b.n	800c3fc <__smakebuf_r+0xc>
 800c434:	4b0d      	ldr	r3, [pc, #52]	; (800c46c <__smakebuf_r+0x7c>)
 800c436:	62b3      	str	r3, [r6, #40]	; 0x28
 800c438:	89a3      	ldrh	r3, [r4, #12]
 800c43a:	6020      	str	r0, [r4, #0]
 800c43c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c440:	81a3      	strh	r3, [r4, #12]
 800c442:	9b00      	ldr	r3, [sp, #0]
 800c444:	6163      	str	r3, [r4, #20]
 800c446:	9b01      	ldr	r3, [sp, #4]
 800c448:	6120      	str	r0, [r4, #16]
 800c44a:	b15b      	cbz	r3, 800c464 <__smakebuf_r+0x74>
 800c44c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c450:	4630      	mov	r0, r6
 800c452:	f000 fc6b 	bl	800cd2c <_isatty_r>
 800c456:	b128      	cbz	r0, 800c464 <__smakebuf_r+0x74>
 800c458:	89a3      	ldrh	r3, [r4, #12]
 800c45a:	f023 0303 	bic.w	r3, r3, #3
 800c45e:	f043 0301 	orr.w	r3, r3, #1
 800c462:	81a3      	strh	r3, [r4, #12]
 800c464:	89a0      	ldrh	r0, [r4, #12]
 800c466:	4305      	orrs	r5, r0
 800c468:	81a5      	strh	r5, [r4, #12]
 800c46a:	e7cd      	b.n	800c408 <__smakebuf_r+0x18>
 800c46c:	0800c1fd 	.word	0x0800c1fd

0800c470 <malloc>:
 800c470:	4b02      	ldr	r3, [pc, #8]	; (800c47c <malloc+0xc>)
 800c472:	4601      	mov	r1, r0
 800c474:	6818      	ldr	r0, [r3, #0]
 800c476:	f000 b86f 	b.w	800c558 <_malloc_r>
 800c47a:	bf00      	nop
 800c47c:	20001070 	.word	0x20001070

0800c480 <_free_r>:
 800c480:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c482:	2900      	cmp	r1, #0
 800c484:	d044      	beq.n	800c510 <_free_r+0x90>
 800c486:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c48a:	9001      	str	r0, [sp, #4]
 800c48c:	2b00      	cmp	r3, #0
 800c48e:	f1a1 0404 	sub.w	r4, r1, #4
 800c492:	bfb8      	it	lt
 800c494:	18e4      	addlt	r4, r4, r3
 800c496:	f000 fc6b 	bl	800cd70 <__malloc_lock>
 800c49a:	4a1e      	ldr	r2, [pc, #120]	; (800c514 <_free_r+0x94>)
 800c49c:	9801      	ldr	r0, [sp, #4]
 800c49e:	6813      	ldr	r3, [r2, #0]
 800c4a0:	b933      	cbnz	r3, 800c4b0 <_free_r+0x30>
 800c4a2:	6063      	str	r3, [r4, #4]
 800c4a4:	6014      	str	r4, [r2, #0]
 800c4a6:	b003      	add	sp, #12
 800c4a8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c4ac:	f000 bc66 	b.w	800cd7c <__malloc_unlock>
 800c4b0:	42a3      	cmp	r3, r4
 800c4b2:	d908      	bls.n	800c4c6 <_free_r+0x46>
 800c4b4:	6825      	ldr	r5, [r4, #0]
 800c4b6:	1961      	adds	r1, r4, r5
 800c4b8:	428b      	cmp	r3, r1
 800c4ba:	bf01      	itttt	eq
 800c4bc:	6819      	ldreq	r1, [r3, #0]
 800c4be:	685b      	ldreq	r3, [r3, #4]
 800c4c0:	1949      	addeq	r1, r1, r5
 800c4c2:	6021      	streq	r1, [r4, #0]
 800c4c4:	e7ed      	b.n	800c4a2 <_free_r+0x22>
 800c4c6:	461a      	mov	r2, r3
 800c4c8:	685b      	ldr	r3, [r3, #4]
 800c4ca:	b10b      	cbz	r3, 800c4d0 <_free_r+0x50>
 800c4cc:	42a3      	cmp	r3, r4
 800c4ce:	d9fa      	bls.n	800c4c6 <_free_r+0x46>
 800c4d0:	6811      	ldr	r1, [r2, #0]
 800c4d2:	1855      	adds	r5, r2, r1
 800c4d4:	42a5      	cmp	r5, r4
 800c4d6:	d10b      	bne.n	800c4f0 <_free_r+0x70>
 800c4d8:	6824      	ldr	r4, [r4, #0]
 800c4da:	4421      	add	r1, r4
 800c4dc:	1854      	adds	r4, r2, r1
 800c4de:	42a3      	cmp	r3, r4
 800c4e0:	6011      	str	r1, [r2, #0]
 800c4e2:	d1e0      	bne.n	800c4a6 <_free_r+0x26>
 800c4e4:	681c      	ldr	r4, [r3, #0]
 800c4e6:	685b      	ldr	r3, [r3, #4]
 800c4e8:	6053      	str	r3, [r2, #4]
 800c4ea:	4421      	add	r1, r4
 800c4ec:	6011      	str	r1, [r2, #0]
 800c4ee:	e7da      	b.n	800c4a6 <_free_r+0x26>
 800c4f0:	d902      	bls.n	800c4f8 <_free_r+0x78>
 800c4f2:	230c      	movs	r3, #12
 800c4f4:	6003      	str	r3, [r0, #0]
 800c4f6:	e7d6      	b.n	800c4a6 <_free_r+0x26>
 800c4f8:	6825      	ldr	r5, [r4, #0]
 800c4fa:	1961      	adds	r1, r4, r5
 800c4fc:	428b      	cmp	r3, r1
 800c4fe:	bf04      	itt	eq
 800c500:	6819      	ldreq	r1, [r3, #0]
 800c502:	685b      	ldreq	r3, [r3, #4]
 800c504:	6063      	str	r3, [r4, #4]
 800c506:	bf04      	itt	eq
 800c508:	1949      	addeq	r1, r1, r5
 800c50a:	6021      	streq	r1, [r4, #0]
 800c50c:	6054      	str	r4, [r2, #4]
 800c50e:	e7ca      	b.n	800c4a6 <_free_r+0x26>
 800c510:	b003      	add	sp, #12
 800c512:	bd30      	pop	{r4, r5, pc}
 800c514:	20001c50 	.word	0x20001c50

0800c518 <sbrk_aligned>:
 800c518:	b570      	push	{r4, r5, r6, lr}
 800c51a:	4e0e      	ldr	r6, [pc, #56]	; (800c554 <sbrk_aligned+0x3c>)
 800c51c:	460c      	mov	r4, r1
 800c51e:	6831      	ldr	r1, [r6, #0]
 800c520:	4605      	mov	r5, r0
 800c522:	b911      	cbnz	r1, 800c52a <sbrk_aligned+0x12>
 800c524:	f000 fb7a 	bl	800cc1c <_sbrk_r>
 800c528:	6030      	str	r0, [r6, #0]
 800c52a:	4621      	mov	r1, r4
 800c52c:	4628      	mov	r0, r5
 800c52e:	f000 fb75 	bl	800cc1c <_sbrk_r>
 800c532:	1c43      	adds	r3, r0, #1
 800c534:	d00a      	beq.n	800c54c <sbrk_aligned+0x34>
 800c536:	1cc4      	adds	r4, r0, #3
 800c538:	f024 0403 	bic.w	r4, r4, #3
 800c53c:	42a0      	cmp	r0, r4
 800c53e:	d007      	beq.n	800c550 <sbrk_aligned+0x38>
 800c540:	1a21      	subs	r1, r4, r0
 800c542:	4628      	mov	r0, r5
 800c544:	f000 fb6a 	bl	800cc1c <_sbrk_r>
 800c548:	3001      	adds	r0, #1
 800c54a:	d101      	bne.n	800c550 <sbrk_aligned+0x38>
 800c54c:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800c550:	4620      	mov	r0, r4
 800c552:	bd70      	pop	{r4, r5, r6, pc}
 800c554:	20001c54 	.word	0x20001c54

0800c558 <_malloc_r>:
 800c558:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c55c:	1ccd      	adds	r5, r1, #3
 800c55e:	f025 0503 	bic.w	r5, r5, #3
 800c562:	3508      	adds	r5, #8
 800c564:	2d0c      	cmp	r5, #12
 800c566:	bf38      	it	cc
 800c568:	250c      	movcc	r5, #12
 800c56a:	2d00      	cmp	r5, #0
 800c56c:	4607      	mov	r7, r0
 800c56e:	db01      	blt.n	800c574 <_malloc_r+0x1c>
 800c570:	42a9      	cmp	r1, r5
 800c572:	d905      	bls.n	800c580 <_malloc_r+0x28>
 800c574:	230c      	movs	r3, #12
 800c576:	603b      	str	r3, [r7, #0]
 800c578:	2600      	movs	r6, #0
 800c57a:	4630      	mov	r0, r6
 800c57c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c580:	4e2e      	ldr	r6, [pc, #184]	; (800c63c <_malloc_r+0xe4>)
 800c582:	f000 fbf5 	bl	800cd70 <__malloc_lock>
 800c586:	6833      	ldr	r3, [r6, #0]
 800c588:	461c      	mov	r4, r3
 800c58a:	bb34      	cbnz	r4, 800c5da <_malloc_r+0x82>
 800c58c:	4629      	mov	r1, r5
 800c58e:	4638      	mov	r0, r7
 800c590:	f7ff ffc2 	bl	800c518 <sbrk_aligned>
 800c594:	1c43      	adds	r3, r0, #1
 800c596:	4604      	mov	r4, r0
 800c598:	d14d      	bne.n	800c636 <_malloc_r+0xde>
 800c59a:	6834      	ldr	r4, [r6, #0]
 800c59c:	4626      	mov	r6, r4
 800c59e:	2e00      	cmp	r6, #0
 800c5a0:	d140      	bne.n	800c624 <_malloc_r+0xcc>
 800c5a2:	6823      	ldr	r3, [r4, #0]
 800c5a4:	4631      	mov	r1, r6
 800c5a6:	4638      	mov	r0, r7
 800c5a8:	eb04 0803 	add.w	r8, r4, r3
 800c5ac:	f000 fb36 	bl	800cc1c <_sbrk_r>
 800c5b0:	4580      	cmp	r8, r0
 800c5b2:	d13a      	bne.n	800c62a <_malloc_r+0xd2>
 800c5b4:	6821      	ldr	r1, [r4, #0]
 800c5b6:	3503      	adds	r5, #3
 800c5b8:	1a6d      	subs	r5, r5, r1
 800c5ba:	f025 0503 	bic.w	r5, r5, #3
 800c5be:	3508      	adds	r5, #8
 800c5c0:	2d0c      	cmp	r5, #12
 800c5c2:	bf38      	it	cc
 800c5c4:	250c      	movcc	r5, #12
 800c5c6:	4629      	mov	r1, r5
 800c5c8:	4638      	mov	r0, r7
 800c5ca:	f7ff ffa5 	bl	800c518 <sbrk_aligned>
 800c5ce:	3001      	adds	r0, #1
 800c5d0:	d02b      	beq.n	800c62a <_malloc_r+0xd2>
 800c5d2:	6823      	ldr	r3, [r4, #0]
 800c5d4:	442b      	add	r3, r5
 800c5d6:	6023      	str	r3, [r4, #0]
 800c5d8:	e00e      	b.n	800c5f8 <_malloc_r+0xa0>
 800c5da:	6822      	ldr	r2, [r4, #0]
 800c5dc:	1b52      	subs	r2, r2, r5
 800c5de:	d41e      	bmi.n	800c61e <_malloc_r+0xc6>
 800c5e0:	2a0b      	cmp	r2, #11
 800c5e2:	d916      	bls.n	800c612 <_malloc_r+0xba>
 800c5e4:	1961      	adds	r1, r4, r5
 800c5e6:	42a3      	cmp	r3, r4
 800c5e8:	6025      	str	r5, [r4, #0]
 800c5ea:	bf18      	it	ne
 800c5ec:	6059      	strne	r1, [r3, #4]
 800c5ee:	6863      	ldr	r3, [r4, #4]
 800c5f0:	bf08      	it	eq
 800c5f2:	6031      	streq	r1, [r6, #0]
 800c5f4:	5162      	str	r2, [r4, r5]
 800c5f6:	604b      	str	r3, [r1, #4]
 800c5f8:	4638      	mov	r0, r7
 800c5fa:	f104 060b 	add.w	r6, r4, #11
 800c5fe:	f000 fbbd 	bl	800cd7c <__malloc_unlock>
 800c602:	f026 0607 	bic.w	r6, r6, #7
 800c606:	1d23      	adds	r3, r4, #4
 800c608:	1af2      	subs	r2, r6, r3
 800c60a:	d0b6      	beq.n	800c57a <_malloc_r+0x22>
 800c60c:	1b9b      	subs	r3, r3, r6
 800c60e:	50a3      	str	r3, [r4, r2]
 800c610:	e7b3      	b.n	800c57a <_malloc_r+0x22>
 800c612:	6862      	ldr	r2, [r4, #4]
 800c614:	42a3      	cmp	r3, r4
 800c616:	bf0c      	ite	eq
 800c618:	6032      	streq	r2, [r6, #0]
 800c61a:	605a      	strne	r2, [r3, #4]
 800c61c:	e7ec      	b.n	800c5f8 <_malloc_r+0xa0>
 800c61e:	4623      	mov	r3, r4
 800c620:	6864      	ldr	r4, [r4, #4]
 800c622:	e7b2      	b.n	800c58a <_malloc_r+0x32>
 800c624:	4634      	mov	r4, r6
 800c626:	6876      	ldr	r6, [r6, #4]
 800c628:	e7b9      	b.n	800c59e <_malloc_r+0x46>
 800c62a:	230c      	movs	r3, #12
 800c62c:	603b      	str	r3, [r7, #0]
 800c62e:	4638      	mov	r0, r7
 800c630:	f000 fba4 	bl	800cd7c <__malloc_unlock>
 800c634:	e7a1      	b.n	800c57a <_malloc_r+0x22>
 800c636:	6025      	str	r5, [r4, #0]
 800c638:	e7de      	b.n	800c5f8 <_malloc_r+0xa0>
 800c63a:	bf00      	nop
 800c63c:	20001c50 	.word	0x20001c50

0800c640 <__sfputc_r>:
 800c640:	6893      	ldr	r3, [r2, #8]
 800c642:	3b01      	subs	r3, #1
 800c644:	2b00      	cmp	r3, #0
 800c646:	b410      	push	{r4}
 800c648:	6093      	str	r3, [r2, #8]
 800c64a:	da08      	bge.n	800c65e <__sfputc_r+0x1e>
 800c64c:	6994      	ldr	r4, [r2, #24]
 800c64e:	42a3      	cmp	r3, r4
 800c650:	db01      	blt.n	800c656 <__sfputc_r+0x16>
 800c652:	290a      	cmp	r1, #10
 800c654:	d103      	bne.n	800c65e <__sfputc_r+0x1e>
 800c656:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c65a:	f7ff bc29 	b.w	800beb0 <__swbuf_r>
 800c65e:	6813      	ldr	r3, [r2, #0]
 800c660:	1c58      	adds	r0, r3, #1
 800c662:	6010      	str	r0, [r2, #0]
 800c664:	7019      	strb	r1, [r3, #0]
 800c666:	4608      	mov	r0, r1
 800c668:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c66c:	4770      	bx	lr

0800c66e <__sfputs_r>:
 800c66e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c670:	4606      	mov	r6, r0
 800c672:	460f      	mov	r7, r1
 800c674:	4614      	mov	r4, r2
 800c676:	18d5      	adds	r5, r2, r3
 800c678:	42ac      	cmp	r4, r5
 800c67a:	d101      	bne.n	800c680 <__sfputs_r+0x12>
 800c67c:	2000      	movs	r0, #0
 800c67e:	e007      	b.n	800c690 <__sfputs_r+0x22>
 800c680:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c684:	463a      	mov	r2, r7
 800c686:	4630      	mov	r0, r6
 800c688:	f7ff ffda 	bl	800c640 <__sfputc_r>
 800c68c:	1c43      	adds	r3, r0, #1
 800c68e:	d1f3      	bne.n	800c678 <__sfputs_r+0xa>
 800c690:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800c694 <_vfiprintf_r>:
 800c694:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c698:	460d      	mov	r5, r1
 800c69a:	b09d      	sub	sp, #116	; 0x74
 800c69c:	4614      	mov	r4, r2
 800c69e:	4698      	mov	r8, r3
 800c6a0:	4606      	mov	r6, r0
 800c6a2:	b118      	cbz	r0, 800c6ac <_vfiprintf_r+0x18>
 800c6a4:	6983      	ldr	r3, [r0, #24]
 800c6a6:	b90b      	cbnz	r3, 800c6ac <_vfiprintf_r+0x18>
 800c6a8:	f7ff fddc 	bl	800c264 <__sinit>
 800c6ac:	4b89      	ldr	r3, [pc, #548]	; (800c8d4 <_vfiprintf_r+0x240>)
 800c6ae:	429d      	cmp	r5, r3
 800c6b0:	d11b      	bne.n	800c6ea <_vfiprintf_r+0x56>
 800c6b2:	6875      	ldr	r5, [r6, #4]
 800c6b4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c6b6:	07d9      	lsls	r1, r3, #31
 800c6b8:	d405      	bmi.n	800c6c6 <_vfiprintf_r+0x32>
 800c6ba:	89ab      	ldrh	r3, [r5, #12]
 800c6bc:	059a      	lsls	r2, r3, #22
 800c6be:	d402      	bmi.n	800c6c6 <_vfiprintf_r+0x32>
 800c6c0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c6c2:	f7ff fe6d 	bl	800c3a0 <__retarget_lock_acquire_recursive>
 800c6c6:	89ab      	ldrh	r3, [r5, #12]
 800c6c8:	071b      	lsls	r3, r3, #28
 800c6ca:	d501      	bpl.n	800c6d0 <_vfiprintf_r+0x3c>
 800c6cc:	692b      	ldr	r3, [r5, #16]
 800c6ce:	b9eb      	cbnz	r3, 800c70c <_vfiprintf_r+0x78>
 800c6d0:	4629      	mov	r1, r5
 800c6d2:	4630      	mov	r0, r6
 800c6d4:	f7ff fc3e 	bl	800bf54 <__swsetup_r>
 800c6d8:	b1c0      	cbz	r0, 800c70c <_vfiprintf_r+0x78>
 800c6da:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c6dc:	07dc      	lsls	r4, r3, #31
 800c6de:	d50e      	bpl.n	800c6fe <_vfiprintf_r+0x6a>
 800c6e0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c6e4:	b01d      	add	sp, #116	; 0x74
 800c6e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c6ea:	4b7b      	ldr	r3, [pc, #492]	; (800c8d8 <_vfiprintf_r+0x244>)
 800c6ec:	429d      	cmp	r5, r3
 800c6ee:	d101      	bne.n	800c6f4 <_vfiprintf_r+0x60>
 800c6f0:	68b5      	ldr	r5, [r6, #8]
 800c6f2:	e7df      	b.n	800c6b4 <_vfiprintf_r+0x20>
 800c6f4:	4b79      	ldr	r3, [pc, #484]	; (800c8dc <_vfiprintf_r+0x248>)
 800c6f6:	429d      	cmp	r5, r3
 800c6f8:	bf08      	it	eq
 800c6fa:	68f5      	ldreq	r5, [r6, #12]
 800c6fc:	e7da      	b.n	800c6b4 <_vfiprintf_r+0x20>
 800c6fe:	89ab      	ldrh	r3, [r5, #12]
 800c700:	0598      	lsls	r0, r3, #22
 800c702:	d4ed      	bmi.n	800c6e0 <_vfiprintf_r+0x4c>
 800c704:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c706:	f7ff fe4c 	bl	800c3a2 <__retarget_lock_release_recursive>
 800c70a:	e7e9      	b.n	800c6e0 <_vfiprintf_r+0x4c>
 800c70c:	2300      	movs	r3, #0
 800c70e:	9309      	str	r3, [sp, #36]	; 0x24
 800c710:	2320      	movs	r3, #32
 800c712:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c716:	f8cd 800c 	str.w	r8, [sp, #12]
 800c71a:	2330      	movs	r3, #48	; 0x30
 800c71c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800c8e0 <_vfiprintf_r+0x24c>
 800c720:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c724:	f04f 0901 	mov.w	r9, #1
 800c728:	4623      	mov	r3, r4
 800c72a:	469a      	mov	sl, r3
 800c72c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c730:	b10a      	cbz	r2, 800c736 <_vfiprintf_r+0xa2>
 800c732:	2a25      	cmp	r2, #37	; 0x25
 800c734:	d1f9      	bne.n	800c72a <_vfiprintf_r+0x96>
 800c736:	ebba 0b04 	subs.w	fp, sl, r4
 800c73a:	d00b      	beq.n	800c754 <_vfiprintf_r+0xc0>
 800c73c:	465b      	mov	r3, fp
 800c73e:	4622      	mov	r2, r4
 800c740:	4629      	mov	r1, r5
 800c742:	4630      	mov	r0, r6
 800c744:	f7ff ff93 	bl	800c66e <__sfputs_r>
 800c748:	3001      	adds	r0, #1
 800c74a:	f000 80aa 	beq.w	800c8a2 <_vfiprintf_r+0x20e>
 800c74e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c750:	445a      	add	r2, fp
 800c752:	9209      	str	r2, [sp, #36]	; 0x24
 800c754:	f89a 3000 	ldrb.w	r3, [sl]
 800c758:	2b00      	cmp	r3, #0
 800c75a:	f000 80a2 	beq.w	800c8a2 <_vfiprintf_r+0x20e>
 800c75e:	2300      	movs	r3, #0
 800c760:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c764:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c768:	f10a 0a01 	add.w	sl, sl, #1
 800c76c:	9304      	str	r3, [sp, #16]
 800c76e:	9307      	str	r3, [sp, #28]
 800c770:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c774:	931a      	str	r3, [sp, #104]	; 0x68
 800c776:	4654      	mov	r4, sl
 800c778:	2205      	movs	r2, #5
 800c77a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c77e:	4858      	ldr	r0, [pc, #352]	; (800c8e0 <_vfiprintf_r+0x24c>)
 800c780:	f7fc f8fe 	bl	8008980 <memchr>
 800c784:	9a04      	ldr	r2, [sp, #16]
 800c786:	b9d8      	cbnz	r0, 800c7c0 <_vfiprintf_r+0x12c>
 800c788:	06d1      	lsls	r1, r2, #27
 800c78a:	bf44      	itt	mi
 800c78c:	2320      	movmi	r3, #32
 800c78e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c792:	0713      	lsls	r3, r2, #28
 800c794:	bf44      	itt	mi
 800c796:	232b      	movmi	r3, #43	; 0x2b
 800c798:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c79c:	f89a 3000 	ldrb.w	r3, [sl]
 800c7a0:	2b2a      	cmp	r3, #42	; 0x2a
 800c7a2:	d015      	beq.n	800c7d0 <_vfiprintf_r+0x13c>
 800c7a4:	9a07      	ldr	r2, [sp, #28]
 800c7a6:	4654      	mov	r4, sl
 800c7a8:	2000      	movs	r0, #0
 800c7aa:	f04f 0c0a 	mov.w	ip, #10
 800c7ae:	4621      	mov	r1, r4
 800c7b0:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c7b4:	3b30      	subs	r3, #48	; 0x30
 800c7b6:	2b09      	cmp	r3, #9
 800c7b8:	d94e      	bls.n	800c858 <_vfiprintf_r+0x1c4>
 800c7ba:	b1b0      	cbz	r0, 800c7ea <_vfiprintf_r+0x156>
 800c7bc:	9207      	str	r2, [sp, #28]
 800c7be:	e014      	b.n	800c7ea <_vfiprintf_r+0x156>
 800c7c0:	eba0 0308 	sub.w	r3, r0, r8
 800c7c4:	fa09 f303 	lsl.w	r3, r9, r3
 800c7c8:	4313      	orrs	r3, r2
 800c7ca:	9304      	str	r3, [sp, #16]
 800c7cc:	46a2      	mov	sl, r4
 800c7ce:	e7d2      	b.n	800c776 <_vfiprintf_r+0xe2>
 800c7d0:	9b03      	ldr	r3, [sp, #12]
 800c7d2:	1d19      	adds	r1, r3, #4
 800c7d4:	681b      	ldr	r3, [r3, #0]
 800c7d6:	9103      	str	r1, [sp, #12]
 800c7d8:	2b00      	cmp	r3, #0
 800c7da:	bfbb      	ittet	lt
 800c7dc:	425b      	neglt	r3, r3
 800c7de:	f042 0202 	orrlt.w	r2, r2, #2
 800c7e2:	9307      	strge	r3, [sp, #28]
 800c7e4:	9307      	strlt	r3, [sp, #28]
 800c7e6:	bfb8      	it	lt
 800c7e8:	9204      	strlt	r2, [sp, #16]
 800c7ea:	7823      	ldrb	r3, [r4, #0]
 800c7ec:	2b2e      	cmp	r3, #46	; 0x2e
 800c7ee:	d10c      	bne.n	800c80a <_vfiprintf_r+0x176>
 800c7f0:	7863      	ldrb	r3, [r4, #1]
 800c7f2:	2b2a      	cmp	r3, #42	; 0x2a
 800c7f4:	d135      	bne.n	800c862 <_vfiprintf_r+0x1ce>
 800c7f6:	9b03      	ldr	r3, [sp, #12]
 800c7f8:	1d1a      	adds	r2, r3, #4
 800c7fa:	681b      	ldr	r3, [r3, #0]
 800c7fc:	9203      	str	r2, [sp, #12]
 800c7fe:	2b00      	cmp	r3, #0
 800c800:	bfb8      	it	lt
 800c802:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800c806:	3402      	adds	r4, #2
 800c808:	9305      	str	r3, [sp, #20]
 800c80a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800c8f0 <_vfiprintf_r+0x25c>
 800c80e:	7821      	ldrb	r1, [r4, #0]
 800c810:	2203      	movs	r2, #3
 800c812:	4650      	mov	r0, sl
 800c814:	f7fc f8b4 	bl	8008980 <memchr>
 800c818:	b140      	cbz	r0, 800c82c <_vfiprintf_r+0x198>
 800c81a:	2340      	movs	r3, #64	; 0x40
 800c81c:	eba0 000a 	sub.w	r0, r0, sl
 800c820:	fa03 f000 	lsl.w	r0, r3, r0
 800c824:	9b04      	ldr	r3, [sp, #16]
 800c826:	4303      	orrs	r3, r0
 800c828:	3401      	adds	r4, #1
 800c82a:	9304      	str	r3, [sp, #16]
 800c82c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c830:	482c      	ldr	r0, [pc, #176]	; (800c8e4 <_vfiprintf_r+0x250>)
 800c832:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c836:	2206      	movs	r2, #6
 800c838:	f7fc f8a2 	bl	8008980 <memchr>
 800c83c:	2800      	cmp	r0, #0
 800c83e:	d03f      	beq.n	800c8c0 <_vfiprintf_r+0x22c>
 800c840:	4b29      	ldr	r3, [pc, #164]	; (800c8e8 <_vfiprintf_r+0x254>)
 800c842:	bb1b      	cbnz	r3, 800c88c <_vfiprintf_r+0x1f8>
 800c844:	9b03      	ldr	r3, [sp, #12]
 800c846:	3307      	adds	r3, #7
 800c848:	f023 0307 	bic.w	r3, r3, #7
 800c84c:	3308      	adds	r3, #8
 800c84e:	9303      	str	r3, [sp, #12]
 800c850:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c852:	443b      	add	r3, r7
 800c854:	9309      	str	r3, [sp, #36]	; 0x24
 800c856:	e767      	b.n	800c728 <_vfiprintf_r+0x94>
 800c858:	fb0c 3202 	mla	r2, ip, r2, r3
 800c85c:	460c      	mov	r4, r1
 800c85e:	2001      	movs	r0, #1
 800c860:	e7a5      	b.n	800c7ae <_vfiprintf_r+0x11a>
 800c862:	2300      	movs	r3, #0
 800c864:	3401      	adds	r4, #1
 800c866:	9305      	str	r3, [sp, #20]
 800c868:	4619      	mov	r1, r3
 800c86a:	f04f 0c0a 	mov.w	ip, #10
 800c86e:	4620      	mov	r0, r4
 800c870:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c874:	3a30      	subs	r2, #48	; 0x30
 800c876:	2a09      	cmp	r2, #9
 800c878:	d903      	bls.n	800c882 <_vfiprintf_r+0x1ee>
 800c87a:	2b00      	cmp	r3, #0
 800c87c:	d0c5      	beq.n	800c80a <_vfiprintf_r+0x176>
 800c87e:	9105      	str	r1, [sp, #20]
 800c880:	e7c3      	b.n	800c80a <_vfiprintf_r+0x176>
 800c882:	fb0c 2101 	mla	r1, ip, r1, r2
 800c886:	4604      	mov	r4, r0
 800c888:	2301      	movs	r3, #1
 800c88a:	e7f0      	b.n	800c86e <_vfiprintf_r+0x1da>
 800c88c:	ab03      	add	r3, sp, #12
 800c88e:	9300      	str	r3, [sp, #0]
 800c890:	462a      	mov	r2, r5
 800c892:	4b16      	ldr	r3, [pc, #88]	; (800c8ec <_vfiprintf_r+0x258>)
 800c894:	a904      	add	r1, sp, #16
 800c896:	4630      	mov	r0, r6
 800c898:	f3af 8000 	nop.w
 800c89c:	4607      	mov	r7, r0
 800c89e:	1c78      	adds	r0, r7, #1
 800c8a0:	d1d6      	bne.n	800c850 <_vfiprintf_r+0x1bc>
 800c8a2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c8a4:	07d9      	lsls	r1, r3, #31
 800c8a6:	d405      	bmi.n	800c8b4 <_vfiprintf_r+0x220>
 800c8a8:	89ab      	ldrh	r3, [r5, #12]
 800c8aa:	059a      	lsls	r2, r3, #22
 800c8ac:	d402      	bmi.n	800c8b4 <_vfiprintf_r+0x220>
 800c8ae:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c8b0:	f7ff fd77 	bl	800c3a2 <__retarget_lock_release_recursive>
 800c8b4:	89ab      	ldrh	r3, [r5, #12]
 800c8b6:	065b      	lsls	r3, r3, #25
 800c8b8:	f53f af12 	bmi.w	800c6e0 <_vfiprintf_r+0x4c>
 800c8bc:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c8be:	e711      	b.n	800c6e4 <_vfiprintf_r+0x50>
 800c8c0:	ab03      	add	r3, sp, #12
 800c8c2:	9300      	str	r3, [sp, #0]
 800c8c4:	462a      	mov	r2, r5
 800c8c6:	4b09      	ldr	r3, [pc, #36]	; (800c8ec <_vfiprintf_r+0x258>)
 800c8c8:	a904      	add	r1, sp, #16
 800c8ca:	4630      	mov	r0, r6
 800c8cc:	f000 f880 	bl	800c9d0 <_printf_i>
 800c8d0:	e7e4      	b.n	800c89c <_vfiprintf_r+0x208>
 800c8d2:	bf00      	nop
 800c8d4:	0800d808 	.word	0x0800d808
 800c8d8:	0800d828 	.word	0x0800d828
 800c8dc:	0800d7e8 	.word	0x0800d7e8
 800c8e0:	0800d848 	.word	0x0800d848
 800c8e4:	0800d852 	.word	0x0800d852
 800c8e8:	00000000 	.word	0x00000000
 800c8ec:	0800c66f 	.word	0x0800c66f
 800c8f0:	0800d84e 	.word	0x0800d84e

0800c8f4 <_printf_common>:
 800c8f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c8f8:	4616      	mov	r6, r2
 800c8fa:	4699      	mov	r9, r3
 800c8fc:	688a      	ldr	r2, [r1, #8]
 800c8fe:	690b      	ldr	r3, [r1, #16]
 800c900:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800c904:	4293      	cmp	r3, r2
 800c906:	bfb8      	it	lt
 800c908:	4613      	movlt	r3, r2
 800c90a:	6033      	str	r3, [r6, #0]
 800c90c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800c910:	4607      	mov	r7, r0
 800c912:	460c      	mov	r4, r1
 800c914:	b10a      	cbz	r2, 800c91a <_printf_common+0x26>
 800c916:	3301      	adds	r3, #1
 800c918:	6033      	str	r3, [r6, #0]
 800c91a:	6823      	ldr	r3, [r4, #0]
 800c91c:	0699      	lsls	r1, r3, #26
 800c91e:	bf42      	ittt	mi
 800c920:	6833      	ldrmi	r3, [r6, #0]
 800c922:	3302      	addmi	r3, #2
 800c924:	6033      	strmi	r3, [r6, #0]
 800c926:	6825      	ldr	r5, [r4, #0]
 800c928:	f015 0506 	ands.w	r5, r5, #6
 800c92c:	d106      	bne.n	800c93c <_printf_common+0x48>
 800c92e:	f104 0a19 	add.w	sl, r4, #25
 800c932:	68e3      	ldr	r3, [r4, #12]
 800c934:	6832      	ldr	r2, [r6, #0]
 800c936:	1a9b      	subs	r3, r3, r2
 800c938:	42ab      	cmp	r3, r5
 800c93a:	dc26      	bgt.n	800c98a <_printf_common+0x96>
 800c93c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800c940:	1e13      	subs	r3, r2, #0
 800c942:	6822      	ldr	r2, [r4, #0]
 800c944:	bf18      	it	ne
 800c946:	2301      	movne	r3, #1
 800c948:	0692      	lsls	r2, r2, #26
 800c94a:	d42b      	bmi.n	800c9a4 <_printf_common+0xb0>
 800c94c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800c950:	4649      	mov	r1, r9
 800c952:	4638      	mov	r0, r7
 800c954:	47c0      	blx	r8
 800c956:	3001      	adds	r0, #1
 800c958:	d01e      	beq.n	800c998 <_printf_common+0xa4>
 800c95a:	6823      	ldr	r3, [r4, #0]
 800c95c:	68e5      	ldr	r5, [r4, #12]
 800c95e:	6832      	ldr	r2, [r6, #0]
 800c960:	f003 0306 	and.w	r3, r3, #6
 800c964:	2b04      	cmp	r3, #4
 800c966:	bf08      	it	eq
 800c968:	1aad      	subeq	r5, r5, r2
 800c96a:	68a3      	ldr	r3, [r4, #8]
 800c96c:	6922      	ldr	r2, [r4, #16]
 800c96e:	bf0c      	ite	eq
 800c970:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c974:	2500      	movne	r5, #0
 800c976:	4293      	cmp	r3, r2
 800c978:	bfc4      	itt	gt
 800c97a:	1a9b      	subgt	r3, r3, r2
 800c97c:	18ed      	addgt	r5, r5, r3
 800c97e:	2600      	movs	r6, #0
 800c980:	341a      	adds	r4, #26
 800c982:	42b5      	cmp	r5, r6
 800c984:	d11a      	bne.n	800c9bc <_printf_common+0xc8>
 800c986:	2000      	movs	r0, #0
 800c988:	e008      	b.n	800c99c <_printf_common+0xa8>
 800c98a:	2301      	movs	r3, #1
 800c98c:	4652      	mov	r2, sl
 800c98e:	4649      	mov	r1, r9
 800c990:	4638      	mov	r0, r7
 800c992:	47c0      	blx	r8
 800c994:	3001      	adds	r0, #1
 800c996:	d103      	bne.n	800c9a0 <_printf_common+0xac>
 800c998:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c99c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c9a0:	3501      	adds	r5, #1
 800c9a2:	e7c6      	b.n	800c932 <_printf_common+0x3e>
 800c9a4:	18e1      	adds	r1, r4, r3
 800c9a6:	1c5a      	adds	r2, r3, #1
 800c9a8:	2030      	movs	r0, #48	; 0x30
 800c9aa:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800c9ae:	4422      	add	r2, r4
 800c9b0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800c9b4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800c9b8:	3302      	adds	r3, #2
 800c9ba:	e7c7      	b.n	800c94c <_printf_common+0x58>
 800c9bc:	2301      	movs	r3, #1
 800c9be:	4622      	mov	r2, r4
 800c9c0:	4649      	mov	r1, r9
 800c9c2:	4638      	mov	r0, r7
 800c9c4:	47c0      	blx	r8
 800c9c6:	3001      	adds	r0, #1
 800c9c8:	d0e6      	beq.n	800c998 <_printf_common+0xa4>
 800c9ca:	3601      	adds	r6, #1
 800c9cc:	e7d9      	b.n	800c982 <_printf_common+0x8e>
	...

0800c9d0 <_printf_i>:
 800c9d0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c9d4:	7e0f      	ldrb	r7, [r1, #24]
 800c9d6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800c9d8:	2f78      	cmp	r7, #120	; 0x78
 800c9da:	4691      	mov	r9, r2
 800c9dc:	4680      	mov	r8, r0
 800c9de:	460c      	mov	r4, r1
 800c9e0:	469a      	mov	sl, r3
 800c9e2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800c9e6:	d807      	bhi.n	800c9f8 <_printf_i+0x28>
 800c9e8:	2f62      	cmp	r7, #98	; 0x62
 800c9ea:	d80a      	bhi.n	800ca02 <_printf_i+0x32>
 800c9ec:	2f00      	cmp	r7, #0
 800c9ee:	f000 80d8 	beq.w	800cba2 <_printf_i+0x1d2>
 800c9f2:	2f58      	cmp	r7, #88	; 0x58
 800c9f4:	f000 80a3 	beq.w	800cb3e <_printf_i+0x16e>
 800c9f8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c9fc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800ca00:	e03a      	b.n	800ca78 <_printf_i+0xa8>
 800ca02:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800ca06:	2b15      	cmp	r3, #21
 800ca08:	d8f6      	bhi.n	800c9f8 <_printf_i+0x28>
 800ca0a:	a101      	add	r1, pc, #4	; (adr r1, 800ca10 <_printf_i+0x40>)
 800ca0c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800ca10:	0800ca69 	.word	0x0800ca69
 800ca14:	0800ca7d 	.word	0x0800ca7d
 800ca18:	0800c9f9 	.word	0x0800c9f9
 800ca1c:	0800c9f9 	.word	0x0800c9f9
 800ca20:	0800c9f9 	.word	0x0800c9f9
 800ca24:	0800c9f9 	.word	0x0800c9f9
 800ca28:	0800ca7d 	.word	0x0800ca7d
 800ca2c:	0800c9f9 	.word	0x0800c9f9
 800ca30:	0800c9f9 	.word	0x0800c9f9
 800ca34:	0800c9f9 	.word	0x0800c9f9
 800ca38:	0800c9f9 	.word	0x0800c9f9
 800ca3c:	0800cb89 	.word	0x0800cb89
 800ca40:	0800caad 	.word	0x0800caad
 800ca44:	0800cb6b 	.word	0x0800cb6b
 800ca48:	0800c9f9 	.word	0x0800c9f9
 800ca4c:	0800c9f9 	.word	0x0800c9f9
 800ca50:	0800cbab 	.word	0x0800cbab
 800ca54:	0800c9f9 	.word	0x0800c9f9
 800ca58:	0800caad 	.word	0x0800caad
 800ca5c:	0800c9f9 	.word	0x0800c9f9
 800ca60:	0800c9f9 	.word	0x0800c9f9
 800ca64:	0800cb73 	.word	0x0800cb73
 800ca68:	682b      	ldr	r3, [r5, #0]
 800ca6a:	1d1a      	adds	r2, r3, #4
 800ca6c:	681b      	ldr	r3, [r3, #0]
 800ca6e:	602a      	str	r2, [r5, #0]
 800ca70:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ca74:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800ca78:	2301      	movs	r3, #1
 800ca7a:	e0a3      	b.n	800cbc4 <_printf_i+0x1f4>
 800ca7c:	6820      	ldr	r0, [r4, #0]
 800ca7e:	6829      	ldr	r1, [r5, #0]
 800ca80:	0606      	lsls	r6, r0, #24
 800ca82:	f101 0304 	add.w	r3, r1, #4
 800ca86:	d50a      	bpl.n	800ca9e <_printf_i+0xce>
 800ca88:	680e      	ldr	r6, [r1, #0]
 800ca8a:	602b      	str	r3, [r5, #0]
 800ca8c:	2e00      	cmp	r6, #0
 800ca8e:	da03      	bge.n	800ca98 <_printf_i+0xc8>
 800ca90:	232d      	movs	r3, #45	; 0x2d
 800ca92:	4276      	negs	r6, r6
 800ca94:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ca98:	485e      	ldr	r0, [pc, #376]	; (800cc14 <_printf_i+0x244>)
 800ca9a:	230a      	movs	r3, #10
 800ca9c:	e019      	b.n	800cad2 <_printf_i+0x102>
 800ca9e:	680e      	ldr	r6, [r1, #0]
 800caa0:	602b      	str	r3, [r5, #0]
 800caa2:	f010 0f40 	tst.w	r0, #64	; 0x40
 800caa6:	bf18      	it	ne
 800caa8:	b236      	sxthne	r6, r6
 800caaa:	e7ef      	b.n	800ca8c <_printf_i+0xbc>
 800caac:	682b      	ldr	r3, [r5, #0]
 800caae:	6820      	ldr	r0, [r4, #0]
 800cab0:	1d19      	adds	r1, r3, #4
 800cab2:	6029      	str	r1, [r5, #0]
 800cab4:	0601      	lsls	r1, r0, #24
 800cab6:	d501      	bpl.n	800cabc <_printf_i+0xec>
 800cab8:	681e      	ldr	r6, [r3, #0]
 800caba:	e002      	b.n	800cac2 <_printf_i+0xf2>
 800cabc:	0646      	lsls	r6, r0, #25
 800cabe:	d5fb      	bpl.n	800cab8 <_printf_i+0xe8>
 800cac0:	881e      	ldrh	r6, [r3, #0]
 800cac2:	4854      	ldr	r0, [pc, #336]	; (800cc14 <_printf_i+0x244>)
 800cac4:	2f6f      	cmp	r7, #111	; 0x6f
 800cac6:	bf0c      	ite	eq
 800cac8:	2308      	moveq	r3, #8
 800caca:	230a      	movne	r3, #10
 800cacc:	2100      	movs	r1, #0
 800cace:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800cad2:	6865      	ldr	r5, [r4, #4]
 800cad4:	60a5      	str	r5, [r4, #8]
 800cad6:	2d00      	cmp	r5, #0
 800cad8:	bfa2      	ittt	ge
 800cada:	6821      	ldrge	r1, [r4, #0]
 800cadc:	f021 0104 	bicge.w	r1, r1, #4
 800cae0:	6021      	strge	r1, [r4, #0]
 800cae2:	b90e      	cbnz	r6, 800cae8 <_printf_i+0x118>
 800cae4:	2d00      	cmp	r5, #0
 800cae6:	d04d      	beq.n	800cb84 <_printf_i+0x1b4>
 800cae8:	4615      	mov	r5, r2
 800caea:	fbb6 f1f3 	udiv	r1, r6, r3
 800caee:	fb03 6711 	mls	r7, r3, r1, r6
 800caf2:	5dc7      	ldrb	r7, [r0, r7]
 800caf4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800caf8:	4637      	mov	r7, r6
 800cafa:	42bb      	cmp	r3, r7
 800cafc:	460e      	mov	r6, r1
 800cafe:	d9f4      	bls.n	800caea <_printf_i+0x11a>
 800cb00:	2b08      	cmp	r3, #8
 800cb02:	d10b      	bne.n	800cb1c <_printf_i+0x14c>
 800cb04:	6823      	ldr	r3, [r4, #0]
 800cb06:	07de      	lsls	r6, r3, #31
 800cb08:	d508      	bpl.n	800cb1c <_printf_i+0x14c>
 800cb0a:	6923      	ldr	r3, [r4, #16]
 800cb0c:	6861      	ldr	r1, [r4, #4]
 800cb0e:	4299      	cmp	r1, r3
 800cb10:	bfde      	ittt	le
 800cb12:	2330      	movle	r3, #48	; 0x30
 800cb14:	f805 3c01 	strble.w	r3, [r5, #-1]
 800cb18:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800cb1c:	1b52      	subs	r2, r2, r5
 800cb1e:	6122      	str	r2, [r4, #16]
 800cb20:	f8cd a000 	str.w	sl, [sp]
 800cb24:	464b      	mov	r3, r9
 800cb26:	aa03      	add	r2, sp, #12
 800cb28:	4621      	mov	r1, r4
 800cb2a:	4640      	mov	r0, r8
 800cb2c:	f7ff fee2 	bl	800c8f4 <_printf_common>
 800cb30:	3001      	adds	r0, #1
 800cb32:	d14c      	bne.n	800cbce <_printf_i+0x1fe>
 800cb34:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800cb38:	b004      	add	sp, #16
 800cb3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cb3e:	4835      	ldr	r0, [pc, #212]	; (800cc14 <_printf_i+0x244>)
 800cb40:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800cb44:	6829      	ldr	r1, [r5, #0]
 800cb46:	6823      	ldr	r3, [r4, #0]
 800cb48:	f851 6b04 	ldr.w	r6, [r1], #4
 800cb4c:	6029      	str	r1, [r5, #0]
 800cb4e:	061d      	lsls	r5, r3, #24
 800cb50:	d514      	bpl.n	800cb7c <_printf_i+0x1ac>
 800cb52:	07df      	lsls	r7, r3, #31
 800cb54:	bf44      	itt	mi
 800cb56:	f043 0320 	orrmi.w	r3, r3, #32
 800cb5a:	6023      	strmi	r3, [r4, #0]
 800cb5c:	b91e      	cbnz	r6, 800cb66 <_printf_i+0x196>
 800cb5e:	6823      	ldr	r3, [r4, #0]
 800cb60:	f023 0320 	bic.w	r3, r3, #32
 800cb64:	6023      	str	r3, [r4, #0]
 800cb66:	2310      	movs	r3, #16
 800cb68:	e7b0      	b.n	800cacc <_printf_i+0xfc>
 800cb6a:	6823      	ldr	r3, [r4, #0]
 800cb6c:	f043 0320 	orr.w	r3, r3, #32
 800cb70:	6023      	str	r3, [r4, #0]
 800cb72:	2378      	movs	r3, #120	; 0x78
 800cb74:	4828      	ldr	r0, [pc, #160]	; (800cc18 <_printf_i+0x248>)
 800cb76:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800cb7a:	e7e3      	b.n	800cb44 <_printf_i+0x174>
 800cb7c:	0659      	lsls	r1, r3, #25
 800cb7e:	bf48      	it	mi
 800cb80:	b2b6      	uxthmi	r6, r6
 800cb82:	e7e6      	b.n	800cb52 <_printf_i+0x182>
 800cb84:	4615      	mov	r5, r2
 800cb86:	e7bb      	b.n	800cb00 <_printf_i+0x130>
 800cb88:	682b      	ldr	r3, [r5, #0]
 800cb8a:	6826      	ldr	r6, [r4, #0]
 800cb8c:	6961      	ldr	r1, [r4, #20]
 800cb8e:	1d18      	adds	r0, r3, #4
 800cb90:	6028      	str	r0, [r5, #0]
 800cb92:	0635      	lsls	r5, r6, #24
 800cb94:	681b      	ldr	r3, [r3, #0]
 800cb96:	d501      	bpl.n	800cb9c <_printf_i+0x1cc>
 800cb98:	6019      	str	r1, [r3, #0]
 800cb9a:	e002      	b.n	800cba2 <_printf_i+0x1d2>
 800cb9c:	0670      	lsls	r0, r6, #25
 800cb9e:	d5fb      	bpl.n	800cb98 <_printf_i+0x1c8>
 800cba0:	8019      	strh	r1, [r3, #0]
 800cba2:	2300      	movs	r3, #0
 800cba4:	6123      	str	r3, [r4, #16]
 800cba6:	4615      	mov	r5, r2
 800cba8:	e7ba      	b.n	800cb20 <_printf_i+0x150>
 800cbaa:	682b      	ldr	r3, [r5, #0]
 800cbac:	1d1a      	adds	r2, r3, #4
 800cbae:	602a      	str	r2, [r5, #0]
 800cbb0:	681d      	ldr	r5, [r3, #0]
 800cbb2:	6862      	ldr	r2, [r4, #4]
 800cbb4:	2100      	movs	r1, #0
 800cbb6:	4628      	mov	r0, r5
 800cbb8:	f7fb fee2 	bl	8008980 <memchr>
 800cbbc:	b108      	cbz	r0, 800cbc2 <_printf_i+0x1f2>
 800cbbe:	1b40      	subs	r0, r0, r5
 800cbc0:	6060      	str	r0, [r4, #4]
 800cbc2:	6863      	ldr	r3, [r4, #4]
 800cbc4:	6123      	str	r3, [r4, #16]
 800cbc6:	2300      	movs	r3, #0
 800cbc8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800cbcc:	e7a8      	b.n	800cb20 <_printf_i+0x150>
 800cbce:	6923      	ldr	r3, [r4, #16]
 800cbd0:	462a      	mov	r2, r5
 800cbd2:	4649      	mov	r1, r9
 800cbd4:	4640      	mov	r0, r8
 800cbd6:	47d0      	blx	sl
 800cbd8:	3001      	adds	r0, #1
 800cbda:	d0ab      	beq.n	800cb34 <_printf_i+0x164>
 800cbdc:	6823      	ldr	r3, [r4, #0]
 800cbde:	079b      	lsls	r3, r3, #30
 800cbe0:	d413      	bmi.n	800cc0a <_printf_i+0x23a>
 800cbe2:	68e0      	ldr	r0, [r4, #12]
 800cbe4:	9b03      	ldr	r3, [sp, #12]
 800cbe6:	4298      	cmp	r0, r3
 800cbe8:	bfb8      	it	lt
 800cbea:	4618      	movlt	r0, r3
 800cbec:	e7a4      	b.n	800cb38 <_printf_i+0x168>
 800cbee:	2301      	movs	r3, #1
 800cbf0:	4632      	mov	r2, r6
 800cbf2:	4649      	mov	r1, r9
 800cbf4:	4640      	mov	r0, r8
 800cbf6:	47d0      	blx	sl
 800cbf8:	3001      	adds	r0, #1
 800cbfa:	d09b      	beq.n	800cb34 <_printf_i+0x164>
 800cbfc:	3501      	adds	r5, #1
 800cbfe:	68e3      	ldr	r3, [r4, #12]
 800cc00:	9903      	ldr	r1, [sp, #12]
 800cc02:	1a5b      	subs	r3, r3, r1
 800cc04:	42ab      	cmp	r3, r5
 800cc06:	dcf2      	bgt.n	800cbee <_printf_i+0x21e>
 800cc08:	e7eb      	b.n	800cbe2 <_printf_i+0x212>
 800cc0a:	2500      	movs	r5, #0
 800cc0c:	f104 0619 	add.w	r6, r4, #25
 800cc10:	e7f5      	b.n	800cbfe <_printf_i+0x22e>
 800cc12:	bf00      	nop
 800cc14:	0800d859 	.word	0x0800d859
 800cc18:	0800d86a 	.word	0x0800d86a

0800cc1c <_sbrk_r>:
 800cc1c:	b538      	push	{r3, r4, r5, lr}
 800cc1e:	4d06      	ldr	r5, [pc, #24]	; (800cc38 <_sbrk_r+0x1c>)
 800cc20:	2300      	movs	r3, #0
 800cc22:	4604      	mov	r4, r0
 800cc24:	4608      	mov	r0, r1
 800cc26:	602b      	str	r3, [r5, #0]
 800cc28:	f7fc f922 	bl	8008e70 <_sbrk>
 800cc2c:	1c43      	adds	r3, r0, #1
 800cc2e:	d102      	bne.n	800cc36 <_sbrk_r+0x1a>
 800cc30:	682b      	ldr	r3, [r5, #0]
 800cc32:	b103      	cbz	r3, 800cc36 <_sbrk_r+0x1a>
 800cc34:	6023      	str	r3, [r4, #0]
 800cc36:	bd38      	pop	{r3, r4, r5, pc}
 800cc38:	20001c58 	.word	0x20001c58

0800cc3c <__sread>:
 800cc3c:	b510      	push	{r4, lr}
 800cc3e:	460c      	mov	r4, r1
 800cc40:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cc44:	f000 f8a0 	bl	800cd88 <_read_r>
 800cc48:	2800      	cmp	r0, #0
 800cc4a:	bfab      	itete	ge
 800cc4c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800cc4e:	89a3      	ldrhlt	r3, [r4, #12]
 800cc50:	181b      	addge	r3, r3, r0
 800cc52:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800cc56:	bfac      	ite	ge
 800cc58:	6563      	strge	r3, [r4, #84]	; 0x54
 800cc5a:	81a3      	strhlt	r3, [r4, #12]
 800cc5c:	bd10      	pop	{r4, pc}

0800cc5e <__swrite>:
 800cc5e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cc62:	461f      	mov	r7, r3
 800cc64:	898b      	ldrh	r3, [r1, #12]
 800cc66:	05db      	lsls	r3, r3, #23
 800cc68:	4605      	mov	r5, r0
 800cc6a:	460c      	mov	r4, r1
 800cc6c:	4616      	mov	r6, r2
 800cc6e:	d505      	bpl.n	800cc7c <__swrite+0x1e>
 800cc70:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cc74:	2302      	movs	r3, #2
 800cc76:	2200      	movs	r2, #0
 800cc78:	f000 f868 	bl	800cd4c <_lseek_r>
 800cc7c:	89a3      	ldrh	r3, [r4, #12]
 800cc7e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800cc82:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800cc86:	81a3      	strh	r3, [r4, #12]
 800cc88:	4632      	mov	r2, r6
 800cc8a:	463b      	mov	r3, r7
 800cc8c:	4628      	mov	r0, r5
 800cc8e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800cc92:	f000 b817 	b.w	800ccc4 <_write_r>

0800cc96 <__sseek>:
 800cc96:	b510      	push	{r4, lr}
 800cc98:	460c      	mov	r4, r1
 800cc9a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cc9e:	f000 f855 	bl	800cd4c <_lseek_r>
 800cca2:	1c43      	adds	r3, r0, #1
 800cca4:	89a3      	ldrh	r3, [r4, #12]
 800cca6:	bf15      	itete	ne
 800cca8:	6560      	strne	r0, [r4, #84]	; 0x54
 800ccaa:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800ccae:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800ccb2:	81a3      	strheq	r3, [r4, #12]
 800ccb4:	bf18      	it	ne
 800ccb6:	81a3      	strhne	r3, [r4, #12]
 800ccb8:	bd10      	pop	{r4, pc}

0800ccba <__sclose>:
 800ccba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ccbe:	f000 b813 	b.w	800cce8 <_close_r>
	...

0800ccc4 <_write_r>:
 800ccc4:	b538      	push	{r3, r4, r5, lr}
 800ccc6:	4d07      	ldr	r5, [pc, #28]	; (800cce4 <_write_r+0x20>)
 800ccc8:	4604      	mov	r4, r0
 800ccca:	4608      	mov	r0, r1
 800cccc:	4611      	mov	r1, r2
 800ccce:	2200      	movs	r2, #0
 800ccd0:	602a      	str	r2, [r5, #0]
 800ccd2:	461a      	mov	r2, r3
 800ccd4:	f7fc f8be 	bl	8008e54 <_write>
 800ccd8:	1c43      	adds	r3, r0, #1
 800ccda:	d102      	bne.n	800cce2 <_write_r+0x1e>
 800ccdc:	682b      	ldr	r3, [r5, #0]
 800ccde:	b103      	cbz	r3, 800cce2 <_write_r+0x1e>
 800cce0:	6023      	str	r3, [r4, #0]
 800cce2:	bd38      	pop	{r3, r4, r5, pc}
 800cce4:	20001c58 	.word	0x20001c58

0800cce8 <_close_r>:
 800cce8:	b538      	push	{r3, r4, r5, lr}
 800ccea:	4d06      	ldr	r5, [pc, #24]	; (800cd04 <_close_r+0x1c>)
 800ccec:	2300      	movs	r3, #0
 800ccee:	4604      	mov	r4, r0
 800ccf0:	4608      	mov	r0, r1
 800ccf2:	602b      	str	r3, [r5, #0]
 800ccf4:	f7fc f8d6 	bl	8008ea4 <_close>
 800ccf8:	1c43      	adds	r3, r0, #1
 800ccfa:	d102      	bne.n	800cd02 <_close_r+0x1a>
 800ccfc:	682b      	ldr	r3, [r5, #0]
 800ccfe:	b103      	cbz	r3, 800cd02 <_close_r+0x1a>
 800cd00:	6023      	str	r3, [r4, #0]
 800cd02:	bd38      	pop	{r3, r4, r5, pc}
 800cd04:	20001c58 	.word	0x20001c58

0800cd08 <_fstat_r>:
 800cd08:	b538      	push	{r3, r4, r5, lr}
 800cd0a:	4d07      	ldr	r5, [pc, #28]	; (800cd28 <_fstat_r+0x20>)
 800cd0c:	2300      	movs	r3, #0
 800cd0e:	4604      	mov	r4, r0
 800cd10:	4608      	mov	r0, r1
 800cd12:	4611      	mov	r1, r2
 800cd14:	602b      	str	r3, [r5, #0]
 800cd16:	f7fc f8c8 	bl	8008eaa <_fstat>
 800cd1a:	1c43      	adds	r3, r0, #1
 800cd1c:	d102      	bne.n	800cd24 <_fstat_r+0x1c>
 800cd1e:	682b      	ldr	r3, [r5, #0]
 800cd20:	b103      	cbz	r3, 800cd24 <_fstat_r+0x1c>
 800cd22:	6023      	str	r3, [r4, #0]
 800cd24:	bd38      	pop	{r3, r4, r5, pc}
 800cd26:	bf00      	nop
 800cd28:	20001c58 	.word	0x20001c58

0800cd2c <_isatty_r>:
 800cd2c:	b538      	push	{r3, r4, r5, lr}
 800cd2e:	4d06      	ldr	r5, [pc, #24]	; (800cd48 <_isatty_r+0x1c>)
 800cd30:	2300      	movs	r3, #0
 800cd32:	4604      	mov	r4, r0
 800cd34:	4608      	mov	r0, r1
 800cd36:	602b      	str	r3, [r5, #0]
 800cd38:	f7fc f8bc 	bl	8008eb4 <_isatty>
 800cd3c:	1c43      	adds	r3, r0, #1
 800cd3e:	d102      	bne.n	800cd46 <_isatty_r+0x1a>
 800cd40:	682b      	ldr	r3, [r5, #0]
 800cd42:	b103      	cbz	r3, 800cd46 <_isatty_r+0x1a>
 800cd44:	6023      	str	r3, [r4, #0]
 800cd46:	bd38      	pop	{r3, r4, r5, pc}
 800cd48:	20001c58 	.word	0x20001c58

0800cd4c <_lseek_r>:
 800cd4c:	b538      	push	{r3, r4, r5, lr}
 800cd4e:	4d07      	ldr	r5, [pc, #28]	; (800cd6c <_lseek_r+0x20>)
 800cd50:	4604      	mov	r4, r0
 800cd52:	4608      	mov	r0, r1
 800cd54:	4611      	mov	r1, r2
 800cd56:	2200      	movs	r2, #0
 800cd58:	602a      	str	r2, [r5, #0]
 800cd5a:	461a      	mov	r2, r3
 800cd5c:	f7fc f8ac 	bl	8008eb8 <_lseek>
 800cd60:	1c43      	adds	r3, r0, #1
 800cd62:	d102      	bne.n	800cd6a <_lseek_r+0x1e>
 800cd64:	682b      	ldr	r3, [r5, #0]
 800cd66:	b103      	cbz	r3, 800cd6a <_lseek_r+0x1e>
 800cd68:	6023      	str	r3, [r4, #0]
 800cd6a:	bd38      	pop	{r3, r4, r5, pc}
 800cd6c:	20001c58 	.word	0x20001c58

0800cd70 <__malloc_lock>:
 800cd70:	4801      	ldr	r0, [pc, #4]	; (800cd78 <__malloc_lock+0x8>)
 800cd72:	f7ff bb15 	b.w	800c3a0 <__retarget_lock_acquire_recursive>
 800cd76:	bf00      	nop
 800cd78:	20001c4d 	.word	0x20001c4d

0800cd7c <__malloc_unlock>:
 800cd7c:	4801      	ldr	r0, [pc, #4]	; (800cd84 <__malloc_unlock+0x8>)
 800cd7e:	f7ff bb10 	b.w	800c3a2 <__retarget_lock_release_recursive>
 800cd82:	bf00      	nop
 800cd84:	20001c4d 	.word	0x20001c4d

0800cd88 <_read_r>:
 800cd88:	b538      	push	{r3, r4, r5, lr}
 800cd8a:	4d07      	ldr	r5, [pc, #28]	; (800cda8 <_read_r+0x20>)
 800cd8c:	4604      	mov	r4, r0
 800cd8e:	4608      	mov	r0, r1
 800cd90:	4611      	mov	r1, r2
 800cd92:	2200      	movs	r2, #0
 800cd94:	602a      	str	r2, [r5, #0]
 800cd96:	461a      	mov	r2, r3
 800cd98:	f7fc f84e 	bl	8008e38 <_read>
 800cd9c:	1c43      	adds	r3, r0, #1
 800cd9e:	d102      	bne.n	800cda6 <_read_r+0x1e>
 800cda0:	682b      	ldr	r3, [r5, #0]
 800cda2:	b103      	cbz	r3, 800cda6 <_read_r+0x1e>
 800cda4:	6023      	str	r3, [r4, #0]
 800cda6:	bd38      	pop	{r3, r4, r5, pc}
 800cda8:	20001c58 	.word	0x20001c58

0800cdac <_init>:
 800cdac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cdae:	bf00      	nop
 800cdb0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cdb2:	bc08      	pop	{r3}
 800cdb4:	469e      	mov	lr, r3
 800cdb6:	4770      	bx	lr

0800cdb8 <_fini>:
 800cdb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cdba:	bf00      	nop
 800cdbc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cdbe:	bc08      	pop	{r3}
 800cdc0:	469e      	mov	lr, r3
 800cdc2:	4770      	bx	lr
 800cdc4:	0000      	movs	r0, r0
	...
