
UserApp.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000200  08011200  08011200  000000f4  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000038d8  08011400  08011400  00000300  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000011e8  08014cd8  08014cd8  00003bd8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08015ec0  08015ec0  00004eb0  2**0
                  CONTENTS
  4 .ARM          00000008  08015ec0  08015ec0  00004dc0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08015ec8  08015ec8  00004eb0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08015ec8  08015ec8  00004dc8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000008  08015ed0  08015ed0  00004dd0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000d0  20001000  08015ed8  00004dd8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .align16      00000008  08015fa8  08015fa8  00004ea8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
 10 .bss          00000d28  200010d0  200010d0  00004eb0  2**2
                  ALLOC
 11 ._user_heap_stack 00000a00  20001df8  20001df8  00004eb0  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00004eb0  2**0
                  CONTENTS, READONLY
 13 .debug_info   00010dbd  00000000  00000000  00004ee0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003d04  00000000  00000000  00015c9d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_loc    00006f2e  00000000  00000000  000199a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000b58  00000000  00000000  000208d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 00000e68  00000000  00000000  00021428  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00025a3a  00000000  00000000  00022290  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00015f3d  00000000  00000000  00047cca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000d6c1a  00000000  00000000  0005dc07  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000050  00000000  00000000  00134821  2**0
                  CONTENTS, READONLY
 22 .debug_frame  00002568  00000000  00000000  00134874  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08011400 <__do_global_dtors_aux>:
 8011400:	b510      	push	{r4, lr}
 8011402:	4c05      	ldr	r4, [pc, #20]	; (8011418 <__do_global_dtors_aux+0x18>)
 8011404:	7823      	ldrb	r3, [r4, #0]
 8011406:	b933      	cbnz	r3, 8011416 <__do_global_dtors_aux+0x16>
 8011408:	4b04      	ldr	r3, [pc, #16]	; (801141c <__do_global_dtors_aux+0x1c>)
 801140a:	b113      	cbz	r3, 8011412 <__do_global_dtors_aux+0x12>
 801140c:	4804      	ldr	r0, [pc, #16]	; (8011420 <__do_global_dtors_aux+0x20>)
 801140e:	f3af 8000 	nop.w
 8011412:	2301      	movs	r3, #1
 8011414:	7023      	strb	r3, [r4, #0]
 8011416:	bd10      	pop	{r4, pc}
 8011418:	200010d0 	.word	0x200010d0
 801141c:	00000000 	.word	0x00000000
 8011420:	08014cbc 	.word	0x08014cbc

08011424 <frame_dummy>:
 8011424:	b508      	push	{r3, lr}
 8011426:	4b03      	ldr	r3, [pc, #12]	; (8011434 <frame_dummy+0x10>)
 8011428:	b11b      	cbz	r3, 8011432 <frame_dummy+0xe>
 801142a:	4903      	ldr	r1, [pc, #12]	; (8011438 <frame_dummy+0x14>)
 801142c:	4803      	ldr	r0, [pc, #12]	; (801143c <frame_dummy+0x18>)
 801142e:	f3af 8000 	nop.w
 8011432:	bd08      	pop	{r3, pc}
 8011434:	00000000 	.word	0x00000000
 8011438:	200010d4 	.word	0x200010d4
 801143c:	08014cbc 	.word	0x08014cbc

08011440 <SVC_Handler>:
        .syntax unified
        .weak  MPU_SVC_Handler
        .global SVC_Handler
        .type  SVC_Handler, %function
SVC_Handler:
        MRS r0, PSP
 8011440:	f3ef 8009 	mrs	r0, PSP
        B MPU_SVC_Handler
 8011444:	f000 be07 	b.w	8012056 <MPU_SVC_Handler>
	...

08011450 <memchr>:
 8011450:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8011454:	2a10      	cmp	r2, #16
 8011456:	db2b      	blt.n	80114b0 <memchr+0x60>
 8011458:	f010 0f07 	tst.w	r0, #7
 801145c:	d008      	beq.n	8011470 <memchr+0x20>
 801145e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8011462:	3a01      	subs	r2, #1
 8011464:	428b      	cmp	r3, r1
 8011466:	d02d      	beq.n	80114c4 <memchr+0x74>
 8011468:	f010 0f07 	tst.w	r0, #7
 801146c:	b342      	cbz	r2, 80114c0 <memchr+0x70>
 801146e:	d1f6      	bne.n	801145e <memchr+0xe>
 8011470:	b4f0      	push	{r4, r5, r6, r7}
 8011472:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8011476:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 801147a:	f022 0407 	bic.w	r4, r2, #7
 801147e:	f07f 0700 	mvns.w	r7, #0
 8011482:	2300      	movs	r3, #0
 8011484:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8011488:	3c08      	subs	r4, #8
 801148a:	ea85 0501 	eor.w	r5, r5, r1
 801148e:	ea86 0601 	eor.w	r6, r6, r1
 8011492:	fa85 f547 	uadd8	r5, r5, r7
 8011496:	faa3 f587 	sel	r5, r3, r7
 801149a:	fa86 f647 	uadd8	r6, r6, r7
 801149e:	faa5 f687 	sel	r6, r5, r7
 80114a2:	b98e      	cbnz	r6, 80114c8 <memchr+0x78>
 80114a4:	d1ee      	bne.n	8011484 <memchr+0x34>
 80114a6:	bcf0      	pop	{r4, r5, r6, r7}
 80114a8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80114ac:	f002 0207 	and.w	r2, r2, #7
 80114b0:	b132      	cbz	r2, 80114c0 <memchr+0x70>
 80114b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80114b6:	3a01      	subs	r2, #1
 80114b8:	ea83 0301 	eor.w	r3, r3, r1
 80114bc:	b113      	cbz	r3, 80114c4 <memchr+0x74>
 80114be:	d1f8      	bne.n	80114b2 <memchr+0x62>
 80114c0:	2000      	movs	r0, #0
 80114c2:	4770      	bx	lr
 80114c4:	3801      	subs	r0, #1
 80114c6:	4770      	bx	lr
 80114c8:	2d00      	cmp	r5, #0
 80114ca:	bf06      	itte	eq
 80114cc:	4635      	moveq	r5, r6
 80114ce:	3803      	subeq	r0, #3
 80114d0:	3807      	subne	r0, #7
 80114d2:	f015 0f01 	tst.w	r5, #1
 80114d6:	d107      	bne.n	80114e8 <memchr+0x98>
 80114d8:	3001      	adds	r0, #1
 80114da:	f415 7f80 	tst.w	r5, #256	; 0x100
 80114de:	bf02      	ittt	eq
 80114e0:	3001      	addeq	r0, #1
 80114e2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80114e6:	3001      	addeq	r0, #1
 80114e8:	bcf0      	pop	{r4, r5, r6, r7}
 80114ea:	3801      	subs	r0, #1
 80114ec:	4770      	bx	lr
 80114ee:	bf00      	nop

080114f0 <__aeabi_uldivmod>:
 80114f0:	b953      	cbnz	r3, 8011508 <__aeabi_uldivmod+0x18>
 80114f2:	b94a      	cbnz	r2, 8011508 <__aeabi_uldivmod+0x18>
 80114f4:	2900      	cmp	r1, #0
 80114f6:	bf08      	it	eq
 80114f8:	2800      	cmpeq	r0, #0
 80114fa:	bf1c      	itt	ne
 80114fc:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8011500:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8011504:	f000 b974 	b.w	80117f0 <__aeabi_idiv0>
 8011508:	f1ad 0c08 	sub.w	ip, sp, #8
 801150c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8011510:	f000 f806 	bl	8011520 <__udivmoddi4>
 8011514:	f8dd e004 	ldr.w	lr, [sp, #4]
 8011518:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801151c:	b004      	add	sp, #16
 801151e:	4770      	bx	lr

08011520 <__udivmoddi4>:
 8011520:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011524:	9d08      	ldr	r5, [sp, #32]
 8011526:	4604      	mov	r4, r0
 8011528:	468e      	mov	lr, r1
 801152a:	2b00      	cmp	r3, #0
 801152c:	d14d      	bne.n	80115ca <__udivmoddi4+0xaa>
 801152e:	428a      	cmp	r2, r1
 8011530:	4694      	mov	ip, r2
 8011532:	d969      	bls.n	8011608 <__udivmoddi4+0xe8>
 8011534:	fab2 f282 	clz	r2, r2
 8011538:	b152      	cbz	r2, 8011550 <__udivmoddi4+0x30>
 801153a:	fa01 f302 	lsl.w	r3, r1, r2
 801153e:	f1c2 0120 	rsb	r1, r2, #32
 8011542:	fa20 f101 	lsr.w	r1, r0, r1
 8011546:	fa0c fc02 	lsl.w	ip, ip, r2
 801154a:	ea41 0e03 	orr.w	lr, r1, r3
 801154e:	4094      	lsls	r4, r2
 8011550:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8011554:	0c21      	lsrs	r1, r4, #16
 8011556:	fbbe f6f8 	udiv	r6, lr, r8
 801155a:	fa1f f78c 	uxth.w	r7, ip
 801155e:	fb08 e316 	mls	r3, r8, r6, lr
 8011562:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8011566:	fb06 f107 	mul.w	r1, r6, r7
 801156a:	4299      	cmp	r1, r3
 801156c:	d90a      	bls.n	8011584 <__udivmoddi4+0x64>
 801156e:	eb1c 0303 	adds.w	r3, ip, r3
 8011572:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8011576:	f080 811f 	bcs.w	80117b8 <__udivmoddi4+0x298>
 801157a:	4299      	cmp	r1, r3
 801157c:	f240 811c 	bls.w	80117b8 <__udivmoddi4+0x298>
 8011580:	3e02      	subs	r6, #2
 8011582:	4463      	add	r3, ip
 8011584:	1a5b      	subs	r3, r3, r1
 8011586:	b2a4      	uxth	r4, r4
 8011588:	fbb3 f0f8 	udiv	r0, r3, r8
 801158c:	fb08 3310 	mls	r3, r8, r0, r3
 8011590:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8011594:	fb00 f707 	mul.w	r7, r0, r7
 8011598:	42a7      	cmp	r7, r4
 801159a:	d90a      	bls.n	80115b2 <__udivmoddi4+0x92>
 801159c:	eb1c 0404 	adds.w	r4, ip, r4
 80115a0:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80115a4:	f080 810a 	bcs.w	80117bc <__udivmoddi4+0x29c>
 80115a8:	42a7      	cmp	r7, r4
 80115aa:	f240 8107 	bls.w	80117bc <__udivmoddi4+0x29c>
 80115ae:	4464      	add	r4, ip
 80115b0:	3802      	subs	r0, #2
 80115b2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80115b6:	1be4      	subs	r4, r4, r7
 80115b8:	2600      	movs	r6, #0
 80115ba:	b11d      	cbz	r5, 80115c4 <__udivmoddi4+0xa4>
 80115bc:	40d4      	lsrs	r4, r2
 80115be:	2300      	movs	r3, #0
 80115c0:	e9c5 4300 	strd	r4, r3, [r5]
 80115c4:	4631      	mov	r1, r6
 80115c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80115ca:	428b      	cmp	r3, r1
 80115cc:	d909      	bls.n	80115e2 <__udivmoddi4+0xc2>
 80115ce:	2d00      	cmp	r5, #0
 80115d0:	f000 80ef 	beq.w	80117b2 <__udivmoddi4+0x292>
 80115d4:	2600      	movs	r6, #0
 80115d6:	e9c5 0100 	strd	r0, r1, [r5]
 80115da:	4630      	mov	r0, r6
 80115dc:	4631      	mov	r1, r6
 80115de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80115e2:	fab3 f683 	clz	r6, r3
 80115e6:	2e00      	cmp	r6, #0
 80115e8:	d14a      	bne.n	8011680 <__udivmoddi4+0x160>
 80115ea:	428b      	cmp	r3, r1
 80115ec:	d302      	bcc.n	80115f4 <__udivmoddi4+0xd4>
 80115ee:	4282      	cmp	r2, r0
 80115f0:	f200 80f9 	bhi.w	80117e6 <__udivmoddi4+0x2c6>
 80115f4:	1a84      	subs	r4, r0, r2
 80115f6:	eb61 0303 	sbc.w	r3, r1, r3
 80115fa:	2001      	movs	r0, #1
 80115fc:	469e      	mov	lr, r3
 80115fe:	2d00      	cmp	r5, #0
 8011600:	d0e0      	beq.n	80115c4 <__udivmoddi4+0xa4>
 8011602:	e9c5 4e00 	strd	r4, lr, [r5]
 8011606:	e7dd      	b.n	80115c4 <__udivmoddi4+0xa4>
 8011608:	b902      	cbnz	r2, 801160c <__udivmoddi4+0xec>
 801160a:	deff      	udf	#255	; 0xff
 801160c:	fab2 f282 	clz	r2, r2
 8011610:	2a00      	cmp	r2, #0
 8011612:	f040 8092 	bne.w	801173a <__udivmoddi4+0x21a>
 8011616:	eba1 010c 	sub.w	r1, r1, ip
 801161a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 801161e:	fa1f fe8c 	uxth.w	lr, ip
 8011622:	2601      	movs	r6, #1
 8011624:	0c20      	lsrs	r0, r4, #16
 8011626:	fbb1 f3f7 	udiv	r3, r1, r7
 801162a:	fb07 1113 	mls	r1, r7, r3, r1
 801162e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8011632:	fb0e f003 	mul.w	r0, lr, r3
 8011636:	4288      	cmp	r0, r1
 8011638:	d908      	bls.n	801164c <__udivmoddi4+0x12c>
 801163a:	eb1c 0101 	adds.w	r1, ip, r1
 801163e:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8011642:	d202      	bcs.n	801164a <__udivmoddi4+0x12a>
 8011644:	4288      	cmp	r0, r1
 8011646:	f200 80cb 	bhi.w	80117e0 <__udivmoddi4+0x2c0>
 801164a:	4643      	mov	r3, r8
 801164c:	1a09      	subs	r1, r1, r0
 801164e:	b2a4      	uxth	r4, r4
 8011650:	fbb1 f0f7 	udiv	r0, r1, r7
 8011654:	fb07 1110 	mls	r1, r7, r0, r1
 8011658:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 801165c:	fb0e fe00 	mul.w	lr, lr, r0
 8011660:	45a6      	cmp	lr, r4
 8011662:	d908      	bls.n	8011676 <__udivmoddi4+0x156>
 8011664:	eb1c 0404 	adds.w	r4, ip, r4
 8011668:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 801166c:	d202      	bcs.n	8011674 <__udivmoddi4+0x154>
 801166e:	45a6      	cmp	lr, r4
 8011670:	f200 80bb 	bhi.w	80117ea <__udivmoddi4+0x2ca>
 8011674:	4608      	mov	r0, r1
 8011676:	eba4 040e 	sub.w	r4, r4, lr
 801167a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 801167e:	e79c      	b.n	80115ba <__udivmoddi4+0x9a>
 8011680:	f1c6 0720 	rsb	r7, r6, #32
 8011684:	40b3      	lsls	r3, r6
 8011686:	fa22 fc07 	lsr.w	ip, r2, r7
 801168a:	ea4c 0c03 	orr.w	ip, ip, r3
 801168e:	fa20 f407 	lsr.w	r4, r0, r7
 8011692:	fa01 f306 	lsl.w	r3, r1, r6
 8011696:	431c      	orrs	r4, r3
 8011698:	40f9      	lsrs	r1, r7
 801169a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 801169e:	fa00 f306 	lsl.w	r3, r0, r6
 80116a2:	fbb1 f8f9 	udiv	r8, r1, r9
 80116a6:	0c20      	lsrs	r0, r4, #16
 80116a8:	fa1f fe8c 	uxth.w	lr, ip
 80116ac:	fb09 1118 	mls	r1, r9, r8, r1
 80116b0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80116b4:	fb08 f00e 	mul.w	r0, r8, lr
 80116b8:	4288      	cmp	r0, r1
 80116ba:	fa02 f206 	lsl.w	r2, r2, r6
 80116be:	d90b      	bls.n	80116d8 <__udivmoddi4+0x1b8>
 80116c0:	eb1c 0101 	adds.w	r1, ip, r1
 80116c4:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80116c8:	f080 8088 	bcs.w	80117dc <__udivmoddi4+0x2bc>
 80116cc:	4288      	cmp	r0, r1
 80116ce:	f240 8085 	bls.w	80117dc <__udivmoddi4+0x2bc>
 80116d2:	f1a8 0802 	sub.w	r8, r8, #2
 80116d6:	4461      	add	r1, ip
 80116d8:	1a09      	subs	r1, r1, r0
 80116da:	b2a4      	uxth	r4, r4
 80116dc:	fbb1 f0f9 	udiv	r0, r1, r9
 80116e0:	fb09 1110 	mls	r1, r9, r0, r1
 80116e4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80116e8:	fb00 fe0e 	mul.w	lr, r0, lr
 80116ec:	458e      	cmp	lr, r1
 80116ee:	d908      	bls.n	8011702 <__udivmoddi4+0x1e2>
 80116f0:	eb1c 0101 	adds.w	r1, ip, r1
 80116f4:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 80116f8:	d26c      	bcs.n	80117d4 <__udivmoddi4+0x2b4>
 80116fa:	458e      	cmp	lr, r1
 80116fc:	d96a      	bls.n	80117d4 <__udivmoddi4+0x2b4>
 80116fe:	3802      	subs	r0, #2
 8011700:	4461      	add	r1, ip
 8011702:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8011706:	fba0 9402 	umull	r9, r4, r0, r2
 801170a:	eba1 010e 	sub.w	r1, r1, lr
 801170e:	42a1      	cmp	r1, r4
 8011710:	46c8      	mov	r8, r9
 8011712:	46a6      	mov	lr, r4
 8011714:	d356      	bcc.n	80117c4 <__udivmoddi4+0x2a4>
 8011716:	d053      	beq.n	80117c0 <__udivmoddi4+0x2a0>
 8011718:	b15d      	cbz	r5, 8011732 <__udivmoddi4+0x212>
 801171a:	ebb3 0208 	subs.w	r2, r3, r8
 801171e:	eb61 010e 	sbc.w	r1, r1, lr
 8011722:	fa01 f707 	lsl.w	r7, r1, r7
 8011726:	fa22 f306 	lsr.w	r3, r2, r6
 801172a:	40f1      	lsrs	r1, r6
 801172c:	431f      	orrs	r7, r3
 801172e:	e9c5 7100 	strd	r7, r1, [r5]
 8011732:	2600      	movs	r6, #0
 8011734:	4631      	mov	r1, r6
 8011736:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801173a:	f1c2 0320 	rsb	r3, r2, #32
 801173e:	40d8      	lsrs	r0, r3
 8011740:	fa0c fc02 	lsl.w	ip, ip, r2
 8011744:	fa21 f303 	lsr.w	r3, r1, r3
 8011748:	4091      	lsls	r1, r2
 801174a:	4301      	orrs	r1, r0
 801174c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8011750:	fa1f fe8c 	uxth.w	lr, ip
 8011754:	fbb3 f0f7 	udiv	r0, r3, r7
 8011758:	fb07 3610 	mls	r6, r7, r0, r3
 801175c:	0c0b      	lsrs	r3, r1, #16
 801175e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8011762:	fb00 f60e 	mul.w	r6, r0, lr
 8011766:	429e      	cmp	r6, r3
 8011768:	fa04 f402 	lsl.w	r4, r4, r2
 801176c:	d908      	bls.n	8011780 <__udivmoddi4+0x260>
 801176e:	eb1c 0303 	adds.w	r3, ip, r3
 8011772:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8011776:	d22f      	bcs.n	80117d8 <__udivmoddi4+0x2b8>
 8011778:	429e      	cmp	r6, r3
 801177a:	d92d      	bls.n	80117d8 <__udivmoddi4+0x2b8>
 801177c:	3802      	subs	r0, #2
 801177e:	4463      	add	r3, ip
 8011780:	1b9b      	subs	r3, r3, r6
 8011782:	b289      	uxth	r1, r1
 8011784:	fbb3 f6f7 	udiv	r6, r3, r7
 8011788:	fb07 3316 	mls	r3, r7, r6, r3
 801178c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8011790:	fb06 f30e 	mul.w	r3, r6, lr
 8011794:	428b      	cmp	r3, r1
 8011796:	d908      	bls.n	80117aa <__udivmoddi4+0x28a>
 8011798:	eb1c 0101 	adds.w	r1, ip, r1
 801179c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 80117a0:	d216      	bcs.n	80117d0 <__udivmoddi4+0x2b0>
 80117a2:	428b      	cmp	r3, r1
 80117a4:	d914      	bls.n	80117d0 <__udivmoddi4+0x2b0>
 80117a6:	3e02      	subs	r6, #2
 80117a8:	4461      	add	r1, ip
 80117aa:	1ac9      	subs	r1, r1, r3
 80117ac:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80117b0:	e738      	b.n	8011624 <__udivmoddi4+0x104>
 80117b2:	462e      	mov	r6, r5
 80117b4:	4628      	mov	r0, r5
 80117b6:	e705      	b.n	80115c4 <__udivmoddi4+0xa4>
 80117b8:	4606      	mov	r6, r0
 80117ba:	e6e3      	b.n	8011584 <__udivmoddi4+0x64>
 80117bc:	4618      	mov	r0, r3
 80117be:	e6f8      	b.n	80115b2 <__udivmoddi4+0x92>
 80117c0:	454b      	cmp	r3, r9
 80117c2:	d2a9      	bcs.n	8011718 <__udivmoddi4+0x1f8>
 80117c4:	ebb9 0802 	subs.w	r8, r9, r2
 80117c8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80117cc:	3801      	subs	r0, #1
 80117ce:	e7a3      	b.n	8011718 <__udivmoddi4+0x1f8>
 80117d0:	4646      	mov	r6, r8
 80117d2:	e7ea      	b.n	80117aa <__udivmoddi4+0x28a>
 80117d4:	4620      	mov	r0, r4
 80117d6:	e794      	b.n	8011702 <__udivmoddi4+0x1e2>
 80117d8:	4640      	mov	r0, r8
 80117da:	e7d1      	b.n	8011780 <__udivmoddi4+0x260>
 80117dc:	46d0      	mov	r8, sl
 80117de:	e77b      	b.n	80116d8 <__udivmoddi4+0x1b8>
 80117e0:	3b02      	subs	r3, #2
 80117e2:	4461      	add	r1, ip
 80117e4:	e732      	b.n	801164c <__udivmoddi4+0x12c>
 80117e6:	4630      	mov	r0, r6
 80117e8:	e709      	b.n	80115fe <__udivmoddi4+0xde>
 80117ea:	4464      	add	r4, ip
 80117ec:	3802      	subs	r0, #2
 80117ee:	e742      	b.n	8011676 <__udivmoddi4+0x156>

080117f0 <__aeabi_idiv0>:
 80117f0:	4770      	bx	lr
 80117f2:	bf00      	nop

080117f4 <SFU_APP_InstallAtNextReset>:
  *         This function is used by the User Application to request a Firmware installation (at next reboot).
  * @param  fw_header FW header of the FW to be installed
  * @retval HAL_OK if successful, otherwise HAL_ERROR
  */
HAL_StatusTypeDef SFU_APP_InstallAtNextReset(uint8_t *fw_header)
{
 80117f4:	b538      	push	{r3, r4, r5, lr}
#if  !defined(SFU_NO_SWAP)
  if (fw_header == NULL)
 80117f6:	4604      	mov	r4, r0
 80117f8:	b908      	cbnz	r0, 80117fe <SFU_APP_InstallAtNextReset+0xa>
  {
    return HAL_ERROR;
 80117fa:	2001      	movs	r0, #1
  }
  return HAL_OK;
#else
  return HAL_OK;                   /* Nothing to do */
#endif /* !SFU_NO_SWAP */
}
 80117fc:	bd38      	pop	{r3, r4, r5, pc}
  ret = FLASH_If_Erase_Size((void *) SlotStartAdd[SLOT_SWAP], SFU_IMG_IMAGE_OFFSET);
 80117fe:	4b09      	ldr	r3, [pc, #36]	; (8011824 <SFU_APP_InstallAtNextReset+0x30>)
 8011800:	69dd      	ldr	r5, [r3, #28]
 8011802:	f44f 7100 	mov.w	r1, #512	; 0x200
 8011806:	4628      	mov	r0, r5
 8011808:	f000 f9a2 	bl	8011b50 <FLASH_If_Erase_Size>
  if (ret == HAL_OK)
 801180c:	2800      	cmp	r0, #0
 801180e:	d1f4      	bne.n	80117fa <SFU_APP_InstallAtNextReset+0x6>
    ret = FLASH_If_Write((void *)SlotStartAdd[SLOT_SWAP], pfw_header, SE_FW_HEADER_TOT_LEN);
 8011810:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8011814:	4621      	mov	r1, r4
 8011816:	4628      	mov	r0, r5
 8011818:	f000 f9c6 	bl	8011ba8 <FLASH_If_Write>
    return HAL_ERROR;
 801181c:	3800      	subs	r0, #0
 801181e:	bf18      	it	ne
 8011820:	2001      	movne	r0, #1
 8011822:	e7eb      	b.n	80117fc <SFU_APP_InstallAtNextReset+0x8>
 8011824:	08014ce4 	.word	0x08014ce4

08011828 <SFU_APP_GetDownloadAreaInfo>:
  * @retval HAL_OK if successful, otherwise HAL_ERROR
  */

void SFU_APP_GetDownloadAreaInfo(uint32_t DwlSlot, SFU_FwImageFlashTypeDef *pArea)
{
  pArea->DownloadAddr = SlotStartAdd[DwlSlot];
 8011828:	4b06      	ldr	r3, [pc, #24]	; (8011844 <SFU_APP_GetDownloadAreaInfo+0x1c>)
 801182a:	f853 2020 	ldr.w	r2, [r3, r0, lsl #2]
  pArea->MaxSizeInBytes = (uint32_t)SLOT_SIZE(DwlSlot);
 801182e:	4b06      	ldr	r3, [pc, #24]	; (8011848 <SFU_APP_GetDownloadAreaInfo+0x20>)
  pArea->DownloadAddr = SlotStartAdd[DwlSlot];
 8011830:	604a      	str	r2, [r1, #4]
  pArea->MaxSizeInBytes = (uint32_t)SLOT_SIZE(DwlSlot);
 8011832:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8011836:	3301      	adds	r3, #1
 8011838:	1a9b      	subs	r3, r3, r2
 801183a:	600b      	str	r3, [r1, #0]
  pArea->ImageOffsetInBytes = SFU_IMG_IMAGE_OFFSET;
 801183c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8011840:	608b      	str	r3, [r1, #8]
}
 8011842:	4770      	bx	lr
 8011844:	08014ce4 	.word	0x08014ce4
 8011848:	08014d04 	.word	0x08014d04

0801184c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack       /* set stack pointer */
 801184c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8011884 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */
  movs  r1, #0
 8011850:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8011852:	e003      	b.n	801185c <LoopCopyDataInit>

08011854 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8011854:	4b0c      	ldr	r3, [pc, #48]	; (8011888 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8011856:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8011858:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 801185a:	3104      	adds	r1, #4

0801185c <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr  r0, =_sdata
 801185c:	480b      	ldr	r0, [pc, #44]	; (801188c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 801185e:	4b0c      	ldr	r3, [pc, #48]	; (8011890 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8011860:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8011862:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8011864:	d3f6      	bcc.n	8011854 <CopyDataInit>
  ldr  r2, =_sbss
 8011866:	4a0b      	ldr	r2, [pc, #44]	; (8011894 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8011868:	e002      	b.n	8011870 <LoopFillZerobss>

0801186a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs  r3, #0
 801186a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 801186c:	f842 3b04 	str.w	r3, [r2], #4

08011870 <LoopFillZerobss>:

LoopFillZerobss:
  ldr  r3, = _ebss
 8011870:	4b09      	ldr	r3, [pc, #36]	; (8011898 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8011872:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8011874:	d3f9      	bcc.n	801186a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8011876:	f001 f8ab 	bl	80129d0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 801187a:	f002 f913 	bl	8013aa4 <__libc_init_array>
/* Call the application entry point.*/
  bl  main
 801187e:	f000 fb43 	bl	8011f08 <main>
  bx  lr
 8011882:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8011884:	2000c000 	.word	0x2000c000
  ldr  r3, =_sidata
 8011888:	08015ed8 	.word	0x08015ed8
  ldr  r0, =_sdata
 801188c:	20001000 	.word	0x20001000
  ldr  r3, =_edata
 8011890:	200010d0 	.word	0x200010d0
  ldr  r2, =_sbss
 8011894:	200010d0 	.word	0x200010d0
  ldr  r3, = _ebss
 8011898:	20001df8 	.word	0x20001df8

0801189c <ADC_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 801189c:	e7fe      	b.n	801189c <ADC_IRQHandler>
	...

080118a0 <COM_Init>:
  * @brief  Initialize COM module.
  * @param  None.
  * @retval HAL Status.
  */
HAL_StatusTypeDef  COM_Init(void)
{
 80118a0:	b508      	push	{r3, lr}
#if defined(__GNUC__)
  setvbuf(stdout, NULL, _IONBF, 0);
 80118a2:	4b0c      	ldr	r3, [pc, #48]	; (80118d4 <COM_Init+0x34>)
 80118a4:	6818      	ldr	r0, [r3, #0]
 80118a6:	2300      	movs	r3, #0
 80118a8:	2202      	movs	r2, #2
 80118aa:	4619      	mov	r1, r3
 80118ac:	6880      	ldr	r0, [r0, #8]
 80118ae:	f002 f9c1 	bl	8013c34 <setvbuf>
  - One Stop Bit
  - No parity
  - Hardware flow control disabled (RTS and CTS signals)
  - Receive and transmit enabled
  */
  UartHandle.Instance = COM_UART;
 80118b2:	4809      	ldr	r0, [pc, #36]	; (80118d8 <COM_Init+0x38>)
  UartHandle.Init.BaudRate = 115200U;
 80118b4:	4a09      	ldr	r2, [pc, #36]	; (80118dc <COM_Init+0x3c>)
 80118b6:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 80118ba:	e9c0 2300 	strd	r2, r3, [r0]
  UartHandle.Init.WordLength = UART_WORDLENGTH_8B;
 80118be:	2300      	movs	r3, #0
  UartHandle.Init.StopBits = UART_STOPBITS_1;
 80118c0:	e9c0 3302 	strd	r3, r3, [r0, #8]
  UartHandle.Init.Parity = UART_PARITY_NONE;
 80118c4:	6103      	str	r3, [r0, #16]
  UartHandle.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80118c6:	6183      	str	r3, [r0, #24]
  UartHandle.Init.Mode = UART_MODE_RX | UART_MODE_TX;
 80118c8:	230c      	movs	r3, #12
 80118ca:	6143      	str	r3, [r0, #20]

  return HAL_UART_Init(&UartHandle);
}
 80118cc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  return HAL_UART_Init(&UartHandle);
 80118d0:	f002 b802 	b.w	80138d8 <HAL_UART_Init>
 80118d4:	20001068 	.word	0x20001068
 80118d8:	200010ec 	.word	0x200010ec
 80118dc:	40011400 	.word	0x40011400

080118e0 <HAL_UART_MspInit>:
  * @brief  UART MSP Init.
  * @param  huart: UART handler pointer.
  * @retval None.
  */
void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 80118e0:	b5f0      	push	{r4, r5, r6, r7, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if (huart->Instance == COM_UART)
 80118e2:	6802      	ldr	r2, [r0, #0]
 80118e4:	4b1f      	ldr	r3, [pc, #124]	; (8011964 <HAL_UART_MspInit+0x84>)
 80118e6:	429a      	cmp	r2, r3
{
 80118e8:	b089      	sub	sp, #36	; 0x24
  if (huart->Instance == COM_UART)
 80118ea:	d139      	bne.n	8011960 <HAL_UART_MspInit+0x80>
  {
    /* Peripheral Clock Enable */
    COM_UART_CLK_ENABLE();
 80118ec:	f503 3392 	add.w	r3, r3, #74752	; 0x12400
 80118f0:	2400      	movs	r4, #0
 80118f2:	9400      	str	r4, [sp, #0]
 80118f4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    GPIO_InitStruct.Pin = COM_UART_TX_PIN;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = COM_UART_TX_AF;
    HAL_GPIO_Init(COM_UART_TX_GPIO_PORT, &GPIO_InitStruct);
 80118f6:	481c      	ldr	r0, [pc, #112]	; (8011968 <HAL_UART_MspInit+0x88>)
    COM_UART_CLK_ENABLE();
 80118f8:	f042 0220 	orr.w	r2, r2, #32
 80118fc:	645a      	str	r2, [r3, #68]	; 0x44
 80118fe:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8011900:	f002 0220 	and.w	r2, r2, #32
 8011904:	9200      	str	r2, [sp, #0]
 8011906:	9a00      	ldr	r2, [sp, #0]
    COM_UART_TX_GPIO_CLK_ENABLE();
 8011908:	9401      	str	r4, [sp, #4]
 801190a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801190c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8011910:	631a      	str	r2, [r3, #48]	; 0x30
 8011912:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8011914:	f002 0240 	and.w	r2, r2, #64	; 0x40
 8011918:	9201      	str	r2, [sp, #4]
 801191a:	9a01      	ldr	r2, [sp, #4]
    COM_UART_RX_GPIO_CLK_ENABLE();
 801191c:	9402      	str	r4, [sp, #8]
 801191e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8011920:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8011924:	631a      	str	r2, [r3, #48]	; 0x30
 8011926:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8011928:	9405      	str	r4, [sp, #20]
    COM_UART_RX_GPIO_CLK_ENABLE();
 801192a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801192e:	9302      	str	r3, [sp, #8]
 8011930:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8011932:	2702      	movs	r7, #2
 8011934:	f44f 4380 	mov.w	r3, #16384	; 0x4000
    GPIO_InitStruct.Alternate = COM_UART_TX_AF;
 8011938:	2603      	movs	r6, #3
 801193a:	2508      	movs	r5, #8
    HAL_GPIO_Init(COM_UART_TX_GPIO_PORT, &GPIO_InitStruct);
 801193c:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801193e:	e9cd 3703 	strd	r3, r7, [sp, #12]
    GPIO_InitStruct.Alternate = COM_UART_TX_AF;
 8011942:	e9cd 6506 	strd	r6, r5, [sp, #24]
    HAL_GPIO_Init(COM_UART_TX_GPIO_PORT, &GPIO_InitStruct);
 8011946:	f001 fb7b 	bl	8013040 <HAL_GPIO_Init>

    /*Configure GPIO pins : COM_UART_RX_Pin  */
    GPIO_InitStruct.Pin = COM_UART_RX_PIN;
 801194a:	f44f 7300 	mov.w	r3, #512	; 0x200
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = COM_UART_RX_AF;
    HAL_GPIO_Init(COM_UART_RX_GPIO_PORT, &GPIO_InitStruct);
 801194e:	4806      	ldr	r0, [pc, #24]	; (8011968 <HAL_UART_MspInit+0x88>)
    GPIO_InitStruct.Alternate = COM_UART_RX_AF;
 8011950:	9507      	str	r5, [sp, #28]
    HAL_GPIO_Init(COM_UART_RX_GPIO_PORT, &GPIO_InitStruct);
 8011952:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8011954:	e9cd 3703 	strd	r3, r7, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8011958:	e9cd 4605 	strd	r4, r6, [sp, #20]
    HAL_GPIO_Init(COM_UART_RX_GPIO_PORT, &GPIO_InitStruct);
 801195c:	f001 fb70 	bl	8013040 <HAL_GPIO_Init>

  }

}
 8011960:	b009      	add	sp, #36	; 0x24
 8011962:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011964:	40011400 	.word	0x40011400
 8011968:	40021800 	.word	0x40021800

0801196c <COM_Transmit>:
  * @param uDataLength: Data pointer to the Data to transmit.
  * @param uTimeout: Timeout duration.
  * @retval Status of the Transmit operation.
  */
HAL_StatusTypeDef COM_Transmit(uint8_t *Data, uint16_t uDataLength, uint32_t uTimeout)
{
 801196c:	4613      	mov	r3, r2
  return HAL_UART_Transmit(&UartHandle, (uint8_t *)Data, uDataLength, uTimeout);
 801196e:	460a      	mov	r2, r1
 8011970:	4601      	mov	r1, r0
 8011972:	4801      	ldr	r0, [pc, #4]	; (8011978 <COM_Transmit+0xc>)
 8011974:	f001 bfde 	b.w	8013934 <HAL_UART_Transmit>
 8011978:	200010ec 	.word	0x200010ec

0801197c <COM_Receive>:
  * @param uDataLength: Data pointer to the Data to receive.
  * @param uTimeout: Timeout duration.
  * @retval Status of the Receive operation.
  */
HAL_StatusTypeDef COM_Receive(uint8_t *Data, uint16_t uDataLength, uint32_t uTimeout)
{
 801197c:	4613      	mov	r3, r2
  return HAL_UART_Receive(&UartHandle, (uint8_t *)Data, uDataLength, uTimeout);
 801197e:	460a      	mov	r2, r1
 8011980:	4601      	mov	r1, r0
 8011982:	4801      	ldr	r0, [pc, #4]	; (8011988 <COM_Receive+0xc>)
 8011984:	f002 b82b 	b.w	80139de <HAL_UART_Receive>
 8011988:	200010ec 	.word	0x200010ec

0801198c <COM_Flush>:
  * @retval HAL_Status.
  */
HAL_StatusTypeDef COM_Flush(void)
{
  /* Clean the input path */
  __HAL_UART_FLUSH_DRREGISTER(&UartHandle);
 801198c:	4b02      	ldr	r3, [pc, #8]	; (8011998 <COM_Flush+0xc>)
 801198e:	681b      	ldr	r3, [r3, #0]
  return HAL_OK;
}
 8011990:	2000      	movs	r0, #0
  __HAL_UART_FLUSH_DRREGISTER(&UartHandle);
 8011992:	685b      	ldr	r3, [r3, #4]
}
 8011994:	4770      	bx	lr
 8011996:	bf00      	nop
 8011998:	200010ec 	.word	0x200010ec

0801199c <__io_putchar>:
  * @brief  Retargets the C library printf function to the USART.
  * @param  None
  * @retval ch
  */
PUTCHAR_PROTOTYPE
{
 801199c:	b507      	push	{r0, r1, r2, lr}
  /* Place your implementation of fputc here */
  /* e.g. write a character to the USART1 and Loop until the end of transmission */
  HAL_UART_Transmit(&UartHandle, (uint8_t *)&ch, 1U, 0xFFFFU);
 801199e:	f64f 73ff 	movw	r3, #65535	; 0xffff
{
 80119a2:	9001      	str	r0, [sp, #4]
  HAL_UART_Transmit(&UartHandle, (uint8_t *)&ch, 1U, 0xFFFFU);
 80119a4:	2201      	movs	r2, #1
 80119a6:	a901      	add	r1, sp, #4
 80119a8:	4803      	ldr	r0, [pc, #12]	; (80119b8 <__io_putchar+0x1c>)
 80119aa:	f001 ffc3 	bl	8013934 <HAL_UART_Transmit>

  return ch;
}
 80119ae:	9801      	ldr	r0, [sp, #4]
 80119b0:	b003      	add	sp, #12
 80119b2:	f85d fb04 	ldr.w	pc, [sp], #4
 80119b6:	bf00      	nop
 80119b8:	200010ec 	.word	0x200010ec

080119bc <Str2Int>:
  * @param  pIntNum: The integer value
  * @retval 1: Correct
  *         0: Error
  */
uint32_t Str2Int(uint8_t *pInputStr, uint32_t *pIntNum)
{
 80119bc:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint32_t i = 0U;
  uint32_t res = 0U;
  uint32_t val = 0U;

  if ((pInputStr[0U] == '0') && ((pInputStr[1U] == 'x') || (pInputStr[1U] == 'X')))
 80119be:	7803      	ldrb	r3, [r0, #0]
 80119c0:	2b30      	cmp	r3, #48	; 0x30
{
 80119c2:	4604      	mov	r4, r0
  if ((pInputStr[0U] == '0') && ((pInputStr[1U] == 'x') || (pInputStr[1U] == 'X')))
 80119c4:	d104      	bne.n	80119d0 <Str2Int+0x14>
 80119c6:	7843      	ldrb	r3, [r0, #1]
 80119c8:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80119cc:	2b58      	cmp	r3, #88	; 0x58
 80119ce:	d013      	beq.n	80119f8 <Str2Int+0x3c>
 80119d0:	2300      	movs	r3, #0
 80119d2:	461a      	mov	r2, r3
        *pIntNum = val;
        res = 1U;
      }
      else if (ISVALIDDEC(pInputStr[i]))
      {
        val = val * 10U + CONVERTDEC(pInputStr[i]);
 80119d4:	260a      	movs	r6, #10
      if (pInputStr[i] == '\0')
 80119d6:	5ca0      	ldrb	r0, [r4, r2]
 80119d8:	bb60      	cbnz	r0, 8011a34 <Str2Int+0x78>
        *pIntNum = val;
 80119da:	600b      	str	r3, [r1, #0]
        res = 1U;
 80119dc:	2001      	movs	r0, #1
      {
        /* return 0, Invalid input */
        res = 0U;
        break;
      }
      i++;
 80119de:	3201      	adds	r2, #1
    while ((i < 11U) && (res != 1U))
 80119e0:	2a0b      	cmp	r2, #11
 80119e2:	d023      	beq.n	8011a2c <Str2Int+0x70>
 80119e4:	2800      	cmp	r0, #0
 80119e6:	d0f6      	beq.n	80119d6 <Str2Int+0x1a>
 80119e8:	e020      	b.n	8011a2c <Str2Int+0x70>
        val = (val << 4U) + CONVERTHEX(pInputStr[i]);
 80119ea:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 80119ee:	2a05      	cmp	r2, #5
 80119f0:	bf94      	ite	ls
 80119f2:	3b37      	subls	r3, #55	; 0x37
 80119f4:	3b57      	subhi	r3, #87	; 0x57
 80119f6:	e012      	b.n	8011a1e <Str2Int+0x62>
 80119f8:	2000      	movs	r0, #0
 80119fa:	2502      	movs	r5, #2
    while ((i < 11U) && (pInputStr[i] != '\0'))
 80119fc:	5d63      	ldrb	r3, [r4, r5]
 80119fe:	b193      	cbz	r3, 8011a26 <Str2Int+0x6a>
      if (ISVALIDHEX(pInputStr[i]))
 8011a00:	f023 0620 	bic.w	r6, r3, #32
 8011a04:	3e41      	subs	r6, #65	; 0x41
 8011a06:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8011a0a:	2e05      	cmp	r6, #5
 8011a0c:	b2d7      	uxtb	r7, r2
 8011a0e:	d901      	bls.n	8011a14 <Str2Int+0x58>
 8011a10:	2f09      	cmp	r7, #9
 8011a12:	d808      	bhi.n	8011a26 <Str2Int+0x6a>
        val = (val << 4U) + CONVERTHEX(pInputStr[i]);
 8011a14:	2f09      	cmp	r7, #9
 8011a16:	ea4f 1000 	mov.w	r0, r0, lsl #4
 8011a1a:	d8e6      	bhi.n	80119ea <Str2Int+0x2e>
 8011a1c:	4613      	mov	r3, r2
      i++;
 8011a1e:	3501      	adds	r5, #1
    while ((i < 11U) && (pInputStr[i] != '\0'))
 8011a20:	2d0b      	cmp	r5, #11
        val = (val << 4U) + CONVERTHEX(pInputStr[i]);
 8011a22:	4418      	add	r0, r3
    while ((i < 11U) && (pInputStr[i] != '\0'))
 8011a24:	d1ea      	bne.n	80119fc <Str2Int+0x40>
    if (pInputStr[i] == '\0')
 8011a26:	5d63      	ldrb	r3, [r4, r5]
 8011a28:	b10b      	cbz	r3, 8011a2e <Str2Int+0x72>
  uint32_t res = 0U;
 8011a2a:	2000      	movs	r0, #0
    }
  }

  return res;
}
 8011a2c:	bdf0      	pop	{r4, r5, r6, r7, pc}
      *pIntNum = val;
 8011a2e:	6008      	str	r0, [r1, #0]
      res = 1U;
 8011a30:	2001      	movs	r0, #1
 8011a32:	e7fb      	b.n	8011a2c <Str2Int+0x70>
      else if (((pInputStr[i] == 'k') || (pInputStr[i] == 'K')) && (i > 0U))
 8011a34:	f000 05df 	and.w	r5, r0, #223	; 0xdf
 8011a38:	2d4b      	cmp	r5, #75	; 0x4b
 8011a3a:	d102      	bne.n	8011a42 <Str2Int+0x86>
 8011a3c:	b11a      	cbz	r2, 8011a46 <Str2Int+0x8a>
        val = val << 10U;
 8011a3e:	029b      	lsls	r3, r3, #10
 8011a40:	e7cb      	b.n	80119da <Str2Int+0x1e>
      else if (((pInputStr[i] == 'm') || (pInputStr[i] == 'M')) && (i > 0U))
 8011a42:	2d4d      	cmp	r5, #77	; 0x4d
 8011a44:	d008      	beq.n	8011a58 <Str2Int+0x9c>
      else if (ISVALIDDEC(pInputStr[i]))
 8011a46:	f1a0 0530 	sub.w	r5, r0, #48	; 0x30
 8011a4a:	2d09      	cmp	r5, #9
 8011a4c:	d8ed      	bhi.n	8011a2a <Str2Int+0x6e>
        val = val * 10U + CONVERTDEC(pInputStr[i]);
 8011a4e:	fb06 0303 	mla	r3, r6, r3, r0
 8011a52:	3b30      	subs	r3, #48	; 0x30
 8011a54:	2000      	movs	r0, #0
 8011a56:	e7c2      	b.n	80119de <Str2Int+0x22>
      else if (((pInputStr[i] == 'm') || (pInputStr[i] == 'M')) && (i > 0U))
 8011a58:	2a00      	cmp	r2, #0
 8011a5a:	d0e6      	beq.n	8011a2a <Str2Int+0x6e>
        val = val << 20U;
 8011a5c:	051b      	lsls	r3, r3, #20
        *pIntNum = val;
 8011a5e:	e7bc      	b.n	80119da <Str2Int+0x1e>

08011a60 <Serial_PutByte>:
  * @brief  Transmit a byte to the HyperTerminal
  * @param  param The byte to be sent
  * @retval HAL_StatusTypeDef HAL_OK if OK
  */
HAL_StatusTypeDef Serial_PutByte(uint8_t uParam)
{
 8011a60:	b507      	push	{r0, r1, r2, lr}
  return COM_Transmit(&uParam, 1U, TX_TIMEOUT);
 8011a62:	2264      	movs	r2, #100	; 0x64
{
 8011a64:	f88d 0007 	strb.w	r0, [sp, #7]
  return COM_Transmit(&uParam, 1U, TX_TIMEOUT);
 8011a68:	2101      	movs	r1, #1
 8011a6a:	f10d 0007 	add.w	r0, sp, #7
 8011a6e:	f7ff ff7d 	bl	801196c <COM_Transmit>
}
 8011a72:	b003      	add	sp, #12
 8011a74:	f85d fb04 	ldr.w	pc, [sp], #4

08011a78 <FLASH_INT_If_Clear_Error>:
  * @brief  Clear error flags raised during previous operation
  * @param  None
  * @retval HAL Status.
  */
HAL_StatusTypeDef FLASH_INT_If_Clear_Error(void)
{
 8011a78:	b508      	push	{r3, lr}
  HAL_StatusTypeDef ret = HAL_ERROR;

  /* Unlock the Program memory */
  if (HAL_FLASH_Unlock() == HAL_OK)
 8011a7a:	f001 f99d 	bl	8012db8 <HAL_FLASH_Unlock>
 8011a7e:	b958      	cbnz	r0, 8011a98 <FLASH_INT_If_Clear_Error+0x20>
  {

    /* Clear all FLASH flags */
    __HAL_FLASH_CLEAR_FLAG(FLASH_SR_WRPERR | FLASH_SR_PGAERR | FLASH_SR_PGPERR | FLASH_SR_PGSERR | FLASH_SR_RDERR);
 8011a80:	4b06      	ldr	r3, [pc, #24]	; (8011a9c <FLASH_INT_If_Clear_Error+0x24>)
 8011a82:	f44f 72f8 	mov.w	r2, #496	; 0x1f0
 8011a86:	60da      	str	r2, [r3, #12]
    /* Unlock the Program memory */
    if (HAL_FLASH_Lock() == HAL_OK)
 8011a88:	f001 f9a8 	bl	8012ddc <HAL_FLASH_Lock>
 8011a8c:	b118      	cbz	r0, 8011a96 <FLASH_INT_If_Clear_Error+0x1e>
      ret = HAL_OK;
    }
#ifdef FLASH_IF_DBG
    else
    {
      FLASH_IF_TRACE("[FLASH_IF] Lock failure\r\n");
 8011a8e:	4804      	ldr	r0, [pc, #16]	; (8011aa0 <FLASH_INT_If_Clear_Error+0x28>)
#endif /* FLASH_IF_DBG */
  }
#ifdef FLASH_IF_DBG
  else
  {
    FLASH_IF_TRACE("[FLASH_IF] Unlock failure\r\n");
 8011a90:	f002 f8c8 	bl	8013c24 <puts>
  HAL_StatusTypeDef ret = HAL_ERROR;
 8011a94:	2001      	movs	r0, #1
  }
#endif /* FLASH_IF_DBG */
  return ret;
}
 8011a96:	bd08      	pop	{r3, pc}
    FLASH_IF_TRACE("[FLASH_IF] Unlock failure\r\n");
 8011a98:	4802      	ldr	r0, [pc, #8]	; (8011aa4 <FLASH_INT_If_Clear_Error+0x2c>)
 8011a9a:	e7f9      	b.n	8011a90 <FLASH_INT_If_Clear_Error+0x18>
 8011a9c:	40023c00 	.word	0x40023c00
 8011aa0:	08014d70 	.word	0x08014d70
 8011aa4:	08014d89 	.word	0x08014d89

08011aa8 <FLASH_If_Init>:
}
 8011aa8:	2000      	movs	r0, #0
 8011aaa:	4770      	bx	lr

08011aac <FLASH_If_Read>:
  if ((uint32_t) pSource < EXTERNAL_FLASH_ADDRESS)
 8011aac:	f1b1 4f10 	cmp.w	r1, #2415919104	; 0x90000000
{
 8011ab0:	b508      	push	{r3, lr}
  if ((uint32_t) pSource < EXTERNAL_FLASH_ADDRESS)
 8011ab2:	d203      	bcs.n	8011abc <FLASH_If_Read+0x10>
  memcpy(pDestination, pSource, uLength);
 8011ab4:	f002 f81a 	bl	8013aec <memcpy>
    return FLASH_INT_If_Read(pDestination, pSource, uLength);
 8011ab8:	2000      	movs	r0, #0
}
 8011aba:	bd08      	pop	{r3, pc}
    return FLASH_EXT_If_Read(pDestination, pSource, uLength);
 8011abc:	2001      	movs	r0, #1
 8011abe:	e7fc      	b.n	8011aba <FLASH_If_Read+0xe>

08011ac0 <FLASH_INT_If_Erase_Size>:
{
 8011ac0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011ac2:	b087      	sub	sp, #28
  uint32_t sector_error = 0U;
 8011ac4:	2300      	movs	r3, #0
{
 8011ac6:	4605      	mov	r5, r0
 8011ac8:	460e      	mov	r6, r1
  uint32_t sector_error = 0U;
 8011aca:	9300      	str	r3, [sp, #0]
  e_ret_status = FLASH_INT_If_Clear_Error();
 8011acc:	f7ff ffd4 	bl	8011a78 <FLASH_INT_If_Clear_Error>
  if (e_ret_status == HAL_OK)
 8011ad0:	4604      	mov	r4, r0
 8011ad2:	bb98      	cbnz	r0, 8011b3c <FLASH_INT_If_Erase_Size+0x7c>
    if (HAL_FLASH_Unlock() == HAL_OK)
 8011ad4:	f001 f970 	bl	8012db8 <HAL_FLASH_Unlock>
 8011ad8:	4604      	mov	r4, r0
 8011ada:	bb90      	cbnz	r0, 8011b42 <FLASH_INT_If_Erase_Size+0x82>

static uint32_t GetSector(uint32_t Add)
{
  uint32_t sector = 0;

  while (Add >= FlashSectorsAddress[sector + 1])
 8011adc:	4a1a      	ldr	r2, [pc, #104]	; (8011b48 <FLASH_INT_If_Erase_Size+0x88>)
  uint32_t sector = 0;
 8011ade:	4603      	mov	r3, r0
  while (Add >= FlashSectorsAddress[sector + 1])
 8011ae0:	461f      	mov	r7, r3
 8011ae2:	3301      	adds	r3, #1
 8011ae4:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8011ae8:	428d      	cmp	r5, r1
 8011aea:	d2f9      	bcs.n	8011ae0 <FLASH_INT_If_Erase_Size+0x20>
      nb_sectors = GetSector(uStart + uLength - 1U) - first_sector + 1U;
 8011aec:	3e01      	subs	r6, #1
 8011aee:	4435      	add	r5, r6
  uint32_t sector = 0;
 8011af0:	2300      	movs	r3, #0
  while (Add >= FlashSectorsAddress[sector + 1])
 8011af2:	4619      	mov	r1, r3
 8011af4:	3301      	adds	r3, #1
 8011af6:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8011afa:	4285      	cmp	r5, r0
 8011afc:	d2f9      	bcs.n	8011af2 <FLASH_INT_If_Erase_Size+0x32>
      p_erase_init.TypeErase     = FLASH_TYPEERASE_SECTORS;
 8011afe:	2300      	movs	r3, #0
      nb_sectors = GetSector(uStart + uLength - 1U) - first_sector + 1U;
 8011b00:	f1c7 0501 	rsb	r5, r7, #1
      p_erase_init.TypeErase     = FLASH_TYPEERASE_SECTORS;
 8011b04:	9301      	str	r3, [sp, #4]
        WRITE_REG(IWDG->KR, IWDG_KEY_RELOAD);
 8011b06:	4e11      	ldr	r6, [pc, #68]	; (8011b4c <FLASH_INT_If_Erase_Size+0x8c>)
      p_erase_init.VoltageRange  = FLASH_VOLTAGE_RANGE_3;
 8011b08:	2302      	movs	r3, #2
      nb_sectors = GetSector(uStart + uLength - 1U) - first_sector + 1U;
 8011b0a:	440d      	add	r5, r1
      p_erase_init.VoltageRange  = FLASH_VOLTAGE_RANGE_3;
 8011b0c:	9305      	str	r3, [sp, #20]
        chunk_nb_sectors = (nb_sectors >= NB_PAGE_SECTOR_PER_ERASE) ? NB_PAGE_SECTOR_PER_ERASE : nb_sectors;
 8011b0e:	2d02      	cmp	r5, #2
 8011b10:	462b      	mov	r3, r5
        if (HAL_FLASHEx_Erase(&p_erase_init, &sector_error) != HAL_OK)
 8011b12:	4669      	mov	r1, sp
        chunk_nb_sectors = (nb_sectors >= NB_PAGE_SECTOR_PER_ERASE) ? NB_PAGE_SECTOR_PER_ERASE : nb_sectors;
 8011b14:	bf28      	it	cs
 8011b16:	2302      	movcs	r3, #2
        if (HAL_FLASHEx_Erase(&p_erase_init, &sector_error) != HAL_OK)
 8011b18:	a801      	add	r0, sp, #4
        p_erase_init.NbSectors = chunk_nb_sectors;
 8011b1a:	e9cd 7303 	strd	r7, r3, [sp, #12]
        nb_sectors -= chunk_nb_sectors;
 8011b1e:	1aed      	subs	r5, r5, r3
        first_sector += chunk_nb_sectors;
 8011b20:	441f      	add	r7, r3
        if (HAL_FLASHEx_Erase(&p_erase_init, &sector_error) != HAL_OK)
 8011b22:	f001 fa3d 	bl	8012fa0 <HAL_FLASHEx_Erase>
 8011b26:	b110      	cbz	r0, 8011b2e <FLASH_INT_If_Erase_Size+0x6e>
          HAL_FLASH_GetError();
 8011b28:	f001 f962 	bl	8012df0 <HAL_FLASH_GetError>
          e_ret_status = HAL_ERROR;
 8011b2c:	2401      	movs	r4, #1
        WRITE_REG(IWDG->KR, IWDG_KEY_RELOAD);
 8011b2e:	f64a 23aa 	movw	r3, #43690	; 0xaaaa
 8011b32:	6033      	str	r3, [r6, #0]
      } while (nb_sectors > 0);
 8011b34:	2d00      	cmp	r5, #0
 8011b36:	d1ea      	bne.n	8011b0e <FLASH_INT_If_Erase_Size+0x4e>
      HAL_FLASH_Lock();
 8011b38:	f001 f950 	bl	8012ddc <HAL_FLASH_Lock>
}
 8011b3c:	4620      	mov	r0, r4
 8011b3e:	b007      	add	sp, #28
 8011b40:	bdf0      	pop	{r4, r5, r6, r7, pc}
      e_ret_status = HAL_ERROR;
 8011b42:	2401      	movs	r4, #1
 8011b44:	e7fa      	b.n	8011b3c <FLASH_INT_If_Erase_Size+0x7c>
 8011b46:	bf00      	nop
 8011b48:	20001000 	.word	0x20001000
 8011b4c:	40003000 	.word	0x40003000

08011b50 <FLASH_If_Erase_Size>:
  if ((uint32_t) pStart < EXTERNAL_FLASH_ADDRESS)
 8011b50:	f1b0 4f10 	cmp.w	r0, #2415919104	; 0x90000000
 8011b54:	d201      	bcs.n	8011b5a <FLASH_If_Erase_Size+0xa>
    return FLASH_INT_If_Erase_Size(pStart, uLength);
 8011b56:	f7ff bfb3 	b.w	8011ac0 <FLASH_INT_If_Erase_Size>
}
 8011b5a:	2001      	movs	r0, #1
 8011b5c:	4770      	bx	lr

08011b5e <FLASH_INT_If_Write>:
{
 8011b5e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011b60:	4605      	mov	r5, r0
 8011b62:	460e      	mov	r6, r1
 8011b64:	4617      	mov	r7, r2
  e_ret_status = FLASH_INT_If_Clear_Error();
 8011b66:	f7ff ff87 	bl	8011a78 <FLASH_INT_If_Clear_Error>
  if (e_ret_status == HAL_OK)
 8011b6a:	4604      	mov	r4, r0
 8011b6c:	b948      	cbnz	r0, 8011b82 <FLASH_INT_If_Write+0x24>
    if (HAL_FLASH_Unlock() != HAL_OK)
 8011b6e:	f001 f923 	bl	8012db8 <HAL_FLASH_Unlock>
 8011b72:	4604      	mov	r4, r0
 8011b74:	b9b0      	cbnz	r0, 8011ba4 <FLASH_INT_If_Write+0x46>
 8011b76:	3e01      	subs	r6, #1
 8011b78:	442f      	add	r7, r5
      for (uint32_t i = 0U; i < uLength; i++)
 8011b7a:	42bd      	cmp	r5, r7
 8011b7c:	d103      	bne.n	8011b86 <FLASH_INT_If_Write+0x28>
      HAL_FLASH_Lock();
 8011b7e:	f001 f92d 	bl	8012ddc <HAL_FLASH_Lock>
}
 8011b82:	4620      	mov	r0, r4
 8011b84:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_BYTE, (uint32_t) pDestination,  *((uint8_t *)(pdata + i))) == HAL_OK)
 8011b86:	2300      	movs	r3, #0
 8011b88:	7872      	ldrb	r2, [r6, #1]
 8011b8a:	4629      	mov	r1, r5
 8011b8c:	4618      	mov	r0, r3
 8011b8e:	f001 f95d 	bl	8012e4c <HAL_FLASH_Program>
 8011b92:	b928      	cbnz	r0, 8011ba0 <FLASH_INT_If_Write+0x42>
          if (*(uint8_t *)pDestination != *(uint8_t *)(pdata + i))
 8011b94:	f815 3b01 	ldrb.w	r3, [r5], #1
 8011b98:	f816 2f01 	ldrb.w	r2, [r6, #1]!
 8011b9c:	429a      	cmp	r2, r3
 8011b9e:	d0ec      	beq.n	8011b7a <FLASH_INT_If_Write+0x1c>
          e_ret_status = HAL_ERROR;
 8011ba0:	2401      	movs	r4, #1
 8011ba2:	e7ec      	b.n	8011b7e <FLASH_INT_If_Write+0x20>
      return HAL_ERROR;
 8011ba4:	2401      	movs	r4, #1
 8011ba6:	e7ec      	b.n	8011b82 <FLASH_INT_If_Write+0x24>

08011ba8 <FLASH_If_Write>:
  if ((uint32_t) pDestination < EXTERNAL_FLASH_ADDRESS)
 8011ba8:	f1b0 4f10 	cmp.w	r0, #2415919104	; 0x90000000
 8011bac:	d201      	bcs.n	8011bb2 <FLASH_If_Write+0xa>
    return FLASH_INT_If_Write(pDestination, pSource, uLength);
 8011bae:	f7ff bfd6 	b.w	8011b5e <FLASH_INT_If_Write>
}
 8011bb2:	2001      	movs	r0, #1
 8011bb4:	4770      	bx	lr
	...

08011bb8 <Ymodem_HeaderPktRxCpltCallback>:
  * @brief  Ymodem Header Packet Transfer completed callback.
  * @param  uFileSize Dimension of the file that will be received (Bytes).
  * @retval None
  */
HAL_StatusTypeDef Ymodem_HeaderPktRxCpltCallback(uint32_t uFileSize)
{
 8011bb8:	b510      	push	{r4, lr}
  /*Reset of the ymodem variables */
  m_uFileSizeYmodem = 0U;
  m_uPacketsReceived = 0U;
 8011bba:	4b07      	ldr	r3, [pc, #28]	; (8011bd8 <Ymodem_HeaderPktRxCpltCallback+0x20>)
 8011bbc:	2400      	movs	r4, #0
  m_uNbrBlocksYmodem = 0U;

  /*Filesize information is stored*/
  m_uFileSizeYmodem = uFileSize;
 8011bbe:	e9c3 4000 	strd	r4, r0, [r3]

  /*Compute the number of blocks */
#ifndef MINICOM_YMODEM
  /* Teraterm sends 1kB YMODEM packets */
  m_uNbrBlocksYmodem = (m_uFileSizeYmodem + (PACKET_1K_SIZE - 1U)) / PACKET_1K_SIZE;
 8011bc2:	f200 30ff 	addw	r0, r0, #1023	; 0x3ff
 8011bc6:	0a80      	lsrs	r0, r0, #10
 8011bc8:	6098      	str	r0, [r3, #8]
  /* Minicom sends 128 bytes YMODEM packets */
  m_uNbrBlocksYmodem = (m_uFileSizeYmodem + (PACKET_SIZE - 1U)) / PACKET_SIZE;
#endif /* MINICOM_YMODEM */

  /* NOTE : delay inserted for Ymodem protocol*/
  HAL_Delay(1000U);
 8011bca:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8011bce:	f000 ff75 	bl	8012abc <HAL_Delay>

  return HAL_OK;
}
 8011bd2:	4620      	mov	r0, r4
 8011bd4:	bd10      	pop	{r4, pc}
 8011bd6:	bf00      	nop
 8011bd8:	20001130 	.word	0x20001130

08011bdc <Ymodem_DataPktRxCpltCallback>:
  * @retval None
  */
#ifndef MINICOM_YMODEM
/* Teraterm YMODEM */
HAL_StatusTypeDef Ymodem_DataPktRxCpltCallback(uint8_t *pData, uint32_t uFlashDestination, uint32_t uSize)
{
 8011bdc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint32_t uOldSize;
#if !defined(SFU_NO_SWAP)
  SE_FwRawHeaderTypeDef fw_header_dwl;
#endif /* (SFU_NO_SWAP) */

  m_uPacketsReceived++;
 8011be0:	4c46      	ldr	r4, [pc, #280]	; (8011cfc <Ymodem_DataPktRxCpltCallback+0x120>)
 8011be2:	6823      	ldr	r3, [r4, #0]
{
 8011be4:	4615      	mov	r5, r2

  /*Increase the number of received packets*/
  if (m_uPacketsReceived == m_uNbrBlocksYmodem) /*Last Packet*/
 8011be6:	68a2      	ldr	r2, [r4, #8]
  m_uPacketsReceived++;
 8011be8:	3301      	adds	r3, #1
  if (m_uPacketsReceived == m_uNbrBlocksYmodem) /*Last Packet*/
 8011bea:	4293      	cmp	r3, r2
{
 8011bec:	b0d0      	sub	sp, #320	; 0x140
 8011bee:	4607      	mov	r7, r0
  m_uPacketsReceived++;
 8011bf0:	6023      	str	r3, [r4, #0]
  if (m_uPacketsReceived == m_uNbrBlocksYmodem) /*Last Packet*/
 8011bf2:	d106      	bne.n	8011c02 <Ymodem_DataPktRxCpltCallback+0x26>
  {
    /*Extracting actual payload from last packet*/
    if (0 == (m_uFileSizeYmodem % PACKET_1K_SIZE))
 8011bf4:	6865      	ldr	r5, [r4, #4]
 8011bf6:	f3c5 0509 	ubfx	r5, r5, #0, #10
    {
      /* The last packet must be fully considered */
      uSize = PACKET_1K_SIZE;
 8011bfa:	2d00      	cmp	r5, #0
 8011bfc:	bf08      	it	eq
 8011bfe:	f44f 6580 	moveq.w	r5, #1024	; 0x400
      uSize = m_uFileSizeYmodem - ((uint32_t)(m_uFileSizeYmodem / PACKET_1K_SIZE) * PACKET_1K_SIZE);
    }
  }

  /* First packet : Contains header information: PartialFwSize and PartialFwOffset information */
  if (m_uPacketsReceived == 1)
 8011c02:	2b01      	cmp	r3, #1
 8011c04:	d112      	bne.n	8011c2c <Ymodem_DataPktRxCpltCallback+0x50>
    /* End of Image to be downloaded */
#if defined(SFU_NO_SWAP)
    m_uDwlImgEnd = uFlashDestination + ((SE_FwRawHeaderTypeDef *)pData)->FwSize + SFU_IMG_IMAGE_OFFSET;
#else
    m_uDwlImgEnd = uFlashDestination + ((SE_FwRawHeaderTypeDef *)pData)->PartialFwSize
                   + (((SE_FwRawHeaderTypeDef *)pData)->PartialFwOffset % SLOT_SIZE(SLOT_SWAP))
 8011c06:	4b3e      	ldr	r3, [pc, #248]	; (8011d00 <Ymodem_DataPktRxCpltCallback+0x124>)
 8011c08:	4a3e      	ldr	r2, [pc, #248]	; (8011d04 <Ymodem_DataPktRxCpltCallback+0x128>)
 8011c0a:	69db      	ldr	r3, [r3, #28]
 8011c0c:	69d2      	ldr	r2, [r2, #28]
 8011c0e:	3301      	adds	r3, #1
 8011c10:	1a9a      	subs	r2, r3, r2
 8011c12:	68fb      	ldr	r3, [r7, #12]
 8011c14:	fbb3 f0f2 	udiv	r0, r3, r2
 8011c18:	fb02 3310 	mls	r3, r2, r0, r3
                   + SFU_IMG_IMAGE_OFFSET;
 8011c1c:	693a      	ldr	r2, [r7, #16]
    m_uDwlImgCurrent = uFlashDestination;
 8011c1e:	e9c4 1103 	strd	r1, r1, [r4, #12]
                   + SFU_IMG_IMAGE_OFFSET;
 8011c22:	4411      	add	r1, r2
 8011c24:	f501 7100 	add.w	r1, r1, #512	; 0x200
 8011c28:	4419      	add	r1, r3
    m_uDwlImgEnd = uFlashDestination + ((SE_FwRawHeaderTypeDef *)pData)->PartialFwSize
 8011c2a:	6161      	str	r1, [r4, #20]
#endif /* SFU_NO_SWAP */
  }

  /* This packet : contains end of FW header */
  if ((m_uDwlImgCurrent < (m_uDwlImgStart + SFU_IMG_IMAGE_OFFSET)) &&
 8011c2c:	68e3      	ldr	r3, [r4, #12]
 8011c2e:	6920      	ldr	r0, [r4, #16]
 8011c30:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8011c34:	4283      	cmp	r3, r0
 8011c36:	d94f      	bls.n	8011cd8 <Ymodem_DataPktRxCpltCallback+0xfc>
      ((m_uDwlImgCurrent + uSize) >= (m_uDwlImgStart + SFU_IMG_IMAGE_OFFSET)))
 8011c38:	1942      	adds	r2, r0, r5
  if ((m_uDwlImgCurrent < (m_uDwlImgStart + SFU_IMG_IMAGE_OFFSET)) &&
 8011c3a:	4293      	cmp	r3, r2
 8011c3c:	d84c      	bhi.n	8011cd8 <Ymodem_DataPktRxCpltCallback+0xfc>
    uLength = SFU_IMG_IMAGE_OFFSET % PACKET_1K_SIZE;
    if (uLength == 0)
    {
      uLength = PACKET_1K_SIZE;
    }
    if (FLASH_If_Write((void *)m_uDwlImgCurrent, pData, uLength) == HAL_OK)
 8011c3e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8011c42:	4639      	mov	r1, r7
 8011c44:	f7ff ffb0 	bl	8011ba8 <FLASH_If_Write>
 8011c48:	2800      	cmp	r0, #0
 8011c4a:	d147      	bne.n	8011cdc <Ymodem_DataPktRxCpltCallback+0x100>
#else
      /*
       * Read header from dwl area : in some configuration header can be transmitted with 2 YMODEM packets
       * ==> pData contains only the last part of the header and cannot be used to retrieve PartialFwOffset
       */
      e_ret_status = FLASH_If_Read((uint8_t *)&fw_header_dwl, (void *) m_uDwlImgStart, SE_FW_HEADER_TOT_LEN);
 8011c4c:	68e1      	ldr	r1, [r4, #12]
 8011c4e:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8011c52:	4668      	mov	r0, sp
 8011c54:	f7ff ff2a 	bl	8011aac <FLASH_If_Read>

      /* Shift the DWL area pointer, to align image with (PartialFwOffset % sector size) in DWL area */
      m_uDwlImgCurrent += uLength + fw_header_dwl.PartialFwOffset % SLOT_SIZE(SLOT_SWAP);
 8011c58:	4b29      	ldr	r3, [pc, #164]	; (8011d00 <Ymodem_DataPktRxCpltCallback+0x124>)
 8011c5a:	4a2a      	ldr	r2, [pc, #168]	; (8011d04 <Ymodem_DataPktRxCpltCallback+0x128>)
 8011c5c:	69db      	ldr	r3, [r3, #28]
 8011c5e:	69d2      	ldr	r2, [r2, #28]
 8011c60:	3301      	adds	r3, #1
 8011c62:	1a9a      	subs	r2, r3, r2
 8011c64:	9b03      	ldr	r3, [sp, #12]
 8011c66:	fbb3 f1f2 	udiv	r1, r3, r2
 8011c6a:	fb02 3311 	mls	r3, r2, r1, r3
 8011c6e:	6922      	ldr	r2, [r4, #16]
 8011c70:	f502 7200 	add.w	r2, r2, #512	; 0x200
 8011c74:	4413      	add	r3, r2
      e_ret_status = FLASH_If_Read((uint8_t *)&fw_header_dwl, (void *) m_uDwlImgStart, SE_FW_HEADER_TOT_LEN);
 8011c76:	4606      	mov	r6, r0
      m_uDwlImgCurrent += uLength + fw_header_dwl.PartialFwOffset % SLOT_SIZE(SLOT_SWAP);
 8011c78:	6123      	str	r3, [r4, #16]
#endif /* SFU_NO_SWAP */

      /* Update remaining packet size to write */
      uSize -= uLength;
 8011c7a:	f5a5 7500 	sub.w	r5, r5, #512	; 0x200

      /* Update pData pointer to received packet data */
      pData += uLength;
 8011c7e:	f507 7700 	add.w	r7, r7, #512	; 0x200
      e_ret_status = HAL_ERROR;
    }
  }

  /* Skip data write if all has been already written as part of the header */
  if (uSize != 0U)
 8011c82:	b1c5      	cbz	r5, 8011cb6 <Ymodem_DataPktRxCpltCallback+0xda>
  {
    /*Adjust dimension to unitary flash programming length */
    if (uSize % FLASH_IF_MIN_WRITE_LEN != 0U)
 8011c84:	076b      	lsls	r3, r5, #29
 8011c86:	d010      	beq.n	8011caa <Ymodem_DataPktRxCpltCallback+0xce>
    {
      uOldSize = uSize;
      uSize += (FLASH_IF_MIN_WRITE_LEN - (uSize % FLASH_IF_MIN_WRITE_LEN));
 8011c88:	f025 0207 	bic.w	r2, r5, #7
      m_uDwlImgEnd += (FLASH_IF_MIN_WRITE_LEN - (uSize % FLASH_IF_MIN_WRITE_LEN));
 8011c8c:	6963      	ldr	r3, [r4, #20]
      uSize += (FLASH_IF_MIN_WRITE_LEN - (uSize % FLASH_IF_MIN_WRITE_LEN));
 8011c8e:	f102 0808 	add.w	r8, r2, #8
      while (uOldSize < uSize)
      {
        pData[uOldSize] = 0xFF;
 8011c92:	1b52      	subs	r2, r2, r5
 8011c94:	3208      	adds	r2, #8
      m_uDwlImgEnd += (FLASH_IF_MIN_WRITE_LEN - (uSize % FLASH_IF_MIN_WRITE_LEN));
 8011c96:	3308      	adds	r3, #8
        pData[uOldSize] = 0xFF;
 8011c98:	4545      	cmp	r5, r8
 8011c9a:	bf88      	it	hi
 8011c9c:	2200      	movhi	r2, #0
 8011c9e:	1978      	adds	r0, r7, r5
 8011ca0:	21ff      	movs	r1, #255	; 0xff
      m_uDwlImgEnd += (FLASH_IF_MIN_WRITE_LEN - (uSize % FLASH_IF_MIN_WRITE_LEN));
 8011ca2:	6163      	str	r3, [r4, #20]
        pData[uOldSize] = 0xFF;
 8011ca4:	f001 ff30 	bl	8013b08 <memset>
 8011ca8:	4645      	mov	r5, r8
    }

    /* Write Data in Flash - size has to be 64-bit aligned */

    /* Write in flash only if not beyond allowed area */
    if (((m_uDwlImgCurrent + uSize) <= m_uDwlImgEnd) && (e_ret_status == HAL_OK))
 8011caa:	6920      	ldr	r0, [r4, #16]
 8011cac:	6963      	ldr	r3, [r4, #20]
 8011cae:	1942      	adds	r2, r0, r5
 8011cb0:	429a      	cmp	r2, r3
 8011cb2:	d915      	bls.n	8011ce0 <Ymodem_DataPktRxCpltCallback+0x104>
        e_ret_status = HAL_ERROR;
      }
    }
    else
    {
      e_ret_status = HAL_ERROR;
 8011cb4:	2601      	movs	r6, #1
    }
  }

  /* Last packet : reset m_uPacketsReceived */
  if (m_uPacketsReceived == m_uNbrBlocksYmodem)
 8011cb6:	68a3      	ldr	r3, [r4, #8]
 8011cb8:	6822      	ldr	r2, [r4, #0]
 8011cba:	429a      	cmp	r2, r3
  {
    m_uPacketsReceived = 0U;
 8011cbc:	bf04      	itt	eq
 8011cbe:	2300      	moveq	r3, #0
 8011cc0:	6023      	streq	r3, [r4, #0]
  }

  /* Reset data counters in case of error */
  if (e_ret_status == HAL_ERROR)
 8011cc2:	2e01      	cmp	r6, #1
  {

    /*Reset of the ymodem variables */
    m_uFileSizeYmodem = 0U;
 8011cc4:	bf08      	it	eq
 8011cc6:	2300      	moveq	r3, #0
    m_uPacketsReceived = 0U;
    m_uNbrBlocksYmodem = 0U;
  }
  return e_ret_status;
}
 8011cc8:	4630      	mov	r0, r6
    m_uPacketsReceived = 0U;
 8011cca:	bf04      	itt	eq
 8011ccc:	e9c4 3300 	strdeq	r3, r3, [r4]
    m_uNbrBlocksYmodem = 0U;
 8011cd0:	60a3      	streq	r3, [r4, #8]
}
 8011cd2:	b050      	add	sp, #320	; 0x140
 8011cd4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  HAL_StatusTypeDef e_ret_status = HAL_OK;
 8011cd8:	2600      	movs	r6, #0
 8011cda:	e7d2      	b.n	8011c82 <Ymodem_DataPktRxCpltCallback+0xa6>
      e_ret_status = HAL_ERROR;
 8011cdc:	2601      	movs	r6, #1
 8011cde:	e7d0      	b.n	8011c82 <Ymodem_DataPktRxCpltCallback+0xa6>
    if (((m_uDwlImgCurrent + uSize) <= m_uDwlImgEnd) && (e_ret_status == HAL_OK))
 8011ce0:	2e00      	cmp	r6, #0
 8011ce2:	d1e7      	bne.n	8011cb4 <Ymodem_DataPktRxCpltCallback+0xd8>
      if (FLASH_If_Write((void *)m_uDwlImgCurrent, pData, uSize) == HAL_OK)
 8011ce4:	462a      	mov	r2, r5
 8011ce6:	4639      	mov	r1, r7
 8011ce8:	f7ff ff5e 	bl	8011ba8 <FLASH_If_Write>
 8011cec:	4606      	mov	r6, r0
 8011cee:	2800      	cmp	r0, #0
 8011cf0:	d1e0      	bne.n	8011cb4 <Ymodem_DataPktRxCpltCallback+0xd8>
        m_uDwlImgCurrent += uSize;
 8011cf2:	6922      	ldr	r2, [r4, #16]
 8011cf4:	442a      	add	r2, r5
 8011cf6:	6122      	str	r2, [r4, #16]
 8011cf8:	e7dd      	b.n	8011cb6 <Ymodem_DataPktRxCpltCallback+0xda>
 8011cfa:	bf00      	nop
 8011cfc:	20001130 	.word	0x20001130
 8011d00:	08014d04 	.word	0x08014d04
 8011d04:	08014ce4 	.word	0x08014ce4

08011d08 <FW_UPDATE_Run>:
{
 8011d08:	b530      	push	{r4, r5, lr}
  printf("\r\n================ New Fw Download =========================\r\n\n");
 8011d0a:	4828      	ldr	r0, [pc, #160]	; (8011dac <FW_UPDATE_Run+0xa4>)
{
 8011d0c:	b0d7      	sub	sp, #348	; 0x15c
  printf("\r\n================ New Fw Download =========================\r\n\n");
 8011d0e:	f001 ff89 	bl	8013c24 <puts>
  SFU_APP_GetDownloadAreaInfo(SLOT_DWL_1, &fw_image_dwl_area);
 8011d12:	a902      	add	r1, sp, #8
 8011d14:	2004      	movs	r0, #4
 8011d16:	f7ff fd87 	bl	8011828 <SFU_APP_GetDownloadAreaInfo>
  YMODEM_CallbacksTypeDef ymodemCb = {Ymodem_HeaderPktRxCpltCallback, Ymodem_DataPktRxCpltCallback};
 8011d1a:	4b25      	ldr	r3, [pc, #148]	; (8011db0 <FW_UPDATE_Run+0xa8>)
 8011d1c:	e893 0003 	ldmia.w	r3, {r0, r1}
 8011d20:	ac06      	add	r4, sp, #24
 8011d22:	e884 0003 	stmia.w	r4, {r0, r1}
  printf("  -- Send Firmware \r\n\n");
 8011d26:	4823      	ldr	r0, [pc, #140]	; (8011db4 <FW_UPDATE_Run+0xac>)
 8011d28:	f001 ff7c 	bl	8013c24 <puts>
  WRITE_REG(IWDG->KR, IWDG_KEY_RELOAD);
 8011d2c:	4b22      	ldr	r3, [pc, #136]	; (8011db8 <FW_UPDATE_Run+0xb0>)
  printf("  -- -- Erasing download area ...\r\n\n");
 8011d2e:	4823      	ldr	r0, [pc, #140]	; (8011dbc <FW_UPDATE_Run+0xb4>)
  WRITE_REG(IWDG->KR, IWDG_KEY_RELOAD);
 8011d30:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 8011d34:	601a      	str	r2, [r3, #0]
  printf("  -- -- Erasing download area ...\r\n\n");
 8011d36:	f001 ff75 	bl	8013c24 <puts>
  if ((ret = FLASH_If_Erase_Size((void *)(pFwImageDwlArea->DownloadAddr), pFwImageDwlArea->MaxSizeInBytes)) == HAL_OK)
 8011d3a:	e9dd 1002 	ldrd	r1, r0, [sp, #8]
 8011d3e:	f7ff ff07 	bl	8011b50 <FLASH_If_Erase_Size>
 8011d42:	bb78      	cbnz	r0, 8011da4 <FW_UPDATE_Run+0x9c>
    printf("  -- -- File> Transfer> YMODEM> Send ");
 8011d44:	481e      	ldr	r0, [pc, #120]	; (8011dc0 <FW_UPDATE_Run+0xb8>)
 8011d46:	f001 fee7 	bl	8013b18 <iprintf>
    Ymodem_Init();
 8011d4a:	f000 fc5d 	bl	8012608 <Ymodem_Init>
    e_result = Ymodem_Receive(&u_fw_size, pFwImageDwlArea->DownloadAddr, &ymodemCb);
 8011d4e:	9903      	ldr	r1, [sp, #12]
 8011d50:	4622      	mov	r2, r4
 8011d52:	a801      	add	r0, sp, #4
 8011d54:	f000 fc5a 	bl	801260c <Ymodem_Receive>
 8011d58:	4605      	mov	r5, r0
    printf("\r\n\n");
 8011d5a:	481a      	ldr	r0, [pc, #104]	; (8011dc4 <FW_UPDATE_Run+0xbc>)
 8011d5c:	f001 ff62 	bl	8013c24 <puts>
    if ((e_result == COM_OK))
 8011d60:	b9d5      	cbnz	r5, 8011d98 <FW_UPDATE_Run+0x90>
      printf("  -- -- Programming Completed Successfully!\r\n\n");
 8011d62:	4819      	ldr	r0, [pc, #100]	; (8011dc8 <FW_UPDATE_Run+0xc0>)
 8011d64:	f001 ff5e 	bl	8013c24 <puts>
      printf("  -- -- Bytes: %d\r\n\n", u_fw_size);
 8011d68:	9901      	ldr	r1, [sp, #4]
 8011d6a:	4818      	ldr	r0, [pc, #96]	; (8011dcc <FW_UPDATE_Run+0xc4>)
 8011d6c:	f001 fed4 	bl	8013b18 <iprintf>
    (void)FLASH_If_Read(fw_header_dwl_slot, (void *) fw_image_dwl_area.DownloadAddr, SE_FW_HEADER_TOT_LEN);
 8011d70:	9903      	ldr	r1, [sp, #12]
 8011d72:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8011d76:	4620      	mov	r0, r4
 8011d78:	f7ff fe98 	bl	8011aac <FLASH_If_Read>
    (void)SFU_APP_InstallAtNextReset((uint8_t *) fw_header_dwl_slot);
 8011d7c:	4620      	mov	r0, r4
 8011d7e:	f7ff fd39 	bl	80117f4 <SFU_APP_InstallAtNextReset>
    printf("  -- Image correctly downloaded - reboot\r\n\n");
 8011d82:	4813      	ldr	r0, [pc, #76]	; (8011dd0 <FW_UPDATE_Run+0xc8>)
 8011d84:	f001 ff4e 	bl	8013c24 <puts>
    HAL_Delay(1000U);
 8011d88:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8011d8c:	f000 fe96 	bl	8012abc <HAL_Delay>
    SVC_NVIC_SystemReset();
 8011d90:	f000 f952 	bl	8012038 <SVC_NVIC_SystemReset>
}
 8011d94:	b057      	add	sp, #348	; 0x15c
 8011d96:	bd30      	pop	{r4, r5, pc}
    else if (e_result == COM_ABORT)
 8011d98:	2d02      	cmp	r5, #2
      printf("  -- -- !!Aborted by user!!\r\n\n");
 8011d9a:	bf0c      	ite	eq
 8011d9c:	480d      	ldreq	r0, [pc, #52]	; (8011dd4 <FW_UPDATE_Run+0xcc>)
      printf("  -- -- !!Error during file download!!\r\n\n");
 8011d9e:	480e      	ldrne	r0, [pc, #56]	; (8011dd8 <FW_UPDATE_Run+0xd0>)
 8011da0:	f001 ff40 	bl	8013c24 <puts>
    printf("  -- !!Operation failed!! \r\n\n");
 8011da4:	480d      	ldr	r0, [pc, #52]	; (8011ddc <FW_UPDATE_Run+0xd4>)
 8011da6:	f001 ff3d 	bl	8013c24 <puts>
 8011daa:	e7f3      	b.n	8011d94 <FW_UPDATE_Run+0x8c>
 8011dac:	08014da4 	.word	0x08014da4
 8011db0:	08014cd8 	.word	0x08014cd8
 8011db4:	08014de3 	.word	0x08014de3
 8011db8:	40003000 	.word	0x40003000
 8011dbc:	08014df9 	.word	0x08014df9
 8011dc0:	08014e1d 	.word	0x08014e1d
 8011dc4:	08015ddd 	.word	0x08015ddd
 8011dc8:	08014e43 	.word	0x08014e43
 8011dcc:	08014e71 	.word	0x08014e71
 8011dd0:	08014e86 	.word	0x08014e86
 8011dd4:	08014eb1 	.word	0x08014eb1
 8011dd8:	08014ecf 	.word	0x08014ecf
 8011ddc:	08014ef8 	.word	0x08014ef8

08011de0 <FW_UPDATE_MULTIPLE_RunMenu>:
{
 8011de0:	b508      	push	{r3, lr}
  printf("\r\n============= Multiple Download Menu ================\r\n\n");
 8011de2:	480d      	ldr	r0, [pc, #52]	; (8011e18 <FW_UPDATE_MULTIPLE_RunMenu+0x38>)
 8011de4:	f001 ff1e 	bl	8013c24 <puts>
  printf("  Download firmware in DWL_SLOT #1 ---------------------- 1\r\n\n");
 8011de8:	480c      	ldr	r0, [pc, #48]	; (8011e1c <FW_UPDATE_MULTIPLE_RunMenu+0x3c>)
 8011dea:	f001 ff1b 	bl	8013c24 <puts>
  printf("  Download firmware in DWL_SLOT #2 ---------------------- 2\r\n\n");
 8011dee:	480c      	ldr	r0, [pc, #48]	; (8011e20 <FW_UPDATE_MULTIPLE_RunMenu+0x40>)
 8011df0:	f001 ff18 	bl	8013c24 <puts>
  printf("  Download firmware in DWL_SLOT #3 ---------------------- 3\r\n\n");
 8011df4:	480b      	ldr	r0, [pc, #44]	; (8011e24 <FW_UPDATE_MULTIPLE_RunMenu+0x44>)
 8011df6:	f001 ff15 	bl	8013c24 <puts>
  printf("  Start installation ------------------------------------ 4\r\n\n");
 8011dfa:	480b      	ldr	r0, [pc, #44]	; (8011e28 <FW_UPDATE_MULTIPLE_RunMenu+0x48>)
 8011dfc:	f001 ff12 	bl	8013c24 <puts>
  printf("  Previous Menu ----------------------------------------- x\r\n\n");
 8011e00:	480a      	ldr	r0, [pc, #40]	; (8011e2c <FW_UPDATE_MULTIPLE_RunMenu+0x4c>)
 8011e02:	f001 ff0f 	bl	8013c24 <puts>
  printf("  Selection :\r\n\n");
 8011e06:	480a      	ldr	r0, [pc, #40]	; (8011e30 <FW_UPDATE_MULTIPLE_RunMenu+0x50>)
 8011e08:	f001 ff0c 	bl	8013c24 <puts>
}
 8011e0c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    printf("  -- !!Only 1 download area configured - feature not available!! \r\n\n");
 8011e10:	4808      	ldr	r0, [pc, #32]	; (8011e34 <FW_UPDATE_MULTIPLE_RunMenu+0x54>)
 8011e12:	f001 bf07 	b.w	8013c24 <puts>
 8011e16:	bf00      	nop
 8011e18:	08014f15 	.word	0x08014f15
 8011e1c:	08014f4f 	.word	0x08014f4f
 8011e20:	08014f8d 	.word	0x08014f8d
 8011e24:	08014fcb 	.word	0x08014fcb
 8011e28:	08015009 	.word	0x08015009
 8011e2c:	08015047 	.word	0x08015047
 8011e30:	08015085 	.word	0x08015085
 8011e34:	08015095 	.word	0x08015095

08011e38 <FW_VALIDATE_RunMenu>:
  printf("  Feature not supported ! \r\n");
 8011e38:	4801      	ldr	r0, [pc, #4]	; (8011e40 <FW_VALIDATE_RunMenu+0x8>)
 8011e3a:	f001 bef3 	b.w	8013c24 <puts>
 8011e3e:	bf00      	nop
 8011e40:	080150d9 	.word	0x080150d9

08011e44 <FW_APP_PrintMainMenu>:
  * @brief  Display the TEST Main Menu choices on HyperTerminal
  * @param  None.
  * @retval None.
  */
void FW_APP_PrintMainMenu(void)
{
 8011e44:	b508      	push	{r3, lr}
  printf("\r\n=================== Main Menu ============================\r\n\n");
 8011e46:	480b      	ldr	r0, [pc, #44]	; (8011e74 <FW_APP_PrintMainMenu+0x30>)
 8011e48:	f001 feec 	bl	8013c24 <puts>
  printf("  Download a new Fw Image ------------------------------- 1\r\n\n");
 8011e4c:	480a      	ldr	r0, [pc, #40]	; (8011e78 <FW_APP_PrintMainMenu+0x34>)
 8011e4e:	f001 fee9 	bl	8013c24 <puts>
  printf("  Test Protections -------------------------------------- 2\r\n\n");
 8011e52:	480a      	ldr	r0, [pc, #40]	; (8011e7c <FW_APP_PrintMainMenu+0x38>)
 8011e54:	f001 fee6 	bl	8013c24 <puts>
  printf("  Test SE User Code ------------------------------------- 3\r\n\n");
 8011e58:	4809      	ldr	r0, [pc, #36]	; (8011e80 <FW_APP_PrintMainMenu+0x3c>)
 8011e5a:	f001 fee3 	bl	8013c24 <puts>
  printf("  Multiple download ------------------------------------- 4\r\n\n");
 8011e5e:	4809      	ldr	r0, [pc, #36]	; (8011e84 <FW_APP_PrintMainMenu+0x40>)
 8011e60:	f001 fee0 	bl	8013c24 <puts>
  printf("  Validate a FW Image------------------------------------ 5\r\n\n");
 8011e64:	4808      	ldr	r0, [pc, #32]	; (8011e88 <FW_APP_PrintMainMenu+0x44>)
 8011e66:	f001 fedd 	bl	8013c24 <puts>
  printf("  Selection :\r\n\n");
}
 8011e6a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  printf("  Selection :\r\n\n");
 8011e6e:	4807      	ldr	r0, [pc, #28]	; (8011e8c <FW_APP_PrintMainMenu+0x48>)
 8011e70:	f001 bed8 	b.w	8013c24 <puts>
 8011e74:	080150f5 	.word	0x080150f5
 8011e78:	08015134 	.word	0x08015134
 8011e7c:	08015172 	.word	0x08015172
 8011e80:	080151b0 	.word	0x080151b0
 8011e84:	080151ee 	.word	0x080151ee
 8011e88:	0801522c 	.word	0x0801522c
 8011e8c:	08015085 	.word	0x08015085

08011e90 <FW_APP_Run>:
  * @brief  Display the TEST Main Menu choices on HyperTerminal
  * @param  None.
  * @retval None.
  */
void FW_APP_Run(void)
{
 8011e90:	b507      	push	{r0, r1, r2, lr}
  uint8_t key = 0U;
 8011e92:	2300      	movs	r3, #0
 8011e94:	f88d 3007 	strb.w	r3, [sp, #7]

  /* Print Main Menu message*/
  FW_APP_PrintMainMenu();
 8011e98:	f7ff ffd4 	bl	8011e44 <FW_APP_PrintMainMenu>

  while (1U)
  {
    /* If the SecureBoot configured the IWDG, UserApp must reload IWDG counter with value defined in the reload
       register */
    WRITE_REG(IWDG->KR, IWDG_KEY_RELOAD);
 8011e9c:	4c18      	ldr	r4, [pc, #96]	; (8011f00 <FW_APP_Run+0x70>)
          break;
        case '5' :
          FW_VALIDATE_RunMenu();
          break;
        default:
          printf("Invalid Number !\r");
 8011e9e:	4e19      	ldr	r6, [pc, #100]	; (8011f04 <FW_APP_Run+0x74>)
    WRITE_REG(IWDG->KR, IWDG_KEY_RELOAD);
 8011ea0:	f64a 25aa 	movw	r5, #43690	; 0xaaaa
 8011ea4:	6025      	str	r5, [r4, #0]
    COM_Flush();
 8011ea6:	f7ff fd71 	bl	801198c <COM_Flush>
    if (COM_Receive(&key, 1U, RX_TIMEOUT) == HAL_OK)
 8011eaa:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8011eae:	2101      	movs	r1, #1
 8011eb0:	f10d 0007 	add.w	r0, sp, #7
 8011eb4:	f7ff fd62 	bl	801197c <COM_Receive>
 8011eb8:	b968      	cbnz	r0, 8011ed6 <FW_APP_Run+0x46>
      switch (key)
 8011eba:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8011ebe:	3b31      	subs	r3, #49	; 0x31
 8011ec0:	2b04      	cmp	r3, #4
 8011ec2:	d818      	bhi.n	8011ef6 <FW_APP_Run+0x66>
 8011ec4:	e8df f003 	tbb	[pc, r3]
 8011ec8:	110e0b03 	.word	0x110e0b03
 8011ecc:	14          	.byte	0x14
 8011ecd:	00          	.byte	0x00
          FW_UPDATE_Run();
 8011ece:	f7ff ff1b 	bl	8011d08 <FW_UPDATE_Run>
          break;
      }

      /*Print Main Menu message*/
      FW_APP_PrintMainMenu();
 8011ed2:	f7ff ffb7 	bl	8011e44 <FW_APP_PrintMainMenu>
    }

    BSP_LED_Toggle(LED_GREEN);
 8011ed6:	2000      	movs	r0, #0
 8011ed8:	f000 fd30 	bl	801293c <BSP_LED_Toggle>
    WRITE_REG(IWDG->KR, IWDG_KEY_RELOAD);
 8011edc:	e7e2      	b.n	8011ea4 <FW_APP_Run+0x14>
          TEST_PROTECTIONS_RunMenu();
 8011ede:	f000 fa19 	bl	8012314 <TEST_PROTECTIONS_RunMenu>
          break;
 8011ee2:	e7f6      	b.n	8011ed2 <FW_APP_Run+0x42>
          SE_USER_CODE_RunMenu();
 8011ee4:	f000 f8f6 	bl	80120d4 <SE_USER_CODE_RunMenu>
          break;
 8011ee8:	e7f3      	b.n	8011ed2 <FW_APP_Run+0x42>
          FW_UPDATE_MULTIPLE_RunMenu();
 8011eea:	f7ff ff79 	bl	8011de0 <FW_UPDATE_MULTIPLE_RunMenu>
          break;
 8011eee:	e7f0      	b.n	8011ed2 <FW_APP_Run+0x42>
          FW_VALIDATE_RunMenu();
 8011ef0:	f7ff ffa2 	bl	8011e38 <FW_VALIDATE_RunMenu>
          break;
 8011ef4:	e7ed      	b.n	8011ed2 <FW_APP_Run+0x42>
          printf("Invalid Number !\r");
 8011ef6:	4630      	mov	r0, r6
 8011ef8:	f001 fe0e 	bl	8013b18 <iprintf>
          break;
 8011efc:	e7e9      	b.n	8011ed2 <FW_APP_Run+0x42>
 8011efe:	bf00      	nop
 8011f00:	40003000 	.word	0x40003000
 8011f04:	0801526a 	.word	0x0801526a

08011f08 <main>:
{
 8011f08:	b530      	push	{r4, r5, lr}
  pUserAppId = (uint8_t *)&UserAppId;
 8011f0a:	4d41      	ldr	r5, [pc, #260]	; (8012010 <main+0x108>)
 8011f0c:	4b41      	ldr	r3, [pc, #260]	; (8012014 <main+0x10c>)
 8011f0e:	602b      	str	r3, [r5, #0]
{
 8011f10:	b095      	sub	sp, #84	; 0x54
  HAL_Init();
 8011f12:	f000 fda7 	bl	8012a64 <HAL_Init>
  __HAL_RCC_PWR_CLK_ENABLE();
 8011f16:	4b40      	ldr	r3, [pc, #256]	; (8012018 <main+0x110>)
 8011f18:	2100      	movs	r1, #0
 8011f1a:	9100      	str	r1, [sp, #0]
 8011f1c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8011f1e:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8011f22:	641a      	str	r2, [r3, #64]	; 0x40
 8011f24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011f26:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8011f2a:	9300      	str	r3, [sp, #0]
 8011f2c:	9b00      	ldr	r3, [sp, #0]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8011f2e:	4b3b      	ldr	r3, [pc, #236]	; (801201c <main+0x114>)
 8011f30:	9101      	str	r1, [sp, #4]
 8011f32:	681a      	ldr	r2, [r3, #0]
 8011f34:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8011f38:	601a      	str	r2, [r3, #0]
 8011f3a:	681b      	ldr	r3, [r3, #0]
 8011f3c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8011f40:	9301      	str	r3, [sp, #4]
 8011f42:	9b01      	ldr	r3, [sp, #4]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8011f44:	2201      	movs	r2, #1
 8011f46:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8011f4a:	2402      	movs	r4, #2
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8011f4c:	e9cd 2307 	strd	r2, r3, [sp, #28]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8011f50:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8011f54:	e9cd 430d 	strd	r4, r3, [sp, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLN = 200;
 8011f58:	2108      	movs	r1, #8
 8011f5a:	23c8      	movs	r3, #200	; 0xc8
 8011f5c:	e9cd 130f 	strd	r1, r3, [sp, #60]	; 0x3c
  ret = HAL_RCC_OscConfig(&RCC_OscInitStruct);
 8011f60:	a807      	add	r0, sp, #28
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8011f62:	2307      	movs	r3, #7
  RCC_OscInitStruct.PLL.PLLR = 2;
 8011f64:	e9cd 3412 	strd	r3, r4, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8011f68:	9411      	str	r4, [sp, #68]	; 0x44
  ret = HAL_RCC_OscConfig(&RCC_OscInitStruct);
 8011f6a:	f001 fa31 	bl	80133d0 <HAL_RCC_OscConfig>
  if(ret != HAL_OK)
 8011f6e:	b100      	cbz	r0, 8011f72 <main+0x6a>
    while(1) { ; } 
 8011f70:	e7fe      	b.n	8011f70 <main+0x68>
  RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
 8011f72:	230f      	movs	r3, #15
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8011f74:	e9cd 3402 	strd	r3, r4, [sp, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;  
 8011f78:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;  
 8011f7c:	e9cd 3005 	strd	r3, r0, [sp, #20]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8011f80:	9004      	str	r0, [sp, #16]
  ret = HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3);
 8011f82:	2103      	movs	r1, #3
 8011f84:	a802      	add	r0, sp, #8
 8011f86:	f001 f967 	bl	8013258 <HAL_RCC_ClockConfig>
  if(ret != HAL_OK)
 8011f8a:	4604      	mov	r4, r0
 8011f8c:	b100      	cbz	r0, 8011f90 <main+0x88>
    while(1) { ; }  
 8011f8e:	e7fe      	b.n	8011f8e <main+0x86>
  FLASH_If_Init();
 8011f90:	f7ff fd8a 	bl	8011aa8 <FLASH_If_Init>
  BSP_LED_Init(LED_GREEN);
 8011f94:	4620      	mov	r0, r4
 8011f96:	f000 fc9b 	bl	80128d0 <BSP_LED_Init>
    BSP_LED_Toggle(LED_GREEN);
 8011f9a:	4620      	mov	r0, r4
 8011f9c:	f000 fcce 	bl	801293c <BSP_LED_Toggle>
    HAL_Delay(100U);
 8011fa0:	2064      	movs	r0, #100	; 0x64
 8011fa2:	f000 fd8b 	bl	8012abc <HAL_Delay>
    BSP_LED_Toggle(LED_GREEN);
 8011fa6:	4620      	mov	r0, r4
 8011fa8:	f000 fcc8 	bl	801293c <BSP_LED_Toggle>
    HAL_Delay(100U);
 8011fac:	2064      	movs	r0, #100	; 0x64
 8011fae:	f000 fd85 	bl	8012abc <HAL_Delay>
    BSP_LED_Toggle(LED_GREEN);
 8011fb2:	4620      	mov	r0, r4
 8011fb4:	f000 fcc2 	bl	801293c <BSP_LED_Toggle>
    HAL_Delay(100U);
 8011fb8:	2064      	movs	r0, #100	; 0x64
 8011fba:	f000 fd7f 	bl	8012abc <HAL_Delay>
    BSP_LED_Toggle(LED_GREEN);
 8011fbe:	4620      	mov	r0, r4
 8011fc0:	f000 fcbc 	bl	801293c <BSP_LED_Toggle>
    HAL_Delay(100U);
 8011fc4:	2064      	movs	r0, #100	; 0x64
 8011fc6:	f000 fd79 	bl	8012abc <HAL_Delay>
  WRITE_REG(IWDG->KR, IWDG_KEY_RELOAD);
 8011fca:	4b15      	ldr	r3, [pc, #84]	; (8012020 <main+0x118>)
 8011fcc:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 8011fd0:	601a      	str	r2, [r3, #0]
  COM_Init();
 8011fd2:	f7ff fc65 	bl	80118a0 <COM_Init>
  BUTTON_INIT();
 8011fd6:	4621      	mov	r1, r4
 8011fd8:	4620      	mov	r0, r4
 8011fda:	f000 fcbb 	bl	8012954 <BSP_PB_Init>
  printf("\r\n======================================================================");
 8011fde:	4811      	ldr	r0, [pc, #68]	; (8012024 <main+0x11c>)
 8011fe0:	f001 fd9a 	bl	8013b18 <iprintf>
  printf("\r\n=              (C) COPYRIGHT 2017 STMicroelectronics                 =");
 8011fe4:	4810      	ldr	r0, [pc, #64]	; (8012028 <main+0x120>)
 8011fe6:	f001 fd97 	bl	8013b18 <iprintf>
  printf("\r\n=                                                                    =");
 8011fea:	4810      	ldr	r0, [pc, #64]	; (801202c <main+0x124>)
 8011fec:	f001 fd94 	bl	8013b18 <iprintf>
  printf("\r\n=                          User App #%c                               =", *pUserAppId);
 8011ff0:	682b      	ldr	r3, [r5, #0]
 8011ff2:	480f      	ldr	r0, [pc, #60]	; (8012030 <main+0x128>)
 8011ff4:	7819      	ldrb	r1, [r3, #0]
 8011ff6:	f001 fd8f 	bl	8013b18 <iprintf>
  printf("\r\n======================================================================");
 8011ffa:	480a      	ldr	r0, [pc, #40]	; (8012024 <main+0x11c>)
 8011ffc:	f001 fd8c 	bl	8013b18 <iprintf>
  printf("\r\n\r\n");
 8012000:	480c      	ldr	r0, [pc, #48]	; (8012034 <main+0x12c>)
 8012002:	f001 fe0f 	bl	8013c24 <puts>
  MPU_EnterUnprivilegedMode();
 8012006:	f000 f831 	bl	801206c <MPU_EnterUnprivilegedMode>
  FW_APP_Run();
 801200a:	f7ff ff41 	bl	8011e90 <FW_APP_Run>
 801200e:	bf00      	nop
 8012010:	20001148 	.word	0x20001148
 8012014:	08014ce0 	.word	0x08014ce0
 8012018:	40023800 	.word	0x40023800
 801201c:	40007000 	.word	0x40007000
 8012020:	40003000 	.word	0x40003000
 8012024:	0801527c 	.word	0x0801527c
 8012028:	080152c5 	.word	0x080152c5
 801202c:	0801530e 	.word	0x0801530e
 8012030:	08015357 	.word	0x08015357
 8012034:	080153a1 	.word	0x080153a1

08012038 <SVC_NVIC_SystemReset>:
#if defined ( __GNUC__ ) || defined(__ARMCC_VERSION)
  /*
    * With GCC high C/C++++ optimisation level, as syscall parameter is unused, compiler does not initialize
    * syscall parameter (in r0) when caller is in same file. Forcing the parameter copy in r0 avoid the issue.
    */
  __ASM volatile("MOV r0, %0" : : "r"(syscall));
 8012038:	2300      	movs	r3, #0
 801203a:	4618      	mov	r0, r3
  /*
    * You cannot directly change to privileged mode from unprivileged mode without going through an exception, for
    * example an SVC.
    * Handled by @ref MPU_SVC_Handler() and finally @ref SFU_MPU_SVC_Handler()
    */
  __ASM volatile("SVC #1");   /* 1 is the hard-coded value to indicate HAL syscall */
 801203c:	df01      	svc	1
  * @retval None
  */
void SVC_NVIC_SystemReset(void)
{
  HAL_SysCall(HAL_SVC_NVIC_SYSTEM_RESET);
}
 801203e:	4770      	bx	lr

08012040 <SVC_MPU_Disable>:
  __ASM volatile("MOV r0, %0" : : "r"(syscall));
 8012040:	2301      	movs	r3, #1
 8012042:	4618      	mov	r0, r3
  __ASM volatile("SVC #1");   /* 1 is the hard-coded value to indicate HAL syscall */
 8012044:	df01      	svc	1
  * @retval None
  */
void SVC_MPU_Disable(void)
{
  HAL_SysCall(HAL_SVC_MPU_DISABLE);
}
 8012046:	4770      	bx	lr

08012048 <HAL_APP_SVC_Handler>:
  * \li NVIC system reset
  * \li MPU disable request
  */
void HAL_APP_SVC_Handler(uint32_t *args)
{
  switch (args[0])
 8012048:	6803      	ldr	r3, [r0, #0]
 801204a:	2b01      	cmp	r3, #1
 801204c:	d001      	beq.n	8012052 <HAL_APP_SVC_Handler+0xa>
  {
    case HAL_SVC_NVIC_SYSTEM_RESET :  /* HAL NVIC system reset */
    {
      HAL_NVIC_SystemReset();
 801204e:	f000 bd9b 	b.w	8012b88 <HAL_NVIC_SystemReset>
      break;
    }
    case HAL_SVC_MPU_DISABLE :        /* HAL Disable MPU */
    {
      HAL_MPU_Disable();
 8012052:	f000 bdbf 	b.w	8012bd4 <HAL_MPU_Disable>

08012056 <MPU_SVC_Handler>:
  uint8_t code = ((char *)args[6])[-2];
 8012056:	6983      	ldr	r3, [r0, #24]
 8012058:	f813 3c02 	ldrb.w	r3, [r3, #-2]
  switch (code)
 801205c:	b113      	cbz	r3, 8012064 <MPU_SVC_Handler+0xe>
 801205e:	2b01      	cmp	r3, #1
 8012060:	d002      	beq.n	8012068 <MPU_SVC_Handler+0x12>
 8012062:	4770      	bx	lr
      SE_APP_SVC_Handler(args);
 8012064:	f7f3 bcf0 	b.w	8005a48 <SE_APP_SVC_Handler>
      HAL_APP_SVC_Handler(args);
 8012068:	f7ff bfee 	b.w	8012048 <HAL_APP_SVC_Handler>

0801206c <MPU_EnterUnprivilegedMode>:
 */
__STATIC_FORCEINLINE uint32_t __get_MSP(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, msp" : "=r" (result) );
 801206c:	f3ef 8308 	mrs	r3, MSP
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
 8012070:	f383 8809 	msr	PSP, r3
  \details Assigns the given value to the Main Stack Pointer (MSP).
  \param [in]    topOfMainStack  Main Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_MSP(uint32_t topOfMainStack)
{
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 8012074:	4b05      	ldr	r3, [pc, #20]	; (801208c <MPU_EnterUnprivilegedMode+0x20>)
 8012076:	f383 8808 	msr	MSP, r3
  __ASM volatile ("MRS %0, control" : "=r" (result) );
 801207a:	f3ef 8314 	mrs	r3, CONTROL
  */
void MPU_EnterUnprivilegedMode(void)
{
  __set_PSP(__get_MSP()); /* set up Process Stack Pointer to current stack pointer */
  __set_MSP(SE_REGION_RAM_STACK_TOP); /* change main stack to point on privileged stack */
  __set_CONTROL(__get_CONTROL() | 3); /* bit 0 = 1: unpriviledged      bit 1=1: stack=PSP */
 801207e:	f043 0303 	orr.w	r3, r3, #3
  __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
 8012082:	f383 8814 	msr	CONTROL, r3
           so that all instructions following the ISB are fetched from cache or memory,
           after the instruction has been completed.
 */
__STATIC_FORCEINLINE void __ISB(void)
{
  __ASM volatile ("isb 0xF":::"memory");
 8012086:	f3bf 8f6f 	isb	sy
  __ISB();
}
 801208a:	4770      	bx	lr
 801208c:	20000400 	.word	0x20000400

08012090 <SE_USER_CODE_PrintMenu>:
  * @brief  Display the SE_USER_CODE Menu choices on hyperterminal
  * @param  None.
  * @retval None.
  */
static void SE_USER_CODE_PrintMenu(void)
{
 8012090:	b508      	push	{r3, lr}
  printf("\r\n=== Call User Defined Code running in Secure Engine ===\r\n\n");
 8012092:	480a      	ldr	r0, [pc, #40]	; (80120bc <SE_USER_CODE_PrintMenu+0x2c>)
 8012094:	f001 fdc6 	bl	8013c24 <puts>
  printf("  Get firmware information of SLOT_ACTIVE_1 ------------- 1\r\n\n");
 8012098:	4809      	ldr	r0, [pc, #36]	; (80120c0 <SE_USER_CODE_PrintMenu+0x30>)
 801209a:	f001 fdc3 	bl	8013c24 <puts>
  printf("  Get firmware information of SLOT_ACTIVE_2 ------------- 2\r\n\n");
 801209e:	4809      	ldr	r0, [pc, #36]	; (80120c4 <SE_USER_CODE_PrintMenu+0x34>)
 80120a0:	f001 fdc0 	bl	8013c24 <puts>
  printf("  Get firmware information of SLOT_ACTIVE_3 ------------- 3\r\n\n");
 80120a4:	4808      	ldr	r0, [pc, #32]	; (80120c8 <SE_USER_CODE_PrintMenu+0x38>)
 80120a6:	f001 fdbd 	bl	8013c24 <puts>
  printf("  Previous Menu ----------------------------------------- x\r\n\n");
 80120aa:	4808      	ldr	r0, [pc, #32]	; (80120cc <SE_USER_CODE_PrintMenu+0x3c>)
 80120ac:	f001 fdba 	bl	8013c24 <puts>
  printf("  Selection :\r\n\n");
}
 80120b0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  printf("  Selection :\r\n\n");
 80120b4:	4806      	ldr	r0, [pc, #24]	; (80120d0 <SE_USER_CODE_PrintMenu+0x40>)
 80120b6:	f001 bdb5 	b.w	8013c24 <puts>
 80120ba:	bf00      	nop
 80120bc:	080153a5 	.word	0x080153a5
 80120c0:	080153e1 	.word	0x080153e1
 80120c4:	0801541f 	.word	0x0801541f
 80120c8:	0801545d 	.word	0x0801545d
 80120cc:	08015047 	.word	0x08015047
 80120d0:	08015085 	.word	0x08015085

080120d4 <SE_USER_CODE_RunMenu>:
  * @brief  Run get firmware info menu.
  * @param  None
  * @retval HAL Status.
  */
void SE_USER_CODE_RunMenu(void)
{
 80120d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80120d6:	b085      	sub	sp, #20
  uint8_t key = 0U;
 80120d8:	2300      	movs	r3, #0
 80120da:	f88d 3003 	strb.w	r3, [sp, #3]
  uint32_t exit = 0U;
  uint32_t slot_number = 0U;

  /*Print Main Menu message*/
  SE_USER_CODE_PrintMenu();
 80120de:	f7ff ffd7 	bl	8012090 <SE_USER_CODE_PrintMenu>
    key = 0U;
    slot_number = 0U;

    /* If the SecureBoot configured the IWDG, UserApp must reload IWDG counter with value defined in the reload
       register */
    WRITE_REG(IWDG->KR, IWDG_KEY_RELOAD);
 80120e2:	4d29      	ldr	r5, [pc, #164]	; (8012188 <SE_USER_CODE_RunMenu+0xb4>)
  if ((SE_SUCCESS == se_retCode) && (SE_OK == se_Status))
 80120e4:	4f29      	ldr	r7, [pc, #164]	; (801218c <SE_USER_CODE_RunMenu+0xb8>)
    WRITE_REG(IWDG->KR, IWDG_KEY_RELOAD);
 80120e6:	f64a 26aa 	movw	r6, #43690	; 0xaaaa
    key = 0U;
 80120ea:	2400      	movs	r4, #0
 80120ec:	f88d 4003 	strb.w	r4, [sp, #3]
    WRITE_REG(IWDG->KR, IWDG_KEY_RELOAD);
 80120f0:	602e      	str	r6, [r5, #0]

    /* Clean the input path */
    COM_Flush();
 80120f2:	f7ff fc4b 	bl	801198c <COM_Flush>

    /* Receive key */
    if (COM_Receive(&key, 1U, RX_TIMEOUT) == HAL_OK)
 80120f6:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80120fa:	2101      	movs	r1, #1
 80120fc:	f10d 0003 	add.w	r0, sp, #3
 8012100:	f7ff fc3c 	bl	801197c <COM_Receive>
 8012104:	2800      	cmp	r0, #0
 8012106:	d1f1      	bne.n	80120ec <SE_USER_CODE_RunMenu+0x18>
    {
      switch (key)
 8012108:	f89d 3003 	ldrb.w	r3, [sp, #3]
 801210c:	2b33      	cmp	r3, #51	; 0x33
 801210e:	d016      	beq.n	801213e <SE_USER_CODE_RunMenu+0x6a>
 8012110:	d811      	bhi.n	8012136 <SE_USER_CODE_RunMenu+0x62>
 8012112:	2b31      	cmp	r3, #49	; 0x31
 8012114:	d015      	beq.n	8012142 <SE_USER_CODE_RunMenu+0x6e>
 8012116:	2b32      	cmp	r3, #50	; 0x32
 8012118:	d015      	beq.n	8012146 <SE_USER_CODE_RunMenu+0x72>
          break;
        case 'x' :
          exit = 1U;
          break;
        default:
          printf("Invalid Number !\r");
 801211a:	481d      	ldr	r0, [pc, #116]	; (8012190 <SE_USER_CODE_RunMenu+0xbc>)
 801211c:	f001 fcfc 	bl	8013b18 <iprintf>
    slot_number = 0U;
 8012120:	2100      	movs	r1, #0
          break;
      }

      if (exit != 1U)
      {
        if (SlotStartAdd[slot_number] == 0U)
 8012122:	4b1c      	ldr	r3, [pc, #112]	; (8012194 <SE_USER_CODE_RunMenu+0xc0>)
 8012124:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8012128:	b97b      	cbnz	r3, 801214a <SE_USER_CODE_RunMenu+0x76>
        {
          printf("SLOT_ACTIVE_%d is not configured !\r", slot_number);
 801212a:	481b      	ldr	r0, [pc, #108]	; (8012198 <SE_USER_CODE_RunMenu+0xc4>)
    printf("\tActiveFwSize: %d bytes\r\n", sl_FwInfo.ActiveFwSize);
 801212c:	f001 fcf4 	bl	8013b18 <iprintf>
        {
          SE_USER_CODE_GetFwInfo(slot_number);
        }

        /*Print Main Menu message*/
        SE_USER_CODE_PrintMenu();
 8012130:	f7ff ffae 	bl	8012090 <SE_USER_CODE_PrintMenu>
 8012134:	e7d9      	b.n	80120ea <SE_USER_CODE_RunMenu+0x16>
      switch (key)
 8012136:	2b78      	cmp	r3, #120	; 0x78
 8012138:	d1ef      	bne.n	801211a <SE_USER_CODE_RunMenu+0x46>
      }
    }
  }
}
 801213a:	b005      	add	sp, #20
 801213c:	bdf0      	pop	{r4, r5, r6, r7, pc}
          slot_number = SLOT_ACTIVE_3;
 801213e:	2103      	movs	r1, #3
 8012140:	e7ef      	b.n	8012122 <SE_USER_CODE_RunMenu+0x4e>
          slot_number = SLOT_ACTIVE_1;
 8012142:	2101      	movs	r1, #1
 8012144:	e7ed      	b.n	8012122 <SE_USER_CODE_RunMenu+0x4e>
      switch (key)
 8012146:	2102      	movs	r1, #2
 8012148:	e7eb      	b.n	8012122 <SE_USER_CODE_RunMenu+0x4e>
  memset(&sl_FwInfo, 0xFF, sizeof(SE_APP_ActiveFwInfo_t));
 801214a:	4a14      	ldr	r2, [pc, #80]	; (801219c <SE_USER_CODE_RunMenu+0xc8>)
 801214c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8012150:	e9cd 2301 	strd	r2, r3, [sp, #4]
  se_retCode = SE_APP_GetActiveFwInfo(&se_Status, SlotNumber, &sl_FwInfo);
 8012154:	a801      	add	r0, sp, #4
 8012156:	aa02      	add	r2, sp, #8
  memset(&sl_FwInfo, 0xFF, sizeof(SE_APP_ActiveFwInfo_t));
 8012158:	9303      	str	r3, [sp, #12]
  se_retCode = SE_APP_GetActiveFwInfo(&se_Status, SlotNumber, &sl_FwInfo);
 801215a:	f7f3 fc51 	bl	8005a00 <SE_APP_GetActiveFwInfo>
  if ((SE_SUCCESS == se_retCode) && (SE_OK == se_Status))
 801215e:	42b8      	cmp	r0, r7
 8012160:	d10e      	bne.n	8012180 <SE_USER_CODE_RunMenu+0xac>
 8012162:	4b0f      	ldr	r3, [pc, #60]	; (80121a0 <SE_USER_CODE_RunMenu+0xcc>)
 8012164:	9a01      	ldr	r2, [sp, #4]
 8012166:	429a      	cmp	r2, r3
 8012168:	d10a      	bne.n	8012180 <SE_USER_CODE_RunMenu+0xac>
    printf("Firmware Info:\r\n");
 801216a:	480e      	ldr	r0, [pc, #56]	; (80121a4 <SE_USER_CODE_RunMenu+0xd0>)
 801216c:	f001 fd5a 	bl	8013c24 <puts>
    printf("\tActiveFwVersion: %d\r\n", sl_FwInfo.ActiveFwVersion);
 8012170:	f8bd 1008 	ldrh.w	r1, [sp, #8]
 8012174:	480c      	ldr	r0, [pc, #48]	; (80121a8 <SE_USER_CODE_RunMenu+0xd4>)
 8012176:	f001 fccf 	bl	8013b18 <iprintf>
    printf("\tActiveFwSize: %d bytes\r\n", sl_FwInfo.ActiveFwSize);
 801217a:	9903      	ldr	r1, [sp, #12]
 801217c:	480b      	ldr	r0, [pc, #44]	; (80121ac <SE_USER_CODE_RunMenu+0xd8>)
 801217e:	e7d5      	b.n	801212c <SE_USER_CODE_RunMenu+0x58>
    printf("  -- !!Operation failed!! \r\n\n");
 8012180:	480b      	ldr	r0, [pc, #44]	; (80121b0 <SE_USER_CODE_RunMenu+0xdc>)
 8012182:	f001 fd4f 	bl	8013c24 <puts>
}
 8012186:	e7d3      	b.n	8012130 <SE_USER_CODE_RunMenu+0x5c>
 8012188:	40003000 	.word	0x40003000
 801218c:	0012310f 	.word	0x0012310f
 8012190:	0801526a 	.word	0x0801526a
 8012194:	08014ce4 	.word	0x08014ce4
 8012198:	0801549b 	.word	0x0801549b
 801219c:	0013023d 	.word	0x0013023d
 80121a0:	0012e223 	.word	0x0012e223
 80121a4:	080154bf 	.word	0x080154bf
 80121a8:	080154cf 	.word	0x080154cf
 80121ac:	080154e6 	.word	0x080154e6
 80121b0:	08014ef8 	.word	0x08014ef8

080121b4 <NMI_Handler>:
  * @retval None
  */
void NMI_Handler(void)
{
  /* Go to infinite loop when NMI exception occurs */
  while (1)
 80121b4:	e7fe      	b.n	80121b4 <NMI_Handler>

080121b6 <HardFault_Handler>:
  * @retval None
  */
void HardFault_Handler(void)
{
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 80121b6:	e7fe      	b.n	80121b6 <HardFault_Handler>

080121b8 <MemManage_Handler>:
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
  HAL_NVIC_SystemReset();
 80121b8:	f000 bce6 	b.w	8012b88 <HAL_NVIC_SystemReset>

080121bc <BusFault_Handler>:
  * @retval None
  */
void BusFault_Handler(void)
{
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 80121bc:	e7fe      	b.n	80121bc <BusFault_Handler>

080121be <UsageFault_Handler>:
  * @retval None
  */
void UsageFault_Handler(void)
{
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 80121be:	e7fe      	b.n	80121be <UsageFault_Handler>

080121c0 <DebugMon_Handler>:
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
}
 80121c0:	4770      	bx	lr

080121c2 <PendSV_Handler>:
 80121c2:	4770      	bx	lr

080121c4 <SysTick_Handler>:
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
  HAL_IncTick();
 80121c4:	f000 bc68 	b.w	8012a98 <HAL_IncTick>

080121c8 <FLASH_IRQHandler>:
  * @param  None
  * @retval None
  */
void FLASH_IRQHandler(void)
{
  HAL_FLASH_IRQHandler();
 80121c8:	f000 bd94 	b.w	8012cf4 <HAL_FLASH_IRQHandler>

080121cc <TAMP_STAMP_IRQHandler>:
  * @param  None
  * @retval None
  */
void TAMP_STAMP_IRQHandler(void)
{
  RtcHandle.Instance = RTC;
 80121cc:	4802      	ldr	r0, [pc, #8]	; (80121d8 <TAMP_STAMP_IRQHandler+0xc>)
 80121ce:	4b03      	ldr	r3, [pc, #12]	; (80121dc <TAMP_STAMP_IRQHandler+0x10>)
 80121d0:	6003      	str	r3, [r0, #0]
  HAL_RTCEx_TamperTimeStampIRQHandler(&RtcHandle);
 80121d2:	f001 bab9 	b.w	8013748 <HAL_RTCEx_TamperTimeStampIRQHandler>
 80121d6:	bf00      	nop
 80121d8:	20001150 	.word	0x20001150
 80121dc:	40002800 	.word	0x40002800

080121e0 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

int _read (int file, char *ptr, int len)
{
 80121e0:	b570      	push	{r4, r5, r6, lr}
 80121e2:	460d      	mov	r5, r1
 80121e4:	4614      	mov	r4, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80121e6:	460e      	mov	r6, r1
 80121e8:	1b73      	subs	r3, r6, r5
 80121ea:	429c      	cmp	r4, r3
 80121ec:	dc01      	bgt.n	80121f2 <_read+0x12>
	{
		*ptr++ = __io_getchar();
	}

return len;
}
 80121ee:	4620      	mov	r0, r4
 80121f0:	bd70      	pop	{r4, r5, r6, pc}
		*ptr++ = __io_getchar();
 80121f2:	f3af 8000 	nop.w
 80121f6:	f806 0b01 	strb.w	r0, [r6], #1
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80121fa:	e7f5      	b.n	80121e8 <_read+0x8>

080121fc <_write>:

int _write(int file, char *ptr, int len)
{
 80121fc:	b570      	push	{r4, r5, r6, lr}
 80121fe:	460d      	mov	r5, r1
 8012200:	4614      	mov	r4, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8012202:	460e      	mov	r6, r1
 8012204:	1b73      	subs	r3, r6, r5
 8012206:	429c      	cmp	r4, r3
 8012208:	dc01      	bgt.n	801220e <_write+0x12>
	{
		__io_putchar(*ptr++);
	}
	return len;
}
 801220a:	4620      	mov	r0, r4
 801220c:	bd70      	pop	{r4, r5, r6, pc}
		__io_putchar(*ptr++);
 801220e:	f816 0b01 	ldrb.w	r0, [r6], #1
 8012212:	f7ff fbc3 	bl	801199c <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8012216:	e7f5      	b.n	8012204 <_write+0x8>

08012218 <_sbrk>:
{
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8012218:	4a0a      	ldr	r2, [pc, #40]	; (8012244 <_sbrk+0x2c>)
 801221a:	6811      	ldr	r1, [r2, #0]
{
 801221c:	b508      	push	{r3, lr}
 801221e:	4603      	mov	r3, r0
	if (heap_end == 0)
 8012220:	b909      	cbnz	r1, 8012226 <_sbrk+0xe>
		heap_end = &end;
 8012222:	4909      	ldr	r1, [pc, #36]	; (8012248 <_sbrk+0x30>)
 8012224:	6011      	str	r1, [r2, #0]

	prev_heap_end = heap_end;
 8012226:	6810      	ldr	r0, [r2, #0]
	if (heap_end + incr > stack_ptr)
 8012228:	4669      	mov	r1, sp
 801222a:	4403      	add	r3, r0
 801222c:	428b      	cmp	r3, r1
 801222e:	d906      	bls.n	801223e <_sbrk+0x26>
	{
//		write(1, "Heap and stack collision\n", 25);
//		abort();
		errno = ENOMEM;
 8012230:	f001 fc32 	bl	8013a98 <__errno>
 8012234:	230c      	movs	r3, #12
 8012236:	6003      	str	r3, [r0, #0]
		return (caddr_t) -1;
 8012238:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
	}

	heap_end += incr;

	return (caddr_t) prev_heap_end;
}
 801223c:	bd08      	pop	{r3, pc}
	heap_end += incr;
 801223e:	6013      	str	r3, [r2, #0]
	return (caddr_t) prev_heap_end;
 8012240:	e7fc      	b.n	801223c <_sbrk+0x24>
 8012242:	bf00      	nop
 8012244:	20001170 	.word	0x20001170
 8012248:	20001df8 	.word	0x20001df8

0801224c <_close>:

int _close(int file)
{
	return -1;
}
 801224c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8012250:	4770      	bx	lr

08012252 <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 8012252:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8012256:	604b      	str	r3, [r1, #4]
	return 0;
}
 8012258:	2000      	movs	r0, #0
 801225a:	4770      	bx	lr

0801225c <_isatty>:

int _isatty(int file)
{
	return 1;
}
 801225c:	2001      	movs	r0, #1
 801225e:	4770      	bx	lr

08012260 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 8012260:	2000      	movs	r0, #0
 8012262:	4770      	bx	lr

08012264 <TEST_PROTECTIONS_CORRUPT_PrintMenu>:
  * @brief  Display the corruption menu
  * @param  None.
  * @retval None.
  */
static void TEST_PROTECTIONS_CORRUPT_PrintMenu(void)
{
 8012264:	b508      	push	{r3, lr}
  printf("\r\n============  Test: CORRUPT ACTIVE IMAGE ============\r\n\n");
 8012266:	480a      	ldr	r0, [pc, #40]	; (8012290 <TEST_PROTECTIONS_CORRUPT_PrintMenu+0x2c>)
 8012268:	f001 fcdc 	bl	8013c24 <puts>
  printf("  Corrupt image from SLOT_ACTIVE_1 ---------------------- 1\r\n\n");
 801226c:	4809      	ldr	r0, [pc, #36]	; (8012294 <TEST_PROTECTIONS_CORRUPT_PrintMenu+0x30>)
 801226e:	f001 fcd9 	bl	8013c24 <puts>
  printf("  Corrupt image from SLOT_ACTIVE_2 ---------------------- 2\r\n\n");
 8012272:	4809      	ldr	r0, [pc, #36]	; (8012298 <TEST_PROTECTIONS_CORRUPT_PrintMenu+0x34>)
 8012274:	f001 fcd6 	bl	8013c24 <puts>
  printf("  Corrupt image from SLOT_ACTIVE_3 ---------------------- 3\r\n\n");
 8012278:	4808      	ldr	r0, [pc, #32]	; (801229c <TEST_PROTECTIONS_CORRUPT_PrintMenu+0x38>)
 801227a:	f001 fcd3 	bl	8013c24 <puts>
  printf("  Previous Menu ----------------------------------------- x\r\n\n");
 801227e:	4808      	ldr	r0, [pc, #32]	; (80122a0 <TEST_PROTECTIONS_CORRUPT_PrintMenu+0x3c>)
 8012280:	f001 fcd0 	bl	8013c24 <puts>
  printf("  Selection :\r\n\n");
}
 8012284:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  printf("  Selection :\r\n\n");
 8012288:	4806      	ldr	r0, [pc, #24]	; (80122a4 <TEST_PROTECTIONS_CORRUPT_PrintMenu+0x40>)
 801228a:	f001 bccb 	b.w	8013c24 <puts>
 801228e:	bf00      	nop
 8012290:	08015500 	.word	0x08015500
 8012294:	0801553a 	.word	0x0801553a
 8012298:	08015578 	.word	0x08015578
 801229c:	080155b6 	.word	0x080155b6
 80122a0:	08015047 	.word	0x08015047
 80122a4:	08015085 	.word	0x08015085

080122a8 <TEST_PROTECTIONS_PrintTestingMenu>:
{
 80122a8:	b508      	push	{r3, lr}
  printf("\r\n=================== Test Menu ============================\r\n\n");
 80122aa:	4810      	ldr	r0, [pc, #64]	; (80122ec <TEST_PROTECTIONS_PrintTestingMenu+0x44>)
 80122ac:	f001 fcba 	bl	8013c24 <puts>
  printf("  Test : CORRUPT ACTIVE IMAGE --------------------------- 1\r\n\n");
 80122b0:	480f      	ldr	r0, [pc, #60]	; (80122f0 <TEST_PROTECTIONS_PrintTestingMenu+0x48>)
 80122b2:	f001 fcb7 	bl	8013c24 <puts>
  printf("  Test SE isolation - CODE ------------------------------ 2\r\n\n");
 80122b6:	480f      	ldr	r0, [pc, #60]	; (80122f4 <TEST_PROTECTIONS_PrintTestingMenu+0x4c>)
 80122b8:	f001 fcb4 	bl	8013c24 <puts>
  printf("  Test SE isolation - VDATA ----------------------------- 3\r\n\n");
 80122bc:	480e      	ldr	r0, [pc, #56]	; (80122f8 <TEST_PROTECTIONS_PrintTestingMenu+0x50>)
 80122be:	f001 fcb1 	bl	8013c24 <puts>
  printf("  Test Protection: PCROP -------------------------------- 4\r\n\n");
 80122c2:	480e      	ldr	r0, [pc, #56]	; (80122fc <TEST_PROTECTIONS_PrintTestingMenu+0x54>)
 80122c4:	f001 fcae 	bl	8013c24 <puts>
  printf("  Test Protection: WRP ---------------------------------- 5\r\n\n");
 80122c8:	480d      	ldr	r0, [pc, #52]	; (8012300 <TEST_PROTECTIONS_PrintTestingMenu+0x58>)
 80122ca:	f001 fcab 	bl	8013c24 <puts>
  printf("  Test Protection: IWDG --------------------------------- 6\r\n\n");
 80122ce:	480d      	ldr	r0, [pc, #52]	; (8012304 <TEST_PROTECTIONS_PrintTestingMenu+0x5c>)
 80122d0:	f001 fca8 	bl	8013c24 <puts>
  printf("  Test Protection: TAMPER ------------------------------- 7\r\n\n");
 80122d4:	480c      	ldr	r0, [pc, #48]	; (8012308 <TEST_PROTECTIONS_PrintTestingMenu+0x60>)
 80122d6:	f001 fca5 	bl	8013c24 <puts>
  printf("  Previous Menu ----------------------------------------- x\r\n\n");
 80122da:	480c      	ldr	r0, [pc, #48]	; (801230c <TEST_PROTECTIONS_PrintTestingMenu+0x64>)
 80122dc:	f001 fca2 	bl	8013c24 <puts>
}
 80122e0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  printf("  Selection :\r\n\n");
 80122e4:	480a      	ldr	r0, [pc, #40]	; (8012310 <TEST_PROTECTIONS_PrintTestingMenu+0x68>)
 80122e6:	f001 bc9d 	b.w	8013c24 <puts>
 80122ea:	bf00      	nop
 80122ec:	080155f4 	.word	0x080155f4
 80122f0:	08015633 	.word	0x08015633
 80122f4:	08015671 	.word	0x08015671
 80122f8:	080156af 	.word	0x080156af
 80122fc:	080156ed 	.word	0x080156ed
 8012300:	0801572b 	.word	0x0801572b
 8012304:	08015769 	.word	0x08015769
 8012308:	080157a7 	.word	0x080157a7
 801230c:	08015047 	.word	0x08015047
 8012310:	08015085 	.word	0x08015085

08012314 <TEST_PROTECTIONS_RunMenu>:
{
 8012314:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012318:	b08a      	sub	sp, #40	; 0x28
  uint8_t key = 0U;
 801231a:	2300      	movs	r3, #0
 801231c:	f88d 3006 	strb.w	r3, [sp, #6]
  TEST_PROTECTIONS_PrintTestingMenu();
 8012320:	f7ff ffc2 	bl	80122a8 <TEST_PROTECTIONS_PrintTestingMenu>
    WRITE_REG(IWDG->KR, IWDG_KEY_RELOAD);
 8012324:	4e8d      	ldr	r6, [pc, #564]	; (801255c <TEST_PROTECTIONS_RunMenu+0x248>)
  * @retval None.
  */
static void TEST_PROTECTIONS_RunTAMPER(void)
{
  uint32_t i = 0U;
  m_uTamperEvent = 0U;
 8012326:	4d8e      	ldr	r5, [pc, #568]	; (8012560 <TEST_PROTECTIONS_RunMenu+0x24c>)
    key = 0U;
 8012328:	2700      	movs	r7, #0
    WRITE_REG(IWDG->KR, IWDG_KEY_RELOAD);
 801232a:	f64a 24aa 	movw	r4, #43690	; 0xaaaa
    key = 0U;
 801232e:	f88d 7006 	strb.w	r7, [sp, #6]
    WRITE_REG(IWDG->KR, IWDG_KEY_RELOAD);
 8012332:	6034      	str	r4, [r6, #0]
    COM_Flush();
 8012334:	f7ff fb2a 	bl	801198c <COM_Flush>
    if (COM_Receive(&key, 1U, RX_TIMEOUT) == HAL_OK)
 8012338:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 801233c:	2101      	movs	r1, #1
 801233e:	f10d 0006 	add.w	r0, sp, #6
 8012342:	f7ff fb1b 	bl	801197c <COM_Receive>
 8012346:	2800      	cmp	r0, #0
 8012348:	d1f1      	bne.n	801232e <TEST_PROTECTIONS_RunMenu+0x1a>
      switch (key)
 801234a:	f89d 3006 	ldrb.w	r3, [sp, #6]
 801234e:	2b37      	cmp	r3, #55	; 0x37
 8012350:	d80a      	bhi.n	8012368 <TEST_PROTECTIONS_RunMenu+0x54>
 8012352:	2b30      	cmp	r3, #48	; 0x30
 8012354:	f240 80fe 	bls.w	8012554 <TEST_PROTECTIONS_RunMenu+0x240>
 8012358:	3b32      	subs	r3, #50	; 0x32
 801235a:	2b05      	cmp	r3, #5
 801235c:	d80c      	bhi.n	8012378 <TEST_PROTECTIONS_RunMenu+0x64>
 801235e:	e8df f003 	tbb	[pc, r3]
 8012362:	7a66      	.short	0x7a66
 8012364:	ccbe8a88 	.word	0xccbe8a88
 8012368:	2b78      	cmp	r3, #120	; 0x78
 801236a:	f040 80f3 	bne.w	8012554 <TEST_PROTECTIONS_RunMenu+0x240>
      TEST_PROTECTIONS_PrintTestingMenu();
 801236e:	f7ff ff9b 	bl	80122a8 <TEST_PROTECTIONS_PrintTestingMenu>
}
 8012372:	b00a      	add	sp, #40	; 0x28
 8012374:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  uint8_t key = 0U;
 8012378:	f88d 0007 	strb.w	r0, [sp, #7]
  TEST_PROTECTIONS_CORRUPT_PrintMenu();
 801237c:	f7ff ff72 	bl	8012264 <TEST_PROTECTIONS_CORRUPT_PrintMenu>
          printf("Invalid Number !\r");
 8012380:	f8df 8270 	ldr.w	r8, [pc, #624]	; 80125f4 <TEST_PROTECTIONS_RunMenu+0x2e0>
    WRITE_REG(IWDG->KR, IWDG_KEY_RELOAD);
 8012384:	f64a 27aa 	movw	r7, #43690	; 0xaaaa
    key = 0U;
 8012388:	2400      	movs	r4, #0
 801238a:	f88d 4007 	strb.w	r4, [sp, #7]
    WRITE_REG(IWDG->KR, IWDG_KEY_RELOAD);
 801238e:	6037      	str	r7, [r6, #0]
    COM_Flush();
 8012390:	f7ff fafc 	bl	801198c <COM_Flush>
    if (COM_Receive(&key, 1U, RX_TIMEOUT) == HAL_OK)
 8012394:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8012398:	2101      	movs	r1, #1
 801239a:	f10d 0007 	add.w	r0, sp, #7
 801239e:	f7ff faed 	bl	801197c <COM_Receive>
 80123a2:	2800      	cmp	r0, #0
 80123a4:	d1f1      	bne.n	801238a <TEST_PROTECTIONS_RunMenu+0x76>
      switch (key)
 80123a6:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80123aa:	2b33      	cmp	r3, #51	; 0x33
 80123ac:	d017      	beq.n	80123de <TEST_PROTECTIONS_RunMenu+0xca>
 80123ae:	d811      	bhi.n	80123d4 <TEST_PROTECTIONS_RunMenu+0xc0>
 80123b0:	2b31      	cmp	r3, #49	; 0x31
 80123b2:	d016      	beq.n	80123e2 <TEST_PROTECTIONS_RunMenu+0xce>
 80123b4:	2b32      	cmp	r3, #50	; 0x32
 80123b6:	d016      	beq.n	80123e6 <TEST_PROTECTIONS_RunMenu+0xd2>
          printf("Invalid Number !\r");
 80123b8:	4640      	mov	r0, r8
 80123ba:	f001 fbad 	bl	8013b18 <iprintf>
    slot_number = 0U;
 80123be:	2100      	movs	r1, #0
        if (SlotStartAdd[slot_number] == 0U)
 80123c0:	4b68      	ldr	r3, [pc, #416]	; (8012564 <TEST_PROTECTIONS_RunMenu+0x250>)
 80123c2:	f853 4021 	ldr.w	r4, [r3, r1, lsl #2]
 80123c6:	b984      	cbnz	r4, 80123ea <TEST_PROTECTIONS_RunMenu+0xd6>
          printf("SLOT_ACTIVE_%d is not configured !\r", slot_number);
 80123c8:	4867      	ldr	r0, [pc, #412]	; (8012568 <TEST_PROTECTIONS_RunMenu+0x254>)
 80123ca:	f001 fba5 	bl	8013b18 <iprintf>
        TEST_PROTECTIONS_CORRUPT_PrintMenu();
 80123ce:	f7ff ff49 	bl	8012264 <TEST_PROTECTIONS_CORRUPT_PrintMenu>
 80123d2:	e7d9      	b.n	8012388 <TEST_PROTECTIONS_RunMenu+0x74>
      switch (key)
 80123d4:	2b78      	cmp	r3, #120	; 0x78
 80123d6:	d1ef      	bne.n	80123b8 <TEST_PROTECTIONS_RunMenu+0xa4>
      TEST_PROTECTIONS_PrintTestingMenu();
 80123d8:	f7ff ff66 	bl	80122a8 <TEST_PROTECTIONS_PrintTestingMenu>
 80123dc:	e7a4      	b.n	8012328 <TEST_PROTECTIONS_RunMenu+0x14>
          slot_number = SLOT_ACTIVE_3;
 80123de:	2103      	movs	r1, #3
 80123e0:	e7ee      	b.n	80123c0 <TEST_PROTECTIONS_RunMenu+0xac>
          slot_number = SLOT_ACTIVE_1;
 80123e2:	2101      	movs	r1, #1
 80123e4:	e7ec      	b.n	80123c0 <TEST_PROTECTIONS_RunMenu+0xac>
      switch (key)
 80123e6:	2102      	movs	r1, #2
 80123e8:	e7ea      	b.n	80123c0 <TEST_PROTECTIONS_RunMenu+0xac>
  uint8_t pattern[TEST_PROTECTIONS_CORRUPT_IMAGE_FLASH_SIZE] = {0};
 80123ea:	2100      	movs	r1, #0
 80123ec:	221c      	movs	r2, #28
 80123ee:	a803      	add	r0, sp, #12
 80123f0:	9102      	str	r1, [sp, #8]
  printf("  -- Erasing 0x%x bytes at address: 0x%x\r\n", TEST_PROTECTIONS_CORRUPT_IMAGE_FLASH_SIZE,
 80123f2:	f504 7400 	add.w	r4, r4, #512	; 0x200
  uint8_t pattern[TEST_PROTECTIONS_CORRUPT_IMAGE_FLASH_SIZE] = {0};
 80123f6:	f001 fb87 	bl	8013b08 <memset>
  printf("  -- Disable MPU protection to be able to erase\r\n");
 80123fa:	485c      	ldr	r0, [pc, #368]	; (801256c <TEST_PROTECTIONS_RunMenu+0x258>)
 80123fc:	f001 fc12 	bl	8013c24 <puts>
  SVC_MPU_Disable();
 8012400:	f7ff fe1e 	bl	8012040 <SVC_MPU_Disable>
  printf("  -- Erasing 0x%x bytes at address: 0x%x\r\n", TEST_PROTECTIONS_CORRUPT_IMAGE_FLASH_SIZE,
 8012404:	4622      	mov	r2, r4
 8012406:	2120      	movs	r1, #32
 8012408:	4859      	ldr	r0, [pc, #356]	; (8012570 <TEST_PROTECTIONS_RunMenu+0x25c>)
 801240a:	f001 fb85 	bl	8013b18 <iprintf>
  printf("  -- At next boot Signature Verification will fail. Download a new FW to restore FW image !!\r\n\n");
 801240e:	4859      	ldr	r0, [pc, #356]	; (8012574 <TEST_PROTECTIONS_RunMenu+0x260>)
 8012410:	f001 fc08 	bl	8013c24 <puts>
  ret = FLASH_If_Write((void *)(TEST_PROTECTIONS_CORRUPT_IMAGE_FLASH_ADDRESS(slot_number)), (void *) &pattern,
 8012414:	2220      	movs	r2, #32
 8012416:	a902      	add	r1, sp, #8
 8012418:	4620      	mov	r0, r4
 801241a:	f7ff fbc5 	bl	8011ba8 <FLASH_If_Write>
  if (ret == HAL_OK)
 801241e:	b910      	cbnz	r0, 8012426 <TEST_PROTECTIONS_RunMenu+0x112>
    SVC_NVIC_SystemReset();
 8012420:	f7ff fe0a 	bl	8012038 <SVC_NVIC_SystemReset>
 8012424:	e7d3      	b.n	80123ce <TEST_PROTECTIONS_RunMenu+0xba>
    printf("-- !! HAL_FLASH_ERROR_CORRUPT_IMAGE: erasing failure ...\r\n\n");
 8012426:	4854      	ldr	r0, [pc, #336]	; (8012578 <TEST_PROTECTIONS_RunMenu+0x264>)
 8012428:	f001 fbfc 	bl	8013c24 <puts>
}
 801242c:	e7cf      	b.n	80123ce <TEST_PROTECTIONS_RunMenu+0xba>
  printf("\r\n====== Test Protection: MPU privileged - CODE ===========\r\n\n");
 801242e:	4853      	ldr	r0, [pc, #332]	; (801257c <TEST_PROTECTIONS_RunMenu+0x268>)
 8012430:	f001 fbf8 	bl	8013c24 <puts>
  printf("  -- Reading Key\r\n\n");
 8012434:	4852      	ldr	r0, [pc, #328]	; (8012580 <TEST_PROTECTIONS_RunMenu+0x26c>)
 8012436:	f001 fbf5 	bl	8013c24 <puts>
  SE_ReadKey(&(key[0U]));
 801243a:	4b52      	ldr	r3, [pc, #328]	; (8012584 <TEST_PROTECTIONS_RunMenu+0x270>)
 801243c:	a802      	add	r0, sp, #8
 801243e:	4798      	blx	r3
  key[16U] = '\0';
 8012440:	2300      	movs	r3, #0
  printf("  -- Key: %s \r\n\n", key);
 8012442:	4851      	ldr	r0, [pc, #324]	; (8012588 <TEST_PROTECTIONS_RunMenu+0x274>)
  key[16U] = '\0';
 8012444:	f88d 3018 	strb.w	r3, [sp, #24]
  printf("  -- Key: %s \r\n\n", key);
 8012448:	a902      	add	r1, sp, #8
 801244a:	f001 fb65 	bl	8013b18 <iprintf>
  printf("  -- !! MPU privileged CODE protection is NOT ENABLED !!\r\n\n");
 801244e:	484f      	ldr	r0, [pc, #316]	; (801258c <TEST_PROTECTIONS_RunMenu+0x278>)
  printf("  -- !! MPU privileged VDATA protection is NOT ENABLED !!\r\n\n");
 8012450:	f001 fbe8 	bl	8013c24 <puts>
}
 8012454:	e7c0      	b.n	80123d8 <TEST_PROTECTIONS_RunMenu+0xc4>
  printf("\r\n====== Test Protection: MPU privileged - VDATA ==========\r\n\n");
 8012456:	484e      	ldr	r0, [pc, #312]	; (8012590 <TEST_PROTECTIONS_RunMenu+0x27c>)
 8012458:	f001 fbe4 	bl	8013c24 <puts>
  printf("  -- Reading address: 0x%x\r\n\n", TEST_PROTECTIONS_SE_ISOLATED_VDATA_SRAM_ADDRESS);
 801245c:	494d      	ldr	r1, [pc, #308]	; (8012594 <TEST_PROTECTIONS_RunMenu+0x280>)
 801245e:	484e      	ldr	r0, [pc, #312]	; (8012598 <TEST_PROTECTIONS_RunMenu+0x284>)
 8012460:	f001 fb5a 	bl	8013b18 <iprintf>
  printf("  -- Address: 0x%x = %d\r\n\n", TEST_PROTECTIONS_SE_ISOLATED_VDATA_SRAM_ADDRESS, u_read_fw_vdata);
 8012464:	494b      	ldr	r1, [pc, #300]	; (8012594 <TEST_PROTECTIONS_RunMenu+0x280>)
 8012466:	484d      	ldr	r0, [pc, #308]	; (801259c <TEST_PROTECTIONS_RunMenu+0x288>)
 8012468:	680a      	ldr	r2, [r1, #0]
 801246a:	f001 fb55 	bl	8013b18 <iprintf>
  printf("  -- !! MPU privileged VDATA protection is NOT ENABLED !!\r\n\n");
 801246e:	484c      	ldr	r0, [pc, #304]	; (80125a0 <TEST_PROTECTIONS_RunMenu+0x28c>)
 8012470:	e7ee      	b.n	8012450 <TEST_PROTECTIONS_RunMenu+0x13c>
  printf("  -- !! PCROP protection is NOT AVAILABLE on this board !!\r\n\n");
 8012472:	484c      	ldr	r0, [pc, #304]	; (80125a4 <TEST_PROTECTIONS_RunMenu+0x290>)
 8012474:	e7ec      	b.n	8012450 <TEST_PROTECTIONS_RunMenu+0x13c>
  printf("\r\n====== Test Protection: WRP ===========================\r\n\n");
 8012476:	484c      	ldr	r0, [pc, #304]	; (80125a8 <TEST_PROTECTIONS_RunMenu+0x294>)
 8012478:	f001 fbd4 	bl	8013c24 <puts>
  printf("  -- Reading 0x%x bytes at address: 0x%x (for backup)\r\n\n", TEST_PROTECTIONS_WRP_FLASH_SIZE,
 801247c:	4a4b      	ldr	r2, [pc, #300]	; (80125ac <TEST_PROTECTIONS_RunMenu+0x298>)
 801247e:	484c      	ldr	r0, [pc, #304]	; (80125b0 <TEST_PROTECTIONS_RunMenu+0x29c>)
 8012480:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8012484:	f001 fb48 	bl	8013b18 <iprintf>
  for (uint32_t i = 0U; i < TEST_PROTECTIONS_WRP_FLASH_SIZE; i++)
 8012488:	4b35      	ldr	r3, [pc, #212]	; (8012560 <TEST_PROTECTIONS_RunMenu+0x24c>)
  printf("  -- Reading 0x%x bytes at address: 0x%x (for backup)\r\n\n", TEST_PROTECTIONS_WRP_FLASH_SIZE,
 801248a:	4a48      	ldr	r2, [pc, #288]	; (80125ac <TEST_PROTECTIONS_RunMenu+0x298>)
  for (uint32_t i = 0U; i < TEST_PROTECTIONS_WRP_FLASH_SIZE; i++)
 801248c:	2400      	movs	r4, #0
 801248e:	3401      	adds	r4, #1
  uRead_WRP[i] = *((uint8_t *)(address + i));
 8012490:	f812 1b01 	ldrb.w	r1, [r2], #1
 8012494:	f803 1b01 	strb.w	r1, [r3], #1
  for (uint32_t i = 0U; i < TEST_PROTECTIONS_WRP_FLASH_SIZE; i++)
 8012498:	f5b4 6f00 	cmp.w	r4, #2048	; 0x800
 801249c:	d1f7      	bne.n	801248e <TEST_PROTECTIONS_RunMenu+0x17a>
  printf("  -- Erasing 0x%x bytes at address: 0x%x\r\n\n", TEST_PROTECTIONS_WRP_FLASH_SIZE,
 801249e:	4621      	mov	r1, r4
 80124a0:	4a42      	ldr	r2, [pc, #264]	; (80125ac <TEST_PROTECTIONS_RunMenu+0x298>)
 80124a2:	4844      	ldr	r0, [pc, #272]	; (80125b4 <TEST_PROTECTIONS_RunMenu+0x2a0>)
 80124a4:	f001 fb38 	bl	8013b18 <iprintf>
  if (FLASH_If_Erase_Size((void *)address, TEST_PROTECTIONS_WRP_FLASH_SIZE) != HAL_OK)
 80124a8:	4840      	ldr	r0, [pc, #256]	; (80125ac <TEST_PROTECTIONS_RunMenu+0x298>)
 80124aa:	4621      	mov	r1, r4
 80124ac:	f7ff fb50 	bl	8011b50 <FLASH_If_Erase_Size>
 80124b0:	b128      	cbz	r0, 80124be <TEST_PROTECTIONS_RunMenu+0x1aa>
    if ((HAL_FLASH_GetError() & HAL_FLASH_ERROR_WRP) != 0U)
 80124b2:	f000 fc9d 	bl	8012df0 <HAL_FLASH_GetError>
 80124b6:	06c3      	lsls	r3, r0, #27
 80124b8:	d58e      	bpl.n	80123d8 <TEST_PROTECTIONS_RunMenu+0xc4>
      printf("-- !! HAL_FLASH_ERROR_WRP: FLASH Write protected error flag !!\r\n\n");
 80124ba:	483f      	ldr	r0, [pc, #252]	; (80125b8 <TEST_PROTECTIONS_RunMenu+0x2a4>)
 80124bc:	e7c8      	b.n	8012450 <TEST_PROTECTIONS_RunMenu+0x13c>
    if (FLASH_If_Write((void *)address, uRead_WRP, TEST_PROTECTIONS_WRP_FLASH_SIZE) != HAL_OK)
 80124be:	483b      	ldr	r0, [pc, #236]	; (80125ac <TEST_PROTECTIONS_RunMenu+0x298>)
 80124c0:	4622      	mov	r2, r4
 80124c2:	4629      	mov	r1, r5
 80124c4:	f7ff fb70 	bl	8011ba8 <FLASH_If_Write>
 80124c8:	b118      	cbz	r0, 80124d2 <TEST_PROTECTIONS_RunMenu+0x1be>
      printf("-- !! HAL_FLASH_ERROR: FLASH Write error\r\n\n");
 80124ca:	483c      	ldr	r0, [pc, #240]	; (80125bc <TEST_PROTECTIONS_RunMenu+0x2a8>)
 80124cc:	f001 fbaa 	bl	8013c24 <puts>
      if ((HAL_FLASH_GetError() & HAL_FLASH_ERROR_WRP) != 0U)
 80124d0:	e7ef      	b.n	80124b2 <TEST_PROTECTIONS_RunMenu+0x19e>
      printf("  -- Written successfully at address: 0x%x\r\n\n", TEST_PROTECTIONS_WRP_FLASH_ADDRESS);
 80124d2:	4936      	ldr	r1, [pc, #216]	; (80125ac <TEST_PROTECTIONS_RunMenu+0x298>)
 80124d4:	483a      	ldr	r0, [pc, #232]	; (80125c0 <TEST_PROTECTIONS_RunMenu+0x2ac>)
 80124d6:	f001 fb1f 	bl	8013b18 <iprintf>
      printf("  -- !! WRP protection is NOT ENABLED !!\r\n\n");
 80124da:	483a      	ldr	r0, [pc, #232]	; (80125c4 <TEST_PROTECTIONS_RunMenu+0x2b0>)
 80124dc:	e7b8      	b.n	8012450 <TEST_PROTECTIONS_RunMenu+0x13c>
  * @param  None.
  * @retval None.
  */
static void TEST_PROTECTIONS_RunIWDG(void)
{
  printf("\r\n====== Test Protection: IWDG ===========================\r\n\n");
 80124de:	483a      	ldr	r0, [pc, #232]	; (80125c8 <TEST_PROTECTIONS_RunMenu+0x2b4>)
 80124e0:	f001 fba0 	bl	8013c24 <puts>

  /* Wait for TEST_PROTECTIONS_IWDG_DELAY*/
  printf("  -- Waiting %d (ms). Should reset if IWDG is enabled. \r\n\n", TEST_PROTECTIONS_IWDG_DELAY);
 80124e4:	f44f 517a 	mov.w	r1, #16000	; 0x3e80
 80124e8:	4838      	ldr	r0, [pc, #224]	; (80125cc <TEST_PROTECTIONS_RunMenu+0x2b8>)
 80124ea:	f001 fb15 	bl	8013b18 <iprintf>

  HAL_Delay(TEST_PROTECTIONS_IWDG_DELAY);
 80124ee:	f44f 507a 	mov.w	r0, #16000	; 0x3e80
 80124f2:	f000 fae3 	bl	8012abc <HAL_Delay>

  /* No Reset means IWDG was not enabled*/
  printf("  -- !! IWDG protection is NOT ENABLED !!\r\n\n");
 80124f6:	4836      	ldr	r0, [pc, #216]	; (80125d0 <TEST_PROTECTIONS_RunMenu+0x2bc>)
 80124f8:	e7aa      	b.n	8012450 <TEST_PROTECTIONS_RunMenu+0x13c>
  m_uTamperEvent = 0U;
 80124fa:	f8c5 0800 	str.w	r0, [r5, #2048]	; 0x800
  printf("\r\n====== Test Protection: TAMPER ========================\r\n\n");
 80124fe:	4835      	ldr	r0, [pc, #212]	; (80125d4 <TEST_PROTECTIONS_RunMenu+0x2c0>)
 8012500:	f001 fb90 	bl	8013c24 <puts>
  printf("  -- Pull PC13 (CN8.8) to GND \r\n\n");
 8012504:	4834      	ldr	r0, [pc, #208]	; (80125d8 <TEST_PROTECTIONS_RunMenu+0x2c4>)
 8012506:	f001 fb8d 	bl	8013c24 <puts>
  printf("  -- -- Note: sometimes it may be enough to put your finger close to PC13 (CN8.8)\r\n\n");
 801250a:	4834      	ldr	r0, [pc, #208]	; (80125dc <TEST_PROTECTIONS_RunMenu+0x2c8>)
 801250c:	f001 fb8a 	bl	8013c24 <puts>
  printf("  -- Should reset if TAMPER is enabled. \r\n\n");
 8012510:	4833      	ldr	r0, [pc, #204]	; (80125e0 <TEST_PROTECTIONS_RunMenu+0x2cc>)
 8012512:	f001 fb87 	bl	8013c24 <puts>
  printf("  Waiting for 10 seconds...\r\n\n")  ;
 8012516:	4833      	ldr	r0, [pc, #204]	; (80125e4 <TEST_PROTECTIONS_RunMenu+0x2d0>)
 8012518:	f001 fb84 	bl	8013c24 <puts>
 801251c:	240a      	movs	r4, #10
    WRITE_REG(IWDG->KR, IWDG_KEY_RELOAD);
 801251e:	f64a 27aa 	movw	r7, #43690	; 0xaaaa
  while ((i < TEST_PROTECTIONS_TAMPER_DELAY) && (m_uTamperEvent == 0U))
 8012522:	f8d5 3800 	ldr.w	r3, [r5, #2048]	; 0x800
 8012526:	b12b      	cbz	r3, 8012534 <TEST_PROTECTIONS_RunMenu+0x220>
    printf("\r\n\n  -- TAMPER Event detected!!\r\n\n  -- System reset requested!!!\r\n\n");
 8012528:	482f      	ldr	r0, [pc, #188]	; (80125e8 <TEST_PROTECTIONS_RunMenu+0x2d4>)
 801252a:	f001 fb7b 	bl	8013c24 <puts>
    SVC_NVIC_SystemReset();
 801252e:	f7ff fd83 	bl	8012038 <SVC_NVIC_SystemReset>
 8012532:	e751      	b.n	80123d8 <TEST_PROTECTIONS_RunMenu+0xc4>
    WRITE_REG(IWDG->KR, IWDG_KEY_RELOAD);
 8012534:	6037      	str	r7, [r6, #0]
    HAL_Delay(1000U);
 8012536:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 801253a:	f000 fabf 	bl	8012abc <HAL_Delay>
  while ((i < TEST_PROTECTIONS_TAMPER_DELAY) && (m_uTamperEvent == 0U))
 801253e:	3c01      	subs	r4, #1
 8012540:	d1ef      	bne.n	8012522 <TEST_PROTECTIONS_RunMenu+0x20e>
  if (m_uTamperEvent == 0U)
 8012542:	f8d5 3800 	ldr.w	r3, [r5, #2048]	; 0x800
 8012546:	2b00      	cmp	r3, #0
 8012548:	d1ee      	bne.n	8012528 <TEST_PROTECTIONS_RunMenu+0x214>
    printf("\r\n\n  -- Waited 10 seconds, if you have connected TAMPER pin to GND it means TAMPER protection ");
 801254a:	4828      	ldr	r0, [pc, #160]	; (80125ec <TEST_PROTECTIONS_RunMenu+0x2d8>)
 801254c:	f001 fae4 	bl	8013b18 <iprintf>
    printf("is NOT ENABLED !! \r\n\n");
 8012550:	4827      	ldr	r0, [pc, #156]	; (80125f0 <TEST_PROTECTIONS_RunMenu+0x2dc>)
 8012552:	e77d      	b.n	8012450 <TEST_PROTECTIONS_RunMenu+0x13c>
          printf("Invalid Number !\r");
 8012554:	4827      	ldr	r0, [pc, #156]	; (80125f4 <TEST_PROTECTIONS_RunMenu+0x2e0>)
 8012556:	f001 fadf 	bl	8013b18 <iprintf>
          break;
 801255a:	e73d      	b.n	80123d8 <TEST_PROTECTIONS_RunMenu+0xc4>
 801255c:	40003000 	.word	0x40003000
 8012560:	20001178 	.word	0x20001178
 8012564:	08014ce4 	.word	0x08014ce4
 8012568:	0801549b 	.word	0x0801549b
 801256c:	080157e5 	.word	0x080157e5
 8012570:	08015816 	.word	0x08015816
 8012574:	08015841 	.word	0x08015841
 8012578:	080158a0 	.word	0x080158a0
 801257c:	080158db 	.word	0x080158db
 8012580:	08015919 	.word	0x08015919
 8012584:	08000401 	.word	0x08000401
 8012588:	0801592c 	.word	0x0801592c
 801258c:	0801593d 	.word	0x0801593d
 8012590:	08015978 	.word	0x08015978
 8012594:	20000000 	.word	0x20000000
 8012598:	080159b6 	.word	0x080159b6
 801259c:	080159d4 	.word	0x080159d4
 80125a0:	080159ef 	.word	0x080159ef
 80125a4:	08015a2b 	.word	0x08015a2b
 80125a8:	08015a68 	.word	0x08015a68
 80125ac:	08006200 	.word	0x08006200
 80125b0:	08015aa4 	.word	0x08015aa4
 80125b4:	08015add 	.word	0x08015add
 80125b8:	08015b09 	.word	0x08015b09
 80125bc:	08015b4a 	.word	0x08015b4a
 80125c0:	08015b75 	.word	0x08015b75
 80125c4:	08015ba3 	.word	0x08015ba3
 80125c8:	08015bce 	.word	0x08015bce
 80125cc:	08015c0b 	.word	0x08015c0b
 80125d0:	08015c46 	.word	0x08015c46
 80125d4:	08015c72 	.word	0x08015c72
 80125d8:	08015cae 	.word	0x08015cae
 80125dc:	08015ccf 	.word	0x08015ccf
 80125e0:	08015d23 	.word	0x08015d23
 80125e4:	08015d4e 	.word	0x08015d4e
 80125e8:	08015de0 	.word	0x08015de0
 80125ec:	08015d6c 	.word	0x08015d6c
 80125f0:	08015dcb 	.word	0x08015dcb
 80125f4:	0801526a 	.word	0x0801526a

080125f8 <HAL_RTCEx_Tamper1EventCallback>:
  * @retval None
  */
void CALLBACK_Antitamper(void)
{
  /*Set tamper event variable*/
  m_uTamperEvent = 1U;
 80125f8:	4b02      	ldr	r3, [pc, #8]	; (8012604 <HAL_RTCEx_Tamper1EventCallback+0xc>)
 80125fa:	2201      	movs	r2, #1
 80125fc:	f8c3 2800 	str.w	r2, [r3, #2048]	; 0x800
}
 8012600:	4770      	bx	lr
 8012602:	bf00      	nop
 8012604:	20001178 	.word	0x20001178

08012608 <Ymodem_Init>:
  * @param None.
  * @retval None.
  */
void Ymodem_Init(void)
{
}
 8012608:	4770      	bx	lr
	...

0801260c <Ymodem_Receive>:
  * @param  puSize The uSize of the file.
  * @param  uFlashDestination where the file has to be downloaded.
  * @retval COM_StatusTypeDef result of reception/programming
  */
COM_StatusTypeDef Ymodem_Receive(uint32_t *puSize, uint32_t uFlashDestination, YMODEM_CallbacksTypeDef *appCb)
{
 801260c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012610:	b08b      	sub	sp, #44	; 0x2c
  uint32_t session_done = 0U;
  uint32_t file_done;
  uint32_t errors = 0U;
  uint32_t session_begin = 0U;
  uint32_t ramsource;
  uint32_t filesize = 0U;
 8012612:	2300      	movs	r3, #0
    *pData = char1;
 8012614:	f8df 82b4 	ldr.w	r8, [pc, #692]	; 80128cc <Ymodem_Receive+0x2c0>
{
 8012618:	9001      	str	r0, [sp, #4]
 801261a:	468a      	mov	sl, r1
 801261c:	4691      	mov	r9, r2
  uint32_t filesize = 0U;
 801261e:	9304      	str	r3, [sp, #16]
  uint32_t session_begin = 0U;
 8012620:	469b      	mov	fp, r3

  while ((session_done == 0U) && (e_result == COM_OK))
  {
    packets_received = 0U;
    file_done = 0U;
    while ((file_done == 0U) && (e_result == COM_OK))
 8012622:	2700      	movs	r7, #0
    {
      switch (ReceivePacket(m_aPacketData, &packet_length, DOWNLOAD_TIMEOUT))
      {
        case HAL_OK:
          errors = 0U;
 8012624:	2600      	movs	r6, #0
    while ((file_done == 0U) && (e_result == COM_OK))
 8012626:	e000      	b.n	801262a <Ymodem_Receive+0x1e>
 8012628:	4626      	mov	r6, r4
  WRITE_REG(IWDG->KR, IWDG_KEY_RELOAD);
 801262a:	4ba3      	ldr	r3, [pc, #652]	; (80128b8 <Ymodem_Receive+0x2ac>)
 801262c:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 8012630:	601a      	str	r2, [r3, #0]
  status = (HAL_StatusTypeDef)COM_Receive(&char1, 1, uTimeout);
 8012632:	2101      	movs	r1, #1
 8012634:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8012638:	f10d 000f 	add.w	r0, sp, #15
 801263c:	f7ff f99e 	bl	801197c <COM_Receive>
 8012640:	4604      	mov	r4, r0
 8012642:	4605      	mov	r5, r0
  if (status == HAL_OK)
 8012644:	2800      	cmp	r0, #0
 8012646:	f040 80ce 	bne.w	80127e6 <Ymodem_Receive+0x1da>
    switch (char1)
 801264a:	f89d 300f 	ldrb.w	r3, [sp, #15]
 801264e:	2b18      	cmp	r3, #24
 8012650:	f000 80a1 	beq.w	8012796 <Ymodem_Receive+0x18a>
 8012654:	d80b      	bhi.n	801266e <Ymodem_Receive+0x62>
 8012656:	2b02      	cmp	r3, #2
 8012658:	f000 80bd 	beq.w	80127d6 <Ymodem_Receive+0x1ca>
 801265c:	2b04      	cmp	r3, #4
 801265e:	d010      	beq.n	8012682 <Ymodem_Receive+0x76>
 8012660:	2b01      	cmp	r3, #1
 8012662:	bf14      	ite	ne
 8012664:	2500      	movne	r5, #0
 8012666:	2580      	moveq	r5, #128	; 0x80
          packet_size = 2U;                               /* specific packet_size to indicate transmission aborted */
 8012668:	bf18      	it	ne
 801266a:	2401      	movne	r4, #1
 801266c:	e009      	b.n	8012682 <Ymodem_Receive+0x76>
    switch (char1)
 801266e:	2b61      	cmp	r3, #97	; 0x61
 8012670:	f000 80b4 	beq.w	80127dc <Ymodem_Receive+0x1d0>
 8012674:	2b72      	cmp	r3, #114	; 0x72
 8012676:	f000 809e 	beq.w	80127b6 <Ymodem_Receive+0x1aa>
        status = HAL_BUSY;
 801267a:	2b41      	cmp	r3, #65	; 0x41
 801267c:	bf14      	ite	ne
 801267e:	2401      	movne	r4, #1
 8012680:	2402      	moveq	r4, #2
    *pData = char1;
 8012682:	f89d 300f 	ldrb.w	r3, [sp, #15]
 8012686:	f888 3000 	strb.w	r3, [r8]
    if (packet_size >= PACKET_SIZE)
 801268a:	2d7f      	cmp	r5, #127	; 0x7f
 801268c:	f240 80aa 	bls.w	80127e4 <Ymodem_Receive+0x1d8>
      status = COM_Receive(&pData[PACKET_NUMBER_INDEX], packet_size + PACKET_OVERHEAD_SIZE, uTimeout);
 8012690:	b2ab      	uxth	r3, r5
 8012692:	488a      	ldr	r0, [pc, #552]	; (80128bc <Ymodem_Receive+0x2b0>)
 8012694:	9300      	str	r3, [sp, #0]
 8012696:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 801269a:	1d29      	adds	r1, r5, #4
 801269c:	f7ff f96e 	bl	801197c <COM_Receive>
      if (status == HAL_OK)
 80126a0:	4604      	mov	r4, r0
 80126a2:	2800      	cmp	r0, #0
 80126a4:	f040 809f 	bne.w	80127e6 <Ymodem_Receive+0x1da>
        if (pData[PACKET_NUMBER_INDEX] != ((pData[PACKET_CNUMBER_INDEX]) ^ NEGATIVE_BYTE))
 80126a8:	f898 2003 	ldrb.w	r2, [r8, #3]
 80126ac:	f898 1002 	ldrb.w	r1, [r8, #2]
 80126b0:	9b00      	ldr	r3, [sp, #0]
 80126b2:	43d2      	mvns	r2, r2
 80126b4:	b2d2      	uxtb	r2, r2
 80126b6:	4291      	cmp	r1, r2
 80126b8:	f040 8097 	bne.w	80127ea <Ymodem_Receive+0x1de>
          crc = pData[ packet_size + PACKET_DATA_INDEX ] << 8U;
 80126bc:	eb08 0205 	add.w	r2, r8, r5
 80126c0:	487f      	ldr	r0, [pc, #508]	; (80128c0 <Ymodem_Receive+0x2b4>)
 80126c2:	7911      	ldrb	r1, [r2, #4]
          crc += pData[ packet_size + PACKET_DATA_INDEX + 1U ];
 80126c4:	7952      	ldrb	r2, [r2, #5]
 80126c6:	eb02 2e01 	add.w	lr, r2, r1, lsl #8
      crc = crc_update(crc, *pdata & i);
 80126ca:	2208      	movs	r2, #8
 80126cc:	f810 cb01 	ldrb.w	ip, [r0], #1
 80126d0:	9200      	str	r2, [sp, #0]
    for (i = 0x80; i; i >>= 1)
 80126d2:	2280      	movs	r2, #128	; 0x80
  uint16_t xor = crc_in >> 15;
 80126d4:	0be1      	lsrs	r1, r4, #15
  uint16_t out = crc_in << 1;
 80126d6:	0064      	lsls	r4, r4, #1
 80126d8:	b2a4      	uxth	r4, r4
  if (incr)
 80126da:	ea1c 0f02 	tst.w	ip, r2
    out++;
 80126de:	bf1c      	itt	ne
 80126e0:	3401      	addne	r4, #1
 80126e2:	b2a4      	uxthne	r4, r4
  if (xor)
 80126e4:	b119      	cbz	r1, 80126ee <Ymodem_Receive+0xe2>
    out ^= 0x1021;
 80126e6:	f484 5481 	eor.w	r4, r4, #4128	; 0x1020
 80126ea:	f084 0401 	eor.w	r4, r4, #1
    for (i = 0x80; i; i >>= 1)
 80126ee:	9900      	ldr	r1, [sp, #0]
 80126f0:	3901      	subs	r1, #1
 80126f2:	ea4f 0252 	mov.w	r2, r2, lsr #1
 80126f6:	9100      	str	r1, [sp, #0]
 80126f8:	d1ec      	bne.n	80126d4 <Ymodem_Receive+0xc8>
  for (crc = 0; size > 0; size--, pdata++)
 80126fa:	3b01      	subs	r3, #1
 80126fc:	b29b      	uxth	r3, r3
 80126fe:	2b00      	cmp	r3, #0
 8012700:	d1e3      	bne.n	80126ca <Ymodem_Receive+0xbe>
 8012702:	2310      	movs	r3, #16
    out ^= 0x1021;
 8012704:	f241 0221 	movw	r2, #4129	; 0x1021
  uint16_t xor = crc_in >> 15;
 8012708:	0be1      	lsrs	r1, r4, #15
  uint16_t out = crc_in << 1;
 801270a:	0064      	lsls	r4, r4, #1
 801270c:	b2a4      	uxth	r4, r4
  if (xor)
 801270e:	b101      	cbz	r1, 8012712 <Ymodem_Receive+0x106>
    out ^= 0x1021;
 8012710:	4054      	eors	r4, r2
  for (i = 0; i < 16; i++)
 8012712:	3b01      	subs	r3, #1
 8012714:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
 8012718:	d1f6      	bne.n	8012708 <Ymodem_Receive+0xfc>
          if (crc16(&pData[PACKET_DATA_INDEX], packet_size) != crc)
 801271a:	45a6      	cmp	lr, r4
 801271c:	d165      	bne.n	80127ea <Ymodem_Receive+0x1de>
              *puSize = filesize;
              file_done = 1U;           /* file reception ended */
              break;
            default:
              /* Normal packet */
              if (m_aPacketData[PACKET_NUMBER_INDEX] != (packets_received & 0xff))
 801271e:	f898 2002 	ldrb.w	r2, [r8, #2]
 8012722:	b2fb      	uxtb	r3, r7
 8012724:	429a      	cmp	r2, r3
 8012726:	f47f af7d 	bne.w	8012624 <Ymodem_Receive+0x18>
                /* Serial_PutByte(NAK); */
              }
              else
              {
                /* first packet : header (file name + file size) */
                if (packets_received == 0U)
 801272a:	2f00      	cmp	r7, #0
 801272c:	f040 809c 	bne.w	8012868 <Ymodem_Receive+0x25c>
                {
                  /* File name packet */
                  if (m_aPacketData[PACKET_DATA_INDEX] != 0U)
 8012730:	f898 4004 	ldrb.w	r4, [r8, #4]
 8012734:	2c00      	cmp	r4, #0
 8012736:	f000 8090 	beq.w	801285a <Ymodem_Receive+0x24e>
 801273a:	4b62      	ldr	r3, [pc, #392]	; (80128c4 <Ymodem_Receive+0x2b8>)
                  {
                    /* File name extraction */
                    i = 0U;
                    file_ptr = m_aPacketData + PACKET_DATA_INDEX;
 801273c:	f2a3 4202 	subw	r2, r3, #1026	; 0x402
                    while ((*file_ptr != 0U) && (i < FILE_NAME_LENGTH))
 8012740:	f812 1b01 	ldrb.w	r1, [r2], #1
 8012744:	b109      	cbz	r1, 801274a <Ymodem_Receive+0x13e>
 8012746:	2f40      	cmp	r7, #64	; 0x40
 8012748:	d16c      	bne.n	8012824 <Ymodem_Receive+0x218>
                    {
                      m_aFileName[i++] = *file_ptr++;
                    }

                    /* File size extraction */
                    m_aFileName[i++] = '\0';
 801274a:	4447      	add	r7, r8
 801274c:	2300      	movs	r3, #0
 801274e:	a905      	add	r1, sp, #20
 8012750:	f887 3406 	strb.w	r3, [r7, #1030]	; 0x406
                    i = 0U;
                    file_ptr ++;
                    while ((*file_ptr != ' ') && (i < FILE_SIZE_LENGTH))
 8012754:	4608      	mov	r0, r1
 8012756:	5cd4      	ldrb	r4, [r2, r3]
 8012758:	2c20      	cmp	r4, #32
 801275a:	d001      	beq.n	8012760 <Ymodem_Receive+0x154>
 801275c:	2b10      	cmp	r3, #16
 801275e:	d165      	bne.n	801282c <Ymodem_Receive+0x220>
                    {
                      file_size[i++] = *file_ptr++;
                    }
                    file_size[i++] = '\0';
 8012760:	3328      	adds	r3, #40	; 0x28
 8012762:	446b      	add	r3, sp
 8012764:	2200      	movs	r2, #0
 8012766:	f803 2c14 	strb.w	r2, [r3, #-20]
                    Str2Int(file_size, &filesize);
 801276a:	a904      	add	r1, sp, #16
 801276c:	f7ff f926 	bl	80119bc <Str2Int>

                    /* Header packet received callback call */
                    if (appCb->Ymodem_HeaderPktRxCpltCallback((uint32_t) filesize) == HAL_OK)
 8012770:	f8d9 3000 	ldr.w	r3, [r9]
 8012774:	9804      	ldr	r0, [sp, #16]
 8012776:	4798      	blx	r3
 8012778:	4606      	mov	r6, r0
 801277a:	2800      	cmp	r0, #0
 801277c:	d15a      	bne.n	8012834 <Ymodem_Receive+0x228>
                    {
                      /* Send acknowledge and next packet requested */
                      Serial_PutByte(ACK);
 801277e:	2006      	movs	r0, #6
 8012780:	f7ff f96e 	bl	8011a60 <Serial_PutByte>
                      COM_Flush();
 8012784:	f7ff f902 	bl	801198c <COM_Flush>
                      Serial_PutByte(CRC16);
 8012788:	2043      	movs	r0, #67	; 0x43
 801278a:	f7ff f969 	bl	8011a60 <Serial_PutByte>
                    COM_Transmit(&tmp, 1U, NAK_TIMEOUT);
                    e_result = COM_ERROR;
                  }
                }
                packets_received ++;
                session_begin = 1U;
 801278e:	2701      	movs	r7, #1
 8012790:	f04f 0b01 	mov.w	fp, #1
 8012794:	e749      	b.n	801262a <Ymodem_Receive+0x1e>
        if ((COM_Receive(&char1, 1U, uTimeout) == HAL_OK) && (char1 == CA))
 8012796:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 801279a:	2101      	movs	r1, #1
 801279c:	f10d 000f 	add.w	r0, sp, #15
 80127a0:	f7ff f8ec 	bl	801197c <COM_Receive>
 80127a4:	4604      	mov	r4, r0
 80127a6:	b9d8      	cbnz	r0, 80127e0 <Ymodem_Receive+0x1d4>
 80127a8:	f89d 300f 	ldrb.w	r3, [sp, #15]
          packet_size = 2U;                               /* specific packet_size to indicate transmission aborted */
 80127ac:	2b18      	cmp	r3, #24
 80127ae:	bf14      	ite	ne
 80127b0:	2500      	movne	r5, #0
 80127b2:	2502      	moveq	r5, #2
 80127b4:	e758      	b.n	8012668 <Ymodem_Receive+0x5c>
        COM_Receive(&char1, 1U, uTimeout);                /* Ymodem startup sequence : rb ==> 0x72 + 0x62 + 0x0D */
 80127b6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80127ba:	2101      	movs	r1, #1
 80127bc:	f10d 000f 	add.w	r0, sp, #15
 80127c0:	f7ff f8dc 	bl	801197c <COM_Receive>
        COM_Receive(&char1, 1U, uTimeout);
 80127c4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80127c8:	2101      	movs	r1, #1
 80127ca:	f10d 000f 	add.w	r0, sp, #15
 80127ce:	f7ff f8d5 	bl	801197c <COM_Receive>
        packet_size = 3U;                                 /* specific packet_size to indicate transmission started */
 80127d2:	2503      	movs	r5, #3
        break;
 80127d4:	e755      	b.n	8012682 <Ymodem_Receive+0x76>
        packet_size = PACKET_1K_SIZE;
 80127d6:	f44f 6580 	mov.w	r5, #1024	; 0x400
 80127da:	e752      	b.n	8012682 <Ymodem_Receive+0x76>
        status = HAL_BUSY;
 80127dc:	2402      	movs	r4, #2
 80127de:	e750      	b.n	8012682 <Ymodem_Receive+0x76>
          status = HAL_ERROR;
 80127e0:	2401      	movs	r4, #1
 80127e2:	e74e      	b.n	8012682 <Ymodem_Receive+0x76>
      switch (ReceivePacket(m_aPacketData, &packet_length, DOWNLOAD_TIMEOUT))
 80127e4:	b164      	cbz	r4, 8012800 <Ymodem_Receive+0x1f4>
 80127e6:	2c02      	cmp	r4, #2
 80127e8:	d005      	beq.n	80127f6 <Ymodem_Receive+0x1ea>
          Serial_PutByte(CA);
          e_result = COM_ABORT;
          break;
        default:
          /* Com aborted after 5 consecutives error */
          if (session_begin > 0U)
 80127ea:	f1bb 0f00 	cmp.w	fp, #0
 80127ee:	d05b      	beq.n	80128a8 <Ymodem_Receive+0x29c>
          {
            errors ++;
 80127f0:	3601      	adds	r6, #1
          }
          if (errors > MAX_ERRORS)
 80127f2:	2e05      	cmp	r6, #5
 80127f4:	d958      	bls.n	80128a8 <Ymodem_Receive+0x29c>
          Serial_PutByte(CA);
 80127f6:	2018      	movs	r0, #24
 80127f8:	f7ff f932 	bl	8011a60 <Serial_PutByte>
          Serial_PutByte(CA);
 80127fc:	2018      	movs	r0, #24
 80127fe:	e007      	b.n	8012810 <Ymodem_Receive+0x204>
          switch (packet_length)
 8012800:	2d03      	cmp	r5, #3
 8012802:	f43f af11 	beq.w	8012628 <Ymodem_Receive+0x1c>
 8012806:	d88a      	bhi.n	801271e <Ymodem_Receive+0x112>
 8012808:	b12d      	cbz	r5, 8012816 <Ymodem_Receive+0x20a>
 801280a:	2d02      	cmp	r5, #2
 801280c:	d187      	bne.n	801271e <Ymodem_Receive+0x112>
              Serial_PutByte(ACK);
 801280e:	2006      	movs	r0, #6
          Serial_PutByte(CA);
 8012810:	f7ff f926 	bl	8011a60 <Serial_PutByte>
          break;
 8012814:	e01f      	b.n	8012856 <Ymodem_Receive+0x24a>
              Serial_PutByte(ACK);
 8012816:	2006      	movs	r0, #6
 8012818:	f7ff f922 	bl	8011a60 <Serial_PutByte>
              *puSize = filesize;
 801281c:	9a01      	ldr	r2, [sp, #4]
 801281e:	9b04      	ldr	r3, [sp, #16]
 8012820:	6013      	str	r3, [r2, #0]
  while ((session_done == 0U) && (e_result == COM_OK))
 8012822:	e6fe      	b.n	8012622 <Ymodem_Receive+0x16>
                      m_aFileName[i++] = *file_ptr++;
 8012824:	f803 1b01 	strb.w	r1, [r3], #1
 8012828:	3701      	adds	r7, #1
 801282a:	e789      	b.n	8012740 <Ymodem_Receive+0x134>
                      file_size[i++] = *file_ptr++;
 801282c:	f801 4b01 	strb.w	r4, [r1], #1
 8012830:	3301      	adds	r3, #1
 8012832:	e790      	b.n	8012756 <Ymodem_Receive+0x14a>
                      tmp = CA;
 8012834:	2318      	movs	r3, #24
                      COM_Transmit(&tmp, 1U, NAK_TIMEOUT);
 8012836:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 801283a:	2101      	movs	r1, #1
 801283c:	f10d 000f 	add.w	r0, sp, #15
                      tmp = CA;
 8012840:	f88d 300f 	strb.w	r3, [sp, #15]
                      COM_Transmit(&tmp, 1U, NAK_TIMEOUT);
 8012844:	f7ff f892 	bl	801196c <COM_Transmit>
                      COM_Transmit(&tmp, 1U, NAK_TIMEOUT);
 8012848:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 801284c:	2101      	movs	r1, #1
 801284e:	f10d 000f 	add.w	r0, sp, #15
 8012852:	f7ff f88b 	bl	801196c <COM_Transmit>
  uint32_t session_begin = 0U;
 8012856:	2402      	movs	r4, #2
          }
          break;
      }
    }
  }
  return e_result;
 8012858:	e002      	b.n	8012860 <Ymodem_Receive+0x254>
                    Serial_PutByte(ACK);
 801285a:	2006      	movs	r0, #6
 801285c:	f7ff f900 	bl	8011a60 <Serial_PutByte>
}
 8012860:	4620      	mov	r0, r4
 8012862:	b00b      	add	sp, #44	; 0x2c
 8012864:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                  if (appCb->Ymodem_DataPktRxCpltCallback((uint8_t *) ramsource, uFlashDestination,
 8012868:	f8d9 3004 	ldr.w	r3, [r9, #4]
 801286c:	4814      	ldr	r0, [pc, #80]	; (80128c0 <Ymodem_Receive+0x2b4>)
 801286e:	462a      	mov	r2, r5
 8012870:	4651      	mov	r1, sl
 8012872:	4798      	blx	r3
 8012874:	4606      	mov	r6, r0
 8012876:	b920      	cbnz	r0, 8012882 <Ymodem_Receive+0x276>
                    Serial_PutByte(ACK);
 8012878:	2006      	movs	r0, #6
 801287a:	f7ff f8f1 	bl	8011a60 <Serial_PutByte>
                packets_received ++;
 801287e:	3701      	adds	r7, #1
 8012880:	e786      	b.n	8012790 <Ymodem_Receive+0x184>
                    tmp = CA;
 8012882:	2318      	movs	r3, #24
                    COM_Transmit(&tmp, 1U, NAK_TIMEOUT);
 8012884:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8012888:	2101      	movs	r1, #1
 801288a:	f10d 000f 	add.w	r0, sp, #15
                    tmp = CA;
 801288e:	f88d 300f 	strb.w	r3, [sp, #15]
                    COM_Transmit(&tmp, 1U, NAK_TIMEOUT);
 8012892:	f7ff f86b 	bl	801196c <COM_Transmit>
                    COM_Transmit(&tmp, 1U, NAK_TIMEOUT);
 8012896:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 801289a:	2101      	movs	r1, #1
 801289c:	f10d 000f 	add.w	r0, sp, #15
 80128a0:	f7ff f864 	bl	801196c <COM_Transmit>
 80128a4:	2401      	movs	r4, #1
 80128a6:	e7db      	b.n	8012860 <Ymodem_Receive+0x254>
            Serial_PutByte(CRC16); /* Ask for a packet */
 80128a8:	2043      	movs	r0, #67	; 0x43
 80128aa:	f7ff f8d9 	bl	8011a60 <Serial_PutByte>
            printf("\b.");         /* Replace C char by . on display console */
 80128ae:	4806      	ldr	r0, [pc, #24]	; (80128c8 <Ymodem_Receive+0x2bc>)
 80128b0:	f001 f932 	bl	8013b18 <iprintf>
 80128b4:	e6b9      	b.n	801262a <Ymodem_Receive+0x1e>
 80128b6:	bf00      	nop
 80128b8:	40003000 	.word	0x40003000
 80128bc:	2000197e 	.word	0x2000197e
 80128c0:	20001980 	.word	0x20001980
 80128c4:	20001d82 	.word	0x20001d82
 80128c8:	08015e23 	.word	0x08015e23
 80128cc:	2000197c 	.word	0x2000197c

080128d0 <BSP_LED_Init>:
  *          This parameter can be one of the following values:
  *            @arg  LED3
  *            @arg  LED4
  */
void BSP_LED_Init(Led_TypeDef Led)
{
 80128d0:	b500      	push	{lr}
 80128d2:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef  gpio_init_structure;
  
  LEDx_GPIO_CLK_ENABLE(Led);
 80128d4:	b9e0      	cbnz	r0, 8012910 <BSP_LED_Init+0x40>
 80128d6:	4b16      	ldr	r3, [pc, #88]	; (8012930 <BSP_LED_Init+0x60>)
 80128d8:	9001      	str	r0, [sp, #4]
 80128da:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80128dc:	f042 0204 	orr.w	r2, r2, #4
 80128e0:	631a      	str	r2, [r3, #48]	; 0x30
 80128e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80128e4:	f003 0304 	and.w	r3, r3, #4
 80128e8:	9301      	str	r3, [sp, #4]
 80128ea:	9b01      	ldr	r3, [sp, #4]
  /* Configure the GPIO_LED pin */
  gpio_init_structure.Pin   = GPIO_PIN[Led];
 80128ec:	4b11      	ldr	r3, [pc, #68]	; (8012934 <BSP_LED_Init+0x64>)
 80128ee:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 80128f2:	9303      	str	r3, [sp, #12]
  gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 80128f4:	2301      	movs	r3, #1
  gpio_init_structure.Pull  = GPIO_PULLUP;
 80128f6:	e9cd 3304 	strd	r3, r3, [sp, #16]
  gpio_init_structure.Speed = GPIO_SPEED_HIGH;
 80128fa:	2303      	movs	r3, #3
 80128fc:	9306      	str	r3, [sp, #24]
  
  HAL_GPIO_Init(GPIO_PORT[Led], &gpio_init_structure);
 80128fe:	4b0e      	ldr	r3, [pc, #56]	; (8012938 <BSP_LED_Init+0x68>)
 8012900:	a903      	add	r1, sp, #12
 8012902:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 8012906:	f000 fb9b 	bl	8013040 <HAL_GPIO_Init>
}
 801290a:	b009      	add	sp, #36	; 0x24
 801290c:	f85d fb04 	ldr.w	pc, [sp], #4
  LEDx_GPIO_CLK_ENABLE(Led);
 8012910:	2801      	cmp	r0, #1
 8012912:	d1eb      	bne.n	80128ec <BSP_LED_Init+0x1c>
 8012914:	2300      	movs	r3, #0
 8012916:	9302      	str	r3, [sp, #8]
 8012918:	4b05      	ldr	r3, [pc, #20]	; (8012930 <BSP_LED_Init+0x60>)
 801291a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801291c:	f042 0210 	orr.w	r2, r2, #16
 8012920:	631a      	str	r2, [r3, #48]	; 0x30
 8012922:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012924:	f003 0310 	and.w	r3, r3, #16
 8012928:	9302      	str	r3, [sp, #8]
 801292a:	9b02      	ldr	r3, [sp, #8]
 801292c:	e7de      	b.n	80128ec <BSP_LED_Init+0x1c>
 801292e:	bf00      	nop
 8012930:	40023800 	.word	0x40023800
 8012934:	08014d44 	.word	0x08014d44
 8012938:	20001044 	.word	0x20001044

0801293c <BSP_LED_Toggle>:
  *            @arg  LED3
  *            @arg  LED4
  */
void BSP_LED_Toggle(Led_TypeDef Led)
{
  HAL_GPIO_TogglePin(GPIO_PORT[Led], GPIO_PIN[Led]);
 801293c:	4b03      	ldr	r3, [pc, #12]	; (801294c <BSP_LED_Toggle+0x10>)
 801293e:	f833 1020 	ldrh.w	r1, [r3, r0, lsl #2]
 8012942:	4b03      	ldr	r3, [pc, #12]	; (8012950 <BSP_LED_Toggle+0x14>)
 8012944:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 8012948:	f000 bc4e 	b.w	80131e8 <HAL_GPIO_TogglePin>
 801294c:	08014d44 	.word	0x08014d44
 8012950:	20001044 	.word	0x20001044

08012954 <BSP_PB_Init>:
  *            @arg  BUTTON_MODE_GPIO: Button will be used as simple IO
  *            @arg  BUTTON_MODE_EXTI: Button will be connected to EXTI line 
  *                                    with interrupt generation capability  
  */
void BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 8012954:	b530      	push	{r4, r5, lr}
 8012956:	b087      	sub	sp, #28
  GPIO_InitTypeDef gpio_init_structure;
  
  /* Enable the BUTTON clock */
  WAKEUP_BUTTON_GPIO_CLK_ENABLE();
 8012958:	4b1a      	ldr	r3, [pc, #104]	; (80129c4 <BSP_PB_Init+0x70>)
 801295a:	2500      	movs	r5, #0
 801295c:	9500      	str	r5, [sp, #0]
 801295e:	6b1c      	ldr	r4, [r3, #48]	; 0x30
 8012960:	f044 0401 	orr.w	r4, r4, #1
 8012964:	631c      	str	r4, [r3, #48]	; 0x30
 8012966:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012968:	f003 0301 	and.w	r3, r3, #1
 801296c:	9300      	str	r3, [sp, #0]
 801296e:	9b00      	ldr	r3, [sp, #0]
  
  if(ButtonMode == BUTTON_MODE_GPIO)
 8012970:	b971      	cbnz	r1, 8012990 <BSP_PB_Init+0x3c>
  {
    /* Configure Button pin as input */
    gpio_init_structure.Pin = BUTTON_PIN[Button];
 8012972:	2301      	movs	r3, #1
    gpio_init_structure.Mode = GPIO_MODE_INPUT;
 8012974:	e9cd 3101 	strd	r3, r1, [sp, #4]
    gpio_init_structure.Pull = GPIO_PULLDOWN;
 8012978:	2302      	movs	r3, #2
    gpio_init_structure.Speed = GPIO_SPEED_FAST;
 801297a:	e9cd 3303 	strd	r3, r3, [sp, #12]
    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 801297e:	4b12      	ldr	r3, [pc, #72]	; (80129c8 <BSP_PB_Init+0x74>)
 8012980:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8012984:	a901      	add	r1, sp, #4
 8012986:	6880      	ldr	r0, [r0, #8]
 8012988:	f000 fb5a 	bl	8013040 <HAL_GPIO_Init>
    
    /* Enable and set Button EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority((IRQn_Type)(BUTTON_IRQn[Button]), 0x0F, 0x00);
    HAL_NVIC_EnableIRQ((IRQn_Type)(BUTTON_IRQn[Button]));
  }
}
 801298c:	b007      	add	sp, #28
 801298e:	bd30      	pop	{r4, r5, pc}
  if(ButtonMode == BUTTON_MODE_EXTI)
 8012990:	2901      	cmp	r1, #1
 8012992:	d1fb      	bne.n	801298c <BSP_PB_Init+0x38>
    gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8012994:	2202      	movs	r2, #2
 8012996:	2303      	movs	r3, #3
 8012998:	e9cd 2303 	strd	r2, r3, [sp, #12]
    gpio_init_structure.Mode = GPIO_MODE_IT_RISING;
 801299c:	4b0b      	ldr	r3, [pc, #44]	; (80129cc <BSP_PB_Init+0x78>)
 801299e:	9302      	str	r3, [sp, #8]
    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 80129a0:	4b09      	ldr	r3, [pc, #36]	; (80129c8 <BSP_PB_Init+0x74>)
    gpio_init_structure.Pin = BUTTON_PIN[Button];
 80129a2:	9101      	str	r1, [sp, #4]
    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 80129a4:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80129a8:	a901      	add	r1, sp, #4
 80129aa:	6880      	ldr	r0, [r0, #8]
 80129ac:	f000 fb48 	bl	8013040 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority((IRQn_Type)(BUTTON_IRQn[Button]), 0x0F, 0x00);
 80129b0:	462a      	mov	r2, r5
 80129b2:	210f      	movs	r1, #15
 80129b4:	2006      	movs	r0, #6
 80129b6:	f000 f8a7 	bl	8012b08 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((IRQn_Type)(BUTTON_IRQn[Button]));
 80129ba:	2006      	movs	r0, #6
 80129bc:	f000 f8d6 	bl	8012b6c <HAL_NVIC_EnableIRQ>
}
 80129c0:	e7e4      	b.n	801298c <BSP_PB_Init+0x38>
 80129c2:	bf00      	nop
 80129c4:	40023800 	.word	0x40023800
 80129c8:	20001044 	.word	0x20001044
 80129cc:	10110000 	.word	0x10110000

080129d0 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80129d0:	490e      	ldr	r1, [pc, #56]	; (8012a0c <SystemInit+0x3c>)
 80129d2:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 80129d6:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80129da:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80129de:	4b0c      	ldr	r3, [pc, #48]	; (8012a10 <SystemInit+0x40>)
 80129e0:	681a      	ldr	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80129e2:	2000      	movs	r0, #0
  RCC->CR |= (uint32_t)0x00000001;
 80129e4:	f042 0201 	orr.w	r2, r2, #1
 80129e8:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000;
 80129ea:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80129ec:	681a      	ldr	r2, [r3, #0]
 80129ee:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 80129f2:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80129f6:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 80129f8:	4a06      	ldr	r2, [pc, #24]	; (8012a14 <SystemInit+0x44>)
 80129fa:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80129fc:	681a      	ldr	r2, [r3, #0]
 80129fe:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8012a02:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8012a04:	60d8      	str	r0, [r3, #12]
  SystemInit_ExtMemCtl(); 
#endif /* DATA_IN_ExtSRAM || DATA_IN_ExtSDRAM */

  /* Configure the Vector Table location  ------------------*/
  /* Reuse information from map file */ 
  SCB->VTOR = INTVECT_START;
 8012a06:	4b04      	ldr	r3, [pc, #16]	; (8012a18 <SystemInit+0x48>)
 8012a08:	608b      	str	r3, [r1, #8]
}
 8012a0a:	4770      	bx	lr
 8012a0c:	e000ed00 	.word	0xe000ed00
 8012a10:	40023800 	.word	0x40023800
 8012a14:	24003010 	.word	0x24003010
 8012a18:	08011200 	.word	0x08011200

08012a1c <HAL_MspInit>:
__weak void HAL_MspInit(void)
{
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspInit could be implemented in the user file
   */
}
 8012a1c:	4770      	bx	lr
	...

08012a20 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8012a20:	b570      	push	{r4, r5, r6, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8012a22:	4a0e      	ldr	r2, [pc, #56]	; (8012a5c <HAL_InitTick+0x3c>)
 8012a24:	4e0e      	ldr	r6, [pc, #56]	; (8012a60 <HAL_InitTick+0x40>)
{
 8012a26:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8012a28:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8012a2c:	7830      	ldrb	r0, [r6, #0]
 8012a2e:	fbb3 f3f0 	udiv	r3, r3, r0
 8012a32:	6810      	ldr	r0, [r2, #0]
 8012a34:	fbb0 f0f3 	udiv	r0, r0, r3
 8012a38:	f000 f8b8 	bl	8012bac <HAL_SYSTICK_Config>
 8012a3c:	4604      	mov	r4, r0
 8012a3e:	b950      	cbnz	r0, 8012a56 <HAL_InitTick+0x36>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8012a40:	2d0f      	cmp	r5, #15
 8012a42:	d808      	bhi.n	8012a56 <HAL_InitTick+0x36>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8012a44:	4602      	mov	r2, r0
 8012a46:	4629      	mov	r1, r5
 8012a48:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8012a4c:	f000 f85c 	bl	8012b08 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8012a50:	6075      	str	r5, [r6, #4]
 8012a52:	4620      	mov	r0, r4
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8012a54:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 8012a56:	2001      	movs	r0, #1
 8012a58:	e7fc      	b.n	8012a54 <HAL_InitTick+0x34>
 8012a5a:	bf00      	nop
 8012a5c:	2000105c 	.word	0x2000105c
 8012a60:	20001060 	.word	0x20001060

08012a64 <HAL_Init>:
{
 8012a64:	b508      	push	{r3, lr}
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8012a66:	4b0b      	ldr	r3, [pc, #44]	; (8012a94 <HAL_Init+0x30>)
 8012a68:	681a      	ldr	r2, [r3, #0]
 8012a6a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8012a6e:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8012a70:	681a      	ldr	r2, [r3, #0]
 8012a72:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8012a76:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8012a78:	681a      	ldr	r2, [r3, #0]
 8012a7a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8012a7e:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8012a80:	2003      	movs	r0, #3
 8012a82:	f000 f82f 	bl	8012ae4 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8012a86:	200f      	movs	r0, #15
 8012a88:	f7ff ffca 	bl	8012a20 <HAL_InitTick>
  HAL_MspInit();
 8012a8c:	f7ff ffc6 	bl	8012a1c <HAL_MspInit>
}
 8012a90:	2000      	movs	r0, #0
 8012a92:	bd08      	pop	{r3, pc}
 8012a94:	40023c00 	.word	0x40023c00

08012a98 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8012a98:	4a03      	ldr	r2, [pc, #12]	; (8012aa8 <HAL_IncTick+0x10>)
 8012a9a:	4b04      	ldr	r3, [pc, #16]	; (8012aac <HAL_IncTick+0x14>)
 8012a9c:	6811      	ldr	r1, [r2, #0]
 8012a9e:	781b      	ldrb	r3, [r3, #0]
 8012aa0:	440b      	add	r3, r1
 8012aa2:	6013      	str	r3, [r2, #0]
}
 8012aa4:	4770      	bx	lr
 8012aa6:	bf00      	nop
 8012aa8:	20001dc4 	.word	0x20001dc4
 8012aac:	20001060 	.word	0x20001060

08012ab0 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8012ab0:	4b01      	ldr	r3, [pc, #4]	; (8012ab8 <HAL_GetTick+0x8>)
 8012ab2:	6818      	ldr	r0, [r3, #0]
}
 8012ab4:	4770      	bx	lr
 8012ab6:	bf00      	nop
 8012ab8:	20001dc4 	.word	0x20001dc4

08012abc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8012abc:	b538      	push	{r3, r4, r5, lr}
 8012abe:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8012ac0:	f7ff fff6 	bl	8012ab0 <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8012ac4:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 8012ac6:	bf1c      	itt	ne
 8012ac8:	4b05      	ldrne	r3, [pc, #20]	; (8012ae0 <HAL_Delay+0x24>)
 8012aca:	781b      	ldrbne	r3, [r3, #0]
  uint32_t tickstart = HAL_GetTick();
 8012acc:	4605      	mov	r5, r0
    wait += (uint32_t)(uwTickFreq);
 8012ace:	bf18      	it	ne
 8012ad0:	18e4      	addne	r4, r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 8012ad2:	f7ff ffed 	bl	8012ab0 <HAL_GetTick>
 8012ad6:	1b43      	subs	r3, r0, r5
 8012ad8:	42a3      	cmp	r3, r4
 8012ada:	d3fa      	bcc.n	8012ad2 <HAL_Delay+0x16>
  {
  }
}
 8012adc:	bd38      	pop	{r3, r4, r5, pc}
 8012ade:	bf00      	nop
 8012ae0:	20001060 	.word	0x20001060

08012ae4 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8012ae4:	4907      	ldr	r1, [pc, #28]	; (8012b04 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8012ae6:	68ca      	ldr	r2, [r1, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8012ae8:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8012aec:	0203      	lsls	r3, r0, #8
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8012aee:	0412      	lsls	r2, r2, #16
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8012af0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8012af4:	0c12      	lsrs	r2, r2, #16
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8012af6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8012af8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8012afc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8012b00:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8012b02:	4770      	bx	lr
 8012b04:	e000ed00 	.word	0xe000ed00

08012b08 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8012b08:	4b16      	ldr	r3, [pc, #88]	; (8012b64 <HAL_NVIC_SetPriority+0x5c>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8012b0a:	b530      	push	{r4, r5, lr}
 8012b0c:	68dc      	ldr	r4, [r3, #12]
 8012b0e:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8012b12:	f1c4 0507 	rsb	r5, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8012b16:	1d23      	adds	r3, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8012b18:	2d04      	cmp	r5, #4
 8012b1a:	bf28      	it	cs
 8012b1c:	2504      	movcs	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8012b1e:	2b06      	cmp	r3, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8012b20:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8012b24:	bf8c      	ite	hi
 8012b26:	3c03      	subhi	r4, #3
 8012b28:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8012b2a:	fa03 f505 	lsl.w	r5, r3, r5
 8012b2e:	ea21 0105 	bic.w	r1, r1, r5
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8012b32:	40a3      	lsls	r3, r4
 8012b34:	ea22 0203 	bic.w	r2, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8012b38:	40a1      	lsls	r1, r4
  if ((int32_t)(IRQn) >= 0)
 8012b3a:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8012b3c:	ea41 0302 	orr.w	r3, r1, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8012b40:	bfac      	ite	ge
 8012b42:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8012b46:	4a08      	ldrlt	r2, [pc, #32]	; (8012b68 <HAL_NVIC_SetPriority+0x60>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8012b48:	ea4f 1303 	mov.w	r3, r3, lsl #4
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8012b4c:	bfb8      	it	lt
 8012b4e:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8012b52:	b2db      	uxtb	r3, r3
 8012b54:	bfaa      	itet	ge
 8012b56:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8012b5a:	5413      	strblt	r3, [r2, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8012b5c:	f880 3300 	strbge.w	r3, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8012b60:	bd30      	pop	{r4, r5, pc}
 8012b62:	bf00      	nop
 8012b64:	e000ed00 	.word	0xe000ed00
 8012b68:	e000ed14 	.word	0xe000ed14

08012b6c <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8012b6c:	2800      	cmp	r0, #0
 8012b6e:	db08      	blt.n	8012b82 <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8012b70:	0942      	lsrs	r2, r0, #5
 8012b72:	2301      	movs	r3, #1
 8012b74:	f000 001f 	and.w	r0, r0, #31
 8012b78:	fa03 f000 	lsl.w	r0, r3, r0
 8012b7c:	4b01      	ldr	r3, [pc, #4]	; (8012b84 <HAL_NVIC_EnableIRQ+0x18>)
 8012b7e:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8012b82:	4770      	bx	lr
 8012b84:	e000e100 	.word	0xe000e100

08012b88 <HAL_NVIC_SystemReset>:
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8012b88:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8012b8c:	4905      	ldr	r1, [pc, #20]	; (8012ba4 <HAL_NVIC_SystemReset+0x1c>)
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8012b8e:	4b06      	ldr	r3, [pc, #24]	; (8012ba8 <HAL_NVIC_SystemReset+0x20>)
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8012b90:	68ca      	ldr	r2, [r1, #12]
 8012b92:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8012b96:	4313      	orrs	r3, r2
 8012b98:	60cb      	str	r3, [r1, #12]
 8012b9a:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8012b9e:	bf00      	nop
  for(;;)                                                           /* wait until reset */
 8012ba0:	e7fd      	b.n	8012b9e <HAL_NVIC_SystemReset+0x16>
 8012ba2:	bf00      	nop
 8012ba4:	e000ed00 	.word	0xe000ed00
 8012ba8:	05fa0004 	.word	0x05fa0004

08012bac <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8012bac:	3801      	subs	r0, #1
 8012bae:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8012bb2:	d20b      	bcs.n	8012bcc <HAL_SYSTICK_Config+0x20>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8012bb4:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8012bb8:	4a05      	ldr	r2, [pc, #20]	; (8012bd0 <HAL_SYSTICK_Config+0x24>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8012bba:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8012bbc:	21f0      	movs	r1, #240	; 0xf0
 8012bbe:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8012bc2:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8012bc4:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8012bc6:	6198      	str	r0, [r3, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8012bc8:	611a      	str	r2, [r3, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8012bca:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8012bcc:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8012bce:	4770      	bx	lr
 8012bd0:	e000ed00 	.word	0xe000ed00

08012bd4 <HAL_MPU_Disable>:
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8012bd4:	f3bf 8f5f 	dmb	sy
{
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8012bd8:	4b04      	ldr	r3, [pc, #16]	; (8012bec <HAL_MPU_Disable+0x18>)
 8012bda:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8012bdc:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8012be0:	625a      	str	r2, [r3, #36]	; 0x24
  
  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0U;
 8012be2:	2200      	movs	r2, #0
 8012be4:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
}
 8012be8:	4770      	bx	lr
 8012bea:	bf00      	nop
 8012bec:	e000ed00 	.word	0xe000ed00

08012bf0 <FLASH_Program_DoubleWord>:
{
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8012bf0:	4909      	ldr	r1, [pc, #36]	; (8012c18 <FLASH_Program_DoubleWord+0x28>)
{
 8012bf2:	b510      	push	{r4, lr}
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8012bf4:	690c      	ldr	r4, [r1, #16]
 8012bf6:	f424 7440 	bic.w	r4, r4, #768	; 0x300
 8012bfa:	610c      	str	r4, [r1, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 8012bfc:	690c      	ldr	r4, [r1, #16]
 8012bfe:	f444 7440 	orr.w	r4, r4, #768	; 0x300
 8012c02:	610c      	str	r4, [r1, #16]
  FLASH->CR |= FLASH_CR_PG;
 8012c04:	690c      	ldr	r4, [r1, #16]
 8012c06:	f044 0401 	orr.w	r4, r4, #1
 8012c0a:	610c      	str	r4, [r1, #16]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 8012c0c:	6002      	str	r2, [r0, #0]
  __ASM volatile ("isb 0xF":::"memory");
 8012c0e:	f3bf 8f6f 	isb	sy
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 8012c12:	6043      	str	r3, [r0, #4]
}
 8012c14:	bd10      	pop	{r4, pc}
 8012c16:	bf00      	nop
 8012c18:	40023c00 	.word	0x40023c00

08012c1c <FLASH_Program_Word>:
{
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8012c1c:	4b07      	ldr	r3, [pc, #28]	; (8012c3c <FLASH_Program_Word+0x20>)
 8012c1e:	691a      	ldr	r2, [r3, #16]
 8012c20:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8012c24:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 8012c26:	691a      	ldr	r2, [r3, #16]
 8012c28:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8012c2c:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_CR_PG;
 8012c2e:	691a      	ldr	r2, [r3, #16]
 8012c30:	f042 0201 	orr.w	r2, r2, #1
 8012c34:	611a      	str	r2, [r3, #16]

  *(__IO uint32_t*)Address = Data;
 8012c36:	6001      	str	r1, [r0, #0]
}
 8012c38:	4770      	bx	lr
 8012c3a:	bf00      	nop
 8012c3c:	40023c00 	.word	0x40023c00

08012c40 <FLASH_Program_HalfWord>:
{
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8012c40:	4b07      	ldr	r3, [pc, #28]	; (8012c60 <FLASH_Program_HalfWord+0x20>)
 8012c42:	691a      	ldr	r2, [r3, #16]
 8012c44:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8012c48:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 8012c4a:	691a      	ldr	r2, [r3, #16]
 8012c4c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8012c50:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_CR_PG;
 8012c52:	691a      	ldr	r2, [r3, #16]
 8012c54:	f042 0201 	orr.w	r2, r2, #1
 8012c58:	611a      	str	r2, [r3, #16]

  *(__IO uint16_t*)Address = Data;
 8012c5a:	8001      	strh	r1, [r0, #0]
}
 8012c5c:	4770      	bx	lr
 8012c5e:	bf00      	nop
 8012c60:	40023c00 	.word	0x40023c00

08012c64 <FLASH_SetErrorCode>:
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 8012c64:	4b20      	ldr	r3, [pc, #128]	; (8012ce8 <FLASH_SetErrorCode+0x84>)
 8012c66:	68da      	ldr	r2, [r3, #12]
 8012c68:	06d0      	lsls	r0, r2, #27
 8012c6a:	d506      	bpl.n	8012c7a <FLASH_SetErrorCode+0x16>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8012c6c:	491f      	ldr	r1, [pc, #124]	; (8012cec <FLASH_SetErrorCode+0x88>)
 8012c6e:	69ca      	ldr	r2, [r1, #28]
 8012c70:	f042 0210 	orr.w	r2, r2, #16
 8012c74:	61ca      	str	r2, [r1, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 8012c76:	2210      	movs	r2, #16
 8012c78:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 8012c7a:	68da      	ldr	r2, [r3, #12]
 8012c7c:	0691      	lsls	r1, r2, #26
 8012c7e:	d506      	bpl.n	8012c8e <FLASH_SetErrorCode+0x2a>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 8012c80:	491a      	ldr	r1, [pc, #104]	; (8012cec <FLASH_SetErrorCode+0x88>)
 8012c82:	69ca      	ldr	r2, [r1, #28]
 8012c84:	f042 0208 	orr.w	r2, r2, #8
 8012c88:	61ca      	str	r2, [r1, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 8012c8a:	2220      	movs	r2, #32
 8012c8c:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 8012c8e:	4b16      	ldr	r3, [pc, #88]	; (8012ce8 <FLASH_SetErrorCode+0x84>)
 8012c90:	68da      	ldr	r2, [r3, #12]
 8012c92:	0652      	lsls	r2, r2, #25
 8012c94:	d506      	bpl.n	8012ca4 <FLASH_SetErrorCode+0x40>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 8012c96:	4915      	ldr	r1, [pc, #84]	; (8012cec <FLASH_SetErrorCode+0x88>)
 8012c98:	69ca      	ldr	r2, [r1, #28]
 8012c9a:	f042 0204 	orr.w	r2, r2, #4
 8012c9e:	61ca      	str	r2, [r1, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 8012ca0:	2240      	movs	r2, #64	; 0x40
 8012ca2:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 8012ca4:	68da      	ldr	r2, [r3, #12]
 8012ca6:	0610      	lsls	r0, r2, #24
 8012ca8:	d506      	bpl.n	8012cb8 <FLASH_SetErrorCode+0x54>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 8012caa:	4910      	ldr	r1, [pc, #64]	; (8012cec <FLASH_SetErrorCode+0x88>)
 8012cac:	69ca      	ldr	r2, [r1, #28]
 8012cae:	f042 0202 	orr.w	r2, r2, #2
 8012cb2:	61ca      	str	r2, [r1, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 8012cb4:	2280      	movs	r2, #128	; 0x80
 8012cb6:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR) 
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR) != RESET)
 8012cb8:	4b0b      	ldr	r3, [pc, #44]	; (8012ce8 <FLASH_SetErrorCode+0x84>)
 8012cba:	68da      	ldr	r2, [r3, #12]
 8012cbc:	05d1      	lsls	r1, r2, #23
 8012cbe:	d507      	bpl.n	8012cd0 <FLASH_SetErrorCode+0x6c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 8012cc0:	490a      	ldr	r1, [pc, #40]	; (8012cec <FLASH_SetErrorCode+0x88>)
 8012cc2:	69ca      	ldr	r2, [r1, #28]
 8012cc4:	f042 0201 	orr.w	r2, r2, #1
 8012cc8:	61ca      	str	r2, [r1, #28]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
 8012cca:	f44f 7280 	mov.w	r2, #256	; 0x100
 8012cce:	60da      	str	r2, [r3, #12]
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 8012cd0:	68da      	ldr	r2, [r3, #12]
 8012cd2:	0792      	lsls	r2, r2, #30
 8012cd4:	d506      	bpl.n	8012ce4 <FLASH_SetErrorCode+0x80>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 8012cd6:	4905      	ldr	r1, [pc, #20]	; (8012cec <FLASH_SetErrorCode+0x88>)
 8012cd8:	69ca      	ldr	r2, [r1, #28]
 8012cda:	f042 0220 	orr.w	r2, r2, #32
 8012cde:	61ca      	str	r2, [r1, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 8012ce0:	2202      	movs	r2, #2
 8012ce2:	60da      	str	r2, [r3, #12]
  }
}
 8012ce4:	4770      	bx	lr
 8012ce6:	bf00      	nop
 8012ce8:	40023c00 	.word	0x40023c00
 8012cec:	20001dc8 	.word	0x20001dc8

08012cf0 <HAL_FLASH_EndOfOperationCallback>:
}
 8012cf0:	4770      	bx	lr

08012cf2 <HAL_FLASH_OperationErrorCallback>:
 8012cf2:	4770      	bx	lr

08012cf4 <HAL_FLASH_IRQHandler>:
{
 8012cf4:	b538      	push	{r3, r4, r5, lr}
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 8012cf6:	4b2e      	ldr	r3, [pc, #184]	; (8012db0 <HAL_FLASH_IRQHandler+0xbc>)
 8012cf8:	4c2e      	ldr	r4, [pc, #184]	; (8012db4 <HAL_FLASH_IRQHandler+0xc0>)
 8012cfa:	68db      	ldr	r3, [r3, #12]
 8012cfc:	f413 7ff9 	tst.w	r3, #498	; 0x1f2
 8012d00:	d00d      	beq.n	8012d1e <HAL_FLASH_IRQHandler+0x2a>
    if(pFlash.ProcedureOnGoing == FLASH_PROC_SECTERASE)
 8012d02:	7823      	ldrb	r3, [r4, #0]
 8012d04:	2b01      	cmp	r3, #1
 8012d06:	d135      	bne.n	8012d74 <HAL_FLASH_IRQHandler+0x80>
      pFlash.Sector = 0xFFFFFFFFU;
 8012d08:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
      addresstmp = pFlash.Sector;
 8012d0c:	68e5      	ldr	r5, [r4, #12]
      pFlash.Sector = 0xFFFFFFFFU;
 8012d0e:	60e3      	str	r3, [r4, #12]
    FLASH_SetErrorCode();
 8012d10:	f7ff ffa8 	bl	8012c64 <FLASH_SetErrorCode>
    HAL_FLASH_OperationErrorCallback(addresstmp);
 8012d14:	4628      	mov	r0, r5
 8012d16:	f7ff ffec 	bl	8012cf2 <HAL_FLASH_OperationErrorCallback>
    pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 8012d1a:	2300      	movs	r3, #0
 8012d1c:	7023      	strb	r3, [r4, #0]
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 8012d1e:	4b24      	ldr	r3, [pc, #144]	; (8012db0 <HAL_FLASH_IRQHandler+0xbc>)
 8012d20:	68da      	ldr	r2, [r3, #12]
 8012d22:	07d2      	lsls	r2, r2, #31
 8012d24:	d513      	bpl.n	8012d4e <HAL_FLASH_IRQHandler+0x5a>
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8012d26:	2201      	movs	r2, #1
 8012d28:	60da      	str	r2, [r3, #12]
    if(pFlash.ProcedureOnGoing == FLASH_PROC_SECTERASE)
 8012d2a:	7823      	ldrb	r3, [r4, #0]
 8012d2c:	4293      	cmp	r3, r2
 8012d2e:	d131      	bne.n	8012d94 <HAL_FLASH_IRQHandler+0xa0>
      pFlash.NbSectorsToErase--;
 8012d30:	6863      	ldr	r3, [r4, #4]
 8012d32:	3b01      	subs	r3, #1
 8012d34:	6063      	str	r3, [r4, #4]
      if(pFlash.NbSectorsToErase != 0U)
 8012d36:	6863      	ldr	r3, [r4, #4]
 8012d38:	b313      	cbz	r3, 8012d80 <HAL_FLASH_IRQHandler+0x8c>
        addresstmp = pFlash.Sector;
 8012d3a:	68e0      	ldr	r0, [r4, #12]
        HAL_FLASH_EndOfOperationCallback(addresstmp);
 8012d3c:	f7ff ffd8 	bl	8012cf0 <HAL_FLASH_EndOfOperationCallback>
        pFlash.Sector++;
 8012d40:	68e3      	ldr	r3, [r4, #12]
 8012d42:	3301      	adds	r3, #1
 8012d44:	60e3      	str	r3, [r4, #12]
        addresstmp = pFlash.Sector;
 8012d46:	68e0      	ldr	r0, [r4, #12]
        FLASH_Erase_Sector(addresstmp, pFlash.VoltageForErase);
 8012d48:	7a21      	ldrb	r1, [r4, #8]
 8012d4a:	f000 f8d7 	bl	8012efc <FLASH_Erase_Sector>
  if(pFlash.ProcedureOnGoing == FLASH_PROC_NONE)
 8012d4e:	7823      	ldrb	r3, [r4, #0]
 8012d50:	f003 01ff 	and.w	r1, r3, #255	; 0xff
 8012d54:	b96b      	cbnz	r3, 8012d72 <HAL_FLASH_IRQHandler+0x7e>
    CLEAR_BIT(FLASH->CR, (FLASH_CR_PG | FLASH_CR_SER | FLASH_CR_SNB | FLASH_MER_BIT));
 8012d56:	4b16      	ldr	r3, [pc, #88]	; (8012db0 <HAL_FLASH_IRQHandler+0xbc>)
 8012d58:	691a      	ldr	r2, [r3, #16]
 8012d5a:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
 8012d5e:	611a      	str	r2, [r3, #16]
    __HAL_FLASH_DISABLE_IT(FLASH_IT_EOP);
 8012d60:	691a      	ldr	r2, [r3, #16]
 8012d62:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8012d66:	611a      	str	r2, [r3, #16]
    __HAL_FLASH_DISABLE_IT(FLASH_IT_ERR);
 8012d68:	691a      	ldr	r2, [r3, #16]
 8012d6a:	f022 7200 	bic.w	r2, r2, #33554432	; 0x2000000
 8012d6e:	611a      	str	r2, [r3, #16]
    __HAL_UNLOCK(&pFlash);
 8012d70:	7621      	strb	r1, [r4, #24]
}
 8012d72:	bd38      	pop	{r3, r4, r5, pc}
    else if(pFlash.ProcedureOnGoing == FLASH_PROC_MASSERASE)
 8012d74:	7823      	ldrb	r3, [r4, #0]
 8012d76:	2b02      	cmp	r3, #2
      addresstmp = pFlash.Bank;
 8012d78:	bf0c      	ite	eq
 8012d7a:	6925      	ldreq	r5, [r4, #16]
      addresstmp = pFlash.Address;
 8012d7c:	6965      	ldrne	r5, [r4, #20]
 8012d7e:	e7c7      	b.n	8012d10 <HAL_FLASH_IRQHandler+0x1c>
        pFlash.Sector = addresstmp = 0xFFFFFFFFU;
 8012d80:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8012d84:	60e5      	str	r5, [r4, #12]
        pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 8012d86:	7023      	strb	r3, [r4, #0]
        FLASH_FlushCaches() ;
 8012d88:	f000 f8de 	bl	8012f48 <FLASH_FlushCaches>
        HAL_FLASH_EndOfOperationCallback(addresstmp);
 8012d8c:	4628      	mov	r0, r5
 8012d8e:	f7ff ffaf 	bl	8012cf0 <HAL_FLASH_EndOfOperationCallback>
 8012d92:	e7dc      	b.n	8012d4e <HAL_FLASH_IRQHandler+0x5a>
      if(pFlash.ProcedureOnGoing == FLASH_PROC_MASSERASE) 
 8012d94:	7823      	ldrb	r3, [r4, #0]
 8012d96:	2b02      	cmp	r3, #2
 8012d98:	d107      	bne.n	8012daa <HAL_FLASH_IRQHandler+0xb6>
        FLASH_FlushCaches() ;
 8012d9a:	f000 f8d5 	bl	8012f48 <FLASH_FlushCaches>
        HAL_FLASH_EndOfOperationCallback(pFlash.Bank);
 8012d9e:	6920      	ldr	r0, [r4, #16]
        HAL_FLASH_EndOfOperationCallback(pFlash.Address);
 8012da0:	f7ff ffa6 	bl	8012cf0 <HAL_FLASH_EndOfOperationCallback>
      pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 8012da4:	2300      	movs	r3, #0
 8012da6:	7023      	strb	r3, [r4, #0]
 8012da8:	e7d1      	b.n	8012d4e <HAL_FLASH_IRQHandler+0x5a>
        HAL_FLASH_EndOfOperationCallback(pFlash.Address);
 8012daa:	6960      	ldr	r0, [r4, #20]
 8012dac:	e7f8      	b.n	8012da0 <HAL_FLASH_IRQHandler+0xac>
 8012dae:	bf00      	nop
 8012db0:	40023c00 	.word	0x40023c00
 8012db4:	20001dc8 	.word	0x20001dc8

08012db8 <HAL_FLASH_Unlock>:
  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8012db8:	4b06      	ldr	r3, [pc, #24]	; (8012dd4 <HAL_FLASH_Unlock+0x1c>)
 8012dba:	691a      	ldr	r2, [r3, #16]
 8012dbc:	2a00      	cmp	r2, #0
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8012dbe:	bfbf      	itttt	lt
 8012dc0:	4a05      	ldrlt	r2, [pc, #20]	; (8012dd8 <HAL_FLASH_Unlock+0x20>)
 8012dc2:	605a      	strlt	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8012dc4:	f102 3288 	addlt.w	r2, r2, #2290649224	; 0x88888888
 8012dc8:	605a      	strlt	r2, [r3, #4]
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8012dca:	bfba      	itte	lt
 8012dcc:	6918      	ldrlt	r0, [r3, #16]
  HAL_StatusTypeDef status = HAL_OK;
 8012dce:	0fc0      	lsrlt	r0, r0, #31
 8012dd0:	2000      	movge	r0, #0
}
 8012dd2:	4770      	bx	lr
 8012dd4:	40023c00 	.word	0x40023c00
 8012dd8:	45670123 	.word	0x45670123

08012ddc <HAL_FLASH_Lock>:
  FLASH->CR |= FLASH_CR_LOCK;
 8012ddc:	4a03      	ldr	r2, [pc, #12]	; (8012dec <HAL_FLASH_Lock+0x10>)
 8012dde:	6913      	ldr	r3, [r2, #16]
 8012de0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8012de4:	6113      	str	r3, [r2, #16]
}
 8012de6:	2000      	movs	r0, #0
 8012de8:	4770      	bx	lr
 8012dea:	bf00      	nop
 8012dec:	40023c00 	.word	0x40023c00

08012df0 <HAL_FLASH_GetError>:
   return pFlash.ErrorCode;
 8012df0:	4b01      	ldr	r3, [pc, #4]	; (8012df8 <HAL_FLASH_GetError+0x8>)
 8012df2:	69d8      	ldr	r0, [r3, #28]
}  
 8012df4:	4770      	bx	lr
 8012df6:	bf00      	nop
 8012df8:	20001dc8 	.word	0x20001dc8

08012dfc <FLASH_WaitForLastOperation>:
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8012dfc:	4b11      	ldr	r3, [pc, #68]	; (8012e44 <FLASH_WaitForLastOperation+0x48>)
{ 
 8012dfe:	b570      	push	{r4, r5, r6, lr}
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8012e00:	2200      	movs	r2, #0
{ 
 8012e02:	4604      	mov	r4, r0
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8012e04:	61da      	str	r2, [r3, #28]
  tickstart = HAL_GetTick();
 8012e06:	f7ff fe53 	bl	8012ab0 <HAL_GetTick>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8012e0a:	4d0f      	ldr	r5, [pc, #60]	; (8012e48 <FLASH_WaitForLastOperation+0x4c>)
  tickstart = HAL_GetTick();
 8012e0c:	4606      	mov	r6, r0
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8012e0e:	68eb      	ldr	r3, [r5, #12]
 8012e10:	03da      	lsls	r2, r3, #15
 8012e12:	d40c      	bmi.n	8012e2e <FLASH_WaitForLastOperation+0x32>
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 8012e14:	68eb      	ldr	r3, [r5, #12]
 8012e16:	07db      	lsls	r3, r3, #31
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8012e18:	bf44      	itt	mi
 8012e1a:	2301      	movmi	r3, #1
 8012e1c:	60eb      	strmi	r3, [r5, #12]
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 8012e1e:	68e8      	ldr	r0, [r5, #12]
 8012e20:	f410 70f9 	ands.w	r0, r0, #498	; 0x1f2
 8012e24:	d007      	beq.n	8012e36 <FLASH_WaitForLastOperation+0x3a>
    FLASH_SetErrorCode();
 8012e26:	f7ff ff1d 	bl	8012c64 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8012e2a:	2001      	movs	r0, #1
 8012e2c:	e003      	b.n	8012e36 <FLASH_WaitForLastOperation+0x3a>
    if(Timeout != HAL_MAX_DELAY)
 8012e2e:	1c61      	adds	r1, r4, #1
 8012e30:	d0ed      	beq.n	8012e0e <FLASH_WaitForLastOperation+0x12>
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 8012e32:	b90c      	cbnz	r4, 8012e38 <FLASH_WaitForLastOperation+0x3c>
        return HAL_TIMEOUT;
 8012e34:	2003      	movs	r0, #3
}  
 8012e36:	bd70      	pop	{r4, r5, r6, pc}
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 8012e38:	f7ff fe3a 	bl	8012ab0 <HAL_GetTick>
 8012e3c:	1b80      	subs	r0, r0, r6
 8012e3e:	42a0      	cmp	r0, r4
 8012e40:	d9e5      	bls.n	8012e0e <FLASH_WaitForLastOperation+0x12>
 8012e42:	e7f7      	b.n	8012e34 <FLASH_WaitForLastOperation+0x38>
 8012e44:	20001dc8 	.word	0x20001dc8
 8012e48:	40023c00 	.word	0x40023c00

08012e4c <HAL_FLASH_Program>:
{
 8012e4c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  __HAL_LOCK(&pFlash);
 8012e4e:	4e20      	ldr	r6, [pc, #128]	; (8012ed0 <HAL_FLASH_Program+0x84>)
{
 8012e50:	9301      	str	r3, [sp, #4]
 8012e52:	4614      	mov	r4, r2
  __HAL_LOCK(&pFlash);
 8012e54:	7e32      	ldrb	r2, [r6, #24]
 8012e56:	2a01      	cmp	r2, #1
{
 8012e58:	4607      	mov	r7, r0
 8012e5a:	460d      	mov	r5, r1
  __HAL_LOCK(&pFlash);
 8012e5c:	d035      	beq.n	8012eca <HAL_FLASH_Program+0x7e>
 8012e5e:	2201      	movs	r2, #1
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8012e60:	f24c 3050 	movw	r0, #50000	; 0xc350
  __HAL_LOCK(&pFlash);
 8012e64:	7632      	strb	r2, [r6, #24]
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8012e66:	f7ff ffc9 	bl	8012dfc <FLASH_WaitForLastOperation>
  if(status == HAL_OK)
 8012e6a:	b9b8      	cbnz	r0, 8012e9c <HAL_FLASH_Program+0x50>
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 8012e6c:	9b01      	ldr	r3, [sp, #4]
 8012e6e:	b9cf      	cbnz	r7, 8012ea4 <HAL_FLASH_Program+0x58>
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8012e70:	4b18      	ldr	r3, [pc, #96]	; (8012ed4 <HAL_FLASH_Program+0x88>)
 8012e72:	691a      	ldr	r2, [r3, #16]
 8012e74:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8012e78:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 8012e7a:	691a      	ldr	r2, [r3, #16]
 8012e7c:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_CR_PG;
 8012e7e:	691a      	ldr	r2, [r3, #16]
      FLASH_Program_Byte(Address, (uint8_t) Data);
 8012e80:	b2e4      	uxtb	r4, r4
  FLASH->CR |= FLASH_CR_PG;
 8012e82:	f042 0201 	orr.w	r2, r2, #1
 8012e86:	611a      	str	r2, [r3, #16]
  *(__IO uint8_t*)Address = Data;
 8012e88:	702c      	strb	r4, [r5, #0]
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8012e8a:	f24c 3050 	movw	r0, #50000	; 0xc350
 8012e8e:	f7ff ffb5 	bl	8012dfc <FLASH_WaitForLastOperation>
    FLASH->CR &= (~FLASH_CR_PG);  
 8012e92:	4a10      	ldr	r2, [pc, #64]	; (8012ed4 <HAL_FLASH_Program+0x88>)
 8012e94:	6913      	ldr	r3, [r2, #16]
 8012e96:	f023 0301 	bic.w	r3, r3, #1
 8012e9a:	6113      	str	r3, [r2, #16]
  __HAL_UNLOCK(&pFlash);
 8012e9c:	2300      	movs	r3, #0
 8012e9e:	7633      	strb	r3, [r6, #24]
}
 8012ea0:	b003      	add	sp, #12
 8012ea2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8012ea4:	2f01      	cmp	r7, #1
 8012ea6:	d104      	bne.n	8012eb2 <HAL_FLASH_Program+0x66>
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 8012ea8:	b2a1      	uxth	r1, r4
 8012eaa:	4628      	mov	r0, r5
 8012eac:	f7ff fec8 	bl	8012c40 <FLASH_Program_HalfWord>
 8012eb0:	e7eb      	b.n	8012e8a <HAL_FLASH_Program+0x3e>
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8012eb2:	2f02      	cmp	r7, #2
 8012eb4:	d104      	bne.n	8012ec0 <HAL_FLASH_Program+0x74>
      FLASH_Program_Word(Address, (uint32_t) Data);
 8012eb6:	4621      	mov	r1, r4
 8012eb8:	4628      	mov	r0, r5
 8012eba:	f7ff feaf 	bl	8012c1c <FLASH_Program_Word>
 8012ebe:	e7e4      	b.n	8012e8a <HAL_FLASH_Program+0x3e>
      FLASH_Program_DoubleWord(Address, Data);
 8012ec0:	4622      	mov	r2, r4
 8012ec2:	4628      	mov	r0, r5
 8012ec4:	f7ff fe94 	bl	8012bf0 <FLASH_Program_DoubleWord>
 8012ec8:	e7df      	b.n	8012e8a <HAL_FLASH_Program+0x3e>
  __HAL_LOCK(&pFlash);
 8012eca:	2002      	movs	r0, #2
 8012ecc:	e7e8      	b.n	8012ea0 <HAL_FLASH_Program+0x54>
 8012ece:	bf00      	nop
 8012ed0:	20001dc8 	.word	0x20001dc8
 8012ed4:	40023c00 	.word	0x40023c00

08012ed8 <FLASH_MassErase.constprop.0>:
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));
  
  /* If the previous operation is completed, proceed to erase all sectors */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8012ed8:	4b07      	ldr	r3, [pc, #28]	; (8012ef8 <FLASH_MassErase.constprop.0+0x20>)
 8012eda:	6919      	ldr	r1, [r3, #16]
 8012edc:	f421 7140 	bic.w	r1, r1, #768	; 0x300
 8012ee0:	6119      	str	r1, [r3, #16]
  FLASH->CR |= FLASH_CR_MER;
 8012ee2:	6919      	ldr	r1, [r3, #16]
 8012ee4:	f041 0104 	orr.w	r1, r1, #4
 8012ee8:	6119      	str	r1, [r3, #16]
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange <<8U);
 8012eea:	691a      	ldr	r2, [r3, #16]
 8012eec:	ea42 2000 	orr.w	r0, r2, r0, lsl #8
 8012ef0:	f440 3080 	orr.w	r0, r0, #65536	; 0x10000
 8012ef4:	6118      	str	r0, [r3, #16]
}
 8012ef6:	4770      	bx	lr
 8012ef8:	40023c00 	.word	0x40023c00

08012efc <FLASH_Erase_Sector>:

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  
  if(VoltageRange == FLASH_VOLTAGE_RANGE_1)
 8012efc:	b139      	cbz	r1, 8012f0e <FLASH_Erase_Sector+0x12>
  {
     tmp_psize = FLASH_PSIZE_BYTE;
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_2)
 8012efe:	2901      	cmp	r1, #1
 8012f00:	d01c      	beq.n	8012f3c <FLASH_Erase_Sector+0x40>
  {
    tmp_psize = FLASH_PSIZE_WORD;
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 8012f02:	2902      	cmp	r1, #2
 8012f04:	bf0c      	ite	eq
 8012f06:	f44f 7100 	moveq.w	r1, #512	; 0x200
 8012f0a:	f44f 7140 	movne.w	r1, #768	; 0x300
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8012f0e:	4b0d      	ldr	r3, [pc, #52]	; (8012f44 <FLASH_Erase_Sector+0x48>)
 8012f10:	691a      	ldr	r2, [r3, #16]
 8012f12:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8012f16:	611a      	str	r2, [r3, #16]
  FLASH->CR |= tmp_psize;
 8012f18:	691a      	ldr	r2, [r3, #16]
 8012f1a:	4311      	orrs	r1, r2
 8012f1c:	6119      	str	r1, [r3, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 8012f1e:	691a      	ldr	r2, [r3, #16]
 8012f20:	f022 0278 	bic.w	r2, r2, #120	; 0x78
 8012f24:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 8012f26:	691a      	ldr	r2, [r3, #16]
 8012f28:	ea42 00c0 	orr.w	r0, r2, r0, lsl #3
 8012f2c:	f040 0002 	orr.w	r0, r0, #2
 8012f30:	6118      	str	r0, [r3, #16]
  FLASH->CR |= FLASH_CR_STRT;
 8012f32:	691a      	ldr	r2, [r3, #16]
 8012f34:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8012f38:	611a      	str	r2, [r3, #16]
}
 8012f3a:	4770      	bx	lr
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 8012f3c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8012f40:	e7e5      	b.n	8012f0e <FLASH_Erase_Sector+0x12>
 8012f42:	bf00      	nop
 8012f44:	40023c00 	.word	0x40023c00

08012f48 <FLASH_FlushCaches>:
  * @retval None
  */
void FLASH_FlushCaches(void)
{
  /* Flush instruction cache  */
  if(READ_BIT(FLASH->ACR, FLASH_ACR_ICEN)!= RESET)
 8012f48:	4b14      	ldr	r3, [pc, #80]	; (8012f9c <FLASH_FlushCaches+0x54>)
 8012f4a:	681a      	ldr	r2, [r3, #0]
 8012f4c:	0591      	lsls	r1, r2, #22
 8012f4e:	d50f      	bpl.n	8012f70 <FLASH_FlushCaches+0x28>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8012f50:	681a      	ldr	r2, [r3, #0]
 8012f52:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8012f56:	601a      	str	r2, [r3, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8012f58:	681a      	ldr	r2, [r3, #0]
 8012f5a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8012f5e:	601a      	str	r2, [r3, #0]
 8012f60:	681a      	ldr	r2, [r3, #0]
 8012f62:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8012f66:	601a      	str	r2, [r3, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8012f68:	681a      	ldr	r2, [r3, #0]
 8012f6a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8012f6e:	601a      	str	r2, [r3, #0]
  }
  
  /* Flush data cache */
  if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 8012f70:	4b0a      	ldr	r3, [pc, #40]	; (8012f9c <FLASH_FlushCaches+0x54>)
 8012f72:	681a      	ldr	r2, [r3, #0]
 8012f74:	0552      	lsls	r2, r2, #21
 8012f76:	d50f      	bpl.n	8012f98 <FLASH_FlushCaches+0x50>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 8012f78:	681a      	ldr	r2, [r3, #0]
 8012f7a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8012f7e:	601a      	str	r2, [r3, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8012f80:	681a      	ldr	r2, [r3, #0]
 8012f82:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8012f86:	601a      	str	r2, [r3, #0]
 8012f88:	681a      	ldr	r2, [r3, #0]
 8012f8a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8012f8e:	601a      	str	r2, [r3, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8012f90:	681a      	ldr	r2, [r3, #0]
 8012f92:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8012f96:	601a      	str	r2, [r3, #0]
  }
}
 8012f98:	4770      	bx	lr
 8012f9a:	bf00      	nop
 8012f9c:	40023c00 	.word	0x40023c00

08012fa0 <HAL_FLASHEx_Erase>:
{
 8012fa0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  __HAL_LOCK(&pFlash);
 8012fa4:	f8df 8094 	ldr.w	r8, [pc, #148]	; 801303c <HAL_FLASHEx_Erase+0x9c>
 8012fa8:	f898 3018 	ldrb.w	r3, [r8, #24]
 8012fac:	2b01      	cmp	r3, #1
{
 8012fae:	4605      	mov	r5, r0
 8012fb0:	460f      	mov	r7, r1
  __HAL_LOCK(&pFlash);
 8012fb2:	d03f      	beq.n	8013034 <HAL_FLASHEx_Erase+0x94>
 8012fb4:	2301      	movs	r3, #1
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8012fb6:	f24c 3050 	movw	r0, #50000	; 0xc350
  __HAL_LOCK(&pFlash);
 8012fba:	f888 3018 	strb.w	r3, [r8, #24]
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8012fbe:	f7ff ff1d 	bl	8012dfc <FLASH_WaitForLastOperation>
  if(status == HAL_OK)
 8012fc2:	4604      	mov	r4, r0
 8012fc4:	b9a0      	cbnz	r0, 8012ff0 <HAL_FLASHEx_Erase+0x50>
    *SectorError = 0xFFFFFFFFU;
 8012fc6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8012fca:	603b      	str	r3, [r7, #0]
    if(pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8012fcc:	682b      	ldr	r3, [r5, #0]
 8012fce:	2b01      	cmp	r3, #1
 8012fd0:	d114      	bne.n	8012ffc <HAL_FLASHEx_Erase+0x5c>
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 8012fd2:	7c28      	ldrb	r0, [r5, #16]
 8012fd4:	f7ff ff80 	bl	8012ed8 <FLASH_MassErase.constprop.0>
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8012fd8:	f24c 3050 	movw	r0, #50000	; 0xc350
 8012fdc:	f7ff ff0e 	bl	8012dfc <FLASH_WaitForLastOperation>
      FLASH->CR &= (~FLASH_MER_BIT);
 8012fe0:	4a15      	ldr	r2, [pc, #84]	; (8013038 <HAL_FLASHEx_Erase+0x98>)
 8012fe2:	6913      	ldr	r3, [r2, #16]
 8012fe4:	f023 0304 	bic.w	r3, r3, #4
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8012fe8:	4604      	mov	r4, r0
      FLASH->CR &= (~FLASH_MER_BIT);
 8012fea:	6113      	str	r3, [r2, #16]
    FLASH_FlushCaches();    
 8012fec:	f7ff ffac 	bl	8012f48 <FLASH_FlushCaches>
  __HAL_UNLOCK(&pFlash);
 8012ff0:	2300      	movs	r3, #0
 8012ff2:	f888 3018 	strb.w	r3, [r8, #24]
}
 8012ff6:	4620      	mov	r0, r4
 8012ff8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8012ffc:	68ae      	ldr	r6, [r5, #8]
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 8012ffe:	f8df 9038 	ldr.w	r9, [pc, #56]	; 8013038 <HAL_FLASHEx_Erase+0x98>
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8013002:	e9d5 2302 	ldrd	r2, r3, [r5, #8]
 8013006:	4413      	add	r3, r2
 8013008:	42b3      	cmp	r3, r6
 801300a:	d9ef      	bls.n	8012fec <HAL_FLASHEx_Erase+0x4c>
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 801300c:	7c29      	ldrb	r1, [r5, #16]
 801300e:	4630      	mov	r0, r6
 8013010:	f7ff ff74 	bl	8012efc <FLASH_Erase_Sector>
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8013014:	f24c 3050 	movw	r0, #50000	; 0xc350
 8013018:	f7ff fef0 	bl	8012dfc <FLASH_WaitForLastOperation>
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 801301c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8013020:	f023 037a 	bic.w	r3, r3, #122	; 0x7a
 8013024:	f8c9 3010 	str.w	r3, [r9, #16]
        if(status != HAL_OK) 
 8013028:	b110      	cbz	r0, 8013030 <HAL_FLASHEx_Erase+0x90>
          *SectorError = index;
 801302a:	603e      	str	r6, [r7, #0]
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 801302c:	4604      	mov	r4, r0
          break;
 801302e:	e7dd      	b.n	8012fec <HAL_FLASHEx_Erase+0x4c>
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8013030:	3601      	adds	r6, #1
 8013032:	e7e6      	b.n	8013002 <HAL_FLASHEx_Erase+0x62>
  __HAL_LOCK(&pFlash);
 8013034:	2402      	movs	r4, #2
 8013036:	e7de      	b.n	8012ff6 <HAL_FLASHEx_Erase+0x56>
 8013038:	40023c00 	.word	0x40023c00
 801303c:	20001dc8 	.word	0x20001dc8

08013040 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8013040:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8013044:	f8df 919c 	ldr.w	r9, [pc, #412]	; 80131e4 <HAL_GPIO_Init+0x1a4>
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8013048:	4a64      	ldr	r2, [pc, #400]	; (80131dc <HAL_GPIO_Init+0x19c>)
  for(position = 0U; position < GPIO_NUMBER; position++)
 801304a:	2300      	movs	r3, #0
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 801304c:	680d      	ldr	r5, [r1, #0]
    ioposition = 0x01U << position;
 801304e:	2401      	movs	r4, #1
 8013050:	409c      	lsls	r4, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8013052:	ea04 0c05 	and.w	ip, r4, r5
    if(iocurrent == ioposition)
 8013056:	43ac      	bics	r4, r5
 8013058:	f040 80ac 	bne.w	80131b4 <HAL_GPIO_Init+0x174>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 801305c:	684d      	ldr	r5, [r1, #4]
 801305e:	f005 0403 	and.w	r4, r5, #3
 8013062:	ea4f 0843 	mov.w	r8, r3, lsl #1
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8013066:	2603      	movs	r6, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8013068:	1e67      	subs	r7, r4, #1
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 801306a:	fa06 f608 	lsl.w	r6, r6, r8
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 801306e:	2f01      	cmp	r7, #1
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8013070:	ea6f 0606 	mvn.w	r6, r6
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8013074:	d834      	bhi.n	80130e0 <HAL_GPIO_Init+0xa0>
        temp = GPIOx->OSPEEDR; 
 8013076:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8013078:	ea07 0e06 	and.w	lr, r7, r6
        temp |= (GPIO_Init->Speed << (position * 2U));
 801307c:	68cf      	ldr	r7, [r1, #12]
 801307e:	fa07 f708 	lsl.w	r7, r7, r8
 8013082:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OSPEEDR = temp;
 8013086:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 8013088:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 801308a:	ea27 0e0c 	bic.w	lr, r7, ip
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 801308e:	f3c5 1700 	ubfx	r7, r5, #4, #1
 8013092:	409f      	lsls	r7, r3
 8013094:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OTYPER = temp;
 8013098:	6047      	str	r7, [r0, #4]
        temp = GPIOx->PUPDR;
 801309a:	68c7      	ldr	r7, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 801309c:	ea07 0e06 	and.w	lr, r7, r6
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80130a0:	688f      	ldr	r7, [r1, #8]
 80130a2:	fa07 f708 	lsl.w	r7, r7, r8
 80130a6:	ea47 070e 	orr.w	r7, r7, lr
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80130aa:	2c02      	cmp	r4, #2
        GPIOx->PUPDR = temp;
 80130ac:	60c7      	str	r7, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80130ae:	d119      	bne.n	80130e4 <HAL_GPIO_Init+0xa4>
        temp = GPIOx->AFR[position >> 3U];
 80130b0:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
 80130b4:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80130b8:	f003 0b07 	and.w	fp, r3, #7
        temp = GPIOx->AFR[position >> 3U];
 80130bc:	f8da 7020 	ldr.w	r7, [sl, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80130c0:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 80130c4:	f04f 0e0f 	mov.w	lr, #15
 80130c8:	fa0e fe0b 	lsl.w	lr, lr, fp
 80130cc:	ea27 0e0e 	bic.w	lr, r7, lr
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80130d0:	690f      	ldr	r7, [r1, #16]
 80130d2:	fa07 f70b 	lsl.w	r7, r7, fp
 80130d6:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->AFR[position >> 3U] = temp;
 80130da:	f8ca 7020 	str.w	r7, [sl, #32]
 80130de:	e001      	b.n	80130e4 <HAL_GPIO_Init+0xa4>
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80130e0:	2c03      	cmp	r4, #3
 80130e2:	d1da      	bne.n	801309a <HAL_GPIO_Init+0x5a>
      temp = GPIOx->MODER;
 80130e4:	6807      	ldr	r7, [r0, #0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80130e6:	fa04 f408 	lsl.w	r4, r4, r8
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80130ea:	403e      	ands	r6, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80130ec:	4326      	orrs	r6, r4
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80130ee:	00ec      	lsls	r4, r5, #3
      GPIOx->MODER = temp;
 80130f0:	6006      	str	r6, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80130f2:	d55f      	bpl.n	80131b4 <HAL_GPIO_Init+0x174>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80130f4:	f04f 0a00 	mov.w	sl, #0
 80130f8:	f8cd a004 	str.w	sl, [sp, #4]
 80130fc:	f8d9 6044 	ldr.w	r6, [r9, #68]	; 0x44
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8013100:	4c37      	ldr	r4, [pc, #220]	; (80131e0 <HAL_GPIO_Init+0x1a0>)
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8013102:	f446 4680 	orr.w	r6, r6, #16384	; 0x4000
 8013106:	f8c9 6044 	str.w	r6, [r9, #68]	; 0x44
 801310a:	f8d9 6044 	ldr.w	r6, [r9, #68]	; 0x44
 801310e:	f406 4680 	and.w	r6, r6, #16384	; 0x4000
 8013112:	9601      	str	r6, [sp, #4]
 8013114:	9e01      	ldr	r6, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 8013116:	f023 0603 	bic.w	r6, r3, #3
 801311a:	f106 4680 	add.w	r6, r6, #1073741824	; 0x40000000
 801311e:	f506 369c 	add.w	r6, r6, #79872	; 0x13800
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8013122:	f003 0e03 	and.w	lr, r3, #3
        temp = SYSCFG->EXTICR[position >> 2U];
 8013126:	f8d6 8008 	ldr.w	r8, [r6, #8]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 801312a:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 801312e:	270f      	movs	r7, #15
 8013130:	fa07 f70e 	lsl.w	r7, r7, lr
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8013134:	42a0      	cmp	r0, r4
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8013136:	ea28 0707 	bic.w	r7, r8, r7
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 801313a:	d042      	beq.n	80131c2 <HAL_GPIO_Init+0x182>
 801313c:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8013140:	42a0      	cmp	r0, r4
 8013142:	d040      	beq.n	80131c6 <HAL_GPIO_Init+0x186>
 8013144:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8013148:	42a0      	cmp	r0, r4
 801314a:	d03e      	beq.n	80131ca <HAL_GPIO_Init+0x18a>
 801314c:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8013150:	42a0      	cmp	r0, r4
 8013152:	d03c      	beq.n	80131ce <HAL_GPIO_Init+0x18e>
 8013154:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8013158:	42a0      	cmp	r0, r4
 801315a:	d03a      	beq.n	80131d2 <HAL_GPIO_Init+0x192>
 801315c:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8013160:	42a0      	cmp	r0, r4
 8013162:	d038      	beq.n	80131d6 <HAL_GPIO_Init+0x196>
 8013164:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8013168:	42a0      	cmp	r0, r4
 801316a:	bf0c      	ite	eq
 801316c:	2406      	moveq	r4, #6
 801316e:	2407      	movne	r4, #7
 8013170:	fa04 f40e 	lsl.w	r4, r4, lr
 8013174:	433c      	orrs	r4, r7
        SYSCFG->EXTICR[position >> 2U] = temp;
 8013176:	60b4      	str	r4, [r6, #8]
        temp = EXTI->IMR;
 8013178:	6814      	ldr	r4, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 801317a:	ea6f 060c 	mvn.w	r6, ip
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 801317e:	03ef      	lsls	r7, r5, #15
        temp &= ~((uint32_t)iocurrent);
 8013180:	bf54      	ite	pl
 8013182:	4034      	andpl	r4, r6
        {
          temp |= iocurrent;
 8013184:	ea4c 0404 	orrmi.w	r4, ip, r4
        }
        EXTI->IMR = temp;
 8013188:	6014      	str	r4, [r2, #0]

        temp = EXTI->EMR;
 801318a:	6854      	ldr	r4, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 801318c:	03af      	lsls	r7, r5, #14
        temp &= ~((uint32_t)iocurrent);
 801318e:	bf54      	ite	pl
 8013190:	4034      	andpl	r4, r6
        {
          temp |= iocurrent;
 8013192:	ea4c 0404 	orrmi.w	r4, ip, r4
        }
        EXTI->EMR = temp;
 8013196:	6054      	str	r4, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8013198:	6894      	ldr	r4, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 801319a:	02ef      	lsls	r7, r5, #11
        temp &= ~((uint32_t)iocurrent);
 801319c:	bf54      	ite	pl
 801319e:	4034      	andpl	r4, r6
        {
          temp |= iocurrent;
 80131a0:	ea4c 0404 	orrmi.w	r4, ip, r4
        }
        EXTI->RTSR = temp;
 80131a4:	6094      	str	r4, [r2, #8]

        temp = EXTI->FTSR;
 80131a6:	68d4      	ldr	r4, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80131a8:	02ad      	lsls	r5, r5, #10
        temp &= ~((uint32_t)iocurrent);
 80131aa:	bf54      	ite	pl
 80131ac:	4034      	andpl	r4, r6
        {
          temp |= iocurrent;
 80131ae:	ea4c 0404 	orrmi.w	r4, ip, r4
        }
        EXTI->FTSR = temp;
 80131b2:	60d4      	str	r4, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80131b4:	3301      	adds	r3, #1
 80131b6:	2b10      	cmp	r3, #16
 80131b8:	f47f af48 	bne.w	801304c <HAL_GPIO_Init+0xc>
      }
    }
  }
}
 80131bc:	b003      	add	sp, #12
 80131be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80131c2:	4654      	mov	r4, sl
 80131c4:	e7d4      	b.n	8013170 <HAL_GPIO_Init+0x130>
 80131c6:	2401      	movs	r4, #1
 80131c8:	e7d2      	b.n	8013170 <HAL_GPIO_Init+0x130>
 80131ca:	2402      	movs	r4, #2
 80131cc:	e7d0      	b.n	8013170 <HAL_GPIO_Init+0x130>
 80131ce:	2403      	movs	r4, #3
 80131d0:	e7ce      	b.n	8013170 <HAL_GPIO_Init+0x130>
 80131d2:	2404      	movs	r4, #4
 80131d4:	e7cc      	b.n	8013170 <HAL_GPIO_Init+0x130>
 80131d6:	2405      	movs	r4, #5
 80131d8:	e7ca      	b.n	8013170 <HAL_GPIO_Init+0x130>
 80131da:	bf00      	nop
 80131dc:	40013c00 	.word	0x40013c00
 80131e0:	40020000 	.word	0x40020000
 80131e4:	40023800 	.word	0x40023800

080131e8 <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80131e8:	6943      	ldr	r3, [r0, #20]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80131ea:	ea01 0203 	and.w	r2, r1, r3
 80131ee:	ea21 0103 	bic.w	r1, r1, r3
 80131f2:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80131f6:	6181      	str	r1, [r0, #24]
}
 80131f8:	4770      	bx	lr
	...

080131fc <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80131fc:	4913      	ldr	r1, [pc, #76]	; (801324c <HAL_RCC_GetSysClockFreq+0x50>)
{
 80131fe:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8013200:	688b      	ldr	r3, [r1, #8]
 8013202:	f003 030c 	and.w	r3, r3, #12
 8013206:	2b04      	cmp	r3, #4
 8013208:	d01c      	beq.n	8013244 <HAL_RCC_GetSysClockFreq+0x48>
 801320a:	2b08      	cmp	r3, #8
 801320c:	d11c      	bne.n	8013248 <HAL_RCC_GetSysClockFreq+0x4c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 801320e:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8013210:	684b      	ldr	r3, [r1, #4]
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8013212:	6849      	ldr	r1, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8013214:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8013218:	bf14      	ite	ne
 801321a:	480d      	ldrne	r0, [pc, #52]	; (8013250 <HAL_RCC_GetSysClockFreq+0x54>)
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 801321c:	480d      	ldreq	r0, [pc, #52]	; (8013254 <HAL_RCC_GetSysClockFreq+0x58>)
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 801321e:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8013222:	bf18      	it	ne
 8013224:	2300      	movne	r3, #0
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8013226:	f002 023f 	and.w	r2, r2, #63	; 0x3f
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 801322a:	fba1 0100 	umull	r0, r1, r1, r0
 801322e:	f7fe f95f 	bl	80114f0 <__aeabi_uldivmod>
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8013232:	4b06      	ldr	r3, [pc, #24]	; (801324c <HAL_RCC_GetSysClockFreq+0x50>)
 8013234:	685b      	ldr	r3, [r3, #4]
 8013236:	f3c3 4301 	ubfx	r3, r3, #16, #2
 801323a:	3301      	adds	r3, #1
 801323c:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco/pllp;
 801323e:	fbb0 f0f3 	udiv	r0, r0, r3
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8013242:	bd08      	pop	{r3, pc}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8013244:	4802      	ldr	r0, [pc, #8]	; (8013250 <HAL_RCC_GetSysClockFreq+0x54>)
 8013246:	e7fc      	b.n	8013242 <HAL_RCC_GetSysClockFreq+0x46>
      sysclockfreq = HSI_VALUE;
 8013248:	4802      	ldr	r0, [pc, #8]	; (8013254 <HAL_RCC_GetSysClockFreq+0x58>)
  return sysclockfreq;
 801324a:	e7fa      	b.n	8013242 <HAL_RCC_GetSysClockFreq+0x46>
 801324c:	40023800 	.word	0x40023800
 8013250:	007a1200 	.word	0x007a1200
 8013254:	00f42400 	.word	0x00f42400

08013258 <HAL_RCC_ClockConfig>:
{
 8013258:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801325c:	460d      	mov	r5, r1
  if(RCC_ClkInitStruct == NULL)
 801325e:	4604      	mov	r4, r0
 8013260:	b910      	cbnz	r0, 8013268 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 8013262:	2001      	movs	r0, #1
}
 8013264:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8013268:	4b44      	ldr	r3, [pc, #272]	; (801337c <HAL_RCC_ClockConfig+0x124>)
 801326a:	681a      	ldr	r2, [r3, #0]
 801326c:	f002 0207 	and.w	r2, r2, #7
 8013270:	428a      	cmp	r2, r1
 8013272:	d328      	bcc.n	80132c6 <HAL_RCC_ClockConfig+0x6e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8013274:	6822      	ldr	r2, [r4, #0]
 8013276:	0797      	lsls	r7, r2, #30
 8013278:	d42d      	bmi.n	80132d6 <HAL_RCC_ClockConfig+0x7e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 801327a:	07d0      	lsls	r0, r2, #31
 801327c:	d441      	bmi.n	8013302 <HAL_RCC_ClockConfig+0xaa>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 801327e:	4b3f      	ldr	r3, [pc, #252]	; (801337c <HAL_RCC_ClockConfig+0x124>)
 8013280:	681a      	ldr	r2, [r3, #0]
 8013282:	f002 0207 	and.w	r2, r2, #7
 8013286:	42aa      	cmp	r2, r5
 8013288:	d866      	bhi.n	8013358 <HAL_RCC_ClockConfig+0x100>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 801328a:	6822      	ldr	r2, [r4, #0]
 801328c:	0751      	lsls	r1, r2, #29
 801328e:	d46c      	bmi.n	801336a <HAL_RCC_ClockConfig+0x112>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8013290:	0713      	lsls	r3, r2, #28
 8013292:	d507      	bpl.n	80132a4 <HAL_RCC_ClockConfig+0x4c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8013294:	4a3a      	ldr	r2, [pc, #232]	; (8013380 <HAL_RCC_ClockConfig+0x128>)
 8013296:	6921      	ldr	r1, [r4, #16]
 8013298:	6893      	ldr	r3, [r2, #8]
 801329a:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 801329e:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80132a2:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80132a4:	f7ff ffaa 	bl	80131fc <HAL_RCC_GetSysClockFreq>
 80132a8:	4b35      	ldr	r3, [pc, #212]	; (8013380 <HAL_RCC_ClockConfig+0x128>)
 80132aa:	4a36      	ldr	r2, [pc, #216]	; (8013384 <HAL_RCC_ClockConfig+0x12c>)
 80132ac:	689b      	ldr	r3, [r3, #8]
 80132ae:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80132b2:	5cd3      	ldrb	r3, [r2, r3]
 80132b4:	40d8      	lsrs	r0, r3
 80132b6:	4b34      	ldr	r3, [pc, #208]	; (8013388 <HAL_RCC_ClockConfig+0x130>)
 80132b8:	6018      	str	r0, [r3, #0]
  HAL_InitTick (uwTickPrio);
 80132ba:	4b34      	ldr	r3, [pc, #208]	; (801338c <HAL_RCC_ClockConfig+0x134>)
 80132bc:	6818      	ldr	r0, [r3, #0]
 80132be:	f7ff fbaf 	bl	8012a20 <HAL_InitTick>
  return HAL_OK;
 80132c2:	2000      	movs	r0, #0
 80132c4:	e7ce      	b.n	8013264 <HAL_RCC_ClockConfig+0xc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80132c6:	b2ca      	uxtb	r2, r1
 80132c8:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80132ca:	681b      	ldr	r3, [r3, #0]
 80132cc:	f003 0307 	and.w	r3, r3, #7
 80132d0:	428b      	cmp	r3, r1
 80132d2:	d1c6      	bne.n	8013262 <HAL_RCC_ClockConfig+0xa>
 80132d4:	e7ce      	b.n	8013274 <HAL_RCC_ClockConfig+0x1c>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80132d6:	4b2a      	ldr	r3, [pc, #168]	; (8013380 <HAL_RCC_ClockConfig+0x128>)
 80132d8:	f012 0f04 	tst.w	r2, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80132dc:	bf1e      	ittt	ne
 80132de:	6899      	ldrne	r1, [r3, #8]
 80132e0:	f441 51e0 	orrne.w	r1, r1, #7168	; 0x1c00
 80132e4:	6099      	strne	r1, [r3, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80132e6:	0716      	lsls	r6, r2, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80132e8:	bf42      	ittt	mi
 80132ea:	6899      	ldrmi	r1, [r3, #8]
 80132ec:	f441 4160 	orrmi.w	r1, r1, #57344	; 0xe000
 80132f0:	6099      	strmi	r1, [r3, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80132f2:	4923      	ldr	r1, [pc, #140]	; (8013380 <HAL_RCC_ClockConfig+0x128>)
 80132f4:	68a0      	ldr	r0, [r4, #8]
 80132f6:	688b      	ldr	r3, [r1, #8]
 80132f8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80132fc:	4303      	orrs	r3, r0
 80132fe:	608b      	str	r3, [r1, #8]
 8013300:	e7bb      	b.n	801327a <HAL_RCC_ClockConfig+0x22>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8013302:	6862      	ldr	r2, [r4, #4]
 8013304:	4b1e      	ldr	r3, [pc, #120]	; (8013380 <HAL_RCC_ClockConfig+0x128>)
 8013306:	2a01      	cmp	r2, #1
 8013308:	d11c      	bne.n	8013344 <HAL_RCC_ClockConfig+0xec>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 801330a:	681b      	ldr	r3, [r3, #0]
 801330c:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8013310:	d0a7      	beq.n	8013262 <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8013312:	4e1b      	ldr	r6, [pc, #108]	; (8013380 <HAL_RCC_ClockConfig+0x128>)
 8013314:	68b3      	ldr	r3, [r6, #8]
 8013316:	f023 0303 	bic.w	r3, r3, #3
 801331a:	4313      	orrs	r3, r2
 801331c:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 801331e:	f7ff fbc7 	bl	8012ab0 <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8013322:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8013326:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8013328:	68b3      	ldr	r3, [r6, #8]
 801332a:	6862      	ldr	r2, [r4, #4]
 801332c:	f003 030c 	and.w	r3, r3, #12
 8013330:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8013334:	d0a3      	beq.n	801327e <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8013336:	f7ff fbbb 	bl	8012ab0 <HAL_GetTick>
 801333a:	1bc0      	subs	r0, r0, r7
 801333c:	4540      	cmp	r0, r8
 801333e:	d9f3      	bls.n	8013328 <HAL_RCC_ClockConfig+0xd0>
        return HAL_TIMEOUT;
 8013340:	2003      	movs	r0, #3
 8013342:	e78f      	b.n	8013264 <HAL_RCC_ClockConfig+0xc>
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8013344:	1e91      	subs	r1, r2, #2
 8013346:	2901      	cmp	r1, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8013348:	681b      	ldr	r3, [r3, #0]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 801334a:	d802      	bhi.n	8013352 <HAL_RCC_ClockConfig+0xfa>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 801334c:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8013350:	e7de      	b.n	8013310 <HAL_RCC_ClockConfig+0xb8>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8013352:	f013 0f02 	tst.w	r3, #2
 8013356:	e7db      	b.n	8013310 <HAL_RCC_ClockConfig+0xb8>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8013358:	b2ea      	uxtb	r2, r5
 801335a:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 801335c:	681b      	ldr	r3, [r3, #0]
 801335e:	f003 0307 	and.w	r3, r3, #7
 8013362:	42ab      	cmp	r3, r5
 8013364:	f47f af7d 	bne.w	8013262 <HAL_RCC_ClockConfig+0xa>
 8013368:	e78f      	b.n	801328a <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 801336a:	4905      	ldr	r1, [pc, #20]	; (8013380 <HAL_RCC_ClockConfig+0x128>)
 801336c:	68e0      	ldr	r0, [r4, #12]
 801336e:	688b      	ldr	r3, [r1, #8]
 8013370:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8013374:	4303      	orrs	r3, r0
 8013376:	608b      	str	r3, [r1, #8]
 8013378:	e78a      	b.n	8013290 <HAL_RCC_ClockConfig+0x38>
 801337a:	bf00      	nop
 801337c:	40023c00 	.word	0x40023c00
 8013380:	40023800 	.word	0x40023800
 8013384:	08014d58 	.word	0x08014d58
 8013388:	2000105c 	.word	0x2000105c
 801338c:	20001064 	.word	0x20001064

08013390 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8013390:	4b04      	ldr	r3, [pc, #16]	; (80133a4 <HAL_RCC_GetPCLK1Freq+0x14>)
 8013392:	4a05      	ldr	r2, [pc, #20]	; (80133a8 <HAL_RCC_GetPCLK1Freq+0x18>)
 8013394:	689b      	ldr	r3, [r3, #8]
 8013396:	f3c3 2382 	ubfx	r3, r3, #10, #3
 801339a:	5cd3      	ldrb	r3, [r2, r3]
 801339c:	4a03      	ldr	r2, [pc, #12]	; (80133ac <HAL_RCC_GetPCLK1Freq+0x1c>)
 801339e:	6810      	ldr	r0, [r2, #0]
}
 80133a0:	40d8      	lsrs	r0, r3
 80133a2:	4770      	bx	lr
 80133a4:	40023800 	.word	0x40023800
 80133a8:	08014d68 	.word	0x08014d68
 80133ac:	2000105c 	.word	0x2000105c

080133b0 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80133b0:	4b04      	ldr	r3, [pc, #16]	; (80133c4 <HAL_RCC_GetPCLK2Freq+0x14>)
 80133b2:	4a05      	ldr	r2, [pc, #20]	; (80133c8 <HAL_RCC_GetPCLK2Freq+0x18>)
 80133b4:	689b      	ldr	r3, [r3, #8]
 80133b6:	f3c3 3342 	ubfx	r3, r3, #13, #3
 80133ba:	5cd3      	ldrb	r3, [r2, r3]
 80133bc:	4a03      	ldr	r2, [pc, #12]	; (80133cc <HAL_RCC_GetPCLK2Freq+0x1c>)
 80133be:	6810      	ldr	r0, [r2, #0]
}
 80133c0:	40d8      	lsrs	r0, r3
 80133c2:	4770      	bx	lr
 80133c4:	40023800 	.word	0x40023800
 80133c8:	08014d68 	.word	0x08014d68
 80133cc:	2000105c 	.word	0x2000105c

080133d0 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80133d0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80133d4:	4604      	mov	r4, r0
 80133d6:	b340      	cbz	r0, 801342a <HAL_RCC_OscConfig+0x5a>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80133d8:	6803      	ldr	r3, [r0, #0]
 80133da:	07dd      	lsls	r5, r3, #31
 80133dc:	d410      	bmi.n	8013400 <HAL_RCC_OscConfig+0x30>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80133de:	6823      	ldr	r3, [r4, #0]
 80133e0:	0798      	lsls	r0, r3, #30
 80133e2:	d45e      	bmi.n	80134a2 <HAL_RCC_OscConfig+0xd2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80133e4:	6823      	ldr	r3, [r4, #0]
 80133e6:	071a      	lsls	r2, r3, #28
 80133e8:	f100 80a0 	bmi.w	801352c <HAL_RCC_OscConfig+0x15c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80133ec:	6823      	ldr	r3, [r4, #0]
 80133ee:	075b      	lsls	r3, r3, #29
 80133f0:	f100 80c0 	bmi.w	8013574 <HAL_RCC_OscConfig+0x1a4>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80133f4:	69a0      	ldr	r0, [r4, #24]
 80133f6:	2800      	cmp	r0, #0
 80133f8:	f040 8128 	bne.w	801364c <HAL_RCC_OscConfig+0x27c>
          return HAL_ERROR;
        }
      }
    }
  }
  return HAL_OK;
 80133fc:	2000      	movs	r0, #0
 80133fe:	e02b      	b.n	8013458 <HAL_RCC_OscConfig+0x88>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8013400:	4b8f      	ldr	r3, [pc, #572]	; (8013640 <HAL_RCC_OscConfig+0x270>)
 8013402:	689a      	ldr	r2, [r3, #8]
 8013404:	f002 020c 	and.w	r2, r2, #12
 8013408:	2a04      	cmp	r2, #4
 801340a:	d007      	beq.n	801341c <HAL_RCC_OscConfig+0x4c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 801340c:	689a      	ldr	r2, [r3, #8]
 801340e:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8013412:	2a08      	cmp	r2, #8
 8013414:	d10b      	bne.n	801342e <HAL_RCC_OscConfig+0x5e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8013416:	685a      	ldr	r2, [r3, #4]
 8013418:	0251      	lsls	r1, r2, #9
 801341a:	d508      	bpl.n	801342e <HAL_RCC_OscConfig+0x5e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 801341c:	4b88      	ldr	r3, [pc, #544]	; (8013640 <HAL_RCC_OscConfig+0x270>)
 801341e:	681b      	ldr	r3, [r3, #0]
 8013420:	039a      	lsls	r2, r3, #14
 8013422:	d5dc      	bpl.n	80133de <HAL_RCC_OscConfig+0xe>
 8013424:	6863      	ldr	r3, [r4, #4]
 8013426:	2b00      	cmp	r3, #0
 8013428:	d1d9      	bne.n	80133de <HAL_RCC_OscConfig+0xe>
          return HAL_ERROR;
 801342a:	2001      	movs	r0, #1
 801342c:	e014      	b.n	8013458 <HAL_RCC_OscConfig+0x88>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 801342e:	6862      	ldr	r2, [r4, #4]
 8013430:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 8013434:	d113      	bne.n	801345e <HAL_RCC_OscConfig+0x8e>
 8013436:	681a      	ldr	r2, [r3, #0]
 8013438:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 801343c:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 801343e:	f7ff fb37 	bl	8012ab0 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8013442:	4e7f      	ldr	r6, [pc, #508]	; (8013640 <HAL_RCC_OscConfig+0x270>)
        tickstart = HAL_GetTick();
 8013444:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8013446:	6833      	ldr	r3, [r6, #0]
 8013448:	039b      	lsls	r3, r3, #14
 801344a:	d4c8      	bmi.n	80133de <HAL_RCC_OscConfig+0xe>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 801344c:	f7ff fb30 	bl	8012ab0 <HAL_GetTick>
 8013450:	1b40      	subs	r0, r0, r5
 8013452:	2864      	cmp	r0, #100	; 0x64
 8013454:	d9f7      	bls.n	8013446 <HAL_RCC_OscConfig+0x76>
            return HAL_TIMEOUT;
 8013456:	2003      	movs	r0, #3
}
 8013458:	b002      	add	sp, #8
 801345a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 801345e:	4d78      	ldr	r5, [pc, #480]	; (8013640 <HAL_RCC_OscConfig+0x270>)
 8013460:	f5b2 2fa0 	cmp.w	r2, #327680	; 0x50000
 8013464:	682b      	ldr	r3, [r5, #0]
 8013466:	d107      	bne.n	8013478 <HAL_RCC_OscConfig+0xa8>
 8013468:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 801346c:	602b      	str	r3, [r5, #0]
 801346e:	682b      	ldr	r3, [r5, #0]
 8013470:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8013474:	602b      	str	r3, [r5, #0]
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8013476:	e7e2      	b.n	801343e <HAL_RCC_OscConfig+0x6e>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8013478:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 801347c:	602b      	str	r3, [r5, #0]
 801347e:	682b      	ldr	r3, [r5, #0]
 8013480:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8013484:	602b      	str	r3, [r5, #0]
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8013486:	2a00      	cmp	r2, #0
 8013488:	d1d9      	bne.n	801343e <HAL_RCC_OscConfig+0x6e>
        tickstart = HAL_GetTick();
 801348a:	f7ff fb11 	bl	8012ab0 <HAL_GetTick>
 801348e:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8013490:	682b      	ldr	r3, [r5, #0]
 8013492:	039f      	lsls	r7, r3, #14
 8013494:	d5a3      	bpl.n	80133de <HAL_RCC_OscConfig+0xe>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8013496:	f7ff fb0b 	bl	8012ab0 <HAL_GetTick>
 801349a:	1b80      	subs	r0, r0, r6
 801349c:	2864      	cmp	r0, #100	; 0x64
 801349e:	d9f7      	bls.n	8013490 <HAL_RCC_OscConfig+0xc0>
 80134a0:	e7d9      	b.n	8013456 <HAL_RCC_OscConfig+0x86>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80134a2:	4b67      	ldr	r3, [pc, #412]	; (8013640 <HAL_RCC_OscConfig+0x270>)
 80134a4:	689a      	ldr	r2, [r3, #8]
 80134a6:	f012 0f0c 	tst.w	r2, #12
 80134aa:	d007      	beq.n	80134bc <HAL_RCC_OscConfig+0xec>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80134ac:	689a      	ldr	r2, [r3, #8]
 80134ae:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80134b2:	2a08      	cmp	r2, #8
 80134b4:	d111      	bne.n	80134da <HAL_RCC_OscConfig+0x10a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80134b6:	685b      	ldr	r3, [r3, #4]
 80134b8:	025e      	lsls	r6, r3, #9
 80134ba:	d40e      	bmi.n	80134da <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80134bc:	4a60      	ldr	r2, [pc, #384]	; (8013640 <HAL_RCC_OscConfig+0x270>)
 80134be:	6813      	ldr	r3, [r2, #0]
 80134c0:	079d      	lsls	r5, r3, #30
 80134c2:	d502      	bpl.n	80134ca <HAL_RCC_OscConfig+0xfa>
 80134c4:	68e3      	ldr	r3, [r4, #12]
 80134c6:	2b01      	cmp	r3, #1
 80134c8:	d1af      	bne.n	801342a <HAL_RCC_OscConfig+0x5a>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80134ca:	6813      	ldr	r3, [r2, #0]
 80134cc:	6921      	ldr	r1, [r4, #16]
 80134ce:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80134d2:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80134d6:	6013      	str	r3, [r2, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80134d8:	e784      	b.n	80133e4 <HAL_RCC_OscConfig+0x14>
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80134da:	68e2      	ldr	r2, [r4, #12]
 80134dc:	4b59      	ldr	r3, [pc, #356]	; (8013644 <HAL_RCC_OscConfig+0x274>)
 80134de:	b1b2      	cbz	r2, 801350e <HAL_RCC_OscConfig+0x13e>
        __HAL_RCC_HSI_ENABLE();
 80134e0:	2201      	movs	r2, #1
 80134e2:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80134e4:	f7ff fae4 	bl	8012ab0 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80134e8:	4d55      	ldr	r5, [pc, #340]	; (8013640 <HAL_RCC_OscConfig+0x270>)
        tickstart = HAL_GetTick();
 80134ea:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80134ec:	682b      	ldr	r3, [r5, #0]
 80134ee:	0798      	lsls	r0, r3, #30
 80134f0:	d507      	bpl.n	8013502 <HAL_RCC_OscConfig+0x132>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80134f2:	682b      	ldr	r3, [r5, #0]
 80134f4:	6922      	ldr	r2, [r4, #16]
 80134f6:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80134fa:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 80134fe:	602b      	str	r3, [r5, #0]
 8013500:	e770      	b.n	80133e4 <HAL_RCC_OscConfig+0x14>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8013502:	f7ff fad5 	bl	8012ab0 <HAL_GetTick>
 8013506:	1b80      	subs	r0, r0, r6
 8013508:	2802      	cmp	r0, #2
 801350a:	d9ef      	bls.n	80134ec <HAL_RCC_OscConfig+0x11c>
 801350c:	e7a3      	b.n	8013456 <HAL_RCC_OscConfig+0x86>
        __HAL_RCC_HSI_DISABLE();
 801350e:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8013510:	f7ff face 	bl	8012ab0 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8013514:	4e4a      	ldr	r6, [pc, #296]	; (8013640 <HAL_RCC_OscConfig+0x270>)
        tickstart = HAL_GetTick();
 8013516:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8013518:	6833      	ldr	r3, [r6, #0]
 801351a:	0799      	lsls	r1, r3, #30
 801351c:	f57f af62 	bpl.w	80133e4 <HAL_RCC_OscConfig+0x14>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8013520:	f7ff fac6 	bl	8012ab0 <HAL_GetTick>
 8013524:	1b40      	subs	r0, r0, r5
 8013526:	2802      	cmp	r0, #2
 8013528:	d9f6      	bls.n	8013518 <HAL_RCC_OscConfig+0x148>
 801352a:	e794      	b.n	8013456 <HAL_RCC_OscConfig+0x86>
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 801352c:	6962      	ldr	r2, [r4, #20]
 801352e:	4b45      	ldr	r3, [pc, #276]	; (8013644 <HAL_RCC_OscConfig+0x274>)
 8013530:	b182      	cbz	r2, 8013554 <HAL_RCC_OscConfig+0x184>
      __HAL_RCC_LSI_ENABLE();
 8013532:	2201      	movs	r2, #1
 8013534:	f8c3 2e80 	str.w	r2, [r3, #3712]	; 0xe80
      tickstart = HAL_GetTick();
 8013538:	f7ff faba 	bl	8012ab0 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 801353c:	4e40      	ldr	r6, [pc, #256]	; (8013640 <HAL_RCC_OscConfig+0x270>)
      tickstart = HAL_GetTick();
 801353e:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8013540:	6f73      	ldr	r3, [r6, #116]	; 0x74
 8013542:	079f      	lsls	r7, r3, #30
 8013544:	f53f af52 	bmi.w	80133ec <HAL_RCC_OscConfig+0x1c>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8013548:	f7ff fab2 	bl	8012ab0 <HAL_GetTick>
 801354c:	1b40      	subs	r0, r0, r5
 801354e:	2802      	cmp	r0, #2
 8013550:	d9f6      	bls.n	8013540 <HAL_RCC_OscConfig+0x170>
 8013552:	e780      	b.n	8013456 <HAL_RCC_OscConfig+0x86>
      __HAL_RCC_LSI_DISABLE();
 8013554:	f8c3 2e80 	str.w	r2, [r3, #3712]	; 0xe80
      tickstart = HAL_GetTick();
 8013558:	f7ff faaa 	bl	8012ab0 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 801355c:	4e38      	ldr	r6, [pc, #224]	; (8013640 <HAL_RCC_OscConfig+0x270>)
      tickstart = HAL_GetTick();
 801355e:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8013560:	6f73      	ldr	r3, [r6, #116]	; 0x74
 8013562:	0798      	lsls	r0, r3, #30
 8013564:	f57f af42 	bpl.w	80133ec <HAL_RCC_OscConfig+0x1c>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8013568:	f7ff faa2 	bl	8012ab0 <HAL_GetTick>
 801356c:	1b40      	subs	r0, r0, r5
 801356e:	2802      	cmp	r0, #2
 8013570:	d9f6      	bls.n	8013560 <HAL_RCC_OscConfig+0x190>
 8013572:	e770      	b.n	8013456 <HAL_RCC_OscConfig+0x86>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8013574:	4b32      	ldr	r3, [pc, #200]	; (8013640 <HAL_RCC_OscConfig+0x270>)
 8013576:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8013578:	f012 5280 	ands.w	r2, r2, #268435456	; 0x10000000
 801357c:	d128      	bne.n	80135d0 <HAL_RCC_OscConfig+0x200>
      __HAL_RCC_PWR_CLK_ENABLE();
 801357e:	9201      	str	r2, [sp, #4]
 8013580:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8013582:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8013586:	641a      	str	r2, [r3, #64]	; 0x40
 8013588:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801358a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 801358e:	9301      	str	r3, [sp, #4]
 8013590:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8013592:	2701      	movs	r7, #1
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8013594:	4d2c      	ldr	r5, [pc, #176]	; (8013648 <HAL_RCC_OscConfig+0x278>)
 8013596:	682b      	ldr	r3, [r5, #0]
 8013598:	05d9      	lsls	r1, r3, #23
 801359a:	d51b      	bpl.n	80135d4 <HAL_RCC_OscConfig+0x204>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 801359c:	68a3      	ldr	r3, [r4, #8]
 801359e:	4d28      	ldr	r5, [pc, #160]	; (8013640 <HAL_RCC_OscConfig+0x270>)
 80135a0:	2b01      	cmp	r3, #1
 80135a2:	d127      	bne.n	80135f4 <HAL_RCC_OscConfig+0x224>
 80135a4:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80135a6:	f043 0301 	orr.w	r3, r3, #1
 80135aa:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
 80135ac:	f7ff fa80 	bl	8012ab0 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80135b0:	4e23      	ldr	r6, [pc, #140]	; (8013640 <HAL_RCC_OscConfig+0x270>)
      tickstart = HAL_GetTick();
 80135b2:	4605      	mov	r5, r0
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80135b4:	f241 3888 	movw	r8, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80135b8:	6f33      	ldr	r3, [r6, #112]	; 0x70
 80135ba:	079b      	lsls	r3, r3, #30
 80135bc:	d539      	bpl.n	8013632 <HAL_RCC_OscConfig+0x262>
    if(pwrclkchanged == SET)
 80135be:	2f00      	cmp	r7, #0
 80135c0:	f43f af18 	beq.w	80133f4 <HAL_RCC_OscConfig+0x24>
      __HAL_RCC_PWR_CLK_DISABLE();
 80135c4:	4a1e      	ldr	r2, [pc, #120]	; (8013640 <HAL_RCC_OscConfig+0x270>)
 80135c6:	6c13      	ldr	r3, [r2, #64]	; 0x40
 80135c8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80135cc:	6413      	str	r3, [r2, #64]	; 0x40
 80135ce:	e711      	b.n	80133f4 <HAL_RCC_OscConfig+0x24>
    FlagStatus       pwrclkchanged = RESET;
 80135d0:	2700      	movs	r7, #0
 80135d2:	e7df      	b.n	8013594 <HAL_RCC_OscConfig+0x1c4>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80135d4:	682b      	ldr	r3, [r5, #0]
 80135d6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80135da:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 80135dc:	f7ff fa68 	bl	8012ab0 <HAL_GetTick>
 80135e0:	4606      	mov	r6, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80135e2:	682b      	ldr	r3, [r5, #0]
 80135e4:	05da      	lsls	r2, r3, #23
 80135e6:	d4d9      	bmi.n	801359c <HAL_RCC_OscConfig+0x1cc>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80135e8:	f7ff fa62 	bl	8012ab0 <HAL_GetTick>
 80135ec:	1b80      	subs	r0, r0, r6
 80135ee:	2802      	cmp	r0, #2
 80135f0:	d9f7      	bls.n	80135e2 <HAL_RCC_OscConfig+0x212>
 80135f2:	e730      	b.n	8013456 <HAL_RCC_OscConfig+0x86>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80135f4:	2b05      	cmp	r3, #5
 80135f6:	d104      	bne.n	8013602 <HAL_RCC_OscConfig+0x232>
 80135f8:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80135fa:	f043 0304 	orr.w	r3, r3, #4
 80135fe:	672b      	str	r3, [r5, #112]	; 0x70
 8013600:	e7d0      	b.n	80135a4 <HAL_RCC_OscConfig+0x1d4>
 8013602:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8013604:	f022 0201 	bic.w	r2, r2, #1
 8013608:	672a      	str	r2, [r5, #112]	; 0x70
 801360a:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 801360c:	f022 0204 	bic.w	r2, r2, #4
 8013610:	672a      	str	r2, [r5, #112]	; 0x70
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8013612:	2b00      	cmp	r3, #0
 8013614:	d1ca      	bne.n	80135ac <HAL_RCC_OscConfig+0x1dc>
      tickstart = HAL_GetTick();
 8013616:	f7ff fa4b 	bl	8012ab0 <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 801361a:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 801361e:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8013620:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8013622:	0798      	lsls	r0, r3, #30
 8013624:	d5cb      	bpl.n	80135be <HAL_RCC_OscConfig+0x1ee>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8013626:	f7ff fa43 	bl	8012ab0 <HAL_GetTick>
 801362a:	1b80      	subs	r0, r0, r6
 801362c:	4540      	cmp	r0, r8
 801362e:	d9f7      	bls.n	8013620 <HAL_RCC_OscConfig+0x250>
 8013630:	e711      	b.n	8013456 <HAL_RCC_OscConfig+0x86>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8013632:	f7ff fa3d 	bl	8012ab0 <HAL_GetTick>
 8013636:	1b40      	subs	r0, r0, r5
 8013638:	4540      	cmp	r0, r8
 801363a:	d9bd      	bls.n	80135b8 <HAL_RCC_OscConfig+0x1e8>
 801363c:	e70b      	b.n	8013456 <HAL_RCC_OscConfig+0x86>
 801363e:	bf00      	nop
 8013640:	40023800 	.word	0x40023800
 8013644:	42470000 	.word	0x42470000
 8013648:	40007000 	.word	0x40007000
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 801364c:	4d3b      	ldr	r5, [pc, #236]	; (801373c <HAL_RCC_OscConfig+0x36c>)
 801364e:	68ab      	ldr	r3, [r5, #8]
 8013650:	f003 030c 	and.w	r3, r3, #12
 8013654:	2b08      	cmp	r3, #8
 8013656:	d040      	beq.n	80136da <HAL_RCC_OscConfig+0x30a>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8013658:	4b39      	ldr	r3, [pc, #228]	; (8013740 <HAL_RCC_OscConfig+0x370>)
 801365a:	2200      	movs	r2, #0
 801365c:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 801365e:	661a      	str	r2, [r3, #96]	; 0x60
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8013660:	d12e      	bne.n	80136c0 <HAL_RCC_OscConfig+0x2f0>
        tickstart = HAL_GetTick();
 8013662:	f7ff fa25 	bl	8012ab0 <HAL_GetTick>
 8013666:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8013668:	682b      	ldr	r3, [r5, #0]
 801366a:	0199      	lsls	r1, r3, #6
 801366c:	d422      	bmi.n	80136b4 <HAL_RCC_OscConfig+0x2e4>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 801366e:	e9d4 3207 	ldrd	r3, r2, [r4, #28]
 8013672:	4313      	orrs	r3, r2
 8013674:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8013676:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 801367a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 801367c:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8013680:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8013682:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
 8013686:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8013688:	0852      	lsrs	r2, r2, #1
 801368a:	3a01      	subs	r2, #1
 801368c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8013690:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8013692:	4b2b      	ldr	r3, [pc, #172]	; (8013740 <HAL_RCC_OscConfig+0x370>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8013694:	4d29      	ldr	r5, [pc, #164]	; (801373c <HAL_RCC_OscConfig+0x36c>)
        __HAL_RCC_PLL_ENABLE();
 8013696:	2201      	movs	r2, #1
 8013698:	661a      	str	r2, [r3, #96]	; 0x60
        tickstart = HAL_GetTick();
 801369a:	f7ff fa09 	bl	8012ab0 <HAL_GetTick>
 801369e:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80136a0:	682b      	ldr	r3, [r5, #0]
 80136a2:	019a      	lsls	r2, r3, #6
 80136a4:	f53f aeaa 	bmi.w	80133fc <HAL_RCC_OscConfig+0x2c>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80136a8:	f7ff fa02 	bl	8012ab0 <HAL_GetTick>
 80136ac:	1b00      	subs	r0, r0, r4
 80136ae:	2802      	cmp	r0, #2
 80136b0:	d9f6      	bls.n	80136a0 <HAL_RCC_OscConfig+0x2d0>
 80136b2:	e6d0      	b.n	8013456 <HAL_RCC_OscConfig+0x86>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80136b4:	f7ff f9fc 	bl	8012ab0 <HAL_GetTick>
 80136b8:	1b80      	subs	r0, r0, r6
 80136ba:	2802      	cmp	r0, #2
 80136bc:	d9d4      	bls.n	8013668 <HAL_RCC_OscConfig+0x298>
 80136be:	e6ca      	b.n	8013456 <HAL_RCC_OscConfig+0x86>
        tickstart = HAL_GetTick();
 80136c0:	f7ff f9f6 	bl	8012ab0 <HAL_GetTick>
 80136c4:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80136c6:	682b      	ldr	r3, [r5, #0]
 80136c8:	019b      	lsls	r3, r3, #6
 80136ca:	f57f ae97 	bpl.w	80133fc <HAL_RCC_OscConfig+0x2c>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80136ce:	f7ff f9ef 	bl	8012ab0 <HAL_GetTick>
 80136d2:	1b00      	subs	r0, r0, r4
 80136d4:	2802      	cmp	r0, #2
 80136d6:	d9f6      	bls.n	80136c6 <HAL_RCC_OscConfig+0x2f6>
 80136d8:	e6bd      	b.n	8013456 <HAL_RCC_OscConfig+0x86>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80136da:	2801      	cmp	r0, #1
 80136dc:	f43f aebc 	beq.w	8013458 <HAL_RCC_OscConfig+0x88>
        pll_config = RCC->PLLCFGR;
 80136e0:	686b      	ldr	r3, [r5, #4]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80136e2:	69e2      	ldr	r2, [r4, #28]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80136e4:	f403 0180 	and.w	r1, r3, #4194304	; 0x400000
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80136e8:	4291      	cmp	r1, r2
 80136ea:	f47f ae9e 	bne.w	801342a <HAL_RCC_OscConfig+0x5a>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80136ee:	6a21      	ldr	r1, [r4, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80136f0:	f003 023f 	and.w	r2, r3, #63	; 0x3f
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80136f4:	428a      	cmp	r2, r1
 80136f6:	f47f ae98 	bne.w	801342a <HAL_RCC_OscConfig+0x5a>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80136fa:	6a61      	ldr	r1, [r4, #36]	; 0x24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80136fc:	f647 72c0 	movw	r2, #32704	; 0x7fc0
 8013700:	401a      	ands	r2, r3
 8013702:	ebb2 1f81 	cmp.w	r2, r1, lsl #6
 8013706:	f47f ae90 	bne.w	801342a <HAL_RCC_OscConfig+0x5a>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 801370a:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 801370c:	0852      	lsrs	r2, r2, #1
 801370e:	f403 3140 	and.w	r1, r3, #196608	; 0x30000
 8013712:	3a01      	subs	r2, #1
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8013714:	ebb1 4f02 	cmp.w	r1, r2, lsl #16
 8013718:	f47f ae87 	bne.w	801342a <HAL_RCC_OscConfig+0x5a>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 801371c:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 801371e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8013722:	ebb2 6f01 	cmp.w	r2, r1, lsl #24
 8013726:	f47f ae80 	bne.w	801342a <HAL_RCC_OscConfig+0x5a>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 801372a:	6b22      	ldr	r2, [r4, #48]	; 0x30
 801372c:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8013730:	ebb3 7f02 	cmp.w	r3, r2, lsl #28
 8013734:	f43f ae62 	beq.w	80133fc <HAL_RCC_OscConfig+0x2c>
 8013738:	e677      	b.n	801342a <HAL_RCC_OscConfig+0x5a>
 801373a:	bf00      	nop
 801373c:	40023800 	.word	0x40023800
 8013740:	42470000 	.word	0x42470000

08013744 <HAL_RTCEx_TimeStampEventCallback>:
 8013744:	4770      	bx	lr

08013746 <HAL_RTCEx_Tamper2EventCallback>:
 8013746:	4770      	bx	lr

08013748 <HAL_RTCEx_TamperTimeStampIRQHandler>:
  * @retval None
  */
void HAL_RTCEx_TamperTimeStampIRQHandler(RTC_HandleTypeDef *hrtc)
{
  /* Get the TimeStamp interrupt source enable status */
  if(__HAL_RTC_TIMESTAMP_GET_IT_SOURCE(hrtc, RTC_IT_TS) != (uint32_t)RESET)
 8013748:	6803      	ldr	r3, [r0, #0]
 801374a:	689a      	ldr	r2, [r3, #8]
 801374c:	0412      	lsls	r2, r2, #16
{
 801374e:	b510      	push	{r4, lr}
 8013750:	4604      	mov	r4, r0
  if(__HAL_RTC_TIMESTAMP_GET_IT_SOURCE(hrtc, RTC_IT_TS) != (uint32_t)RESET)
 8013752:	d50a      	bpl.n	801376a <HAL_RTCEx_TamperTimeStampIRQHandler+0x22>
  {
    /* Get the pending status of the TIMESTAMP Interrupt */
    if(__HAL_RTC_TIMESTAMP_GET_FLAG(hrtc, RTC_FLAG_TSF) != (uint32_t)RESET)
 8013754:	68db      	ldr	r3, [r3, #12]
 8013756:	051b      	lsls	r3, r3, #20
 8013758:	d507      	bpl.n	801376a <HAL_RTCEx_TamperTimeStampIRQHandler+0x22>
    {
      /* TIMESTAMP callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->TimeStampEventCallback(hrtc);
#else
      HAL_RTCEx_TimeStampEventCallback(hrtc);
 801375a:	f7ff fff3 	bl	8013744 <HAL_RTCEx_TimeStampEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the TIMESTAMP interrupt pending bit */
      __HAL_RTC_TIMESTAMP_CLEAR_FLAG(hrtc,RTC_FLAG_TSF);
 801375e:	6822      	ldr	r2, [r4, #0]
 8013760:	68d3      	ldr	r3, [r2, #12]
 8013762:	b2db      	uxtb	r3, r3
 8013764:	f463 6308 	orn	r3, r3, #2176	; 0x880
 8013768:	60d3      	str	r3, [r2, #12]
    }
  }

  /* Get the Tamper1 interrupt source enable status */
  if(__HAL_RTC_TAMPER_GET_IT_SOURCE(hrtc, RTC_IT_TAMP) != (uint32_t)RESET)
 801376a:	6823      	ldr	r3, [r4, #0]
 801376c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 801376e:	0750      	lsls	r0, r2, #29
 8013770:	d50b      	bpl.n	801378a <HAL_RTCEx_TamperTimeStampIRQHandler+0x42>
  {
    /* Get the pending status of the Tamper1 Interrupt */
    if(__HAL_RTC_TAMPER_GET_FLAG(hrtc, RTC_FLAG_TAMP1F) != (uint32_t)RESET)
 8013772:	68db      	ldr	r3, [r3, #12]
 8013774:	0499      	lsls	r1, r3, #18
 8013776:	d508      	bpl.n	801378a <HAL_RTCEx_TamperTimeStampIRQHandler+0x42>
    {
      /* Tamper callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->Tamper1EventCallback(hrtc);
#else
      HAL_RTCEx_Tamper1EventCallback(hrtc);
 8013778:	4620      	mov	r0, r4
 801377a:	f7fe ff3d 	bl	80125f8 <HAL_RTCEx_Tamper1EventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the Tamper interrupt pending bit */
      __HAL_RTC_TAMPER_CLEAR_FLAG(hrtc,RTC_FLAG_TAMP1F);
 801377e:	6822      	ldr	r2, [r4, #0]
 8013780:	68d3      	ldr	r3, [r2, #12]
 8013782:	b2db      	uxtb	r3, r3
 8013784:	f463 5302 	orn	r3, r3, #8320	; 0x2080
 8013788:	60d3      	str	r3, [r2, #12]
    }
  }

  /* Get the Tamper2 interrupt source enable status */
  if(__HAL_RTC_TAMPER_GET_IT_SOURCE(hrtc, RTC_IT_TAMP) != (uint32_t)RESET)
 801378a:	6823      	ldr	r3, [r4, #0]
 801378c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 801378e:	0752      	lsls	r2, r2, #29
 8013790:	d50b      	bpl.n	80137aa <HAL_RTCEx_TamperTimeStampIRQHandler+0x62>
  {
    /* Get the pending status of the Tamper2 Interrupt */
    if(__HAL_RTC_TAMPER_GET_FLAG(hrtc, RTC_FLAG_TAMP2F) != (uint32_t)RESET)
 8013792:	68db      	ldr	r3, [r3, #12]
 8013794:	045b      	lsls	r3, r3, #17
 8013796:	d508      	bpl.n	80137aa <HAL_RTCEx_TamperTimeStampIRQHandler+0x62>
    {
      /* Tamper callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->Tamper2EventCallback(hrtc);
#else
      HAL_RTCEx_Tamper2EventCallback(hrtc);
 8013798:	4620      	mov	r0, r4
 801379a:	f7ff ffd4 	bl	8013746 <HAL_RTCEx_Tamper2EventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the Tamper interrupt pending bit */
      __HAL_RTC_TAMPER_CLEAR_FLAG(hrtc, RTC_FLAG_TAMP2F);
 801379e:	6822      	ldr	r2, [r4, #0]
 80137a0:	68d3      	ldr	r3, [r2, #12]
 80137a2:	b2db      	uxtb	r3, r3
 80137a4:	f463 4381 	orn	r3, r3, #16512	; 0x4080
 80137a8:	60d3      	str	r3, [r2, #12]
    }
  }

  /* Clear the EXTI's Flag for RTC TimeStamp and Tamper */
  __HAL_RTC_TAMPER_TIMESTAMP_EXTI_CLEAR_FLAG();
 80137aa:	4b03      	ldr	r3, [pc, #12]	; (80137b8 <HAL_RTCEx_TamperTimeStampIRQHandler+0x70>)
 80137ac:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80137b0:	615a      	str	r2, [r3, #20]

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 80137b2:	2301      	movs	r3, #1
 80137b4:	7763      	strb	r3, [r4, #29]
}
 80137b6:	bd10      	pop	{r4, pc}
 80137b8:	40013c00 	.word	0x40013c00

080137bc <UART_SetConfig>:
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80137bc:	6803      	ldr	r3, [r0, #0]
 80137be:	68c1      	ldr	r1, [r0, #12]
 80137c0:	691a      	ldr	r2, [r3, #16]
 80137c2:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 80137c6:	430a      	orrs	r2, r1
{
 80137c8:	b570      	push	{r4, r5, r6, lr}
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80137ca:	611a      	str	r2, [r3, #16]
{
 80137cc:	4605      	mov	r5, r0
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80137ce:	6882      	ldr	r2, [r0, #8]
 80137d0:	6900      	ldr	r0, [r0, #16]
  MODIFY_REG(huart->Instance->CR1,
 80137d2:	68d9      	ldr	r1, [r3, #12]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80137d4:	4302      	orrs	r2, r0
 80137d6:	6968      	ldr	r0, [r5, #20]
 80137d8:	4302      	orrs	r2, r0
 80137da:	69e8      	ldr	r0, [r5, #28]
  MODIFY_REG(huart->Instance->CR1,
 80137dc:	f421 4116 	bic.w	r1, r1, #38400	; 0x9600
 80137e0:	f021 010c 	bic.w	r1, r1, #12
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80137e4:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1,
 80137e6:	430a      	orrs	r2, r1
 80137e8:	60da      	str	r2, [r3, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80137ea:	695a      	ldr	r2, [r3, #20]
 80137ec:	69a9      	ldr	r1, [r5, #24]
 80137ee:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80137f2:	430a      	orrs	r2, r1
 80137f4:	615a      	str	r2, [r3, #20]


#if defined(USART6) && defined(UART9) && defined(UART10)
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
 80137f6:	4a23      	ldr	r2, [pc, #140]	; (8013884 <UART_SetConfig+0xc8>)
 80137f8:	4293      	cmp	r3, r2
 80137fa:	d00b      	beq.n	8013814 <UART_SetConfig+0x58>
 80137fc:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8013800:	4293      	cmp	r3, r2
 8013802:	d007      	beq.n	8013814 <UART_SetConfig+0x58>
 8013804:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8013808:	4293      	cmp	r3, r2
 801380a:	d003      	beq.n	8013814 <UART_SetConfig+0x58>
 801380c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8013810:	4293      	cmp	r3, r2
 8013812:	d123      	bne.n	801385c <UART_SetConfig+0xa0>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8013814:	f7ff fdcc 	bl	80133b0 <HAL_RCC_GetPCLK2Freq>
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8013818:	69eb      	ldr	r3, [r5, #28]
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 801381a:	2119      	movs	r1, #25
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 801381c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8013820:	e9d5 4600 	ldrd	r4, r6, [r5]
 8013824:	fba0 0101 	umull	r0, r1, r0, r1
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8013828:	d11b      	bne.n	8013862 <UART_SetConfig+0xa6>
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 801382a:	19b2      	adds	r2, r6, r6
 801382c:	f04f 0300 	mov.w	r3, #0
 8013830:	415b      	adcs	r3, r3
 8013832:	f7fd fe5d 	bl	80114f0 <__aeabi_uldivmod>
 8013836:	2164      	movs	r1, #100	; 0x64
 8013838:	fbb0 f5f1 	udiv	r5, r0, r1
 801383c:	fb01 0315 	mls	r3, r1, r5, r0
 8013840:	00db      	lsls	r3, r3, #3
 8013842:	3332      	adds	r3, #50	; 0x32
 8013844:	fbb3 f3f1 	udiv	r3, r3, r1
 8013848:	f003 0207 	and.w	r2, r3, #7
 801384c:	005b      	lsls	r3, r3, #1
 801384e:	eb02 1205 	add.w	r2, r2, r5, lsl #4
 8013852:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8013856:	4413      	add	r3, r2
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8013858:	60a3      	str	r3, [r4, #8]
  }
}
 801385a:	bd70      	pop	{r4, r5, r6, pc}
      pclk = HAL_RCC_GetPCLK1Freq();
 801385c:	f7ff fd98 	bl	8013390 <HAL_RCC_GetPCLK1Freq>
 8013860:	e7da      	b.n	8013818 <UART_SetConfig+0x5c>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8013862:	00b2      	lsls	r2, r6, #2
 8013864:	0fb3      	lsrs	r3, r6, #30
 8013866:	f7fd fe43 	bl	80114f0 <__aeabi_uldivmod>
 801386a:	2264      	movs	r2, #100	; 0x64
 801386c:	fbb0 f1f2 	udiv	r1, r0, r2
 8013870:	fb02 0311 	mls	r3, r2, r1, r0
 8013874:	011b      	lsls	r3, r3, #4
 8013876:	3332      	adds	r3, #50	; 0x32
 8013878:	fbb3 f3f2 	udiv	r3, r3, r2
 801387c:	eb03 1301 	add.w	r3, r3, r1, lsl #4
 8013880:	e7ea      	b.n	8013858 <UART_SetConfig+0x9c>
 8013882:	bf00      	nop
 8013884:	40011000 	.word	0x40011000

08013888 <UART_WaitOnFlagUntilTimeout.constprop.0>:
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
 8013888:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801388a:	4604      	mov	r4, r0
 801388c:	460e      	mov	r6, r1
 801388e:	4617      	mov	r7, r2
 8013890:	461d      	mov	r5, r3
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8013892:	6822      	ldr	r2, [r4, #0]
 8013894:	6813      	ldr	r3, [r2, #0]
 8013896:	ea36 0303 	bics.w	r3, r6, r3
 801389a:	d101      	bne.n	80138a0 <UART_WaitOnFlagUntilTimeout.constprop.0+0x18>
  return HAL_OK;
 801389c:	2000      	movs	r0, #0
 801389e:	e014      	b.n	80138ca <UART_WaitOnFlagUntilTimeout.constprop.0+0x42>
    if (Timeout != HAL_MAX_DELAY)
 80138a0:	1c6b      	adds	r3, r5, #1
 80138a2:	d0f7      	beq.n	8013894 <UART_WaitOnFlagUntilTimeout.constprop.0+0xc>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80138a4:	b995      	cbnz	r5, 80138cc <UART_WaitOnFlagUntilTimeout.constprop.0+0x44>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80138a6:	6823      	ldr	r3, [r4, #0]
 80138a8:	68da      	ldr	r2, [r3, #12]
 80138aa:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80138ae:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80138b0:	695a      	ldr	r2, [r3, #20]
 80138b2:	f022 0201 	bic.w	r2, r2, #1
 80138b6:	615a      	str	r2, [r3, #20]
        huart->gState  = HAL_UART_STATE_READY;
 80138b8:	2320      	movs	r3, #32
 80138ba:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80138be:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        __HAL_UNLOCK(huart);
 80138c2:	2300      	movs	r3, #0
 80138c4:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
 80138c8:	2003      	movs	r0, #3
}
 80138ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80138cc:	f7ff f8f0 	bl	8012ab0 <HAL_GetTick>
 80138d0:	1bc0      	subs	r0, r0, r7
 80138d2:	4285      	cmp	r5, r0
 80138d4:	d2dd      	bcs.n	8013892 <UART_WaitOnFlagUntilTimeout.constprop.0+0xa>
 80138d6:	e7e6      	b.n	80138a6 <UART_WaitOnFlagUntilTimeout.constprop.0+0x1e>

080138d8 <HAL_UART_Init>:
{
 80138d8:	b510      	push	{r4, lr}
  if (huart == NULL)
 80138da:	4604      	mov	r4, r0
 80138dc:	b340      	cbz	r0, 8013930 <HAL_UART_Init+0x58>
  if (huart->gState == HAL_UART_STATE_RESET)
 80138de:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80138e2:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80138e6:	b91b      	cbnz	r3, 80138f0 <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 80138e8:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_UART_MspInit(huart);
 80138ec:	f7fd fff8 	bl	80118e0 <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 80138f0:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 80138f2:	2324      	movs	r3, #36	; 0x24
 80138f4:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UART_DISABLE(huart);
 80138f8:	68d3      	ldr	r3, [r2, #12]
 80138fa:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80138fe:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 8013900:	4620      	mov	r0, r4
 8013902:	f7ff ff5b 	bl	80137bc <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8013906:	6823      	ldr	r3, [r4, #0]
 8013908:	691a      	ldr	r2, [r3, #16]
 801390a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 801390e:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8013910:	695a      	ldr	r2, [r3, #20]
 8013912:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8013916:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 8013918:	68da      	ldr	r2, [r3, #12]
 801391a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 801391e:	60da      	str	r2, [r3, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8013920:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 8013922:	2320      	movs	r3, #32
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8013924:	6420      	str	r0, [r4, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8013926:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 801392a:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
}
 801392e:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8013930:	2001      	movs	r0, #1
 8013932:	e7fc      	b.n	801392e <HAL_UART_Init+0x56>

08013934 <HAL_UART_Transmit>:
{
 8013934:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8013936:	4617      	mov	r7, r2
  if (huart->gState == HAL_UART_STATE_READY)
 8013938:	f890 203d 	ldrb.w	r2, [r0, #61]	; 0x3d
{
 801393c:	9300      	str	r3, [sp, #0]
  if (huart->gState == HAL_UART_STATE_READY)
 801393e:	2a20      	cmp	r2, #32
{
 8013940:	4604      	mov	r4, r0
 8013942:	460e      	mov	r6, r1
  if (huart->gState == HAL_UART_STATE_READY)
 8013944:	d149      	bne.n	80139da <HAL_UART_Transmit+0xa6>
    if ((pData == NULL) || (Size == 0U))
 8013946:	2900      	cmp	r1, #0
 8013948:	d045      	beq.n	80139d6 <HAL_UART_Transmit+0xa2>
 801394a:	2f00      	cmp	r7, #0
 801394c:	d043      	beq.n	80139d6 <HAL_UART_Transmit+0xa2>
    __HAL_LOCK(huart);
 801394e:	f890 203c 	ldrb.w	r2, [r0, #60]	; 0x3c
 8013952:	2a01      	cmp	r2, #1
 8013954:	d041      	beq.n	80139da <HAL_UART_Transmit+0xa6>
 8013956:	2201      	movs	r2, #1
 8013958:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 801395c:	2500      	movs	r5, #0
    huart->gState = HAL_UART_STATE_BUSY_TX;
 801395e:	2221      	movs	r2, #33	; 0x21
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8013960:	6405      	str	r5, [r0, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8013962:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
    tickstart = HAL_GetTick();
 8013966:	f7ff f8a3 	bl	8012ab0 <HAL_GetTick>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 801396a:	68a1      	ldr	r1, [r4, #8]
 801396c:	9b00      	ldr	r3, [sp, #0]
    huart->TxXferSize = Size;
 801396e:	84a7      	strh	r7, [r4, #36]	; 0x24
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8013970:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
    tickstart = HAL_GetTick();
 8013974:	4602      	mov	r2, r0
    huart->TxXferCount = Size;
 8013976:	84e7      	strh	r7, [r4, #38]	; 0x26
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8013978:	d103      	bne.n	8013982 <HAL_UART_Transmit+0x4e>
 801397a:	6921      	ldr	r1, [r4, #16]
 801397c:	b909      	cbnz	r1, 8013982 <HAL_UART_Transmit+0x4e>
 801397e:	4635      	mov	r5, r6
      pdata8bits  = NULL;
 8013980:	460e      	mov	r6, r1
    __HAL_UNLOCK(huart);
 8013982:	2100      	movs	r1, #0
 8013984:	f884 103c 	strb.w	r1, [r4, #60]	; 0x3c
    while (huart->TxXferCount > 0U)
 8013988:	8ce1      	ldrh	r1, [r4, #38]	; 0x26
 801398a:	b289      	uxth	r1, r1
 801398c:	b941      	cbnz	r1, 80139a0 <HAL_UART_Transmit+0x6c>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 801398e:	2140      	movs	r1, #64	; 0x40
 8013990:	4620      	mov	r0, r4
 8013992:	f7ff ff79 	bl	8013888 <UART_WaitOnFlagUntilTimeout.constprop.0>
 8013996:	b960      	cbnz	r0, 80139b2 <HAL_UART_Transmit+0x7e>
    huart->gState = HAL_UART_STATE_READY;
 8013998:	2320      	movs	r3, #32
 801399a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    return HAL_OK;
 801399e:	e009      	b.n	80139b4 <HAL_UART_Transmit+0x80>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80139a0:	2180      	movs	r1, #128	; 0x80
 80139a2:	4620      	mov	r0, r4
 80139a4:	e9cd 2300 	strd	r2, r3, [sp]
 80139a8:	f7ff ff6e 	bl	8013888 <UART_WaitOnFlagUntilTimeout.constprop.0>
 80139ac:	e9dd 2300 	ldrd	r2, r3, [sp]
 80139b0:	b110      	cbz	r0, 80139b8 <HAL_UART_Transmit+0x84>
        return HAL_TIMEOUT;
 80139b2:	2003      	movs	r0, #3
}
 80139b4:	b003      	add	sp, #12
 80139b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80139b8:	6820      	ldr	r0, [r4, #0]
      if (pdata8bits == NULL)
 80139ba:	b94e      	cbnz	r6, 80139d0 <HAL_UART_Transmit+0x9c>
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80139bc:	f835 1b02 	ldrh.w	r1, [r5], #2
 80139c0:	f3c1 0108 	ubfx	r1, r1, #0, #9
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80139c4:	6041      	str	r1, [r0, #4]
      huart->TxXferCount--;
 80139c6:	8ce1      	ldrh	r1, [r4, #38]	; 0x26
 80139c8:	3901      	subs	r1, #1
 80139ca:	b289      	uxth	r1, r1
 80139cc:	84e1      	strh	r1, [r4, #38]	; 0x26
 80139ce:	e7db      	b.n	8013988 <HAL_UART_Transmit+0x54>
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80139d0:	f816 1b01 	ldrb.w	r1, [r6], #1
 80139d4:	e7f6      	b.n	80139c4 <HAL_UART_Transmit+0x90>
      return  HAL_ERROR;
 80139d6:	2001      	movs	r0, #1
 80139d8:	e7ec      	b.n	80139b4 <HAL_UART_Transmit+0x80>
    return HAL_BUSY;
 80139da:	2002      	movs	r0, #2
 80139dc:	e7ea      	b.n	80139b4 <HAL_UART_Transmit+0x80>

080139de <HAL_UART_Receive>:
{
 80139de:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80139e2:	4699      	mov	r9, r3
  if (huart->RxState == HAL_UART_STATE_READY)
 80139e4:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
 80139e8:	2b20      	cmp	r3, #32
{
 80139ea:	4604      	mov	r4, r0
 80139ec:	460f      	mov	r7, r1
 80139ee:	4615      	mov	r5, r2
  if (huart->RxState == HAL_UART_STATE_READY)
 80139f0:	d14d      	bne.n	8013a8e <HAL_UART_Receive+0xb0>
    if ((pData == NULL) || (Size == 0U))
 80139f2:	2900      	cmp	r1, #0
 80139f4:	d049      	beq.n	8013a8a <HAL_UART_Receive+0xac>
 80139f6:	2a00      	cmp	r2, #0
 80139f8:	d047      	beq.n	8013a8a <HAL_UART_Receive+0xac>
    __HAL_LOCK(huart);
 80139fa:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80139fe:	2b01      	cmp	r3, #1
 8013a00:	d045      	beq.n	8013a8e <HAL_UART_Receive+0xb0>
 8013a02:	2301      	movs	r3, #1
 8013a04:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8013a08:	2600      	movs	r6, #0
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8013a0a:	2322      	movs	r3, #34	; 0x22
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8013a0c:	6406      	str	r6, [r0, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8013a0e:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8013a12:	6306      	str	r6, [r0, #48]	; 0x30
    tickstart = HAL_GetTick();
 8013a14:	f7ff f84c 	bl	8012ab0 <HAL_GetTick>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8013a18:	68a3      	ldr	r3, [r4, #8]
    huart->RxXferSize = Size;
 8013a1a:	85a5      	strh	r5, [r4, #44]	; 0x2c
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8013a1c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
    tickstart = HAL_GetTick();
 8013a20:	4680      	mov	r8, r0
    huart->RxXferCount = Size;
 8013a22:	85e5      	strh	r5, [r4, #46]	; 0x2e
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8013a24:	d103      	bne.n	8013a2e <HAL_UART_Receive+0x50>
 8013a26:	6923      	ldr	r3, [r4, #16]
 8013a28:	b90b      	cbnz	r3, 8013a2e <HAL_UART_Receive+0x50>
 8013a2a:	463e      	mov	r6, r7
      pdata8bits  = NULL;
 8013a2c:	461f      	mov	r7, r3
    __HAL_UNLOCK(huart);
 8013a2e:	2300      	movs	r3, #0
 8013a30:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    while (huart->RxXferCount > 0U)
 8013a34:	8de5      	ldrh	r5, [r4, #46]	; 0x2e
 8013a36:	b2a8      	uxth	r0, r5
 8013a38:	b920      	cbnz	r0, 8013a44 <HAL_UART_Receive+0x66>
    huart->RxState = HAL_UART_STATE_READY;
 8013a3a:	2320      	movs	r3, #32
 8013a3c:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
}
 8013a40:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8013a44:	464b      	mov	r3, r9
 8013a46:	4642      	mov	r2, r8
 8013a48:	2120      	movs	r1, #32
 8013a4a:	4620      	mov	r0, r4
 8013a4c:	f7ff ff1c 	bl	8013888 <UART_WaitOnFlagUntilTimeout.constprop.0>
 8013a50:	b9f8      	cbnz	r0, 8013a92 <HAL_UART_Receive+0xb4>
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8013a52:	6823      	ldr	r3, [r4, #0]
      if (pdata8bits == NULL)
 8013a54:	b94f      	cbnz	r7, 8013a6a <HAL_UART_Receive+0x8c>
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8013a56:	685b      	ldr	r3, [r3, #4]
 8013a58:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8013a5c:	f826 3b02 	strh.w	r3, [r6], #2
      huart->RxXferCount--;
 8013a60:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
 8013a62:	3b01      	subs	r3, #1
 8013a64:	b29b      	uxth	r3, r3
 8013a66:	85e3      	strh	r3, [r4, #46]	; 0x2e
 8013a68:	e7e4      	b.n	8013a34 <HAL_UART_Receive+0x56>
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8013a6a:	68a2      	ldr	r2, [r4, #8]
 8013a6c:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 8013a70:	d002      	beq.n	8013a78 <HAL_UART_Receive+0x9a>
 8013a72:	b932      	cbnz	r2, 8013a82 <HAL_UART_Receive+0xa4>
 8013a74:	6922      	ldr	r2, [r4, #16]
 8013a76:	b922      	cbnz	r2, 8013a82 <HAL_UART_Receive+0xa4>
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8013a78:	6859      	ldr	r1, [r3, #4]
 8013a7a:	b2c9      	uxtb	r1, r1
 8013a7c:	f807 1b01 	strb.w	r1, [r7], #1
        pdata8bits++;
 8013a80:	e7ee      	b.n	8013a60 <HAL_UART_Receive+0x82>
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8013a82:	6859      	ldr	r1, [r3, #4]
 8013a84:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 8013a88:	e7f8      	b.n	8013a7c <HAL_UART_Receive+0x9e>
      return  HAL_ERROR;
 8013a8a:	2001      	movs	r0, #1
 8013a8c:	e7d8      	b.n	8013a40 <HAL_UART_Receive+0x62>
    return HAL_BUSY;
 8013a8e:	2002      	movs	r0, #2
 8013a90:	e7d6      	b.n	8013a40 <HAL_UART_Receive+0x62>
        return HAL_TIMEOUT;
 8013a92:	2003      	movs	r0, #3
 8013a94:	e7d4      	b.n	8013a40 <HAL_UART_Receive+0x62>
	...

08013a98 <__errno>:
 8013a98:	4b01      	ldr	r3, [pc, #4]	; (8013aa0 <__errno+0x8>)
 8013a9a:	6818      	ldr	r0, [r3, #0]
 8013a9c:	4770      	bx	lr
 8013a9e:	bf00      	nop
 8013aa0:	20001068 	.word	0x20001068

08013aa4 <__libc_init_array>:
 8013aa4:	b570      	push	{r4, r5, r6, lr}
 8013aa6:	4d0d      	ldr	r5, [pc, #52]	; (8013adc <__libc_init_array+0x38>)
 8013aa8:	4c0d      	ldr	r4, [pc, #52]	; (8013ae0 <__libc_init_array+0x3c>)
 8013aaa:	1b64      	subs	r4, r4, r5
 8013aac:	10a4      	asrs	r4, r4, #2
 8013aae:	2600      	movs	r6, #0
 8013ab0:	42a6      	cmp	r6, r4
 8013ab2:	d109      	bne.n	8013ac8 <__libc_init_array+0x24>
 8013ab4:	4d0b      	ldr	r5, [pc, #44]	; (8013ae4 <__libc_init_array+0x40>)
 8013ab6:	4c0c      	ldr	r4, [pc, #48]	; (8013ae8 <__libc_init_array+0x44>)
 8013ab8:	f001 f900 	bl	8014cbc <_init>
 8013abc:	1b64      	subs	r4, r4, r5
 8013abe:	10a4      	asrs	r4, r4, #2
 8013ac0:	2600      	movs	r6, #0
 8013ac2:	42a6      	cmp	r6, r4
 8013ac4:	d105      	bne.n	8013ad2 <__libc_init_array+0x2e>
 8013ac6:	bd70      	pop	{r4, r5, r6, pc}
 8013ac8:	f855 3b04 	ldr.w	r3, [r5], #4
 8013acc:	4798      	blx	r3
 8013ace:	3601      	adds	r6, #1
 8013ad0:	e7ee      	b.n	8013ab0 <__libc_init_array+0xc>
 8013ad2:	f855 3b04 	ldr.w	r3, [r5], #4
 8013ad6:	4798      	blx	r3
 8013ad8:	3601      	adds	r6, #1
 8013ada:	e7f2      	b.n	8013ac2 <__libc_init_array+0x1e>
 8013adc:	08015ec8 	.word	0x08015ec8
 8013ae0:	08015ec8 	.word	0x08015ec8
 8013ae4:	08015ec8 	.word	0x08015ec8
 8013ae8:	08015ecc 	.word	0x08015ecc

08013aec <memcpy>:
 8013aec:	440a      	add	r2, r1
 8013aee:	4291      	cmp	r1, r2
 8013af0:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8013af4:	d100      	bne.n	8013af8 <memcpy+0xc>
 8013af6:	4770      	bx	lr
 8013af8:	b510      	push	{r4, lr}
 8013afa:	f811 4b01 	ldrb.w	r4, [r1], #1
 8013afe:	f803 4f01 	strb.w	r4, [r3, #1]!
 8013b02:	4291      	cmp	r1, r2
 8013b04:	d1f9      	bne.n	8013afa <memcpy+0xe>
 8013b06:	bd10      	pop	{r4, pc}

08013b08 <memset>:
 8013b08:	4402      	add	r2, r0
 8013b0a:	4603      	mov	r3, r0
 8013b0c:	4293      	cmp	r3, r2
 8013b0e:	d100      	bne.n	8013b12 <memset+0xa>
 8013b10:	4770      	bx	lr
 8013b12:	f803 1b01 	strb.w	r1, [r3], #1
 8013b16:	e7f9      	b.n	8013b0c <memset+0x4>

08013b18 <iprintf>:
 8013b18:	b40f      	push	{r0, r1, r2, r3}
 8013b1a:	4b0a      	ldr	r3, [pc, #40]	; (8013b44 <iprintf+0x2c>)
 8013b1c:	b513      	push	{r0, r1, r4, lr}
 8013b1e:	681c      	ldr	r4, [r3, #0]
 8013b20:	b124      	cbz	r4, 8013b2c <iprintf+0x14>
 8013b22:	69a3      	ldr	r3, [r4, #24]
 8013b24:	b913      	cbnz	r3, 8013b2c <iprintf+0x14>
 8013b26:	4620      	mov	r0, r4
 8013b28:	f000 fb24 	bl	8014174 <__sinit>
 8013b2c:	ab05      	add	r3, sp, #20
 8013b2e:	9a04      	ldr	r2, [sp, #16]
 8013b30:	68a1      	ldr	r1, [r4, #8]
 8013b32:	9301      	str	r3, [sp, #4]
 8013b34:	4620      	mov	r0, r4
 8013b36:	f000 fd35 	bl	80145a4 <_vfiprintf_r>
 8013b3a:	b002      	add	sp, #8
 8013b3c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013b40:	b004      	add	sp, #16
 8013b42:	4770      	bx	lr
 8013b44:	20001068 	.word	0x20001068

08013b48 <_puts_r>:
 8013b48:	b570      	push	{r4, r5, r6, lr}
 8013b4a:	460e      	mov	r6, r1
 8013b4c:	4605      	mov	r5, r0
 8013b4e:	b118      	cbz	r0, 8013b58 <_puts_r+0x10>
 8013b50:	6983      	ldr	r3, [r0, #24]
 8013b52:	b90b      	cbnz	r3, 8013b58 <_puts_r+0x10>
 8013b54:	f000 fb0e 	bl	8014174 <__sinit>
 8013b58:	69ab      	ldr	r3, [r5, #24]
 8013b5a:	68ac      	ldr	r4, [r5, #8]
 8013b5c:	b913      	cbnz	r3, 8013b64 <_puts_r+0x1c>
 8013b5e:	4628      	mov	r0, r5
 8013b60:	f000 fb08 	bl	8014174 <__sinit>
 8013b64:	4b2c      	ldr	r3, [pc, #176]	; (8013c18 <_puts_r+0xd0>)
 8013b66:	429c      	cmp	r4, r3
 8013b68:	d120      	bne.n	8013bac <_puts_r+0x64>
 8013b6a:	686c      	ldr	r4, [r5, #4]
 8013b6c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8013b6e:	07db      	lsls	r3, r3, #31
 8013b70:	d405      	bmi.n	8013b7e <_puts_r+0x36>
 8013b72:	89a3      	ldrh	r3, [r4, #12]
 8013b74:	0598      	lsls	r0, r3, #22
 8013b76:	d402      	bmi.n	8013b7e <_puts_r+0x36>
 8013b78:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8013b7a:	f000 fb99 	bl	80142b0 <__retarget_lock_acquire_recursive>
 8013b7e:	89a3      	ldrh	r3, [r4, #12]
 8013b80:	0719      	lsls	r1, r3, #28
 8013b82:	d51d      	bpl.n	8013bc0 <_puts_r+0x78>
 8013b84:	6923      	ldr	r3, [r4, #16]
 8013b86:	b1db      	cbz	r3, 8013bc0 <_puts_r+0x78>
 8013b88:	3e01      	subs	r6, #1
 8013b8a:	68a3      	ldr	r3, [r4, #8]
 8013b8c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8013b90:	3b01      	subs	r3, #1
 8013b92:	60a3      	str	r3, [r4, #8]
 8013b94:	bb39      	cbnz	r1, 8013be6 <_puts_r+0x9e>
 8013b96:	2b00      	cmp	r3, #0
 8013b98:	da38      	bge.n	8013c0c <_puts_r+0xc4>
 8013b9a:	4622      	mov	r2, r4
 8013b9c:	210a      	movs	r1, #10
 8013b9e:	4628      	mov	r0, r5
 8013ba0:	f000 f90e 	bl	8013dc0 <__swbuf_r>
 8013ba4:	3001      	adds	r0, #1
 8013ba6:	d011      	beq.n	8013bcc <_puts_r+0x84>
 8013ba8:	250a      	movs	r5, #10
 8013baa:	e011      	b.n	8013bd0 <_puts_r+0x88>
 8013bac:	4b1b      	ldr	r3, [pc, #108]	; (8013c1c <_puts_r+0xd4>)
 8013bae:	429c      	cmp	r4, r3
 8013bb0:	d101      	bne.n	8013bb6 <_puts_r+0x6e>
 8013bb2:	68ac      	ldr	r4, [r5, #8]
 8013bb4:	e7da      	b.n	8013b6c <_puts_r+0x24>
 8013bb6:	4b1a      	ldr	r3, [pc, #104]	; (8013c20 <_puts_r+0xd8>)
 8013bb8:	429c      	cmp	r4, r3
 8013bba:	bf08      	it	eq
 8013bbc:	68ec      	ldreq	r4, [r5, #12]
 8013bbe:	e7d5      	b.n	8013b6c <_puts_r+0x24>
 8013bc0:	4621      	mov	r1, r4
 8013bc2:	4628      	mov	r0, r5
 8013bc4:	f000 f94e 	bl	8013e64 <__swsetup_r>
 8013bc8:	2800      	cmp	r0, #0
 8013bca:	d0dd      	beq.n	8013b88 <_puts_r+0x40>
 8013bcc:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8013bd0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8013bd2:	07da      	lsls	r2, r3, #31
 8013bd4:	d405      	bmi.n	8013be2 <_puts_r+0x9a>
 8013bd6:	89a3      	ldrh	r3, [r4, #12]
 8013bd8:	059b      	lsls	r3, r3, #22
 8013bda:	d402      	bmi.n	8013be2 <_puts_r+0x9a>
 8013bdc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8013bde:	f000 fb68 	bl	80142b2 <__retarget_lock_release_recursive>
 8013be2:	4628      	mov	r0, r5
 8013be4:	bd70      	pop	{r4, r5, r6, pc}
 8013be6:	2b00      	cmp	r3, #0
 8013be8:	da04      	bge.n	8013bf4 <_puts_r+0xac>
 8013bea:	69a2      	ldr	r2, [r4, #24]
 8013bec:	429a      	cmp	r2, r3
 8013bee:	dc06      	bgt.n	8013bfe <_puts_r+0xb6>
 8013bf0:	290a      	cmp	r1, #10
 8013bf2:	d004      	beq.n	8013bfe <_puts_r+0xb6>
 8013bf4:	6823      	ldr	r3, [r4, #0]
 8013bf6:	1c5a      	adds	r2, r3, #1
 8013bf8:	6022      	str	r2, [r4, #0]
 8013bfa:	7019      	strb	r1, [r3, #0]
 8013bfc:	e7c5      	b.n	8013b8a <_puts_r+0x42>
 8013bfe:	4622      	mov	r2, r4
 8013c00:	4628      	mov	r0, r5
 8013c02:	f000 f8dd 	bl	8013dc0 <__swbuf_r>
 8013c06:	3001      	adds	r0, #1
 8013c08:	d1bf      	bne.n	8013b8a <_puts_r+0x42>
 8013c0a:	e7df      	b.n	8013bcc <_puts_r+0x84>
 8013c0c:	6823      	ldr	r3, [r4, #0]
 8013c0e:	250a      	movs	r5, #10
 8013c10:	1c5a      	adds	r2, r3, #1
 8013c12:	6022      	str	r2, [r4, #0]
 8013c14:	701d      	strb	r5, [r3, #0]
 8013c16:	e7db      	b.n	8013bd0 <_puts_r+0x88>
 8013c18:	08015e4c 	.word	0x08015e4c
 8013c1c:	08015e6c 	.word	0x08015e6c
 8013c20:	08015e2c 	.word	0x08015e2c

08013c24 <puts>:
 8013c24:	4b02      	ldr	r3, [pc, #8]	; (8013c30 <puts+0xc>)
 8013c26:	4601      	mov	r1, r0
 8013c28:	6818      	ldr	r0, [r3, #0]
 8013c2a:	f7ff bf8d 	b.w	8013b48 <_puts_r>
 8013c2e:	bf00      	nop
 8013c30:	20001068 	.word	0x20001068

08013c34 <setvbuf>:
 8013c34:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8013c38:	461d      	mov	r5, r3
 8013c3a:	4b5d      	ldr	r3, [pc, #372]	; (8013db0 <setvbuf+0x17c>)
 8013c3c:	681f      	ldr	r7, [r3, #0]
 8013c3e:	4604      	mov	r4, r0
 8013c40:	460e      	mov	r6, r1
 8013c42:	4690      	mov	r8, r2
 8013c44:	b127      	cbz	r7, 8013c50 <setvbuf+0x1c>
 8013c46:	69bb      	ldr	r3, [r7, #24]
 8013c48:	b913      	cbnz	r3, 8013c50 <setvbuf+0x1c>
 8013c4a:	4638      	mov	r0, r7
 8013c4c:	f000 fa92 	bl	8014174 <__sinit>
 8013c50:	4b58      	ldr	r3, [pc, #352]	; (8013db4 <setvbuf+0x180>)
 8013c52:	429c      	cmp	r4, r3
 8013c54:	d167      	bne.n	8013d26 <setvbuf+0xf2>
 8013c56:	687c      	ldr	r4, [r7, #4]
 8013c58:	f1b8 0f02 	cmp.w	r8, #2
 8013c5c:	d006      	beq.n	8013c6c <setvbuf+0x38>
 8013c5e:	f1b8 0f01 	cmp.w	r8, #1
 8013c62:	f200 809f 	bhi.w	8013da4 <setvbuf+0x170>
 8013c66:	2d00      	cmp	r5, #0
 8013c68:	f2c0 809c 	blt.w	8013da4 <setvbuf+0x170>
 8013c6c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8013c6e:	07db      	lsls	r3, r3, #31
 8013c70:	d405      	bmi.n	8013c7e <setvbuf+0x4a>
 8013c72:	89a3      	ldrh	r3, [r4, #12]
 8013c74:	0598      	lsls	r0, r3, #22
 8013c76:	d402      	bmi.n	8013c7e <setvbuf+0x4a>
 8013c78:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8013c7a:	f000 fb19 	bl	80142b0 <__retarget_lock_acquire_recursive>
 8013c7e:	4621      	mov	r1, r4
 8013c80:	4638      	mov	r0, r7
 8013c82:	f000 f9e3 	bl	801404c <_fflush_r>
 8013c86:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8013c88:	b141      	cbz	r1, 8013c9c <setvbuf+0x68>
 8013c8a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8013c8e:	4299      	cmp	r1, r3
 8013c90:	d002      	beq.n	8013c98 <setvbuf+0x64>
 8013c92:	4638      	mov	r0, r7
 8013c94:	f000 fb7c 	bl	8014390 <_free_r>
 8013c98:	2300      	movs	r3, #0
 8013c9a:	6363      	str	r3, [r4, #52]	; 0x34
 8013c9c:	2300      	movs	r3, #0
 8013c9e:	61a3      	str	r3, [r4, #24]
 8013ca0:	6063      	str	r3, [r4, #4]
 8013ca2:	89a3      	ldrh	r3, [r4, #12]
 8013ca4:	0619      	lsls	r1, r3, #24
 8013ca6:	d503      	bpl.n	8013cb0 <setvbuf+0x7c>
 8013ca8:	6921      	ldr	r1, [r4, #16]
 8013caa:	4638      	mov	r0, r7
 8013cac:	f000 fb70 	bl	8014390 <_free_r>
 8013cb0:	89a3      	ldrh	r3, [r4, #12]
 8013cb2:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 8013cb6:	f023 0303 	bic.w	r3, r3, #3
 8013cba:	f1b8 0f02 	cmp.w	r8, #2
 8013cbe:	81a3      	strh	r3, [r4, #12]
 8013cc0:	d06c      	beq.n	8013d9c <setvbuf+0x168>
 8013cc2:	ab01      	add	r3, sp, #4
 8013cc4:	466a      	mov	r2, sp
 8013cc6:	4621      	mov	r1, r4
 8013cc8:	4638      	mov	r0, r7
 8013cca:	f000 faf3 	bl	80142b4 <__swhatbuf_r>
 8013cce:	89a3      	ldrh	r3, [r4, #12]
 8013cd0:	4318      	orrs	r0, r3
 8013cd2:	81a0      	strh	r0, [r4, #12]
 8013cd4:	2d00      	cmp	r5, #0
 8013cd6:	d130      	bne.n	8013d3a <setvbuf+0x106>
 8013cd8:	9d00      	ldr	r5, [sp, #0]
 8013cda:	4628      	mov	r0, r5
 8013cdc:	f000 fb50 	bl	8014380 <malloc>
 8013ce0:	4606      	mov	r6, r0
 8013ce2:	2800      	cmp	r0, #0
 8013ce4:	d155      	bne.n	8013d92 <setvbuf+0x15e>
 8013ce6:	f8dd 9000 	ldr.w	r9, [sp]
 8013cea:	45a9      	cmp	r9, r5
 8013cec:	d14a      	bne.n	8013d84 <setvbuf+0x150>
 8013cee:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8013cf2:	2200      	movs	r2, #0
 8013cf4:	60a2      	str	r2, [r4, #8]
 8013cf6:	f104 0247 	add.w	r2, r4, #71	; 0x47
 8013cfa:	6022      	str	r2, [r4, #0]
 8013cfc:	6122      	str	r2, [r4, #16]
 8013cfe:	2201      	movs	r2, #1
 8013d00:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013d04:	6162      	str	r2, [r4, #20]
 8013d06:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8013d08:	f043 0302 	orr.w	r3, r3, #2
 8013d0c:	07d2      	lsls	r2, r2, #31
 8013d0e:	81a3      	strh	r3, [r4, #12]
 8013d10:	d405      	bmi.n	8013d1e <setvbuf+0xea>
 8013d12:	f413 7f00 	tst.w	r3, #512	; 0x200
 8013d16:	d102      	bne.n	8013d1e <setvbuf+0xea>
 8013d18:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8013d1a:	f000 faca 	bl	80142b2 <__retarget_lock_release_recursive>
 8013d1e:	4628      	mov	r0, r5
 8013d20:	b003      	add	sp, #12
 8013d22:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013d26:	4b24      	ldr	r3, [pc, #144]	; (8013db8 <setvbuf+0x184>)
 8013d28:	429c      	cmp	r4, r3
 8013d2a:	d101      	bne.n	8013d30 <setvbuf+0xfc>
 8013d2c:	68bc      	ldr	r4, [r7, #8]
 8013d2e:	e793      	b.n	8013c58 <setvbuf+0x24>
 8013d30:	4b22      	ldr	r3, [pc, #136]	; (8013dbc <setvbuf+0x188>)
 8013d32:	429c      	cmp	r4, r3
 8013d34:	bf08      	it	eq
 8013d36:	68fc      	ldreq	r4, [r7, #12]
 8013d38:	e78e      	b.n	8013c58 <setvbuf+0x24>
 8013d3a:	2e00      	cmp	r6, #0
 8013d3c:	d0cd      	beq.n	8013cda <setvbuf+0xa6>
 8013d3e:	69bb      	ldr	r3, [r7, #24]
 8013d40:	b913      	cbnz	r3, 8013d48 <setvbuf+0x114>
 8013d42:	4638      	mov	r0, r7
 8013d44:	f000 fa16 	bl	8014174 <__sinit>
 8013d48:	f1b8 0f01 	cmp.w	r8, #1
 8013d4c:	bf08      	it	eq
 8013d4e:	89a3      	ldrheq	r3, [r4, #12]
 8013d50:	6026      	str	r6, [r4, #0]
 8013d52:	bf04      	itt	eq
 8013d54:	f043 0301 	orreq.w	r3, r3, #1
 8013d58:	81a3      	strheq	r3, [r4, #12]
 8013d5a:	89a2      	ldrh	r2, [r4, #12]
 8013d5c:	f012 0308 	ands.w	r3, r2, #8
 8013d60:	e9c4 6504 	strd	r6, r5, [r4, #16]
 8013d64:	d01c      	beq.n	8013da0 <setvbuf+0x16c>
 8013d66:	07d3      	lsls	r3, r2, #31
 8013d68:	bf41      	itttt	mi
 8013d6a:	2300      	movmi	r3, #0
 8013d6c:	426d      	negmi	r5, r5
 8013d6e:	60a3      	strmi	r3, [r4, #8]
 8013d70:	61a5      	strmi	r5, [r4, #24]
 8013d72:	bf58      	it	pl
 8013d74:	60a5      	strpl	r5, [r4, #8]
 8013d76:	6e65      	ldr	r5, [r4, #100]	; 0x64
 8013d78:	f015 0501 	ands.w	r5, r5, #1
 8013d7c:	d115      	bne.n	8013daa <setvbuf+0x176>
 8013d7e:	f412 7f00 	tst.w	r2, #512	; 0x200
 8013d82:	e7c8      	b.n	8013d16 <setvbuf+0xe2>
 8013d84:	4648      	mov	r0, r9
 8013d86:	f000 fafb 	bl	8014380 <malloc>
 8013d8a:	4606      	mov	r6, r0
 8013d8c:	2800      	cmp	r0, #0
 8013d8e:	d0ae      	beq.n	8013cee <setvbuf+0xba>
 8013d90:	464d      	mov	r5, r9
 8013d92:	89a3      	ldrh	r3, [r4, #12]
 8013d94:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8013d98:	81a3      	strh	r3, [r4, #12]
 8013d9a:	e7d0      	b.n	8013d3e <setvbuf+0x10a>
 8013d9c:	2500      	movs	r5, #0
 8013d9e:	e7a8      	b.n	8013cf2 <setvbuf+0xbe>
 8013da0:	60a3      	str	r3, [r4, #8]
 8013da2:	e7e8      	b.n	8013d76 <setvbuf+0x142>
 8013da4:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8013da8:	e7b9      	b.n	8013d1e <setvbuf+0xea>
 8013daa:	2500      	movs	r5, #0
 8013dac:	e7b7      	b.n	8013d1e <setvbuf+0xea>
 8013dae:	bf00      	nop
 8013db0:	20001068 	.word	0x20001068
 8013db4:	08015e4c 	.word	0x08015e4c
 8013db8:	08015e6c 	.word	0x08015e6c
 8013dbc:	08015e2c 	.word	0x08015e2c

08013dc0 <__swbuf_r>:
 8013dc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013dc2:	460e      	mov	r6, r1
 8013dc4:	4614      	mov	r4, r2
 8013dc6:	4605      	mov	r5, r0
 8013dc8:	b118      	cbz	r0, 8013dd2 <__swbuf_r+0x12>
 8013dca:	6983      	ldr	r3, [r0, #24]
 8013dcc:	b90b      	cbnz	r3, 8013dd2 <__swbuf_r+0x12>
 8013dce:	f000 f9d1 	bl	8014174 <__sinit>
 8013dd2:	4b21      	ldr	r3, [pc, #132]	; (8013e58 <__swbuf_r+0x98>)
 8013dd4:	429c      	cmp	r4, r3
 8013dd6:	d12b      	bne.n	8013e30 <__swbuf_r+0x70>
 8013dd8:	686c      	ldr	r4, [r5, #4]
 8013dda:	69a3      	ldr	r3, [r4, #24]
 8013ddc:	60a3      	str	r3, [r4, #8]
 8013dde:	89a3      	ldrh	r3, [r4, #12]
 8013de0:	071a      	lsls	r2, r3, #28
 8013de2:	d52f      	bpl.n	8013e44 <__swbuf_r+0x84>
 8013de4:	6923      	ldr	r3, [r4, #16]
 8013de6:	b36b      	cbz	r3, 8013e44 <__swbuf_r+0x84>
 8013de8:	6923      	ldr	r3, [r4, #16]
 8013dea:	6820      	ldr	r0, [r4, #0]
 8013dec:	1ac0      	subs	r0, r0, r3
 8013dee:	6963      	ldr	r3, [r4, #20]
 8013df0:	b2f6      	uxtb	r6, r6
 8013df2:	4283      	cmp	r3, r0
 8013df4:	4637      	mov	r7, r6
 8013df6:	dc04      	bgt.n	8013e02 <__swbuf_r+0x42>
 8013df8:	4621      	mov	r1, r4
 8013dfa:	4628      	mov	r0, r5
 8013dfc:	f000 f926 	bl	801404c <_fflush_r>
 8013e00:	bb30      	cbnz	r0, 8013e50 <__swbuf_r+0x90>
 8013e02:	68a3      	ldr	r3, [r4, #8]
 8013e04:	3b01      	subs	r3, #1
 8013e06:	60a3      	str	r3, [r4, #8]
 8013e08:	6823      	ldr	r3, [r4, #0]
 8013e0a:	1c5a      	adds	r2, r3, #1
 8013e0c:	6022      	str	r2, [r4, #0]
 8013e0e:	701e      	strb	r6, [r3, #0]
 8013e10:	6963      	ldr	r3, [r4, #20]
 8013e12:	3001      	adds	r0, #1
 8013e14:	4283      	cmp	r3, r0
 8013e16:	d004      	beq.n	8013e22 <__swbuf_r+0x62>
 8013e18:	89a3      	ldrh	r3, [r4, #12]
 8013e1a:	07db      	lsls	r3, r3, #31
 8013e1c:	d506      	bpl.n	8013e2c <__swbuf_r+0x6c>
 8013e1e:	2e0a      	cmp	r6, #10
 8013e20:	d104      	bne.n	8013e2c <__swbuf_r+0x6c>
 8013e22:	4621      	mov	r1, r4
 8013e24:	4628      	mov	r0, r5
 8013e26:	f000 f911 	bl	801404c <_fflush_r>
 8013e2a:	b988      	cbnz	r0, 8013e50 <__swbuf_r+0x90>
 8013e2c:	4638      	mov	r0, r7
 8013e2e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013e30:	4b0a      	ldr	r3, [pc, #40]	; (8013e5c <__swbuf_r+0x9c>)
 8013e32:	429c      	cmp	r4, r3
 8013e34:	d101      	bne.n	8013e3a <__swbuf_r+0x7a>
 8013e36:	68ac      	ldr	r4, [r5, #8]
 8013e38:	e7cf      	b.n	8013dda <__swbuf_r+0x1a>
 8013e3a:	4b09      	ldr	r3, [pc, #36]	; (8013e60 <__swbuf_r+0xa0>)
 8013e3c:	429c      	cmp	r4, r3
 8013e3e:	bf08      	it	eq
 8013e40:	68ec      	ldreq	r4, [r5, #12]
 8013e42:	e7ca      	b.n	8013dda <__swbuf_r+0x1a>
 8013e44:	4621      	mov	r1, r4
 8013e46:	4628      	mov	r0, r5
 8013e48:	f000 f80c 	bl	8013e64 <__swsetup_r>
 8013e4c:	2800      	cmp	r0, #0
 8013e4e:	d0cb      	beq.n	8013de8 <__swbuf_r+0x28>
 8013e50:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8013e54:	e7ea      	b.n	8013e2c <__swbuf_r+0x6c>
 8013e56:	bf00      	nop
 8013e58:	08015e4c 	.word	0x08015e4c
 8013e5c:	08015e6c 	.word	0x08015e6c
 8013e60:	08015e2c 	.word	0x08015e2c

08013e64 <__swsetup_r>:
 8013e64:	4b32      	ldr	r3, [pc, #200]	; (8013f30 <__swsetup_r+0xcc>)
 8013e66:	b570      	push	{r4, r5, r6, lr}
 8013e68:	681d      	ldr	r5, [r3, #0]
 8013e6a:	4606      	mov	r6, r0
 8013e6c:	460c      	mov	r4, r1
 8013e6e:	b125      	cbz	r5, 8013e7a <__swsetup_r+0x16>
 8013e70:	69ab      	ldr	r3, [r5, #24]
 8013e72:	b913      	cbnz	r3, 8013e7a <__swsetup_r+0x16>
 8013e74:	4628      	mov	r0, r5
 8013e76:	f000 f97d 	bl	8014174 <__sinit>
 8013e7a:	4b2e      	ldr	r3, [pc, #184]	; (8013f34 <__swsetup_r+0xd0>)
 8013e7c:	429c      	cmp	r4, r3
 8013e7e:	d10f      	bne.n	8013ea0 <__swsetup_r+0x3c>
 8013e80:	686c      	ldr	r4, [r5, #4]
 8013e82:	89a3      	ldrh	r3, [r4, #12]
 8013e84:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8013e88:	0719      	lsls	r1, r3, #28
 8013e8a:	d42c      	bmi.n	8013ee6 <__swsetup_r+0x82>
 8013e8c:	06dd      	lsls	r5, r3, #27
 8013e8e:	d411      	bmi.n	8013eb4 <__swsetup_r+0x50>
 8013e90:	2309      	movs	r3, #9
 8013e92:	6033      	str	r3, [r6, #0]
 8013e94:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8013e98:	81a3      	strh	r3, [r4, #12]
 8013e9a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8013e9e:	e03e      	b.n	8013f1e <__swsetup_r+0xba>
 8013ea0:	4b25      	ldr	r3, [pc, #148]	; (8013f38 <__swsetup_r+0xd4>)
 8013ea2:	429c      	cmp	r4, r3
 8013ea4:	d101      	bne.n	8013eaa <__swsetup_r+0x46>
 8013ea6:	68ac      	ldr	r4, [r5, #8]
 8013ea8:	e7eb      	b.n	8013e82 <__swsetup_r+0x1e>
 8013eaa:	4b24      	ldr	r3, [pc, #144]	; (8013f3c <__swsetup_r+0xd8>)
 8013eac:	429c      	cmp	r4, r3
 8013eae:	bf08      	it	eq
 8013eb0:	68ec      	ldreq	r4, [r5, #12]
 8013eb2:	e7e6      	b.n	8013e82 <__swsetup_r+0x1e>
 8013eb4:	0758      	lsls	r0, r3, #29
 8013eb6:	d512      	bpl.n	8013ede <__swsetup_r+0x7a>
 8013eb8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8013eba:	b141      	cbz	r1, 8013ece <__swsetup_r+0x6a>
 8013ebc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8013ec0:	4299      	cmp	r1, r3
 8013ec2:	d002      	beq.n	8013eca <__swsetup_r+0x66>
 8013ec4:	4630      	mov	r0, r6
 8013ec6:	f000 fa63 	bl	8014390 <_free_r>
 8013eca:	2300      	movs	r3, #0
 8013ecc:	6363      	str	r3, [r4, #52]	; 0x34
 8013ece:	89a3      	ldrh	r3, [r4, #12]
 8013ed0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8013ed4:	81a3      	strh	r3, [r4, #12]
 8013ed6:	2300      	movs	r3, #0
 8013ed8:	6063      	str	r3, [r4, #4]
 8013eda:	6923      	ldr	r3, [r4, #16]
 8013edc:	6023      	str	r3, [r4, #0]
 8013ede:	89a3      	ldrh	r3, [r4, #12]
 8013ee0:	f043 0308 	orr.w	r3, r3, #8
 8013ee4:	81a3      	strh	r3, [r4, #12]
 8013ee6:	6923      	ldr	r3, [r4, #16]
 8013ee8:	b94b      	cbnz	r3, 8013efe <__swsetup_r+0x9a>
 8013eea:	89a3      	ldrh	r3, [r4, #12]
 8013eec:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8013ef0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8013ef4:	d003      	beq.n	8013efe <__swsetup_r+0x9a>
 8013ef6:	4621      	mov	r1, r4
 8013ef8:	4630      	mov	r0, r6
 8013efa:	f000 fa01 	bl	8014300 <__smakebuf_r>
 8013efe:	89a0      	ldrh	r0, [r4, #12]
 8013f00:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8013f04:	f010 0301 	ands.w	r3, r0, #1
 8013f08:	d00a      	beq.n	8013f20 <__swsetup_r+0xbc>
 8013f0a:	2300      	movs	r3, #0
 8013f0c:	60a3      	str	r3, [r4, #8]
 8013f0e:	6963      	ldr	r3, [r4, #20]
 8013f10:	425b      	negs	r3, r3
 8013f12:	61a3      	str	r3, [r4, #24]
 8013f14:	6923      	ldr	r3, [r4, #16]
 8013f16:	b943      	cbnz	r3, 8013f2a <__swsetup_r+0xc6>
 8013f18:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8013f1c:	d1ba      	bne.n	8013e94 <__swsetup_r+0x30>
 8013f1e:	bd70      	pop	{r4, r5, r6, pc}
 8013f20:	0781      	lsls	r1, r0, #30
 8013f22:	bf58      	it	pl
 8013f24:	6963      	ldrpl	r3, [r4, #20]
 8013f26:	60a3      	str	r3, [r4, #8]
 8013f28:	e7f4      	b.n	8013f14 <__swsetup_r+0xb0>
 8013f2a:	2000      	movs	r0, #0
 8013f2c:	e7f7      	b.n	8013f1e <__swsetup_r+0xba>
 8013f2e:	bf00      	nop
 8013f30:	20001068 	.word	0x20001068
 8013f34:	08015e4c 	.word	0x08015e4c
 8013f38:	08015e6c 	.word	0x08015e6c
 8013f3c:	08015e2c 	.word	0x08015e2c

08013f40 <__sflush_r>:
 8013f40:	898a      	ldrh	r2, [r1, #12]
 8013f42:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013f46:	4605      	mov	r5, r0
 8013f48:	0710      	lsls	r0, r2, #28
 8013f4a:	460c      	mov	r4, r1
 8013f4c:	d458      	bmi.n	8014000 <__sflush_r+0xc0>
 8013f4e:	684b      	ldr	r3, [r1, #4]
 8013f50:	2b00      	cmp	r3, #0
 8013f52:	dc05      	bgt.n	8013f60 <__sflush_r+0x20>
 8013f54:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8013f56:	2b00      	cmp	r3, #0
 8013f58:	dc02      	bgt.n	8013f60 <__sflush_r+0x20>
 8013f5a:	2000      	movs	r0, #0
 8013f5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013f60:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8013f62:	2e00      	cmp	r6, #0
 8013f64:	d0f9      	beq.n	8013f5a <__sflush_r+0x1a>
 8013f66:	2300      	movs	r3, #0
 8013f68:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8013f6c:	682f      	ldr	r7, [r5, #0]
 8013f6e:	602b      	str	r3, [r5, #0]
 8013f70:	d032      	beq.n	8013fd8 <__sflush_r+0x98>
 8013f72:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8013f74:	89a3      	ldrh	r3, [r4, #12]
 8013f76:	075a      	lsls	r2, r3, #29
 8013f78:	d505      	bpl.n	8013f86 <__sflush_r+0x46>
 8013f7a:	6863      	ldr	r3, [r4, #4]
 8013f7c:	1ac0      	subs	r0, r0, r3
 8013f7e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8013f80:	b10b      	cbz	r3, 8013f86 <__sflush_r+0x46>
 8013f82:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8013f84:	1ac0      	subs	r0, r0, r3
 8013f86:	2300      	movs	r3, #0
 8013f88:	4602      	mov	r2, r0
 8013f8a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8013f8c:	6a21      	ldr	r1, [r4, #32]
 8013f8e:	4628      	mov	r0, r5
 8013f90:	47b0      	blx	r6
 8013f92:	1c43      	adds	r3, r0, #1
 8013f94:	89a3      	ldrh	r3, [r4, #12]
 8013f96:	d106      	bne.n	8013fa6 <__sflush_r+0x66>
 8013f98:	6829      	ldr	r1, [r5, #0]
 8013f9a:	291d      	cmp	r1, #29
 8013f9c:	d82c      	bhi.n	8013ff8 <__sflush_r+0xb8>
 8013f9e:	4a2a      	ldr	r2, [pc, #168]	; (8014048 <__sflush_r+0x108>)
 8013fa0:	40ca      	lsrs	r2, r1
 8013fa2:	07d6      	lsls	r6, r2, #31
 8013fa4:	d528      	bpl.n	8013ff8 <__sflush_r+0xb8>
 8013fa6:	2200      	movs	r2, #0
 8013fa8:	6062      	str	r2, [r4, #4]
 8013faa:	04d9      	lsls	r1, r3, #19
 8013fac:	6922      	ldr	r2, [r4, #16]
 8013fae:	6022      	str	r2, [r4, #0]
 8013fb0:	d504      	bpl.n	8013fbc <__sflush_r+0x7c>
 8013fb2:	1c42      	adds	r2, r0, #1
 8013fb4:	d101      	bne.n	8013fba <__sflush_r+0x7a>
 8013fb6:	682b      	ldr	r3, [r5, #0]
 8013fb8:	b903      	cbnz	r3, 8013fbc <__sflush_r+0x7c>
 8013fba:	6560      	str	r0, [r4, #84]	; 0x54
 8013fbc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8013fbe:	602f      	str	r7, [r5, #0]
 8013fc0:	2900      	cmp	r1, #0
 8013fc2:	d0ca      	beq.n	8013f5a <__sflush_r+0x1a>
 8013fc4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8013fc8:	4299      	cmp	r1, r3
 8013fca:	d002      	beq.n	8013fd2 <__sflush_r+0x92>
 8013fcc:	4628      	mov	r0, r5
 8013fce:	f000 f9df 	bl	8014390 <_free_r>
 8013fd2:	2000      	movs	r0, #0
 8013fd4:	6360      	str	r0, [r4, #52]	; 0x34
 8013fd6:	e7c1      	b.n	8013f5c <__sflush_r+0x1c>
 8013fd8:	6a21      	ldr	r1, [r4, #32]
 8013fda:	2301      	movs	r3, #1
 8013fdc:	4628      	mov	r0, r5
 8013fde:	47b0      	blx	r6
 8013fe0:	1c41      	adds	r1, r0, #1
 8013fe2:	d1c7      	bne.n	8013f74 <__sflush_r+0x34>
 8013fe4:	682b      	ldr	r3, [r5, #0]
 8013fe6:	2b00      	cmp	r3, #0
 8013fe8:	d0c4      	beq.n	8013f74 <__sflush_r+0x34>
 8013fea:	2b1d      	cmp	r3, #29
 8013fec:	d001      	beq.n	8013ff2 <__sflush_r+0xb2>
 8013fee:	2b16      	cmp	r3, #22
 8013ff0:	d101      	bne.n	8013ff6 <__sflush_r+0xb6>
 8013ff2:	602f      	str	r7, [r5, #0]
 8013ff4:	e7b1      	b.n	8013f5a <__sflush_r+0x1a>
 8013ff6:	89a3      	ldrh	r3, [r4, #12]
 8013ff8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013ffc:	81a3      	strh	r3, [r4, #12]
 8013ffe:	e7ad      	b.n	8013f5c <__sflush_r+0x1c>
 8014000:	690f      	ldr	r7, [r1, #16]
 8014002:	2f00      	cmp	r7, #0
 8014004:	d0a9      	beq.n	8013f5a <__sflush_r+0x1a>
 8014006:	0793      	lsls	r3, r2, #30
 8014008:	680e      	ldr	r6, [r1, #0]
 801400a:	bf08      	it	eq
 801400c:	694b      	ldreq	r3, [r1, #20]
 801400e:	600f      	str	r7, [r1, #0]
 8014010:	bf18      	it	ne
 8014012:	2300      	movne	r3, #0
 8014014:	eba6 0807 	sub.w	r8, r6, r7
 8014018:	608b      	str	r3, [r1, #8]
 801401a:	f1b8 0f00 	cmp.w	r8, #0
 801401e:	dd9c      	ble.n	8013f5a <__sflush_r+0x1a>
 8014020:	6a21      	ldr	r1, [r4, #32]
 8014022:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8014024:	4643      	mov	r3, r8
 8014026:	463a      	mov	r2, r7
 8014028:	4628      	mov	r0, r5
 801402a:	47b0      	blx	r6
 801402c:	2800      	cmp	r0, #0
 801402e:	dc06      	bgt.n	801403e <__sflush_r+0xfe>
 8014030:	89a3      	ldrh	r3, [r4, #12]
 8014032:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8014036:	81a3      	strh	r3, [r4, #12]
 8014038:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801403c:	e78e      	b.n	8013f5c <__sflush_r+0x1c>
 801403e:	4407      	add	r7, r0
 8014040:	eba8 0800 	sub.w	r8, r8, r0
 8014044:	e7e9      	b.n	801401a <__sflush_r+0xda>
 8014046:	bf00      	nop
 8014048:	20400001 	.word	0x20400001

0801404c <_fflush_r>:
 801404c:	b538      	push	{r3, r4, r5, lr}
 801404e:	690b      	ldr	r3, [r1, #16]
 8014050:	4605      	mov	r5, r0
 8014052:	460c      	mov	r4, r1
 8014054:	b913      	cbnz	r3, 801405c <_fflush_r+0x10>
 8014056:	2500      	movs	r5, #0
 8014058:	4628      	mov	r0, r5
 801405a:	bd38      	pop	{r3, r4, r5, pc}
 801405c:	b118      	cbz	r0, 8014066 <_fflush_r+0x1a>
 801405e:	6983      	ldr	r3, [r0, #24]
 8014060:	b90b      	cbnz	r3, 8014066 <_fflush_r+0x1a>
 8014062:	f000 f887 	bl	8014174 <__sinit>
 8014066:	4b14      	ldr	r3, [pc, #80]	; (80140b8 <_fflush_r+0x6c>)
 8014068:	429c      	cmp	r4, r3
 801406a:	d11b      	bne.n	80140a4 <_fflush_r+0x58>
 801406c:	686c      	ldr	r4, [r5, #4]
 801406e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014072:	2b00      	cmp	r3, #0
 8014074:	d0ef      	beq.n	8014056 <_fflush_r+0xa>
 8014076:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8014078:	07d0      	lsls	r0, r2, #31
 801407a:	d404      	bmi.n	8014086 <_fflush_r+0x3a>
 801407c:	0599      	lsls	r1, r3, #22
 801407e:	d402      	bmi.n	8014086 <_fflush_r+0x3a>
 8014080:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8014082:	f000 f915 	bl	80142b0 <__retarget_lock_acquire_recursive>
 8014086:	4628      	mov	r0, r5
 8014088:	4621      	mov	r1, r4
 801408a:	f7ff ff59 	bl	8013f40 <__sflush_r>
 801408e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8014090:	07da      	lsls	r2, r3, #31
 8014092:	4605      	mov	r5, r0
 8014094:	d4e0      	bmi.n	8014058 <_fflush_r+0xc>
 8014096:	89a3      	ldrh	r3, [r4, #12]
 8014098:	059b      	lsls	r3, r3, #22
 801409a:	d4dd      	bmi.n	8014058 <_fflush_r+0xc>
 801409c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801409e:	f000 f908 	bl	80142b2 <__retarget_lock_release_recursive>
 80140a2:	e7d9      	b.n	8014058 <_fflush_r+0xc>
 80140a4:	4b05      	ldr	r3, [pc, #20]	; (80140bc <_fflush_r+0x70>)
 80140a6:	429c      	cmp	r4, r3
 80140a8:	d101      	bne.n	80140ae <_fflush_r+0x62>
 80140aa:	68ac      	ldr	r4, [r5, #8]
 80140ac:	e7df      	b.n	801406e <_fflush_r+0x22>
 80140ae:	4b04      	ldr	r3, [pc, #16]	; (80140c0 <_fflush_r+0x74>)
 80140b0:	429c      	cmp	r4, r3
 80140b2:	bf08      	it	eq
 80140b4:	68ec      	ldreq	r4, [r5, #12]
 80140b6:	e7da      	b.n	801406e <_fflush_r+0x22>
 80140b8:	08015e4c 	.word	0x08015e4c
 80140bc:	08015e6c 	.word	0x08015e6c
 80140c0:	08015e2c 	.word	0x08015e2c

080140c4 <std>:
 80140c4:	2300      	movs	r3, #0
 80140c6:	b510      	push	{r4, lr}
 80140c8:	4604      	mov	r4, r0
 80140ca:	e9c0 3300 	strd	r3, r3, [r0]
 80140ce:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80140d2:	6083      	str	r3, [r0, #8]
 80140d4:	8181      	strh	r1, [r0, #12]
 80140d6:	6643      	str	r3, [r0, #100]	; 0x64
 80140d8:	81c2      	strh	r2, [r0, #14]
 80140da:	6183      	str	r3, [r0, #24]
 80140dc:	4619      	mov	r1, r3
 80140de:	2208      	movs	r2, #8
 80140e0:	305c      	adds	r0, #92	; 0x5c
 80140e2:	f7ff fd11 	bl	8013b08 <memset>
 80140e6:	4b05      	ldr	r3, [pc, #20]	; (80140fc <std+0x38>)
 80140e8:	6263      	str	r3, [r4, #36]	; 0x24
 80140ea:	4b05      	ldr	r3, [pc, #20]	; (8014100 <std+0x3c>)
 80140ec:	62a3      	str	r3, [r4, #40]	; 0x28
 80140ee:	4b05      	ldr	r3, [pc, #20]	; (8014104 <std+0x40>)
 80140f0:	62e3      	str	r3, [r4, #44]	; 0x2c
 80140f2:	4b05      	ldr	r3, [pc, #20]	; (8014108 <std+0x44>)
 80140f4:	6224      	str	r4, [r4, #32]
 80140f6:	6323      	str	r3, [r4, #48]	; 0x30
 80140f8:	bd10      	pop	{r4, pc}
 80140fa:	bf00      	nop
 80140fc:	08014b4d 	.word	0x08014b4d
 8014100:	08014b6f 	.word	0x08014b6f
 8014104:	08014ba7 	.word	0x08014ba7
 8014108:	08014bcb 	.word	0x08014bcb

0801410c <_cleanup_r>:
 801410c:	4901      	ldr	r1, [pc, #4]	; (8014114 <_cleanup_r+0x8>)
 801410e:	f000 b8af 	b.w	8014270 <_fwalk_reent>
 8014112:	bf00      	nop
 8014114:	0801404d 	.word	0x0801404d

08014118 <__sfmoreglue>:
 8014118:	b570      	push	{r4, r5, r6, lr}
 801411a:	2268      	movs	r2, #104	; 0x68
 801411c:	1e4d      	subs	r5, r1, #1
 801411e:	4355      	muls	r5, r2
 8014120:	460e      	mov	r6, r1
 8014122:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8014126:	f000 f99f 	bl	8014468 <_malloc_r>
 801412a:	4604      	mov	r4, r0
 801412c:	b140      	cbz	r0, 8014140 <__sfmoreglue+0x28>
 801412e:	2100      	movs	r1, #0
 8014130:	e9c0 1600 	strd	r1, r6, [r0]
 8014134:	300c      	adds	r0, #12
 8014136:	60a0      	str	r0, [r4, #8]
 8014138:	f105 0268 	add.w	r2, r5, #104	; 0x68
 801413c:	f7ff fce4 	bl	8013b08 <memset>
 8014140:	4620      	mov	r0, r4
 8014142:	bd70      	pop	{r4, r5, r6, pc}

08014144 <__sfp_lock_acquire>:
 8014144:	4801      	ldr	r0, [pc, #4]	; (801414c <__sfp_lock_acquire+0x8>)
 8014146:	f000 b8b3 	b.w	80142b0 <__retarget_lock_acquire_recursive>
 801414a:	bf00      	nop
 801414c:	20001de9 	.word	0x20001de9

08014150 <__sfp_lock_release>:
 8014150:	4801      	ldr	r0, [pc, #4]	; (8014158 <__sfp_lock_release+0x8>)
 8014152:	f000 b8ae 	b.w	80142b2 <__retarget_lock_release_recursive>
 8014156:	bf00      	nop
 8014158:	20001de9 	.word	0x20001de9

0801415c <__sinit_lock_acquire>:
 801415c:	4801      	ldr	r0, [pc, #4]	; (8014164 <__sinit_lock_acquire+0x8>)
 801415e:	f000 b8a7 	b.w	80142b0 <__retarget_lock_acquire_recursive>
 8014162:	bf00      	nop
 8014164:	20001dea 	.word	0x20001dea

08014168 <__sinit_lock_release>:
 8014168:	4801      	ldr	r0, [pc, #4]	; (8014170 <__sinit_lock_release+0x8>)
 801416a:	f000 b8a2 	b.w	80142b2 <__retarget_lock_release_recursive>
 801416e:	bf00      	nop
 8014170:	20001dea 	.word	0x20001dea

08014174 <__sinit>:
 8014174:	b510      	push	{r4, lr}
 8014176:	4604      	mov	r4, r0
 8014178:	f7ff fff0 	bl	801415c <__sinit_lock_acquire>
 801417c:	69a3      	ldr	r3, [r4, #24]
 801417e:	b11b      	cbz	r3, 8014188 <__sinit+0x14>
 8014180:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014184:	f7ff bff0 	b.w	8014168 <__sinit_lock_release>
 8014188:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 801418c:	6523      	str	r3, [r4, #80]	; 0x50
 801418e:	4b13      	ldr	r3, [pc, #76]	; (80141dc <__sinit+0x68>)
 8014190:	4a13      	ldr	r2, [pc, #76]	; (80141e0 <__sinit+0x6c>)
 8014192:	681b      	ldr	r3, [r3, #0]
 8014194:	62a2      	str	r2, [r4, #40]	; 0x28
 8014196:	42a3      	cmp	r3, r4
 8014198:	bf04      	itt	eq
 801419a:	2301      	moveq	r3, #1
 801419c:	61a3      	streq	r3, [r4, #24]
 801419e:	4620      	mov	r0, r4
 80141a0:	f000 f820 	bl	80141e4 <__sfp>
 80141a4:	6060      	str	r0, [r4, #4]
 80141a6:	4620      	mov	r0, r4
 80141a8:	f000 f81c 	bl	80141e4 <__sfp>
 80141ac:	60a0      	str	r0, [r4, #8]
 80141ae:	4620      	mov	r0, r4
 80141b0:	f000 f818 	bl	80141e4 <__sfp>
 80141b4:	2200      	movs	r2, #0
 80141b6:	60e0      	str	r0, [r4, #12]
 80141b8:	2104      	movs	r1, #4
 80141ba:	6860      	ldr	r0, [r4, #4]
 80141bc:	f7ff ff82 	bl	80140c4 <std>
 80141c0:	68a0      	ldr	r0, [r4, #8]
 80141c2:	2201      	movs	r2, #1
 80141c4:	2109      	movs	r1, #9
 80141c6:	f7ff ff7d 	bl	80140c4 <std>
 80141ca:	68e0      	ldr	r0, [r4, #12]
 80141cc:	2202      	movs	r2, #2
 80141ce:	2112      	movs	r1, #18
 80141d0:	f7ff ff78 	bl	80140c4 <std>
 80141d4:	2301      	movs	r3, #1
 80141d6:	61a3      	str	r3, [r4, #24]
 80141d8:	e7d2      	b.n	8014180 <__sinit+0xc>
 80141da:	bf00      	nop
 80141dc:	08015e28 	.word	0x08015e28
 80141e0:	0801410d 	.word	0x0801410d

080141e4 <__sfp>:
 80141e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80141e6:	4607      	mov	r7, r0
 80141e8:	f7ff ffac 	bl	8014144 <__sfp_lock_acquire>
 80141ec:	4b1e      	ldr	r3, [pc, #120]	; (8014268 <__sfp+0x84>)
 80141ee:	681e      	ldr	r6, [r3, #0]
 80141f0:	69b3      	ldr	r3, [r6, #24]
 80141f2:	b913      	cbnz	r3, 80141fa <__sfp+0x16>
 80141f4:	4630      	mov	r0, r6
 80141f6:	f7ff ffbd 	bl	8014174 <__sinit>
 80141fa:	3648      	adds	r6, #72	; 0x48
 80141fc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8014200:	3b01      	subs	r3, #1
 8014202:	d503      	bpl.n	801420c <__sfp+0x28>
 8014204:	6833      	ldr	r3, [r6, #0]
 8014206:	b30b      	cbz	r3, 801424c <__sfp+0x68>
 8014208:	6836      	ldr	r6, [r6, #0]
 801420a:	e7f7      	b.n	80141fc <__sfp+0x18>
 801420c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8014210:	b9d5      	cbnz	r5, 8014248 <__sfp+0x64>
 8014212:	4b16      	ldr	r3, [pc, #88]	; (801426c <__sfp+0x88>)
 8014214:	60e3      	str	r3, [r4, #12]
 8014216:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801421a:	6665      	str	r5, [r4, #100]	; 0x64
 801421c:	f000 f847 	bl	80142ae <__retarget_lock_init_recursive>
 8014220:	f7ff ff96 	bl	8014150 <__sfp_lock_release>
 8014224:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8014228:	e9c4 5504 	strd	r5, r5, [r4, #16]
 801422c:	6025      	str	r5, [r4, #0]
 801422e:	61a5      	str	r5, [r4, #24]
 8014230:	2208      	movs	r2, #8
 8014232:	4629      	mov	r1, r5
 8014234:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8014238:	f7ff fc66 	bl	8013b08 <memset>
 801423c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8014240:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8014244:	4620      	mov	r0, r4
 8014246:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014248:	3468      	adds	r4, #104	; 0x68
 801424a:	e7d9      	b.n	8014200 <__sfp+0x1c>
 801424c:	2104      	movs	r1, #4
 801424e:	4638      	mov	r0, r7
 8014250:	f7ff ff62 	bl	8014118 <__sfmoreglue>
 8014254:	4604      	mov	r4, r0
 8014256:	6030      	str	r0, [r6, #0]
 8014258:	2800      	cmp	r0, #0
 801425a:	d1d5      	bne.n	8014208 <__sfp+0x24>
 801425c:	f7ff ff78 	bl	8014150 <__sfp_lock_release>
 8014260:	230c      	movs	r3, #12
 8014262:	603b      	str	r3, [r7, #0]
 8014264:	e7ee      	b.n	8014244 <__sfp+0x60>
 8014266:	bf00      	nop
 8014268:	08015e28 	.word	0x08015e28
 801426c:	ffff0001 	.word	0xffff0001

08014270 <_fwalk_reent>:
 8014270:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014274:	4606      	mov	r6, r0
 8014276:	4688      	mov	r8, r1
 8014278:	f100 0448 	add.w	r4, r0, #72	; 0x48
 801427c:	2700      	movs	r7, #0
 801427e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8014282:	f1b9 0901 	subs.w	r9, r9, #1
 8014286:	d505      	bpl.n	8014294 <_fwalk_reent+0x24>
 8014288:	6824      	ldr	r4, [r4, #0]
 801428a:	2c00      	cmp	r4, #0
 801428c:	d1f7      	bne.n	801427e <_fwalk_reent+0xe>
 801428e:	4638      	mov	r0, r7
 8014290:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014294:	89ab      	ldrh	r3, [r5, #12]
 8014296:	2b01      	cmp	r3, #1
 8014298:	d907      	bls.n	80142aa <_fwalk_reent+0x3a>
 801429a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801429e:	3301      	adds	r3, #1
 80142a0:	d003      	beq.n	80142aa <_fwalk_reent+0x3a>
 80142a2:	4629      	mov	r1, r5
 80142a4:	4630      	mov	r0, r6
 80142a6:	47c0      	blx	r8
 80142a8:	4307      	orrs	r7, r0
 80142aa:	3568      	adds	r5, #104	; 0x68
 80142ac:	e7e9      	b.n	8014282 <_fwalk_reent+0x12>

080142ae <__retarget_lock_init_recursive>:
 80142ae:	4770      	bx	lr

080142b0 <__retarget_lock_acquire_recursive>:
 80142b0:	4770      	bx	lr

080142b2 <__retarget_lock_release_recursive>:
 80142b2:	4770      	bx	lr

080142b4 <__swhatbuf_r>:
 80142b4:	b570      	push	{r4, r5, r6, lr}
 80142b6:	460e      	mov	r6, r1
 80142b8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80142bc:	2900      	cmp	r1, #0
 80142be:	b096      	sub	sp, #88	; 0x58
 80142c0:	4614      	mov	r4, r2
 80142c2:	461d      	mov	r5, r3
 80142c4:	da08      	bge.n	80142d8 <__swhatbuf_r+0x24>
 80142c6:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80142ca:	2200      	movs	r2, #0
 80142cc:	602a      	str	r2, [r5, #0]
 80142ce:	061a      	lsls	r2, r3, #24
 80142d0:	d410      	bmi.n	80142f4 <__swhatbuf_r+0x40>
 80142d2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80142d6:	e00e      	b.n	80142f6 <__swhatbuf_r+0x42>
 80142d8:	466a      	mov	r2, sp
 80142da:	f000 fc9d 	bl	8014c18 <_fstat_r>
 80142de:	2800      	cmp	r0, #0
 80142e0:	dbf1      	blt.n	80142c6 <__swhatbuf_r+0x12>
 80142e2:	9a01      	ldr	r2, [sp, #4]
 80142e4:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80142e8:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80142ec:	425a      	negs	r2, r3
 80142ee:	415a      	adcs	r2, r3
 80142f0:	602a      	str	r2, [r5, #0]
 80142f2:	e7ee      	b.n	80142d2 <__swhatbuf_r+0x1e>
 80142f4:	2340      	movs	r3, #64	; 0x40
 80142f6:	2000      	movs	r0, #0
 80142f8:	6023      	str	r3, [r4, #0]
 80142fa:	b016      	add	sp, #88	; 0x58
 80142fc:	bd70      	pop	{r4, r5, r6, pc}
	...

08014300 <__smakebuf_r>:
 8014300:	898b      	ldrh	r3, [r1, #12]
 8014302:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8014304:	079d      	lsls	r5, r3, #30
 8014306:	4606      	mov	r6, r0
 8014308:	460c      	mov	r4, r1
 801430a:	d507      	bpl.n	801431c <__smakebuf_r+0x1c>
 801430c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8014310:	6023      	str	r3, [r4, #0]
 8014312:	6123      	str	r3, [r4, #16]
 8014314:	2301      	movs	r3, #1
 8014316:	6163      	str	r3, [r4, #20]
 8014318:	b002      	add	sp, #8
 801431a:	bd70      	pop	{r4, r5, r6, pc}
 801431c:	ab01      	add	r3, sp, #4
 801431e:	466a      	mov	r2, sp
 8014320:	f7ff ffc8 	bl	80142b4 <__swhatbuf_r>
 8014324:	9900      	ldr	r1, [sp, #0]
 8014326:	4605      	mov	r5, r0
 8014328:	4630      	mov	r0, r6
 801432a:	f000 f89d 	bl	8014468 <_malloc_r>
 801432e:	b948      	cbnz	r0, 8014344 <__smakebuf_r+0x44>
 8014330:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014334:	059a      	lsls	r2, r3, #22
 8014336:	d4ef      	bmi.n	8014318 <__smakebuf_r+0x18>
 8014338:	f023 0303 	bic.w	r3, r3, #3
 801433c:	f043 0302 	orr.w	r3, r3, #2
 8014340:	81a3      	strh	r3, [r4, #12]
 8014342:	e7e3      	b.n	801430c <__smakebuf_r+0xc>
 8014344:	4b0d      	ldr	r3, [pc, #52]	; (801437c <__smakebuf_r+0x7c>)
 8014346:	62b3      	str	r3, [r6, #40]	; 0x28
 8014348:	89a3      	ldrh	r3, [r4, #12]
 801434a:	6020      	str	r0, [r4, #0]
 801434c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8014350:	81a3      	strh	r3, [r4, #12]
 8014352:	9b00      	ldr	r3, [sp, #0]
 8014354:	6163      	str	r3, [r4, #20]
 8014356:	9b01      	ldr	r3, [sp, #4]
 8014358:	6120      	str	r0, [r4, #16]
 801435a:	b15b      	cbz	r3, 8014374 <__smakebuf_r+0x74>
 801435c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8014360:	4630      	mov	r0, r6
 8014362:	f000 fc6b 	bl	8014c3c <_isatty_r>
 8014366:	b128      	cbz	r0, 8014374 <__smakebuf_r+0x74>
 8014368:	89a3      	ldrh	r3, [r4, #12]
 801436a:	f023 0303 	bic.w	r3, r3, #3
 801436e:	f043 0301 	orr.w	r3, r3, #1
 8014372:	81a3      	strh	r3, [r4, #12]
 8014374:	89a0      	ldrh	r0, [r4, #12]
 8014376:	4305      	orrs	r5, r0
 8014378:	81a5      	strh	r5, [r4, #12]
 801437a:	e7cd      	b.n	8014318 <__smakebuf_r+0x18>
 801437c:	0801410d 	.word	0x0801410d

08014380 <malloc>:
 8014380:	4b02      	ldr	r3, [pc, #8]	; (801438c <malloc+0xc>)
 8014382:	4601      	mov	r1, r0
 8014384:	6818      	ldr	r0, [r3, #0]
 8014386:	f000 b86f 	b.w	8014468 <_malloc_r>
 801438a:	bf00      	nop
 801438c:	20001068 	.word	0x20001068

08014390 <_free_r>:
 8014390:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8014392:	2900      	cmp	r1, #0
 8014394:	d044      	beq.n	8014420 <_free_r+0x90>
 8014396:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801439a:	9001      	str	r0, [sp, #4]
 801439c:	2b00      	cmp	r3, #0
 801439e:	f1a1 0404 	sub.w	r4, r1, #4
 80143a2:	bfb8      	it	lt
 80143a4:	18e4      	addlt	r4, r4, r3
 80143a6:	f000 fc6b 	bl	8014c80 <__malloc_lock>
 80143aa:	4a1e      	ldr	r2, [pc, #120]	; (8014424 <_free_r+0x94>)
 80143ac:	9801      	ldr	r0, [sp, #4]
 80143ae:	6813      	ldr	r3, [r2, #0]
 80143b0:	b933      	cbnz	r3, 80143c0 <_free_r+0x30>
 80143b2:	6063      	str	r3, [r4, #4]
 80143b4:	6014      	str	r4, [r2, #0]
 80143b6:	b003      	add	sp, #12
 80143b8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80143bc:	f000 bc66 	b.w	8014c8c <__malloc_unlock>
 80143c0:	42a3      	cmp	r3, r4
 80143c2:	d908      	bls.n	80143d6 <_free_r+0x46>
 80143c4:	6825      	ldr	r5, [r4, #0]
 80143c6:	1961      	adds	r1, r4, r5
 80143c8:	428b      	cmp	r3, r1
 80143ca:	bf01      	itttt	eq
 80143cc:	6819      	ldreq	r1, [r3, #0]
 80143ce:	685b      	ldreq	r3, [r3, #4]
 80143d0:	1949      	addeq	r1, r1, r5
 80143d2:	6021      	streq	r1, [r4, #0]
 80143d4:	e7ed      	b.n	80143b2 <_free_r+0x22>
 80143d6:	461a      	mov	r2, r3
 80143d8:	685b      	ldr	r3, [r3, #4]
 80143da:	b10b      	cbz	r3, 80143e0 <_free_r+0x50>
 80143dc:	42a3      	cmp	r3, r4
 80143de:	d9fa      	bls.n	80143d6 <_free_r+0x46>
 80143e0:	6811      	ldr	r1, [r2, #0]
 80143e2:	1855      	adds	r5, r2, r1
 80143e4:	42a5      	cmp	r5, r4
 80143e6:	d10b      	bne.n	8014400 <_free_r+0x70>
 80143e8:	6824      	ldr	r4, [r4, #0]
 80143ea:	4421      	add	r1, r4
 80143ec:	1854      	adds	r4, r2, r1
 80143ee:	42a3      	cmp	r3, r4
 80143f0:	6011      	str	r1, [r2, #0]
 80143f2:	d1e0      	bne.n	80143b6 <_free_r+0x26>
 80143f4:	681c      	ldr	r4, [r3, #0]
 80143f6:	685b      	ldr	r3, [r3, #4]
 80143f8:	6053      	str	r3, [r2, #4]
 80143fa:	4421      	add	r1, r4
 80143fc:	6011      	str	r1, [r2, #0]
 80143fe:	e7da      	b.n	80143b6 <_free_r+0x26>
 8014400:	d902      	bls.n	8014408 <_free_r+0x78>
 8014402:	230c      	movs	r3, #12
 8014404:	6003      	str	r3, [r0, #0]
 8014406:	e7d6      	b.n	80143b6 <_free_r+0x26>
 8014408:	6825      	ldr	r5, [r4, #0]
 801440a:	1961      	adds	r1, r4, r5
 801440c:	428b      	cmp	r3, r1
 801440e:	bf04      	itt	eq
 8014410:	6819      	ldreq	r1, [r3, #0]
 8014412:	685b      	ldreq	r3, [r3, #4]
 8014414:	6063      	str	r3, [r4, #4]
 8014416:	bf04      	itt	eq
 8014418:	1949      	addeq	r1, r1, r5
 801441a:	6021      	streq	r1, [r4, #0]
 801441c:	6054      	str	r4, [r2, #4]
 801441e:	e7ca      	b.n	80143b6 <_free_r+0x26>
 8014420:	b003      	add	sp, #12
 8014422:	bd30      	pop	{r4, r5, pc}
 8014424:	20001dec 	.word	0x20001dec

08014428 <sbrk_aligned>:
 8014428:	b570      	push	{r4, r5, r6, lr}
 801442a:	4e0e      	ldr	r6, [pc, #56]	; (8014464 <sbrk_aligned+0x3c>)
 801442c:	460c      	mov	r4, r1
 801442e:	6831      	ldr	r1, [r6, #0]
 8014430:	4605      	mov	r5, r0
 8014432:	b911      	cbnz	r1, 801443a <sbrk_aligned+0x12>
 8014434:	f000 fb7a 	bl	8014b2c <_sbrk_r>
 8014438:	6030      	str	r0, [r6, #0]
 801443a:	4621      	mov	r1, r4
 801443c:	4628      	mov	r0, r5
 801443e:	f000 fb75 	bl	8014b2c <_sbrk_r>
 8014442:	1c43      	adds	r3, r0, #1
 8014444:	d00a      	beq.n	801445c <sbrk_aligned+0x34>
 8014446:	1cc4      	adds	r4, r0, #3
 8014448:	f024 0403 	bic.w	r4, r4, #3
 801444c:	42a0      	cmp	r0, r4
 801444e:	d007      	beq.n	8014460 <sbrk_aligned+0x38>
 8014450:	1a21      	subs	r1, r4, r0
 8014452:	4628      	mov	r0, r5
 8014454:	f000 fb6a 	bl	8014b2c <_sbrk_r>
 8014458:	3001      	adds	r0, #1
 801445a:	d101      	bne.n	8014460 <sbrk_aligned+0x38>
 801445c:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8014460:	4620      	mov	r0, r4
 8014462:	bd70      	pop	{r4, r5, r6, pc}
 8014464:	20001df0 	.word	0x20001df0

08014468 <_malloc_r>:
 8014468:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801446c:	1ccd      	adds	r5, r1, #3
 801446e:	f025 0503 	bic.w	r5, r5, #3
 8014472:	3508      	adds	r5, #8
 8014474:	2d0c      	cmp	r5, #12
 8014476:	bf38      	it	cc
 8014478:	250c      	movcc	r5, #12
 801447a:	2d00      	cmp	r5, #0
 801447c:	4607      	mov	r7, r0
 801447e:	db01      	blt.n	8014484 <_malloc_r+0x1c>
 8014480:	42a9      	cmp	r1, r5
 8014482:	d905      	bls.n	8014490 <_malloc_r+0x28>
 8014484:	230c      	movs	r3, #12
 8014486:	603b      	str	r3, [r7, #0]
 8014488:	2600      	movs	r6, #0
 801448a:	4630      	mov	r0, r6
 801448c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014490:	4e2e      	ldr	r6, [pc, #184]	; (801454c <_malloc_r+0xe4>)
 8014492:	f000 fbf5 	bl	8014c80 <__malloc_lock>
 8014496:	6833      	ldr	r3, [r6, #0]
 8014498:	461c      	mov	r4, r3
 801449a:	bb34      	cbnz	r4, 80144ea <_malloc_r+0x82>
 801449c:	4629      	mov	r1, r5
 801449e:	4638      	mov	r0, r7
 80144a0:	f7ff ffc2 	bl	8014428 <sbrk_aligned>
 80144a4:	1c43      	adds	r3, r0, #1
 80144a6:	4604      	mov	r4, r0
 80144a8:	d14d      	bne.n	8014546 <_malloc_r+0xde>
 80144aa:	6834      	ldr	r4, [r6, #0]
 80144ac:	4626      	mov	r6, r4
 80144ae:	2e00      	cmp	r6, #0
 80144b0:	d140      	bne.n	8014534 <_malloc_r+0xcc>
 80144b2:	6823      	ldr	r3, [r4, #0]
 80144b4:	4631      	mov	r1, r6
 80144b6:	4638      	mov	r0, r7
 80144b8:	eb04 0803 	add.w	r8, r4, r3
 80144bc:	f000 fb36 	bl	8014b2c <_sbrk_r>
 80144c0:	4580      	cmp	r8, r0
 80144c2:	d13a      	bne.n	801453a <_malloc_r+0xd2>
 80144c4:	6821      	ldr	r1, [r4, #0]
 80144c6:	3503      	adds	r5, #3
 80144c8:	1a6d      	subs	r5, r5, r1
 80144ca:	f025 0503 	bic.w	r5, r5, #3
 80144ce:	3508      	adds	r5, #8
 80144d0:	2d0c      	cmp	r5, #12
 80144d2:	bf38      	it	cc
 80144d4:	250c      	movcc	r5, #12
 80144d6:	4629      	mov	r1, r5
 80144d8:	4638      	mov	r0, r7
 80144da:	f7ff ffa5 	bl	8014428 <sbrk_aligned>
 80144de:	3001      	adds	r0, #1
 80144e0:	d02b      	beq.n	801453a <_malloc_r+0xd2>
 80144e2:	6823      	ldr	r3, [r4, #0]
 80144e4:	442b      	add	r3, r5
 80144e6:	6023      	str	r3, [r4, #0]
 80144e8:	e00e      	b.n	8014508 <_malloc_r+0xa0>
 80144ea:	6822      	ldr	r2, [r4, #0]
 80144ec:	1b52      	subs	r2, r2, r5
 80144ee:	d41e      	bmi.n	801452e <_malloc_r+0xc6>
 80144f0:	2a0b      	cmp	r2, #11
 80144f2:	d916      	bls.n	8014522 <_malloc_r+0xba>
 80144f4:	1961      	adds	r1, r4, r5
 80144f6:	42a3      	cmp	r3, r4
 80144f8:	6025      	str	r5, [r4, #0]
 80144fa:	bf18      	it	ne
 80144fc:	6059      	strne	r1, [r3, #4]
 80144fe:	6863      	ldr	r3, [r4, #4]
 8014500:	bf08      	it	eq
 8014502:	6031      	streq	r1, [r6, #0]
 8014504:	5162      	str	r2, [r4, r5]
 8014506:	604b      	str	r3, [r1, #4]
 8014508:	4638      	mov	r0, r7
 801450a:	f104 060b 	add.w	r6, r4, #11
 801450e:	f000 fbbd 	bl	8014c8c <__malloc_unlock>
 8014512:	f026 0607 	bic.w	r6, r6, #7
 8014516:	1d23      	adds	r3, r4, #4
 8014518:	1af2      	subs	r2, r6, r3
 801451a:	d0b6      	beq.n	801448a <_malloc_r+0x22>
 801451c:	1b9b      	subs	r3, r3, r6
 801451e:	50a3      	str	r3, [r4, r2]
 8014520:	e7b3      	b.n	801448a <_malloc_r+0x22>
 8014522:	6862      	ldr	r2, [r4, #4]
 8014524:	42a3      	cmp	r3, r4
 8014526:	bf0c      	ite	eq
 8014528:	6032      	streq	r2, [r6, #0]
 801452a:	605a      	strne	r2, [r3, #4]
 801452c:	e7ec      	b.n	8014508 <_malloc_r+0xa0>
 801452e:	4623      	mov	r3, r4
 8014530:	6864      	ldr	r4, [r4, #4]
 8014532:	e7b2      	b.n	801449a <_malloc_r+0x32>
 8014534:	4634      	mov	r4, r6
 8014536:	6876      	ldr	r6, [r6, #4]
 8014538:	e7b9      	b.n	80144ae <_malloc_r+0x46>
 801453a:	230c      	movs	r3, #12
 801453c:	603b      	str	r3, [r7, #0]
 801453e:	4638      	mov	r0, r7
 8014540:	f000 fba4 	bl	8014c8c <__malloc_unlock>
 8014544:	e7a1      	b.n	801448a <_malloc_r+0x22>
 8014546:	6025      	str	r5, [r4, #0]
 8014548:	e7de      	b.n	8014508 <_malloc_r+0xa0>
 801454a:	bf00      	nop
 801454c:	20001dec 	.word	0x20001dec

08014550 <__sfputc_r>:
 8014550:	6893      	ldr	r3, [r2, #8]
 8014552:	3b01      	subs	r3, #1
 8014554:	2b00      	cmp	r3, #0
 8014556:	b410      	push	{r4}
 8014558:	6093      	str	r3, [r2, #8]
 801455a:	da08      	bge.n	801456e <__sfputc_r+0x1e>
 801455c:	6994      	ldr	r4, [r2, #24]
 801455e:	42a3      	cmp	r3, r4
 8014560:	db01      	blt.n	8014566 <__sfputc_r+0x16>
 8014562:	290a      	cmp	r1, #10
 8014564:	d103      	bne.n	801456e <__sfputc_r+0x1e>
 8014566:	f85d 4b04 	ldr.w	r4, [sp], #4
 801456a:	f7ff bc29 	b.w	8013dc0 <__swbuf_r>
 801456e:	6813      	ldr	r3, [r2, #0]
 8014570:	1c58      	adds	r0, r3, #1
 8014572:	6010      	str	r0, [r2, #0]
 8014574:	7019      	strb	r1, [r3, #0]
 8014576:	4608      	mov	r0, r1
 8014578:	f85d 4b04 	ldr.w	r4, [sp], #4
 801457c:	4770      	bx	lr

0801457e <__sfputs_r>:
 801457e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014580:	4606      	mov	r6, r0
 8014582:	460f      	mov	r7, r1
 8014584:	4614      	mov	r4, r2
 8014586:	18d5      	adds	r5, r2, r3
 8014588:	42ac      	cmp	r4, r5
 801458a:	d101      	bne.n	8014590 <__sfputs_r+0x12>
 801458c:	2000      	movs	r0, #0
 801458e:	e007      	b.n	80145a0 <__sfputs_r+0x22>
 8014590:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014594:	463a      	mov	r2, r7
 8014596:	4630      	mov	r0, r6
 8014598:	f7ff ffda 	bl	8014550 <__sfputc_r>
 801459c:	1c43      	adds	r3, r0, #1
 801459e:	d1f3      	bne.n	8014588 <__sfputs_r+0xa>
 80145a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080145a4 <_vfiprintf_r>:
 80145a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80145a8:	460d      	mov	r5, r1
 80145aa:	b09d      	sub	sp, #116	; 0x74
 80145ac:	4614      	mov	r4, r2
 80145ae:	4698      	mov	r8, r3
 80145b0:	4606      	mov	r6, r0
 80145b2:	b118      	cbz	r0, 80145bc <_vfiprintf_r+0x18>
 80145b4:	6983      	ldr	r3, [r0, #24]
 80145b6:	b90b      	cbnz	r3, 80145bc <_vfiprintf_r+0x18>
 80145b8:	f7ff fddc 	bl	8014174 <__sinit>
 80145bc:	4b89      	ldr	r3, [pc, #548]	; (80147e4 <_vfiprintf_r+0x240>)
 80145be:	429d      	cmp	r5, r3
 80145c0:	d11b      	bne.n	80145fa <_vfiprintf_r+0x56>
 80145c2:	6875      	ldr	r5, [r6, #4]
 80145c4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80145c6:	07d9      	lsls	r1, r3, #31
 80145c8:	d405      	bmi.n	80145d6 <_vfiprintf_r+0x32>
 80145ca:	89ab      	ldrh	r3, [r5, #12]
 80145cc:	059a      	lsls	r2, r3, #22
 80145ce:	d402      	bmi.n	80145d6 <_vfiprintf_r+0x32>
 80145d0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80145d2:	f7ff fe6d 	bl	80142b0 <__retarget_lock_acquire_recursive>
 80145d6:	89ab      	ldrh	r3, [r5, #12]
 80145d8:	071b      	lsls	r3, r3, #28
 80145da:	d501      	bpl.n	80145e0 <_vfiprintf_r+0x3c>
 80145dc:	692b      	ldr	r3, [r5, #16]
 80145de:	b9eb      	cbnz	r3, 801461c <_vfiprintf_r+0x78>
 80145e0:	4629      	mov	r1, r5
 80145e2:	4630      	mov	r0, r6
 80145e4:	f7ff fc3e 	bl	8013e64 <__swsetup_r>
 80145e8:	b1c0      	cbz	r0, 801461c <_vfiprintf_r+0x78>
 80145ea:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80145ec:	07dc      	lsls	r4, r3, #31
 80145ee:	d50e      	bpl.n	801460e <_vfiprintf_r+0x6a>
 80145f0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80145f4:	b01d      	add	sp, #116	; 0x74
 80145f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80145fa:	4b7b      	ldr	r3, [pc, #492]	; (80147e8 <_vfiprintf_r+0x244>)
 80145fc:	429d      	cmp	r5, r3
 80145fe:	d101      	bne.n	8014604 <_vfiprintf_r+0x60>
 8014600:	68b5      	ldr	r5, [r6, #8]
 8014602:	e7df      	b.n	80145c4 <_vfiprintf_r+0x20>
 8014604:	4b79      	ldr	r3, [pc, #484]	; (80147ec <_vfiprintf_r+0x248>)
 8014606:	429d      	cmp	r5, r3
 8014608:	bf08      	it	eq
 801460a:	68f5      	ldreq	r5, [r6, #12]
 801460c:	e7da      	b.n	80145c4 <_vfiprintf_r+0x20>
 801460e:	89ab      	ldrh	r3, [r5, #12]
 8014610:	0598      	lsls	r0, r3, #22
 8014612:	d4ed      	bmi.n	80145f0 <_vfiprintf_r+0x4c>
 8014614:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8014616:	f7ff fe4c 	bl	80142b2 <__retarget_lock_release_recursive>
 801461a:	e7e9      	b.n	80145f0 <_vfiprintf_r+0x4c>
 801461c:	2300      	movs	r3, #0
 801461e:	9309      	str	r3, [sp, #36]	; 0x24
 8014620:	2320      	movs	r3, #32
 8014622:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8014626:	f8cd 800c 	str.w	r8, [sp, #12]
 801462a:	2330      	movs	r3, #48	; 0x30
 801462c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80147f0 <_vfiprintf_r+0x24c>
 8014630:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8014634:	f04f 0901 	mov.w	r9, #1
 8014638:	4623      	mov	r3, r4
 801463a:	469a      	mov	sl, r3
 801463c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8014640:	b10a      	cbz	r2, 8014646 <_vfiprintf_r+0xa2>
 8014642:	2a25      	cmp	r2, #37	; 0x25
 8014644:	d1f9      	bne.n	801463a <_vfiprintf_r+0x96>
 8014646:	ebba 0b04 	subs.w	fp, sl, r4
 801464a:	d00b      	beq.n	8014664 <_vfiprintf_r+0xc0>
 801464c:	465b      	mov	r3, fp
 801464e:	4622      	mov	r2, r4
 8014650:	4629      	mov	r1, r5
 8014652:	4630      	mov	r0, r6
 8014654:	f7ff ff93 	bl	801457e <__sfputs_r>
 8014658:	3001      	adds	r0, #1
 801465a:	f000 80aa 	beq.w	80147b2 <_vfiprintf_r+0x20e>
 801465e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8014660:	445a      	add	r2, fp
 8014662:	9209      	str	r2, [sp, #36]	; 0x24
 8014664:	f89a 3000 	ldrb.w	r3, [sl]
 8014668:	2b00      	cmp	r3, #0
 801466a:	f000 80a2 	beq.w	80147b2 <_vfiprintf_r+0x20e>
 801466e:	2300      	movs	r3, #0
 8014670:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8014674:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8014678:	f10a 0a01 	add.w	sl, sl, #1
 801467c:	9304      	str	r3, [sp, #16]
 801467e:	9307      	str	r3, [sp, #28]
 8014680:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8014684:	931a      	str	r3, [sp, #104]	; 0x68
 8014686:	4654      	mov	r4, sl
 8014688:	2205      	movs	r2, #5
 801468a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801468e:	4858      	ldr	r0, [pc, #352]	; (80147f0 <_vfiprintf_r+0x24c>)
 8014690:	f7fc fede 	bl	8011450 <memchr>
 8014694:	9a04      	ldr	r2, [sp, #16]
 8014696:	b9d8      	cbnz	r0, 80146d0 <_vfiprintf_r+0x12c>
 8014698:	06d1      	lsls	r1, r2, #27
 801469a:	bf44      	itt	mi
 801469c:	2320      	movmi	r3, #32
 801469e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80146a2:	0713      	lsls	r3, r2, #28
 80146a4:	bf44      	itt	mi
 80146a6:	232b      	movmi	r3, #43	; 0x2b
 80146a8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80146ac:	f89a 3000 	ldrb.w	r3, [sl]
 80146b0:	2b2a      	cmp	r3, #42	; 0x2a
 80146b2:	d015      	beq.n	80146e0 <_vfiprintf_r+0x13c>
 80146b4:	9a07      	ldr	r2, [sp, #28]
 80146b6:	4654      	mov	r4, sl
 80146b8:	2000      	movs	r0, #0
 80146ba:	f04f 0c0a 	mov.w	ip, #10
 80146be:	4621      	mov	r1, r4
 80146c0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80146c4:	3b30      	subs	r3, #48	; 0x30
 80146c6:	2b09      	cmp	r3, #9
 80146c8:	d94e      	bls.n	8014768 <_vfiprintf_r+0x1c4>
 80146ca:	b1b0      	cbz	r0, 80146fa <_vfiprintf_r+0x156>
 80146cc:	9207      	str	r2, [sp, #28]
 80146ce:	e014      	b.n	80146fa <_vfiprintf_r+0x156>
 80146d0:	eba0 0308 	sub.w	r3, r0, r8
 80146d4:	fa09 f303 	lsl.w	r3, r9, r3
 80146d8:	4313      	orrs	r3, r2
 80146da:	9304      	str	r3, [sp, #16]
 80146dc:	46a2      	mov	sl, r4
 80146de:	e7d2      	b.n	8014686 <_vfiprintf_r+0xe2>
 80146e0:	9b03      	ldr	r3, [sp, #12]
 80146e2:	1d19      	adds	r1, r3, #4
 80146e4:	681b      	ldr	r3, [r3, #0]
 80146e6:	9103      	str	r1, [sp, #12]
 80146e8:	2b00      	cmp	r3, #0
 80146ea:	bfbb      	ittet	lt
 80146ec:	425b      	neglt	r3, r3
 80146ee:	f042 0202 	orrlt.w	r2, r2, #2
 80146f2:	9307      	strge	r3, [sp, #28]
 80146f4:	9307      	strlt	r3, [sp, #28]
 80146f6:	bfb8      	it	lt
 80146f8:	9204      	strlt	r2, [sp, #16]
 80146fa:	7823      	ldrb	r3, [r4, #0]
 80146fc:	2b2e      	cmp	r3, #46	; 0x2e
 80146fe:	d10c      	bne.n	801471a <_vfiprintf_r+0x176>
 8014700:	7863      	ldrb	r3, [r4, #1]
 8014702:	2b2a      	cmp	r3, #42	; 0x2a
 8014704:	d135      	bne.n	8014772 <_vfiprintf_r+0x1ce>
 8014706:	9b03      	ldr	r3, [sp, #12]
 8014708:	1d1a      	adds	r2, r3, #4
 801470a:	681b      	ldr	r3, [r3, #0]
 801470c:	9203      	str	r2, [sp, #12]
 801470e:	2b00      	cmp	r3, #0
 8014710:	bfb8      	it	lt
 8014712:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8014716:	3402      	adds	r4, #2
 8014718:	9305      	str	r3, [sp, #20]
 801471a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8014800 <_vfiprintf_r+0x25c>
 801471e:	7821      	ldrb	r1, [r4, #0]
 8014720:	2203      	movs	r2, #3
 8014722:	4650      	mov	r0, sl
 8014724:	f7fc fe94 	bl	8011450 <memchr>
 8014728:	b140      	cbz	r0, 801473c <_vfiprintf_r+0x198>
 801472a:	2340      	movs	r3, #64	; 0x40
 801472c:	eba0 000a 	sub.w	r0, r0, sl
 8014730:	fa03 f000 	lsl.w	r0, r3, r0
 8014734:	9b04      	ldr	r3, [sp, #16]
 8014736:	4303      	orrs	r3, r0
 8014738:	3401      	adds	r4, #1
 801473a:	9304      	str	r3, [sp, #16]
 801473c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014740:	482c      	ldr	r0, [pc, #176]	; (80147f4 <_vfiprintf_r+0x250>)
 8014742:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8014746:	2206      	movs	r2, #6
 8014748:	f7fc fe82 	bl	8011450 <memchr>
 801474c:	2800      	cmp	r0, #0
 801474e:	d03f      	beq.n	80147d0 <_vfiprintf_r+0x22c>
 8014750:	4b29      	ldr	r3, [pc, #164]	; (80147f8 <_vfiprintf_r+0x254>)
 8014752:	bb1b      	cbnz	r3, 801479c <_vfiprintf_r+0x1f8>
 8014754:	9b03      	ldr	r3, [sp, #12]
 8014756:	3307      	adds	r3, #7
 8014758:	f023 0307 	bic.w	r3, r3, #7
 801475c:	3308      	adds	r3, #8
 801475e:	9303      	str	r3, [sp, #12]
 8014760:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014762:	443b      	add	r3, r7
 8014764:	9309      	str	r3, [sp, #36]	; 0x24
 8014766:	e767      	b.n	8014638 <_vfiprintf_r+0x94>
 8014768:	fb0c 3202 	mla	r2, ip, r2, r3
 801476c:	460c      	mov	r4, r1
 801476e:	2001      	movs	r0, #1
 8014770:	e7a5      	b.n	80146be <_vfiprintf_r+0x11a>
 8014772:	2300      	movs	r3, #0
 8014774:	3401      	adds	r4, #1
 8014776:	9305      	str	r3, [sp, #20]
 8014778:	4619      	mov	r1, r3
 801477a:	f04f 0c0a 	mov.w	ip, #10
 801477e:	4620      	mov	r0, r4
 8014780:	f810 2b01 	ldrb.w	r2, [r0], #1
 8014784:	3a30      	subs	r2, #48	; 0x30
 8014786:	2a09      	cmp	r2, #9
 8014788:	d903      	bls.n	8014792 <_vfiprintf_r+0x1ee>
 801478a:	2b00      	cmp	r3, #0
 801478c:	d0c5      	beq.n	801471a <_vfiprintf_r+0x176>
 801478e:	9105      	str	r1, [sp, #20]
 8014790:	e7c3      	b.n	801471a <_vfiprintf_r+0x176>
 8014792:	fb0c 2101 	mla	r1, ip, r1, r2
 8014796:	4604      	mov	r4, r0
 8014798:	2301      	movs	r3, #1
 801479a:	e7f0      	b.n	801477e <_vfiprintf_r+0x1da>
 801479c:	ab03      	add	r3, sp, #12
 801479e:	9300      	str	r3, [sp, #0]
 80147a0:	462a      	mov	r2, r5
 80147a2:	4b16      	ldr	r3, [pc, #88]	; (80147fc <_vfiprintf_r+0x258>)
 80147a4:	a904      	add	r1, sp, #16
 80147a6:	4630      	mov	r0, r6
 80147a8:	f3af 8000 	nop.w
 80147ac:	4607      	mov	r7, r0
 80147ae:	1c78      	adds	r0, r7, #1
 80147b0:	d1d6      	bne.n	8014760 <_vfiprintf_r+0x1bc>
 80147b2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80147b4:	07d9      	lsls	r1, r3, #31
 80147b6:	d405      	bmi.n	80147c4 <_vfiprintf_r+0x220>
 80147b8:	89ab      	ldrh	r3, [r5, #12]
 80147ba:	059a      	lsls	r2, r3, #22
 80147bc:	d402      	bmi.n	80147c4 <_vfiprintf_r+0x220>
 80147be:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80147c0:	f7ff fd77 	bl	80142b2 <__retarget_lock_release_recursive>
 80147c4:	89ab      	ldrh	r3, [r5, #12]
 80147c6:	065b      	lsls	r3, r3, #25
 80147c8:	f53f af12 	bmi.w	80145f0 <_vfiprintf_r+0x4c>
 80147cc:	9809      	ldr	r0, [sp, #36]	; 0x24
 80147ce:	e711      	b.n	80145f4 <_vfiprintf_r+0x50>
 80147d0:	ab03      	add	r3, sp, #12
 80147d2:	9300      	str	r3, [sp, #0]
 80147d4:	462a      	mov	r2, r5
 80147d6:	4b09      	ldr	r3, [pc, #36]	; (80147fc <_vfiprintf_r+0x258>)
 80147d8:	a904      	add	r1, sp, #16
 80147da:	4630      	mov	r0, r6
 80147dc:	f000 f880 	bl	80148e0 <_printf_i>
 80147e0:	e7e4      	b.n	80147ac <_vfiprintf_r+0x208>
 80147e2:	bf00      	nop
 80147e4:	08015e4c 	.word	0x08015e4c
 80147e8:	08015e6c 	.word	0x08015e6c
 80147ec:	08015e2c 	.word	0x08015e2c
 80147f0:	08015e8c 	.word	0x08015e8c
 80147f4:	08015e96 	.word	0x08015e96
 80147f8:	00000000 	.word	0x00000000
 80147fc:	0801457f 	.word	0x0801457f
 8014800:	08015e92 	.word	0x08015e92

08014804 <_printf_common>:
 8014804:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014808:	4616      	mov	r6, r2
 801480a:	4699      	mov	r9, r3
 801480c:	688a      	ldr	r2, [r1, #8]
 801480e:	690b      	ldr	r3, [r1, #16]
 8014810:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8014814:	4293      	cmp	r3, r2
 8014816:	bfb8      	it	lt
 8014818:	4613      	movlt	r3, r2
 801481a:	6033      	str	r3, [r6, #0]
 801481c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8014820:	4607      	mov	r7, r0
 8014822:	460c      	mov	r4, r1
 8014824:	b10a      	cbz	r2, 801482a <_printf_common+0x26>
 8014826:	3301      	adds	r3, #1
 8014828:	6033      	str	r3, [r6, #0]
 801482a:	6823      	ldr	r3, [r4, #0]
 801482c:	0699      	lsls	r1, r3, #26
 801482e:	bf42      	ittt	mi
 8014830:	6833      	ldrmi	r3, [r6, #0]
 8014832:	3302      	addmi	r3, #2
 8014834:	6033      	strmi	r3, [r6, #0]
 8014836:	6825      	ldr	r5, [r4, #0]
 8014838:	f015 0506 	ands.w	r5, r5, #6
 801483c:	d106      	bne.n	801484c <_printf_common+0x48>
 801483e:	f104 0a19 	add.w	sl, r4, #25
 8014842:	68e3      	ldr	r3, [r4, #12]
 8014844:	6832      	ldr	r2, [r6, #0]
 8014846:	1a9b      	subs	r3, r3, r2
 8014848:	42ab      	cmp	r3, r5
 801484a:	dc26      	bgt.n	801489a <_printf_common+0x96>
 801484c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8014850:	1e13      	subs	r3, r2, #0
 8014852:	6822      	ldr	r2, [r4, #0]
 8014854:	bf18      	it	ne
 8014856:	2301      	movne	r3, #1
 8014858:	0692      	lsls	r2, r2, #26
 801485a:	d42b      	bmi.n	80148b4 <_printf_common+0xb0>
 801485c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8014860:	4649      	mov	r1, r9
 8014862:	4638      	mov	r0, r7
 8014864:	47c0      	blx	r8
 8014866:	3001      	adds	r0, #1
 8014868:	d01e      	beq.n	80148a8 <_printf_common+0xa4>
 801486a:	6823      	ldr	r3, [r4, #0]
 801486c:	68e5      	ldr	r5, [r4, #12]
 801486e:	6832      	ldr	r2, [r6, #0]
 8014870:	f003 0306 	and.w	r3, r3, #6
 8014874:	2b04      	cmp	r3, #4
 8014876:	bf08      	it	eq
 8014878:	1aad      	subeq	r5, r5, r2
 801487a:	68a3      	ldr	r3, [r4, #8]
 801487c:	6922      	ldr	r2, [r4, #16]
 801487e:	bf0c      	ite	eq
 8014880:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8014884:	2500      	movne	r5, #0
 8014886:	4293      	cmp	r3, r2
 8014888:	bfc4      	itt	gt
 801488a:	1a9b      	subgt	r3, r3, r2
 801488c:	18ed      	addgt	r5, r5, r3
 801488e:	2600      	movs	r6, #0
 8014890:	341a      	adds	r4, #26
 8014892:	42b5      	cmp	r5, r6
 8014894:	d11a      	bne.n	80148cc <_printf_common+0xc8>
 8014896:	2000      	movs	r0, #0
 8014898:	e008      	b.n	80148ac <_printf_common+0xa8>
 801489a:	2301      	movs	r3, #1
 801489c:	4652      	mov	r2, sl
 801489e:	4649      	mov	r1, r9
 80148a0:	4638      	mov	r0, r7
 80148a2:	47c0      	blx	r8
 80148a4:	3001      	adds	r0, #1
 80148a6:	d103      	bne.n	80148b0 <_printf_common+0xac>
 80148a8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80148ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80148b0:	3501      	adds	r5, #1
 80148b2:	e7c6      	b.n	8014842 <_printf_common+0x3e>
 80148b4:	18e1      	adds	r1, r4, r3
 80148b6:	1c5a      	adds	r2, r3, #1
 80148b8:	2030      	movs	r0, #48	; 0x30
 80148ba:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80148be:	4422      	add	r2, r4
 80148c0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80148c4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80148c8:	3302      	adds	r3, #2
 80148ca:	e7c7      	b.n	801485c <_printf_common+0x58>
 80148cc:	2301      	movs	r3, #1
 80148ce:	4622      	mov	r2, r4
 80148d0:	4649      	mov	r1, r9
 80148d2:	4638      	mov	r0, r7
 80148d4:	47c0      	blx	r8
 80148d6:	3001      	adds	r0, #1
 80148d8:	d0e6      	beq.n	80148a8 <_printf_common+0xa4>
 80148da:	3601      	adds	r6, #1
 80148dc:	e7d9      	b.n	8014892 <_printf_common+0x8e>
	...

080148e0 <_printf_i>:
 80148e0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80148e4:	7e0f      	ldrb	r7, [r1, #24]
 80148e6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80148e8:	2f78      	cmp	r7, #120	; 0x78
 80148ea:	4691      	mov	r9, r2
 80148ec:	4680      	mov	r8, r0
 80148ee:	460c      	mov	r4, r1
 80148f0:	469a      	mov	sl, r3
 80148f2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80148f6:	d807      	bhi.n	8014908 <_printf_i+0x28>
 80148f8:	2f62      	cmp	r7, #98	; 0x62
 80148fa:	d80a      	bhi.n	8014912 <_printf_i+0x32>
 80148fc:	2f00      	cmp	r7, #0
 80148fe:	f000 80d8 	beq.w	8014ab2 <_printf_i+0x1d2>
 8014902:	2f58      	cmp	r7, #88	; 0x58
 8014904:	f000 80a3 	beq.w	8014a4e <_printf_i+0x16e>
 8014908:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801490c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8014910:	e03a      	b.n	8014988 <_printf_i+0xa8>
 8014912:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8014916:	2b15      	cmp	r3, #21
 8014918:	d8f6      	bhi.n	8014908 <_printf_i+0x28>
 801491a:	a101      	add	r1, pc, #4	; (adr r1, 8014920 <_printf_i+0x40>)
 801491c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8014920:	08014979 	.word	0x08014979
 8014924:	0801498d 	.word	0x0801498d
 8014928:	08014909 	.word	0x08014909
 801492c:	08014909 	.word	0x08014909
 8014930:	08014909 	.word	0x08014909
 8014934:	08014909 	.word	0x08014909
 8014938:	0801498d 	.word	0x0801498d
 801493c:	08014909 	.word	0x08014909
 8014940:	08014909 	.word	0x08014909
 8014944:	08014909 	.word	0x08014909
 8014948:	08014909 	.word	0x08014909
 801494c:	08014a99 	.word	0x08014a99
 8014950:	080149bd 	.word	0x080149bd
 8014954:	08014a7b 	.word	0x08014a7b
 8014958:	08014909 	.word	0x08014909
 801495c:	08014909 	.word	0x08014909
 8014960:	08014abb 	.word	0x08014abb
 8014964:	08014909 	.word	0x08014909
 8014968:	080149bd 	.word	0x080149bd
 801496c:	08014909 	.word	0x08014909
 8014970:	08014909 	.word	0x08014909
 8014974:	08014a83 	.word	0x08014a83
 8014978:	682b      	ldr	r3, [r5, #0]
 801497a:	1d1a      	adds	r2, r3, #4
 801497c:	681b      	ldr	r3, [r3, #0]
 801497e:	602a      	str	r2, [r5, #0]
 8014980:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8014984:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8014988:	2301      	movs	r3, #1
 801498a:	e0a3      	b.n	8014ad4 <_printf_i+0x1f4>
 801498c:	6820      	ldr	r0, [r4, #0]
 801498e:	6829      	ldr	r1, [r5, #0]
 8014990:	0606      	lsls	r6, r0, #24
 8014992:	f101 0304 	add.w	r3, r1, #4
 8014996:	d50a      	bpl.n	80149ae <_printf_i+0xce>
 8014998:	680e      	ldr	r6, [r1, #0]
 801499a:	602b      	str	r3, [r5, #0]
 801499c:	2e00      	cmp	r6, #0
 801499e:	da03      	bge.n	80149a8 <_printf_i+0xc8>
 80149a0:	232d      	movs	r3, #45	; 0x2d
 80149a2:	4276      	negs	r6, r6
 80149a4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80149a8:	485e      	ldr	r0, [pc, #376]	; (8014b24 <_printf_i+0x244>)
 80149aa:	230a      	movs	r3, #10
 80149ac:	e019      	b.n	80149e2 <_printf_i+0x102>
 80149ae:	680e      	ldr	r6, [r1, #0]
 80149b0:	602b      	str	r3, [r5, #0]
 80149b2:	f010 0f40 	tst.w	r0, #64	; 0x40
 80149b6:	bf18      	it	ne
 80149b8:	b236      	sxthne	r6, r6
 80149ba:	e7ef      	b.n	801499c <_printf_i+0xbc>
 80149bc:	682b      	ldr	r3, [r5, #0]
 80149be:	6820      	ldr	r0, [r4, #0]
 80149c0:	1d19      	adds	r1, r3, #4
 80149c2:	6029      	str	r1, [r5, #0]
 80149c4:	0601      	lsls	r1, r0, #24
 80149c6:	d501      	bpl.n	80149cc <_printf_i+0xec>
 80149c8:	681e      	ldr	r6, [r3, #0]
 80149ca:	e002      	b.n	80149d2 <_printf_i+0xf2>
 80149cc:	0646      	lsls	r6, r0, #25
 80149ce:	d5fb      	bpl.n	80149c8 <_printf_i+0xe8>
 80149d0:	881e      	ldrh	r6, [r3, #0]
 80149d2:	4854      	ldr	r0, [pc, #336]	; (8014b24 <_printf_i+0x244>)
 80149d4:	2f6f      	cmp	r7, #111	; 0x6f
 80149d6:	bf0c      	ite	eq
 80149d8:	2308      	moveq	r3, #8
 80149da:	230a      	movne	r3, #10
 80149dc:	2100      	movs	r1, #0
 80149de:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80149e2:	6865      	ldr	r5, [r4, #4]
 80149e4:	60a5      	str	r5, [r4, #8]
 80149e6:	2d00      	cmp	r5, #0
 80149e8:	bfa2      	ittt	ge
 80149ea:	6821      	ldrge	r1, [r4, #0]
 80149ec:	f021 0104 	bicge.w	r1, r1, #4
 80149f0:	6021      	strge	r1, [r4, #0]
 80149f2:	b90e      	cbnz	r6, 80149f8 <_printf_i+0x118>
 80149f4:	2d00      	cmp	r5, #0
 80149f6:	d04d      	beq.n	8014a94 <_printf_i+0x1b4>
 80149f8:	4615      	mov	r5, r2
 80149fa:	fbb6 f1f3 	udiv	r1, r6, r3
 80149fe:	fb03 6711 	mls	r7, r3, r1, r6
 8014a02:	5dc7      	ldrb	r7, [r0, r7]
 8014a04:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8014a08:	4637      	mov	r7, r6
 8014a0a:	42bb      	cmp	r3, r7
 8014a0c:	460e      	mov	r6, r1
 8014a0e:	d9f4      	bls.n	80149fa <_printf_i+0x11a>
 8014a10:	2b08      	cmp	r3, #8
 8014a12:	d10b      	bne.n	8014a2c <_printf_i+0x14c>
 8014a14:	6823      	ldr	r3, [r4, #0]
 8014a16:	07de      	lsls	r6, r3, #31
 8014a18:	d508      	bpl.n	8014a2c <_printf_i+0x14c>
 8014a1a:	6923      	ldr	r3, [r4, #16]
 8014a1c:	6861      	ldr	r1, [r4, #4]
 8014a1e:	4299      	cmp	r1, r3
 8014a20:	bfde      	ittt	le
 8014a22:	2330      	movle	r3, #48	; 0x30
 8014a24:	f805 3c01 	strble.w	r3, [r5, #-1]
 8014a28:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8014a2c:	1b52      	subs	r2, r2, r5
 8014a2e:	6122      	str	r2, [r4, #16]
 8014a30:	f8cd a000 	str.w	sl, [sp]
 8014a34:	464b      	mov	r3, r9
 8014a36:	aa03      	add	r2, sp, #12
 8014a38:	4621      	mov	r1, r4
 8014a3a:	4640      	mov	r0, r8
 8014a3c:	f7ff fee2 	bl	8014804 <_printf_common>
 8014a40:	3001      	adds	r0, #1
 8014a42:	d14c      	bne.n	8014ade <_printf_i+0x1fe>
 8014a44:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8014a48:	b004      	add	sp, #16
 8014a4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014a4e:	4835      	ldr	r0, [pc, #212]	; (8014b24 <_printf_i+0x244>)
 8014a50:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8014a54:	6829      	ldr	r1, [r5, #0]
 8014a56:	6823      	ldr	r3, [r4, #0]
 8014a58:	f851 6b04 	ldr.w	r6, [r1], #4
 8014a5c:	6029      	str	r1, [r5, #0]
 8014a5e:	061d      	lsls	r5, r3, #24
 8014a60:	d514      	bpl.n	8014a8c <_printf_i+0x1ac>
 8014a62:	07df      	lsls	r7, r3, #31
 8014a64:	bf44      	itt	mi
 8014a66:	f043 0320 	orrmi.w	r3, r3, #32
 8014a6a:	6023      	strmi	r3, [r4, #0]
 8014a6c:	b91e      	cbnz	r6, 8014a76 <_printf_i+0x196>
 8014a6e:	6823      	ldr	r3, [r4, #0]
 8014a70:	f023 0320 	bic.w	r3, r3, #32
 8014a74:	6023      	str	r3, [r4, #0]
 8014a76:	2310      	movs	r3, #16
 8014a78:	e7b0      	b.n	80149dc <_printf_i+0xfc>
 8014a7a:	6823      	ldr	r3, [r4, #0]
 8014a7c:	f043 0320 	orr.w	r3, r3, #32
 8014a80:	6023      	str	r3, [r4, #0]
 8014a82:	2378      	movs	r3, #120	; 0x78
 8014a84:	4828      	ldr	r0, [pc, #160]	; (8014b28 <_printf_i+0x248>)
 8014a86:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8014a8a:	e7e3      	b.n	8014a54 <_printf_i+0x174>
 8014a8c:	0659      	lsls	r1, r3, #25
 8014a8e:	bf48      	it	mi
 8014a90:	b2b6      	uxthmi	r6, r6
 8014a92:	e7e6      	b.n	8014a62 <_printf_i+0x182>
 8014a94:	4615      	mov	r5, r2
 8014a96:	e7bb      	b.n	8014a10 <_printf_i+0x130>
 8014a98:	682b      	ldr	r3, [r5, #0]
 8014a9a:	6826      	ldr	r6, [r4, #0]
 8014a9c:	6961      	ldr	r1, [r4, #20]
 8014a9e:	1d18      	adds	r0, r3, #4
 8014aa0:	6028      	str	r0, [r5, #0]
 8014aa2:	0635      	lsls	r5, r6, #24
 8014aa4:	681b      	ldr	r3, [r3, #0]
 8014aa6:	d501      	bpl.n	8014aac <_printf_i+0x1cc>
 8014aa8:	6019      	str	r1, [r3, #0]
 8014aaa:	e002      	b.n	8014ab2 <_printf_i+0x1d2>
 8014aac:	0670      	lsls	r0, r6, #25
 8014aae:	d5fb      	bpl.n	8014aa8 <_printf_i+0x1c8>
 8014ab0:	8019      	strh	r1, [r3, #0]
 8014ab2:	2300      	movs	r3, #0
 8014ab4:	6123      	str	r3, [r4, #16]
 8014ab6:	4615      	mov	r5, r2
 8014ab8:	e7ba      	b.n	8014a30 <_printf_i+0x150>
 8014aba:	682b      	ldr	r3, [r5, #0]
 8014abc:	1d1a      	adds	r2, r3, #4
 8014abe:	602a      	str	r2, [r5, #0]
 8014ac0:	681d      	ldr	r5, [r3, #0]
 8014ac2:	6862      	ldr	r2, [r4, #4]
 8014ac4:	2100      	movs	r1, #0
 8014ac6:	4628      	mov	r0, r5
 8014ac8:	f7fc fcc2 	bl	8011450 <memchr>
 8014acc:	b108      	cbz	r0, 8014ad2 <_printf_i+0x1f2>
 8014ace:	1b40      	subs	r0, r0, r5
 8014ad0:	6060      	str	r0, [r4, #4]
 8014ad2:	6863      	ldr	r3, [r4, #4]
 8014ad4:	6123      	str	r3, [r4, #16]
 8014ad6:	2300      	movs	r3, #0
 8014ad8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8014adc:	e7a8      	b.n	8014a30 <_printf_i+0x150>
 8014ade:	6923      	ldr	r3, [r4, #16]
 8014ae0:	462a      	mov	r2, r5
 8014ae2:	4649      	mov	r1, r9
 8014ae4:	4640      	mov	r0, r8
 8014ae6:	47d0      	blx	sl
 8014ae8:	3001      	adds	r0, #1
 8014aea:	d0ab      	beq.n	8014a44 <_printf_i+0x164>
 8014aec:	6823      	ldr	r3, [r4, #0]
 8014aee:	079b      	lsls	r3, r3, #30
 8014af0:	d413      	bmi.n	8014b1a <_printf_i+0x23a>
 8014af2:	68e0      	ldr	r0, [r4, #12]
 8014af4:	9b03      	ldr	r3, [sp, #12]
 8014af6:	4298      	cmp	r0, r3
 8014af8:	bfb8      	it	lt
 8014afa:	4618      	movlt	r0, r3
 8014afc:	e7a4      	b.n	8014a48 <_printf_i+0x168>
 8014afe:	2301      	movs	r3, #1
 8014b00:	4632      	mov	r2, r6
 8014b02:	4649      	mov	r1, r9
 8014b04:	4640      	mov	r0, r8
 8014b06:	47d0      	blx	sl
 8014b08:	3001      	adds	r0, #1
 8014b0a:	d09b      	beq.n	8014a44 <_printf_i+0x164>
 8014b0c:	3501      	adds	r5, #1
 8014b0e:	68e3      	ldr	r3, [r4, #12]
 8014b10:	9903      	ldr	r1, [sp, #12]
 8014b12:	1a5b      	subs	r3, r3, r1
 8014b14:	42ab      	cmp	r3, r5
 8014b16:	dcf2      	bgt.n	8014afe <_printf_i+0x21e>
 8014b18:	e7eb      	b.n	8014af2 <_printf_i+0x212>
 8014b1a:	2500      	movs	r5, #0
 8014b1c:	f104 0619 	add.w	r6, r4, #25
 8014b20:	e7f5      	b.n	8014b0e <_printf_i+0x22e>
 8014b22:	bf00      	nop
 8014b24:	08015e9d 	.word	0x08015e9d
 8014b28:	08015eae 	.word	0x08015eae

08014b2c <_sbrk_r>:
 8014b2c:	b538      	push	{r3, r4, r5, lr}
 8014b2e:	4d06      	ldr	r5, [pc, #24]	; (8014b48 <_sbrk_r+0x1c>)
 8014b30:	2300      	movs	r3, #0
 8014b32:	4604      	mov	r4, r0
 8014b34:	4608      	mov	r0, r1
 8014b36:	602b      	str	r3, [r5, #0]
 8014b38:	f7fd fb6e 	bl	8012218 <_sbrk>
 8014b3c:	1c43      	adds	r3, r0, #1
 8014b3e:	d102      	bne.n	8014b46 <_sbrk_r+0x1a>
 8014b40:	682b      	ldr	r3, [r5, #0]
 8014b42:	b103      	cbz	r3, 8014b46 <_sbrk_r+0x1a>
 8014b44:	6023      	str	r3, [r4, #0]
 8014b46:	bd38      	pop	{r3, r4, r5, pc}
 8014b48:	20001df4 	.word	0x20001df4

08014b4c <__sread>:
 8014b4c:	b510      	push	{r4, lr}
 8014b4e:	460c      	mov	r4, r1
 8014b50:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014b54:	f000 f8a0 	bl	8014c98 <_read_r>
 8014b58:	2800      	cmp	r0, #0
 8014b5a:	bfab      	itete	ge
 8014b5c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8014b5e:	89a3      	ldrhlt	r3, [r4, #12]
 8014b60:	181b      	addge	r3, r3, r0
 8014b62:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8014b66:	bfac      	ite	ge
 8014b68:	6563      	strge	r3, [r4, #84]	; 0x54
 8014b6a:	81a3      	strhlt	r3, [r4, #12]
 8014b6c:	bd10      	pop	{r4, pc}

08014b6e <__swrite>:
 8014b6e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014b72:	461f      	mov	r7, r3
 8014b74:	898b      	ldrh	r3, [r1, #12]
 8014b76:	05db      	lsls	r3, r3, #23
 8014b78:	4605      	mov	r5, r0
 8014b7a:	460c      	mov	r4, r1
 8014b7c:	4616      	mov	r6, r2
 8014b7e:	d505      	bpl.n	8014b8c <__swrite+0x1e>
 8014b80:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014b84:	2302      	movs	r3, #2
 8014b86:	2200      	movs	r2, #0
 8014b88:	f000 f868 	bl	8014c5c <_lseek_r>
 8014b8c:	89a3      	ldrh	r3, [r4, #12]
 8014b8e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8014b92:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8014b96:	81a3      	strh	r3, [r4, #12]
 8014b98:	4632      	mov	r2, r6
 8014b9a:	463b      	mov	r3, r7
 8014b9c:	4628      	mov	r0, r5
 8014b9e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8014ba2:	f000 b817 	b.w	8014bd4 <_write_r>

08014ba6 <__sseek>:
 8014ba6:	b510      	push	{r4, lr}
 8014ba8:	460c      	mov	r4, r1
 8014baa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014bae:	f000 f855 	bl	8014c5c <_lseek_r>
 8014bb2:	1c43      	adds	r3, r0, #1
 8014bb4:	89a3      	ldrh	r3, [r4, #12]
 8014bb6:	bf15      	itete	ne
 8014bb8:	6560      	strne	r0, [r4, #84]	; 0x54
 8014bba:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8014bbe:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8014bc2:	81a3      	strheq	r3, [r4, #12]
 8014bc4:	bf18      	it	ne
 8014bc6:	81a3      	strhne	r3, [r4, #12]
 8014bc8:	bd10      	pop	{r4, pc}

08014bca <__sclose>:
 8014bca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014bce:	f000 b813 	b.w	8014bf8 <_close_r>
	...

08014bd4 <_write_r>:
 8014bd4:	b538      	push	{r3, r4, r5, lr}
 8014bd6:	4d07      	ldr	r5, [pc, #28]	; (8014bf4 <_write_r+0x20>)
 8014bd8:	4604      	mov	r4, r0
 8014bda:	4608      	mov	r0, r1
 8014bdc:	4611      	mov	r1, r2
 8014bde:	2200      	movs	r2, #0
 8014be0:	602a      	str	r2, [r5, #0]
 8014be2:	461a      	mov	r2, r3
 8014be4:	f7fd fb0a 	bl	80121fc <_write>
 8014be8:	1c43      	adds	r3, r0, #1
 8014bea:	d102      	bne.n	8014bf2 <_write_r+0x1e>
 8014bec:	682b      	ldr	r3, [r5, #0]
 8014bee:	b103      	cbz	r3, 8014bf2 <_write_r+0x1e>
 8014bf0:	6023      	str	r3, [r4, #0]
 8014bf2:	bd38      	pop	{r3, r4, r5, pc}
 8014bf4:	20001df4 	.word	0x20001df4

08014bf8 <_close_r>:
 8014bf8:	b538      	push	{r3, r4, r5, lr}
 8014bfa:	4d06      	ldr	r5, [pc, #24]	; (8014c14 <_close_r+0x1c>)
 8014bfc:	2300      	movs	r3, #0
 8014bfe:	4604      	mov	r4, r0
 8014c00:	4608      	mov	r0, r1
 8014c02:	602b      	str	r3, [r5, #0]
 8014c04:	f7fd fb22 	bl	801224c <_close>
 8014c08:	1c43      	adds	r3, r0, #1
 8014c0a:	d102      	bne.n	8014c12 <_close_r+0x1a>
 8014c0c:	682b      	ldr	r3, [r5, #0]
 8014c0e:	b103      	cbz	r3, 8014c12 <_close_r+0x1a>
 8014c10:	6023      	str	r3, [r4, #0]
 8014c12:	bd38      	pop	{r3, r4, r5, pc}
 8014c14:	20001df4 	.word	0x20001df4

08014c18 <_fstat_r>:
 8014c18:	b538      	push	{r3, r4, r5, lr}
 8014c1a:	4d07      	ldr	r5, [pc, #28]	; (8014c38 <_fstat_r+0x20>)
 8014c1c:	2300      	movs	r3, #0
 8014c1e:	4604      	mov	r4, r0
 8014c20:	4608      	mov	r0, r1
 8014c22:	4611      	mov	r1, r2
 8014c24:	602b      	str	r3, [r5, #0]
 8014c26:	f7fd fb14 	bl	8012252 <_fstat>
 8014c2a:	1c43      	adds	r3, r0, #1
 8014c2c:	d102      	bne.n	8014c34 <_fstat_r+0x1c>
 8014c2e:	682b      	ldr	r3, [r5, #0]
 8014c30:	b103      	cbz	r3, 8014c34 <_fstat_r+0x1c>
 8014c32:	6023      	str	r3, [r4, #0]
 8014c34:	bd38      	pop	{r3, r4, r5, pc}
 8014c36:	bf00      	nop
 8014c38:	20001df4 	.word	0x20001df4

08014c3c <_isatty_r>:
 8014c3c:	b538      	push	{r3, r4, r5, lr}
 8014c3e:	4d06      	ldr	r5, [pc, #24]	; (8014c58 <_isatty_r+0x1c>)
 8014c40:	2300      	movs	r3, #0
 8014c42:	4604      	mov	r4, r0
 8014c44:	4608      	mov	r0, r1
 8014c46:	602b      	str	r3, [r5, #0]
 8014c48:	f7fd fb08 	bl	801225c <_isatty>
 8014c4c:	1c43      	adds	r3, r0, #1
 8014c4e:	d102      	bne.n	8014c56 <_isatty_r+0x1a>
 8014c50:	682b      	ldr	r3, [r5, #0]
 8014c52:	b103      	cbz	r3, 8014c56 <_isatty_r+0x1a>
 8014c54:	6023      	str	r3, [r4, #0]
 8014c56:	bd38      	pop	{r3, r4, r5, pc}
 8014c58:	20001df4 	.word	0x20001df4

08014c5c <_lseek_r>:
 8014c5c:	b538      	push	{r3, r4, r5, lr}
 8014c5e:	4d07      	ldr	r5, [pc, #28]	; (8014c7c <_lseek_r+0x20>)
 8014c60:	4604      	mov	r4, r0
 8014c62:	4608      	mov	r0, r1
 8014c64:	4611      	mov	r1, r2
 8014c66:	2200      	movs	r2, #0
 8014c68:	602a      	str	r2, [r5, #0]
 8014c6a:	461a      	mov	r2, r3
 8014c6c:	f7fd faf8 	bl	8012260 <_lseek>
 8014c70:	1c43      	adds	r3, r0, #1
 8014c72:	d102      	bne.n	8014c7a <_lseek_r+0x1e>
 8014c74:	682b      	ldr	r3, [r5, #0]
 8014c76:	b103      	cbz	r3, 8014c7a <_lseek_r+0x1e>
 8014c78:	6023      	str	r3, [r4, #0]
 8014c7a:	bd38      	pop	{r3, r4, r5, pc}
 8014c7c:	20001df4 	.word	0x20001df4

08014c80 <__malloc_lock>:
 8014c80:	4801      	ldr	r0, [pc, #4]	; (8014c88 <__malloc_lock+0x8>)
 8014c82:	f7ff bb15 	b.w	80142b0 <__retarget_lock_acquire_recursive>
 8014c86:	bf00      	nop
 8014c88:	20001de8 	.word	0x20001de8

08014c8c <__malloc_unlock>:
 8014c8c:	4801      	ldr	r0, [pc, #4]	; (8014c94 <__malloc_unlock+0x8>)
 8014c8e:	f7ff bb10 	b.w	80142b2 <__retarget_lock_release_recursive>
 8014c92:	bf00      	nop
 8014c94:	20001de8 	.word	0x20001de8

08014c98 <_read_r>:
 8014c98:	b538      	push	{r3, r4, r5, lr}
 8014c9a:	4d07      	ldr	r5, [pc, #28]	; (8014cb8 <_read_r+0x20>)
 8014c9c:	4604      	mov	r4, r0
 8014c9e:	4608      	mov	r0, r1
 8014ca0:	4611      	mov	r1, r2
 8014ca2:	2200      	movs	r2, #0
 8014ca4:	602a      	str	r2, [r5, #0]
 8014ca6:	461a      	mov	r2, r3
 8014ca8:	f7fd fa9a 	bl	80121e0 <_read>
 8014cac:	1c43      	adds	r3, r0, #1
 8014cae:	d102      	bne.n	8014cb6 <_read_r+0x1e>
 8014cb0:	682b      	ldr	r3, [r5, #0]
 8014cb2:	b103      	cbz	r3, 8014cb6 <_read_r+0x1e>
 8014cb4:	6023      	str	r3, [r4, #0]
 8014cb6:	bd38      	pop	{r3, r4, r5, pc}
 8014cb8:	20001df4 	.word	0x20001df4

08014cbc <_init>:
 8014cbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014cbe:	bf00      	nop
 8014cc0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8014cc2:	bc08      	pop	{r3}
 8014cc4:	469e      	mov	lr, r3
 8014cc6:	4770      	bx	lr

08014cc8 <_fini>:
 8014cc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014cca:	bf00      	nop
 8014ccc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8014cce:	bc08      	pop	{r3}
 8014cd0:	469e      	mov	lr, r3
 8014cd2:	4770      	bx	lr
 8014cd4:	0000      	movs	r0, r0
	...
