
SBSFU.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text.SE_CORE_Bin 00004ab0  08000200  08000200  00010200  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .SE_IF_Code   0000075c  08005a00  08005a00  00015a00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .text         00004ec0  08006200  08006200  00016200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  4 .rodata       00000f68  0800b0c0  0800b0c0  0001b0c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .ARM.extab    00000000  0800c028  0800c028  000210d8  2**0
                  CONTENTS
  6 .ARM          00000008  0800c028  0800c028  0001c028  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .preinit_array 00000000  0800c030  0800c030  000210d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  8 .init_array   00000008  0800c030  0800c030  0001c030  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .fini_array   00000008  0800c038  0800c038  0001c038  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .data         000000d8  20001000  0800c040  00021000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          000008cc  200010d8  0800c118  000210d8  2**3
                  ALLOC
 12 ._user_heap_stack 00002004  200019a4  0800c118  000219a4  2**0
                  ALLOC
 13 .ARM.attributes 00000030  00000000  00000000  000210d8  2**0
                  CONTENTS, READONLY
 14 .debug_info   0001881b  00000000  00000000  00021108  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00005468  00000000  00000000  00039923  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000e60  00000000  00000000  0003ed90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 000014a0  00000000  00000000  0003fbf0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00029eef  00000000  00000000  00041090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0001f4f1  00000000  00000000  0006af7f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000ef07b  00000000  00000000  0008a470  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000050  00000000  00000000  001794eb  2**0
                  CONTENTS, READONLY
 22 .debug_frame  00002dcc  00000000  00000000  0017953c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_loc    0000a0b5  00000000  00000000  0017c308  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .SE_IF_Code:

08005a00 <SE_APP_GetActiveFwInfo>:
  * @param pFwInfo Active Firmware Info structure that will be filled.
  * @retval SE_ErrorStatus SE_SUCCESS if successful, SE_ERROR otherwise.
  */
__root SE_ErrorStatus SE_APP_GetActiveFwInfo(SE_StatusTypeDef *peSE_Status, uint32_t SlotNumber,
                                             SE_APP_ActiveFwInfo_t *pFwInfo)
{
 8005a00:	b570      	push	{r4, r5, r6, lr}
 8005a02:	b086      	sub	sp, #24
 8005a04:	4604      	mov	r4, r0
 8005a06:	460d      	mov	r5, r1
 8005a08:	4616      	mov	r6, r2
  SE_ErrorStatus e_ret_status;
  uint32_t primask_bit; /*!< interruption mask saved when disabling ITs then restore when re-enabling ITs */

#ifdef SFU_ISOLATE_SE_WITH_MPU
  if (0U != SE_IsUnprivileged())
 8005a0a:	f000 fb28 	bl	800605e <SE_IsUnprivileged>
 8005a0e:	b150      	cbz	r0, 8005a26 <SE_APP_GetActiveFwInfo+0x26>
  {
    uint32_t params[2] = {SlotNumber, (uint32_t)pFwInfo};
    SE_SysCall(&e_ret_status, SE_APP_GET_ACTIVE_FW_INFO, peSE_Status, &params);
 8005a10:	ab04      	add	r3, sp, #16
 8005a12:	4622      	mov	r2, r4
 8005a14:	2120      	movs	r1, #32
 8005a16:	a803      	add	r0, sp, #12
    uint32_t params[2] = {SlotNumber, (uint32_t)pFwInfo};
 8005a18:	e9cd 5604 	strd	r5, r6, [sp, #16]
    SE_SysCall(&e_ret_status, SE_APP_GET_ACTIVE_FW_INFO, peSE_Status, &params);
 8005a1c:	f000 fb29 	bl	8006072 <SE_SysCall>

#ifdef SFU_ISOLATE_SE_WITH_MPU
  }
#endif /* SFU_ISOLATE_SE_WITH_MPU */
  return e_ret_status;
}
 8005a20:	9803      	ldr	r0, [sp, #12]
 8005a22:	b006      	add	sp, #24
 8005a24:	bd70      	pop	{r4, r5, r6, pc}
    SE_EnterSecureMode(&primask_bit);
 8005a26:	a804      	add	r0, sp, #16
 8005a28:	f000 fb10 	bl	800604c <SE_EnterSecureMode>
    e_ret_status = (*SE_CallGatePtr)(SE_APP_GET_ACTIVE_FW_INFO, peSE_Status, primask_bit, SlotNumber, pFwInfo);
 8005a2c:	4621      	mov	r1, r4
 8005a2e:	9a04      	ldr	r2, [sp, #16]
 8005a30:	4c04      	ldr	r4, [pc, #16]	; (8005a44 <SE_APP_GetActiveFwInfo+0x44>)
 8005a32:	9600      	str	r6, [sp, #0]
 8005a34:	462b      	mov	r3, r5
 8005a36:	2020      	movs	r0, #32
 8005a38:	47a0      	blx	r4
 8005a3a:	9003      	str	r0, [sp, #12]
    SE_ExitSecureMode(primask_bit);
 8005a3c:	9804      	ldr	r0, [sp, #16]
 8005a3e:	f000 fb0a 	bl	8006056 <SE_ExitSecureMode>
 8005a42:	e7ed      	b.n	8005a20 <SE_APP_GetActiveFwInfo+0x20>
 8005a44:	08000205 	.word	0x08000205

08005a48 <SE_APP_SVC_Handler>:


#ifdef SFU_ISOLATE_SE_WITH_MPU
__root void SE_APP_SVC_Handler(uint32_t *args)
{
  SE_SVC_Handler(args);
 8005a48:	f000 bb16 	b.w	8006078 <SE_SVC_Handler>

08005a4c <SE_Init>:
  *        This parameter can be a value of @ref SE_Status_Structure_definition.
  * @param uSystemCoreClock System clock value.
  * @retval SE_ErrorStatus SE_SUCCESS if successful, SE_ERROR otherwise.
  */
SE_ErrorStatus SE_Init(SE_StatusTypeDef *peSE_Status, uint32_t uSystemCoreClock)
{
 8005a4c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8005a4e:	4604      	mov	r4, r0
 8005a50:	9101      	str	r1, [sp, #4]
}
#elif defined(__GNUC__)
static inline uint32_t get_LR(void)
{
  register uint32_t result;
  __asm volatile("MOV %0, LR\n" : "=r"(result));
 8005a52:	4671      	mov	r1, lr
  SE_ErrorStatus e_ret_status;
  uint32_t primask_bit; /*!< interruption mask saved when disabling ITs then restore when re-enabling ITs */

  /* Check if the call is coming from SFU code */
  __IS_SFU_RESERVED();
 8005a54:	4a0c      	ldr	r2, [pc, #48]	; (8005a88 <SE_Init+0x3c>)
 8005a56:	4291      	cmp	r1, r2
 8005a58:	d314      	bcc.n	8005a84 <SE_Init+0x38>
 8005a5a:	4671      	mov	r1, lr
 8005a5c:	4a0b      	ldr	r2, [pc, #44]	; (8005a8c <SE_Init+0x40>)
 8005a5e:	4291      	cmp	r1, r2
 8005a60:	d810      	bhi.n	8005a84 <SE_Init+0x38>

  /* Check the pointers allocation */
  if (peSE_Status == NULL)
 8005a62:	b178      	cbz	r0, 8005a84 <SE_Init+0x38>

  /* Set the CallGate function pointer */
  SET_CALLGATE();

  /* Enter Secure Mode */
  SE_EnterSecureMode(&primask_bit);
 8005a64:	a803      	add	r0, sp, #12
 8005a66:	f000 faf1 	bl	800604c <SE_EnterSecureMode>

  /* Secure Engine Call */
  e_ret_status = (*SE_CallGatePtr)(SE_INIT_ID, peSE_Status, primask_bit, uSystemCoreClock);
 8005a6a:	4621      	mov	r1, r4
 8005a6c:	9b01      	ldr	r3, [sp, #4]
 8005a6e:	4c08      	ldr	r4, [pc, #32]	; (8005a90 <SE_Init+0x44>)
 8005a70:	9a03      	ldr	r2, [sp, #12]
 8005a72:	2000      	movs	r0, #0
 8005a74:	47a0      	blx	r4
 8005a76:	4604      	mov	r4, r0

  /* Exit Secure Mode */
  SE_ExitSecureMode(primask_bit);
 8005a78:	9803      	ldr	r0, [sp, #12]
 8005a7a:	f000 faec 	bl	8006056 <SE_ExitSecureMode>


  return e_ret_status;
}
 8005a7e:	4620      	mov	r0, r4
 8005a80:	b004      	add	sp, #16
 8005a82:	bd10      	pop	{r4, pc}
  __IS_SFU_RESERVED();
 8005a84:	4c03      	ldr	r4, [pc, #12]	; (8005a94 <SE_Init+0x48>)
 8005a86:	e7fa      	b.n	8005a7e <SE_Init+0x32>
 8005a88:	08006200 	.word	0x08006200
 8005a8c:	0800efff 	.word	0x0800efff
 8005a90:	08000205 	.word	0x08000205
 8005a94:	00018799 	.word	0x00018799

08005a98 <SE_Startup>:
  *        This function must be called only one time so an internal check is executed.
  * @param None.
  * @retval SE_ErrorStatus SE_SUCCESS if successful, SE_ERROR otherwise.
  */
SE_ErrorStatus SE_Startup(void)
{
 8005a98:	b538      	push	{r3, r4, r5, lr}
 8005a9a:	4672      	mov	r2, lr
  SE_ErrorStatus e_ret_status;
  static uint8_t b_startup_already_done = 0U;
  static SE_ErrorStatus(*SE_StartupPtr)(void);            /*!< Secure Engine STARTUP  pointer function*/

  /* Check if the call is coming from SFU code */
  __IS_SFU_RESERVED();
 8005a9c:	4b0a      	ldr	r3, [pc, #40]	; (8005ac8 <SE_Startup+0x30>)
 8005a9e:	429a      	cmp	r2, r3
 8005aa0:	d30e      	bcc.n	8005ac0 <SE_Startup+0x28>
 8005aa2:	4672      	mov	r2, lr
 8005aa4:	4b09      	ldr	r3, [pc, #36]	; (8005acc <SE_Startup+0x34>)
 8005aa6:	429a      	cmp	r2, r3
 8005aa8:	d80a      	bhi.n	8005ac0 <SE_Startup+0x28>

  /* Need to be sure to execute this initialization only one time! */
  if (b_startup_already_done == 0U)
 8005aaa:	4d09      	ldr	r5, [pc, #36]	; (8005ad0 <SE_Startup+0x38>)
 8005aac:	4c09      	ldr	r4, [pc, #36]	; (8005ad4 <SE_Startup+0x3c>)
 8005aae:	782b      	ldrb	r3, [r5, #0]
 8005ab0:	b943      	cbnz	r3, 8005ac4 <SE_Startup+0x2c>
  {
    /* Secure Core Initialization */
    SE_StartupPtr = (SE_ErrorStatus(*)(void))((uint32_t) SE_STARTUP_REGION_ROM_START + 1U);
 8005ab2:	4b09      	ldr	r3, [pc, #36]	; (8005ad8 <SE_Startup+0x40>)
    e_ret_status = (*SE_StartupPtr)();
 8005ab4:	4798      	blx	r3
    if (e_ret_status == SE_SUCCESS)
 8005ab6:	42a0      	cmp	r0, r4
 8005ab8:	d101      	bne.n	8005abe <SE_Startup+0x26>
    {
      b_startup_already_done = 1U;
 8005aba:	2301      	movs	r3, #1
 8005abc:	702b      	strb	r3, [r5, #0]
    /* This function has been already successfully called */
    e_ret_status = SE_SUCCESS;
  }

  return e_ret_status;
}
 8005abe:	bd38      	pop	{r3, r4, r5, pc}
  __IS_SFU_RESERVED();
 8005ac0:	4806      	ldr	r0, [pc, #24]	; (8005adc <SE_Startup+0x44>)
 8005ac2:	e7fc      	b.n	8005abe <SE_Startup+0x26>
    e_ret_status = SE_SUCCESS;
 8005ac4:	4620      	mov	r0, r4
 8005ac6:	e7fa      	b.n	8005abe <SE_Startup+0x26>
 8005ac8:	08006200 	.word	0x08006200
 8005acc:	0800efff 	.word	0x0800efff
 8005ad0:	20001994 	.word	0x20001994
 8005ad4:	0012310f 	.word	0x0012310f
 8005ad8:	08000501 	.word	0x08000501
 8005adc:	00018799 	.word	0x00018799

08005ae0 <SE_LockRestrictServices>:
  * @brief call by SFU to lock part of Secure Engine services
  * @param  pSE_Status Secure Engine Status.
  * @retval SE_ErrorStatus SE_SUCCESS if successful, SE_ERROR otherwise.
  */
SE_ErrorStatus SE_LockRestrictServices(SE_StatusTypeDef *pSE_Status)
{
 8005ae0:	b513      	push	{r0, r1, r4, lr}
 8005ae2:	4604      	mov	r4, r0
 8005ae4:	4672      	mov	r2, lr
  SE_ErrorStatus e_ret_status;
  uint32_t primask_bit; /*!< interruption mask saved when disabling ITs then restore when re-enabling ITs */

  /* Check if the call is coming from SFU code */
  __IS_SFU_RESERVED();
 8005ae6:	4b12      	ldr	r3, [pc, #72]	; (8005b30 <SE_LockRestrictServices+0x50>)
 8005ae8:	429a      	cmp	r2, r3
 8005aea:	d31e      	bcc.n	8005b2a <SE_LockRestrictServices+0x4a>
 8005aec:	4672      	mov	r2, lr
 8005aee:	4b11      	ldr	r3, [pc, #68]	; (8005b34 <SE_LockRestrictServices+0x54>)
 8005af0:	429a      	cmp	r2, r3
 8005af2:	d81a      	bhi.n	8005b2a <SE_LockRestrictServices+0x4a>
#ifdef SFU_ISOLATE_SE_WITH_MPU
  if (0U != SE_IsUnprivileged())
 8005af4:	f000 fab3 	bl	800605e <SE_IsUnprivileged>
 8005af8:	b148      	cbz	r0, 8005b0e <SE_LockRestrictServices+0x2e>
  {
    SE_SysCall(&e_ret_status, SE_LOCK_RESTRICT_SERVICES, pSE_Status, NULL);
 8005afa:	2300      	movs	r3, #0
 8005afc:	4622      	mov	r2, r4
 8005afe:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005b02:	4668      	mov	r0, sp
 8005b04:	f000 fab5 	bl	8006072 <SE_SysCall>
    e_ret_status = (*SE_CallGatePtr)(SE_LOCK_RESTRICT_SERVICES, pSE_Status, primask_bit);
    SE_ExitSecureMode(primask_bit);
#ifdef SFU_ISOLATE_SE_WITH_MPU
  }
#endif /* SFU_ISOLATE_SE_WITH_MPU */
  return e_ret_status;
 8005b08:	9800      	ldr	r0, [sp, #0]
}
 8005b0a:	b002      	add	sp, #8
 8005b0c:	bd10      	pop	{r4, pc}
    SE_EnterSecureMode(&primask_bit);
 8005b0e:	a801      	add	r0, sp, #4
 8005b10:	f000 fa9c 	bl	800604c <SE_EnterSecureMode>
    e_ret_status = (*SE_CallGatePtr)(SE_LOCK_RESTRICT_SERVICES, pSE_Status, primask_bit);
 8005b14:	9a01      	ldr	r2, [sp, #4]
 8005b16:	4b08      	ldr	r3, [pc, #32]	; (8005b38 <SE_LockRestrictServices+0x58>)
 8005b18:	4621      	mov	r1, r4
 8005b1a:	f44f 7080 	mov.w	r0, #256	; 0x100
 8005b1e:	4798      	blx	r3
 8005b20:	9000      	str	r0, [sp, #0]
    SE_ExitSecureMode(primask_bit);
 8005b22:	9801      	ldr	r0, [sp, #4]
 8005b24:	f000 fa97 	bl	8006056 <SE_ExitSecureMode>
 8005b28:	e7ee      	b.n	8005b08 <SE_LockRestrictServices+0x28>
  __IS_SFU_RESERVED();
 8005b2a:	4804      	ldr	r0, [pc, #16]	; (8005b3c <SE_LockRestrictServices+0x5c>)
 8005b2c:	e7ed      	b.n	8005b0a <SE_LockRestrictServices+0x2a>
 8005b2e:	bf00      	nop
 8005b30:	08006200 	.word	0x08006200
 8005b34:	0800efff 	.word	0x0800efff
 8005b38:	08000205 	.word	0x08000205
 8005b3c:	00018799 	.word	0x00018799

08005b40 <SE_CM0_Update>:
  * @brief call by SFU to trigg FUS or wireless stack update process managed by CM0
  * @param  pSE_Status Secure Engine Status.
  * @retval SE_ErrorStatus SE_SUCCESS if successful, SE_ERROR otherwise.
  */
SE_ErrorStatus SE_CM0_Update(SE_StatusTypeDef *pSE_Status)
{
 8005b40:	b513      	push	{r0, r1, r4, lr}
 8005b42:	4604      	mov	r4, r0
 8005b44:	4672      	mov	r2, lr
  SE_ErrorStatus e_ret_status;
  uint32_t primask_bit; /*!< interruption mask saved when disabling ITs then restore when re-enabling ITs */

  /* Check if the call is coming from SFU code */
  __IS_SFU_RESERVED();
 8005b46:	4b12      	ldr	r3, [pc, #72]	; (8005b90 <SE_CM0_Update+0x50>)
 8005b48:	429a      	cmp	r2, r3
 8005b4a:	d31e      	bcc.n	8005b8a <SE_CM0_Update+0x4a>
 8005b4c:	4672      	mov	r2, lr
 8005b4e:	4b11      	ldr	r3, [pc, #68]	; (8005b94 <SE_CM0_Update+0x54>)
 8005b50:	429a      	cmp	r2, r3
 8005b52:	d81a      	bhi.n	8005b8a <SE_CM0_Update+0x4a>
#ifdef SFU_ISOLATE_SE_WITH_MPU
  if (0U != SE_IsUnprivileged())
 8005b54:	f000 fa83 	bl	800605e <SE_IsUnprivileged>
 8005b58:	b148      	cbz	r0, 8005b6e <SE_CM0_Update+0x2e>
  {
    SE_SysCall(&e_ret_status, SE_CM0_UPDATE, pSE_Status, NULL);
 8005b5a:	2300      	movs	r3, #0
 8005b5c:	4622      	mov	r2, r4
 8005b5e:	f44f 7190 	mov.w	r1, #288	; 0x120
 8005b62:	4668      	mov	r0, sp
 8005b64:	f000 fa85 	bl	8006072 <SE_SysCall>
    e_ret_status = (*SE_CallGatePtr)(SE_CM0_UPDATE, pSE_Status, primask_bit);
    SE_ExitSecureMode(primask_bit);
#ifdef SFU_ISOLATE_SE_WITH_MPU
  }
#endif /* SFU_ISOLATE_SE_WITH_MPU */
  return e_ret_status;
 8005b68:	9800      	ldr	r0, [sp, #0]
}
 8005b6a:	b002      	add	sp, #8
 8005b6c:	bd10      	pop	{r4, pc}
    SE_EnterSecureMode(&primask_bit);
 8005b6e:	a801      	add	r0, sp, #4
 8005b70:	f000 fa6c 	bl	800604c <SE_EnterSecureMode>
    e_ret_status = (*SE_CallGatePtr)(SE_CM0_UPDATE, pSE_Status, primask_bit);
 8005b74:	9a01      	ldr	r2, [sp, #4]
 8005b76:	4b08      	ldr	r3, [pc, #32]	; (8005b98 <SE_CM0_Update+0x58>)
 8005b78:	4621      	mov	r1, r4
 8005b7a:	f44f 7090 	mov.w	r0, #288	; 0x120
 8005b7e:	4798      	blx	r3
 8005b80:	9000      	str	r0, [sp, #0]
    SE_ExitSecureMode(primask_bit);
 8005b82:	9801      	ldr	r0, [sp, #4]
 8005b84:	f000 fa67 	bl	8006056 <SE_ExitSecureMode>
 8005b88:	e7ee      	b.n	8005b68 <SE_CM0_Update+0x28>
  __IS_SFU_RESERVED();
 8005b8a:	4804      	ldr	r0, [pc, #16]	; (8005b9c <SE_CM0_Update+0x5c>)
 8005b8c:	e7ed      	b.n	8005b6a <SE_CM0_Update+0x2a>
 8005b8e:	bf00      	nop
 8005b90:	08006200 	.word	0x08006200
 8005b94:	0800efff 	.word	0x0800efff
 8005b98:	08000205 	.word	0x08000205
 8005b9c:	00018799 	.word	0x00018799

08005ba0 <SE_ExtFlash_Decrypt_Init>:
  *        This parameter can be a value of @ref SE_Status_Structure_definition.
  * @param pxSE_Metadata Metadata that will be used to fill the Crypto Init structure.
  * @retval SE_ErrorStatus SE_SUCCESS if successful, SE_ERROR otherwise.
  */
SE_ErrorStatus SE_ExtFlash_Decrypt_Init(SE_StatusTypeDef *pSE_Status, SE_FwRawHeaderTypeDef *pxSE_Metadata)
{
 8005ba0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005ba2:	4604      	mov	r4, r0
 8005ba4:	460d      	mov	r5, r1
 8005ba6:	4672      	mov	r2, lr
  SE_ErrorStatus e_ret_status;
  uint32_t primask_bit; /*!< interruption mask saved when disabling ITs then restore when re-enabling ITs */

  /* Check if the call is coming from SFU code */
  __IS_SFU_RESERVED();
 8005ba8:	4b12      	ldr	r3, [pc, #72]	; (8005bf4 <SE_ExtFlash_Decrypt_Init+0x54>)
 8005baa:	429a      	cmp	r2, r3
 8005bac:	d320      	bcc.n	8005bf0 <SE_ExtFlash_Decrypt_Init+0x50>
 8005bae:	4672      	mov	r2, lr
 8005bb0:	4b11      	ldr	r3, [pc, #68]	; (8005bf8 <SE_ExtFlash_Decrypt_Init+0x58>)
 8005bb2:	429a      	cmp	r2, r3
 8005bb4:	d81c      	bhi.n	8005bf0 <SE_ExtFlash_Decrypt_Init+0x50>
#ifdef SFU_ISOLATE_SE_WITH_MPU
  if (0U != SE_IsUnprivileged())
 8005bb6:	f000 fa52 	bl	800605e <SE_IsUnprivileged>
 8005bba:	b150      	cbz	r0, 8005bd2 <SE_ExtFlash_Decrypt_Init+0x32>
  {
    uint32_t params[1] = {(uint32_t)pxSE_Metadata};
    SE_SysCall(&e_ret_status, SE_EXTFLASH_DECRYPT_INIT, pSE_Status, &params);
 8005bbc:	ab01      	add	r3, sp, #4
 8005bbe:	4622      	mov	r2, r4
 8005bc0:	f44f 7188 	mov.w	r1, #272	; 0x110
 8005bc4:	4668      	mov	r0, sp
    uint32_t params[1] = {(uint32_t)pxSE_Metadata};
 8005bc6:	9501      	str	r5, [sp, #4]
    SE_SysCall(&e_ret_status, SE_EXTFLASH_DECRYPT_INIT, pSE_Status, &params);
 8005bc8:	f000 fa53 	bl	8006072 <SE_SysCall>
    e_ret_status = (*SE_CallGatePtr)(SE_EXTFLASH_DECRYPT_INIT, pSE_Status, primask_bit, pxSE_Metadata);
    SE_ExitSecureMode(primask_bit);
#ifdef SFU_ISOLATE_SE_WITH_MPU
  }
#endif /* SFU_ISOLATE_SE_WITH_MPU */
  return e_ret_status;
 8005bcc:	9800      	ldr	r0, [sp, #0]
}
 8005bce:	b003      	add	sp, #12
 8005bd0:	bd30      	pop	{r4, r5, pc}
    SE_EnterSecureMode(&primask_bit);
 8005bd2:	a801      	add	r0, sp, #4
 8005bd4:	f000 fa3a 	bl	800604c <SE_EnterSecureMode>
    e_ret_status = (*SE_CallGatePtr)(SE_EXTFLASH_DECRYPT_INIT, pSE_Status, primask_bit, pxSE_Metadata);
 8005bd8:	4621      	mov	r1, r4
 8005bda:	9a01      	ldr	r2, [sp, #4]
 8005bdc:	4c07      	ldr	r4, [pc, #28]	; (8005bfc <SE_ExtFlash_Decrypt_Init+0x5c>)
 8005bde:	462b      	mov	r3, r5
 8005be0:	f44f 7088 	mov.w	r0, #272	; 0x110
 8005be4:	47a0      	blx	r4
 8005be6:	9000      	str	r0, [sp, #0]
    SE_ExitSecureMode(primask_bit);
 8005be8:	9801      	ldr	r0, [sp, #4]
 8005bea:	f000 fa34 	bl	8006056 <SE_ExitSecureMode>
 8005bee:	e7ed      	b.n	8005bcc <SE_ExtFlash_Decrypt_Init+0x2c>
  __IS_SFU_RESERVED();
 8005bf0:	4803      	ldr	r0, [pc, #12]	; (8005c00 <SE_ExtFlash_Decrypt_Init+0x60>)
 8005bf2:	e7ec      	b.n	8005bce <SE_ExtFlash_Decrypt_Init+0x2e>
 8005bf4:	08006200 	.word	0x08006200
 8005bf8:	0800efff 	.word	0x0800efff
 8005bfc:	08000205 	.word	0x08000205
 8005c00:	00018799 	.word	0x00018799

08005c04 <SE_SFU_IMG_Read>:
  * @param  Length: number of bytes to read from flash
  * @retval SE_ErrorStatus SE_SUCCESS if successful, SE_ERROR otherwise.
  */
SE_ErrorStatus SE_SFU_IMG_Read(SE_StatusTypeDef *pSE_Status, uint8_t *pDestination, const uint8_t *pSource,
                               uint32_t Length)
{
 8005c04:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005c06:	4604      	mov	r4, r0
 8005c08:	b087      	sub	sp, #28
 8005c0a:	460d      	mov	r5, r1
 8005c0c:	4616      	mov	r6, r2
 8005c0e:	461f      	mov	r7, r3
 8005c10:	4672      	mov	r2, lr
  SE_ErrorStatus e_ret_status;
  uint32_t primask_bit; /*!< interruption mask saved when disabling ITs then restore when re-enabling ITs */

  /* Check if the call is coming from SFU code */
  __IS_SFU_RESERVED();
 8005c12:	4b14      	ldr	r3, [pc, #80]	; (8005c64 <SE_SFU_IMG_Read+0x60>)
 8005c14:	429a      	cmp	r2, r3
 8005c16:	d322      	bcc.n	8005c5e <SE_SFU_IMG_Read+0x5a>
 8005c18:	4672      	mov	r2, lr
 8005c1a:	4b13      	ldr	r3, [pc, #76]	; (8005c68 <SE_SFU_IMG_Read+0x64>)
 8005c1c:	429a      	cmp	r2, r3
 8005c1e:	d81e      	bhi.n	8005c5e <SE_SFU_IMG_Read+0x5a>
#ifdef SFU_ISOLATE_SE_WITH_MPU
  if (0U != SE_IsUnprivileged())
 8005c20:	f000 fa1d 	bl	800605e <SE_IsUnprivileged>
 8005c24:	b158      	cbz	r0, 8005c3e <SE_SFU_IMG_Read+0x3a>
  {

    uint32_t params[3] = {(uint32_t)pDestination, (uint32_t)pSource, (uint32_t)Length};
    SE_SysCall(&e_ret_status, SE_IMG_READ, pSE_Status, &params);
 8005c26:	ab03      	add	r3, sp, #12
 8005c28:	4622      	mov	r2, r4
 8005c2a:	2192      	movs	r1, #146	; 0x92
 8005c2c:	a802      	add	r0, sp, #8
    uint32_t params[3] = {(uint32_t)pDestination, (uint32_t)pSource, (uint32_t)Length};
 8005c2e:	e9cd 5603 	strd	r5, r6, [sp, #12]
 8005c32:	9705      	str	r7, [sp, #20]
    SE_SysCall(&e_ret_status, SE_IMG_READ, pSE_Status, &params);
 8005c34:	f000 fa1d 	bl	8006072 <SE_SysCall>
    /* Exit Secure Mode */
    SE_ExitSecureMode(primask_bit);
#ifdef SFU_ISOLATE_SE_WITH_MPU
  }
#endif /* SFU_ISOLATE_SE_WITH_MPU */
  return e_ret_status;
 8005c38:	9802      	ldr	r0, [sp, #8]
}
 8005c3a:	b007      	add	sp, #28
 8005c3c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    SE_EnterSecureMode(&primask_bit);
 8005c3e:	a803      	add	r0, sp, #12
 8005c40:	f000 fa04 	bl	800604c <SE_EnterSecureMode>
    e_ret_status = (*SE_CallGatePtr)(SE_IMG_READ, pSE_Status, primask_bit, pDestination, pSource, Length);;
 8005c44:	4621      	mov	r1, r4
 8005c46:	e9cd 6700 	strd	r6, r7, [sp]
 8005c4a:	9a03      	ldr	r2, [sp, #12]
 8005c4c:	4c07      	ldr	r4, [pc, #28]	; (8005c6c <SE_SFU_IMG_Read+0x68>)
 8005c4e:	462b      	mov	r3, r5
 8005c50:	2092      	movs	r0, #146	; 0x92
 8005c52:	47a0      	blx	r4
 8005c54:	9002      	str	r0, [sp, #8]
    SE_ExitSecureMode(primask_bit);
 8005c56:	9803      	ldr	r0, [sp, #12]
 8005c58:	f000 f9fd 	bl	8006056 <SE_ExitSecureMode>
 8005c5c:	e7ec      	b.n	8005c38 <SE_SFU_IMG_Read+0x34>
  __IS_SFU_RESERVED();
 8005c5e:	4804      	ldr	r0, [pc, #16]	; (8005c70 <SE_SFU_IMG_Read+0x6c>)
 8005c60:	e7eb      	b.n	8005c3a <SE_SFU_IMG_Read+0x36>
 8005c62:	bf00      	nop
 8005c64:	08006200 	.word	0x08006200
 8005c68:	0800efff 	.word	0x0800efff
 8005c6c:	08000205 	.word	0x08000205
 8005c70:	00018799 	.word	0x00018799

08005c74 <SE_SFU_IMG_Write>:
  * @param  Length: number of bytes to write to flash
  * @retval SE_ErrorStatus SE_SUCCESS if successful, SE_ERROR otherwise.
  */
SE_ErrorStatus SE_SFU_IMG_Write(SE_StatusTypeDef *pSE_Status, uint8_t *pDestination, const uint8_t *pSource,
                                uint32_t Length)
{
 8005c74:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005c76:	4604      	mov	r4, r0
 8005c78:	b087      	sub	sp, #28
 8005c7a:	460d      	mov	r5, r1
 8005c7c:	4616      	mov	r6, r2
 8005c7e:	461f      	mov	r7, r3
 8005c80:	4672      	mov	r2, lr
  SE_ErrorStatus e_ret_status;
  uint32_t primask_bit; /*!< interruption mask saved when disabling ITs then restore when re-enabling ITs */

  /* Check if the call is coming from SFU code */
  __IS_SFU_RESERVED();
 8005c82:	4b14      	ldr	r3, [pc, #80]	; (8005cd4 <SE_SFU_IMG_Write+0x60>)
 8005c84:	429a      	cmp	r2, r3
 8005c86:	d322      	bcc.n	8005cce <SE_SFU_IMG_Write+0x5a>
 8005c88:	4672      	mov	r2, lr
 8005c8a:	4b13      	ldr	r3, [pc, #76]	; (8005cd8 <SE_SFU_IMG_Write+0x64>)
 8005c8c:	429a      	cmp	r2, r3
 8005c8e:	d81e      	bhi.n	8005cce <SE_SFU_IMG_Write+0x5a>

#ifdef SFU_ISOLATE_SE_WITH_MPU
  if (0U != SE_IsUnprivileged())
 8005c90:	f000 f9e5 	bl	800605e <SE_IsUnprivileged>
 8005c94:	b158      	cbz	r0, 8005cae <SE_SFU_IMG_Write+0x3a>
  {
    uint32_t params[3] = {(uint32_t)pDestination, (uint32_t)pSource, (uint32_t)Length};
    SE_SysCall(&e_ret_status, SE_IMG_WRITE, pSE_Status, &params);
 8005c96:	ab03      	add	r3, sp, #12
 8005c98:	4622      	mov	r2, r4
 8005c9a:	2193      	movs	r1, #147	; 0x93
 8005c9c:	a802      	add	r0, sp, #8
    uint32_t params[3] = {(uint32_t)pDestination, (uint32_t)pSource, (uint32_t)Length};
 8005c9e:	e9cd 5603 	strd	r5, r6, [sp, #12]
 8005ca2:	9705      	str	r7, [sp, #20]
    SE_SysCall(&e_ret_status, SE_IMG_WRITE, pSE_Status, &params);
 8005ca4:	f000 f9e5 	bl	8006072 <SE_SysCall>
    e_ret_status = (*SE_CallGatePtr)(SE_IMG_WRITE, pSE_Status, primask_bit, pDestination, pSource, Length);
    SE_ExitSecureMode(primask_bit);
#ifdef SFU_ISOLATE_SE_WITH_MPU
  }
#endif /* SFU_ISOLATE_SE_WITH_MPU */
  return e_ret_status;
 8005ca8:	9802      	ldr	r0, [sp, #8]
}
 8005caa:	b007      	add	sp, #28
 8005cac:	bdf0      	pop	{r4, r5, r6, r7, pc}
    SE_EnterSecureMode(&primask_bit);
 8005cae:	a803      	add	r0, sp, #12
 8005cb0:	f000 f9cc 	bl	800604c <SE_EnterSecureMode>
    e_ret_status = (*SE_CallGatePtr)(SE_IMG_WRITE, pSE_Status, primask_bit, pDestination, pSource, Length);
 8005cb4:	4621      	mov	r1, r4
 8005cb6:	e9cd 6700 	strd	r6, r7, [sp]
 8005cba:	9a03      	ldr	r2, [sp, #12]
 8005cbc:	4c07      	ldr	r4, [pc, #28]	; (8005cdc <SE_SFU_IMG_Write+0x68>)
 8005cbe:	462b      	mov	r3, r5
 8005cc0:	2093      	movs	r0, #147	; 0x93
 8005cc2:	47a0      	blx	r4
 8005cc4:	9002      	str	r0, [sp, #8]
    SE_ExitSecureMode(primask_bit);
 8005cc6:	9803      	ldr	r0, [sp, #12]
 8005cc8:	f000 f9c5 	bl	8006056 <SE_ExitSecureMode>
 8005ccc:	e7ec      	b.n	8005ca8 <SE_SFU_IMG_Write+0x34>
  __IS_SFU_RESERVED();
 8005cce:	4804      	ldr	r0, [pc, #16]	; (8005ce0 <SE_SFU_IMG_Write+0x6c>)
 8005cd0:	e7eb      	b.n	8005caa <SE_SFU_IMG_Write+0x36>
 8005cd2:	bf00      	nop
 8005cd4:	08006200 	.word	0x08006200
 8005cd8:	0800efff 	.word	0x0800efff
 8005cdc:	08000205 	.word	0x08000205
 8005ce0:	00018799 	.word	0x00018799

08005ce4 <SE_SFU_IMG_Erase>:
  * @param  pDestination: pointer to flash area to erase.
  * @param  Length: number of bytes to erase in flash
  * @retval SE_ErrorStatus SE_SUCCESS if successful, SE_ERROR otherwise.
  */
SE_ErrorStatus SE_SFU_IMG_Erase(SE_StatusTypeDef *pSE_Status, uint8_t *pDestination, uint32_t Length)
{
 8005ce4:	b570      	push	{r4, r5, r6, lr}
 8005ce6:	4604      	mov	r4, r0
 8005ce8:	b086      	sub	sp, #24
 8005cea:	460d      	mov	r5, r1
 8005cec:	4616      	mov	r6, r2
 8005cee:	4672      	mov	r2, lr
  SE_ErrorStatus e_ret_status;
  uint32_t primask_bit; /*!< interruption mask saved when disabling ITs then restore when re-enabling ITs */

  /* Check if the call is coming from SFU code */
  __IS_SFU_RESERVED();
 8005cf0:	4b12      	ldr	r3, [pc, #72]	; (8005d3c <SE_SFU_IMG_Erase+0x58>)
 8005cf2:	429a      	cmp	r2, r3
 8005cf4:	d320      	bcc.n	8005d38 <SE_SFU_IMG_Erase+0x54>
 8005cf6:	4672      	mov	r2, lr
 8005cf8:	4b11      	ldr	r3, [pc, #68]	; (8005d40 <SE_SFU_IMG_Erase+0x5c>)
 8005cfa:	429a      	cmp	r2, r3
 8005cfc:	d81c      	bhi.n	8005d38 <SE_SFU_IMG_Erase+0x54>

#ifdef SFU_ISOLATE_SE_WITH_MPU
  if (0U != SE_IsUnprivileged())
 8005cfe:	f000 f9ae 	bl	800605e <SE_IsUnprivileged>
 8005d02:	b150      	cbz	r0, 8005d1a <SE_SFU_IMG_Erase+0x36>
  {
    uint32_t params[2] = {(uint32_t)pDestination, (uint32_t)Length};
    SE_SysCall(&e_ret_status, SE_IMG_ERASE, pSE_Status, &params);
 8005d04:	ab04      	add	r3, sp, #16
 8005d06:	4622      	mov	r2, r4
 8005d08:	2194      	movs	r1, #148	; 0x94
 8005d0a:	a803      	add	r0, sp, #12
    uint32_t params[2] = {(uint32_t)pDestination, (uint32_t)Length};
 8005d0c:	e9cd 5604 	strd	r5, r6, [sp, #16]
    SE_SysCall(&e_ret_status, SE_IMG_ERASE, pSE_Status, &params);
 8005d10:	f000 f9af 	bl	8006072 <SE_SysCall>
    e_ret_status = (*SE_CallGatePtr)(SE_IMG_ERASE, pSE_Status, primask_bit, pDestination, Length);
    SE_ExitSecureMode(primask_bit);
#ifdef SFU_ISOLATE_SE_WITH_MPU
  }
#endif /* SFU_ISOLATE_SE_WITH_MPU */
  return e_ret_status;
 8005d14:	9803      	ldr	r0, [sp, #12]
}
 8005d16:	b006      	add	sp, #24
 8005d18:	bd70      	pop	{r4, r5, r6, pc}
    SE_EnterSecureMode(&primask_bit);
 8005d1a:	a804      	add	r0, sp, #16
 8005d1c:	f000 f996 	bl	800604c <SE_EnterSecureMode>
    e_ret_status = (*SE_CallGatePtr)(SE_IMG_ERASE, pSE_Status, primask_bit, pDestination, Length);
 8005d20:	4621      	mov	r1, r4
 8005d22:	9a04      	ldr	r2, [sp, #16]
 8005d24:	4c07      	ldr	r4, [pc, #28]	; (8005d44 <SE_SFU_IMG_Erase+0x60>)
 8005d26:	9600      	str	r6, [sp, #0]
 8005d28:	462b      	mov	r3, r5
 8005d2a:	2094      	movs	r0, #148	; 0x94
 8005d2c:	47a0      	blx	r4
 8005d2e:	9003      	str	r0, [sp, #12]
    SE_ExitSecureMode(primask_bit);
 8005d30:	9804      	ldr	r0, [sp, #16]
 8005d32:	f000 f990 	bl	8006056 <SE_ExitSecureMode>
 8005d36:	e7ed      	b.n	8005d14 <SE_SFU_IMG_Erase+0x30>
  __IS_SFU_RESERVED();
 8005d38:	4803      	ldr	r0, [pc, #12]	; (8005d48 <SE_SFU_IMG_Erase+0x64>)
 8005d3a:	e7ec      	b.n	8005d16 <SE_SFU_IMG_Erase+0x32>
 8005d3c:	08006200 	.word	0x08006200
 8005d40:	0800efff 	.word	0x0800efff
 8005d44:	08000205 	.word	0x08000205
 8005d48:	00018799 	.word	0x00018799

08005d4c <SE_Decrypt_Init>:
  * @param SE_FwType Type of Fw Image.
  *        This parameter can be SE_FW_IMAGE_COMPLETE or SE_FW_IMAGE_PARTIAL.
  * @retval SE_ErrorStatus SE_SUCCESS if successful, SE_ERROR otherwise.
  */
SE_ErrorStatus SE_Decrypt_Init(SE_StatusTypeDef *peSE_Status, SE_FwRawHeaderTypeDef *pxSE_Metadata, uint32_t SE_FwType)
{
 8005d4c:	b570      	push	{r4, r5, r6, lr}
 8005d4e:	4605      	mov	r5, r0
 8005d50:	b086      	sub	sp, #24
 8005d52:	460e      	mov	r6, r1
 8005d54:	4614      	mov	r4, r2
 8005d56:	4672      	mov	r2, lr
  SE_ErrorStatus e_ret_status;
  uint32_t primask_bit; /*!< interruption mask saved when disabling ITs then restore when re-enabling ITs */

  /* Check if the call is coming from SFU code */
  __IS_SFU_RESERVED();
 8005d58:	4b13      	ldr	r3, [pc, #76]	; (8005da8 <SE_Decrypt_Init+0x5c>)
 8005d5a:	429a      	cmp	r2, r3
 8005d5c:	d322      	bcc.n	8005da4 <SE_Decrypt_Init+0x58>
 8005d5e:	4672      	mov	r2, lr
 8005d60:	4b12      	ldr	r3, [pc, #72]	; (8005dac <SE_Decrypt_Init+0x60>)
 8005d62:	429a      	cmp	r2, r3
 8005d64:	d81e      	bhi.n	8005da4 <SE_Decrypt_Init+0x58>

  /* Check the parameter */
  if ((SE_FwType != SE_FW_IMAGE_COMPLETE) && (SE_FwType != SE_FW_IMAGE_PARTIAL))
 8005d66:	2c01      	cmp	r4, #1
 8005d68:	d81c      	bhi.n	8005da4 <SE_Decrypt_Init+0x58>
  {
    return SE_ERROR;
  }

#ifdef SFU_ISOLATE_SE_WITH_MPU
  if (0U != SE_IsUnprivileged())
 8005d6a:	f000 f978 	bl	800605e <SE_IsUnprivileged>
 8005d6e:	b150      	cbz	r0, 8005d86 <SE_Decrypt_Init+0x3a>
  {
    uint32_t params[2] = {(uint32_t)pxSE_Metadata, (uint32_t)SE_FwType};
    SE_SysCall(&e_ret_status, SE_CRYPTO_LL_DECRYPT_INIT_ID, peSE_Status, &params);
 8005d70:	ab04      	add	r3, sp, #16
 8005d72:	462a      	mov	r2, r5
 8005d74:	2104      	movs	r1, #4
 8005d76:	a803      	add	r0, sp, #12
    uint32_t params[2] = {(uint32_t)pxSE_Metadata, (uint32_t)SE_FwType};
 8005d78:	e9cd 6404 	strd	r6, r4, [sp, #16]
    SE_SysCall(&e_ret_status, SE_CRYPTO_LL_DECRYPT_INIT_ID, peSE_Status, &params);
 8005d7c:	f000 f979 	bl	8006072 <SE_SysCall>
    /* Exit Secure Mode */
    SE_ExitSecureMode(primask_bit);
#ifdef SFU_ISOLATE_SE_WITH_MPU
  }
#endif /* SFU_ISOLATE_SE_WITH_MPU */
  return e_ret_status;
 8005d80:	9803      	ldr	r0, [sp, #12]
}
 8005d82:	b006      	add	sp, #24
 8005d84:	bd70      	pop	{r4, r5, r6, pc}
    SE_EnterSecureMode(&primask_bit);
 8005d86:	a804      	add	r0, sp, #16
 8005d88:	f000 f960 	bl	800604c <SE_EnterSecureMode>
    e_ret_status = (*SE_CallGatePtr)(SE_CRYPTO_LL_DECRYPT_INIT_ID, peSE_Status, primask_bit, pxSE_Metadata, SE_FwType);
 8005d8c:	9400      	str	r4, [sp, #0]
 8005d8e:	9a04      	ldr	r2, [sp, #16]
 8005d90:	4c07      	ldr	r4, [pc, #28]	; (8005db0 <SE_Decrypt_Init+0x64>)
 8005d92:	4633      	mov	r3, r6
 8005d94:	4629      	mov	r1, r5
 8005d96:	2004      	movs	r0, #4
 8005d98:	47a0      	blx	r4
 8005d9a:	9003      	str	r0, [sp, #12]
    SE_ExitSecureMode(primask_bit);
 8005d9c:	9804      	ldr	r0, [sp, #16]
 8005d9e:	f000 f95a 	bl	8006056 <SE_ExitSecureMode>
 8005da2:	e7ed      	b.n	8005d80 <SE_Decrypt_Init+0x34>
  __IS_SFU_RESERVED();
 8005da4:	4803      	ldr	r0, [pc, #12]	; (8005db4 <SE_Decrypt_Init+0x68>)
 8005da6:	e7ec      	b.n	8005d82 <SE_Decrypt_Init+0x36>
 8005da8:	08006200 	.word	0x08006200
 8005dac:	0800efff 	.word	0x0800efff
 8005db0:	08000205 	.word	0x08000205
 8005db4:	00018799 	.word	0x00018799

08005db8 <SE_Decrypt_Append>:
  * @param pOutputSize pointer to Output Size (bytes).
  * @retval SE_ErrorStatus SE_SUCCESS if successful, SE_ERROR otherwise.
  */
SE_ErrorStatus SE_Decrypt_Append(SE_StatusTypeDef *peSE_Status, const uint8_t *pInputBuffer, int32_t InputSize,
                                 uint8_t *pOutputBuffer, int32_t *pOutputSize)
{
 8005db8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005dbc:	b08a      	sub	sp, #40	; 0x28
 8005dbe:	4604      	mov	r4, r0
 8005dc0:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
 8005dc4:	460d      	mov	r5, r1
 8005dc6:	4616      	mov	r6, r2
 8005dc8:	461f      	mov	r7, r3
 8005dca:	4672      	mov	r2, lr
  SE_ErrorStatus e_ret_status;
  uint32_t primask_bit; /*!< interruption mask saved when disabling ITs then restore when re-enabling ITs */

  /* Check if the call is coming from SFU code */
  __IS_SFU_RESERVED();
 8005dcc:	4b15      	ldr	r3, [pc, #84]	; (8005e24 <SE_Decrypt_Append+0x6c>)
 8005dce:	429a      	cmp	r2, r3
 8005dd0:	d325      	bcc.n	8005e1e <SE_Decrypt_Append+0x66>
 8005dd2:	4672      	mov	r2, lr
 8005dd4:	4b14      	ldr	r3, [pc, #80]	; (8005e28 <SE_Decrypt_Append+0x70>)
 8005dd6:	429a      	cmp	r2, r3
 8005dd8:	d821      	bhi.n	8005e1e <SE_Decrypt_Append+0x66>

#ifdef SFU_ISOLATE_SE_WITH_MPU
  if (0U != SE_IsUnprivileged())
 8005dda:	f000 f940 	bl	800605e <SE_IsUnprivileged>
 8005dde:	b168      	cbz	r0, 8005dfc <SE_Decrypt_Append+0x44>
  {
    uint32_t params[4] = {(uint32_t)pInputBuffer, (uint32_t)InputSize, (uint32_t)pOutputBuffer, (uint32_t)pOutputSize};
    SE_SysCall(&e_ret_status, SE_CRYPTO_LL_DECRYPT_APPEND_ID, peSE_Status, &params);
 8005de0:	ab06      	add	r3, sp, #24
 8005de2:	4622      	mov	r2, r4
 8005de4:	2105      	movs	r1, #5
 8005de6:	a805      	add	r0, sp, #20
    uint32_t params[4] = {(uint32_t)pInputBuffer, (uint32_t)InputSize, (uint32_t)pOutputBuffer, (uint32_t)pOutputSize};
 8005de8:	e9cd 5606 	strd	r5, r6, [sp, #24]
 8005dec:	e9cd 7808 	strd	r7, r8, [sp, #32]
    SE_SysCall(&e_ret_status, SE_CRYPTO_LL_DECRYPT_APPEND_ID, peSE_Status, &params);
 8005df0:	f000 f93f 	bl	8006072 <SE_SysCall>
    /* Exit Secure Mode */
    SE_ExitSecureMode(primask_bit);
#ifdef SFU_ISOLATE_SE_WITH_MPU
  }
#endif /* SFU_ISOLATE_SE_WITH_MPU */
  return e_ret_status;
 8005df4:	9805      	ldr	r0, [sp, #20]
}
 8005df6:	b00a      	add	sp, #40	; 0x28
 8005df8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    SE_EnterSecureMode(&primask_bit);
 8005dfc:	a806      	add	r0, sp, #24
 8005dfe:	f000 f925 	bl	800604c <SE_EnterSecureMode>
    e_ret_status = (*SE_CallGatePtr)(SE_CRYPTO_LL_DECRYPT_APPEND_ID, peSE_Status, primask_bit, pInputBuffer, InputSize,
 8005e02:	4621      	mov	r1, r4
 8005e04:	e9cd 7801 	strd	r7, r8, [sp, #4]
 8005e08:	9a06      	ldr	r2, [sp, #24]
 8005e0a:	4c08      	ldr	r4, [pc, #32]	; (8005e2c <SE_Decrypt_Append+0x74>)
 8005e0c:	9600      	str	r6, [sp, #0]
 8005e0e:	462b      	mov	r3, r5
 8005e10:	2005      	movs	r0, #5
 8005e12:	47a0      	blx	r4
 8005e14:	9005      	str	r0, [sp, #20]
    SE_ExitSecureMode(primask_bit);
 8005e16:	9806      	ldr	r0, [sp, #24]
 8005e18:	f000 f91d 	bl	8006056 <SE_ExitSecureMode>
 8005e1c:	e7ea      	b.n	8005df4 <SE_Decrypt_Append+0x3c>
  __IS_SFU_RESERVED();
 8005e1e:	4804      	ldr	r0, [pc, #16]	; (8005e30 <SE_Decrypt_Append+0x78>)
 8005e20:	e7e9      	b.n	8005df6 <SE_Decrypt_Append+0x3e>
 8005e22:	bf00      	nop
 8005e24:	08006200 	.word	0x08006200
 8005e28:	0800efff 	.word	0x0800efff
 8005e2c:	08000205 	.word	0x08000205
 8005e30:	00018799 	.word	0x00018799

08005e34 <SE_Decrypt_Finish>:
  * @param pOutputBuffer pointer to Output Buffer.
  * @param pOutputSize pointer to Output Size (bytes).
  * @retval SE_ErrorStatus SE_SUCCESS if successful, SE_ERROR otherwise.
  */
SE_ErrorStatus SE_Decrypt_Finish(SE_StatusTypeDef *peSE_Status, uint8_t *pOutputBuffer, int32_t *pOutputSize)
{
 8005e34:	b570      	push	{r4, r5, r6, lr}
 8005e36:	4604      	mov	r4, r0
 8005e38:	b086      	sub	sp, #24
 8005e3a:	460d      	mov	r5, r1
 8005e3c:	4616      	mov	r6, r2
 8005e3e:	4672      	mov	r2, lr
  SE_ErrorStatus e_ret_status;
  uint32_t primask_bit; /*!< interruption mask saved when disabling ITs then restore when re-enabling ITs */

  /* Check if the call is coming from SFU code */
  __IS_SFU_RESERVED();
 8005e40:	4b12      	ldr	r3, [pc, #72]	; (8005e8c <SE_Decrypt_Finish+0x58>)
 8005e42:	429a      	cmp	r2, r3
 8005e44:	d320      	bcc.n	8005e88 <SE_Decrypt_Finish+0x54>
 8005e46:	4672      	mov	r2, lr
 8005e48:	4b11      	ldr	r3, [pc, #68]	; (8005e90 <SE_Decrypt_Finish+0x5c>)
 8005e4a:	429a      	cmp	r2, r3
 8005e4c:	d81c      	bhi.n	8005e88 <SE_Decrypt_Finish+0x54>

#ifdef SFU_ISOLATE_SE_WITH_MPU
  if (0U != SE_IsUnprivileged())
 8005e4e:	f000 f906 	bl	800605e <SE_IsUnprivileged>
 8005e52:	b150      	cbz	r0, 8005e6a <SE_Decrypt_Finish+0x36>
  {
    uint32_t params[2] = {(uint32_t)pOutputBuffer, (uint32_t)pOutputSize};
    SE_SysCall(&e_ret_status, SE_CRYPTO_LL_DECRYPT_FINISH_ID, peSE_Status, &params);
 8005e54:	ab04      	add	r3, sp, #16
 8005e56:	4622      	mov	r2, r4
 8005e58:	2106      	movs	r1, #6
 8005e5a:	a803      	add	r0, sp, #12
    uint32_t params[2] = {(uint32_t)pOutputBuffer, (uint32_t)pOutputSize};
 8005e5c:	e9cd 5604 	strd	r5, r6, [sp, #16]
    SE_SysCall(&e_ret_status, SE_CRYPTO_LL_DECRYPT_FINISH_ID, peSE_Status, &params);
 8005e60:	f000 f907 	bl	8006072 <SE_SysCall>
    /* Exit Secure Mode */
    SE_ExitSecureMode(primask_bit);
#ifdef SFU_ISOLATE_SE_WITH_MPU
  }
#endif /* SFU_ISOLATE_SE_WITH_MPU */
  return e_ret_status;
 8005e64:	9803      	ldr	r0, [sp, #12]
}
 8005e66:	b006      	add	sp, #24
 8005e68:	bd70      	pop	{r4, r5, r6, pc}
    SE_EnterSecureMode(&primask_bit);
 8005e6a:	a804      	add	r0, sp, #16
 8005e6c:	f000 f8ee 	bl	800604c <SE_EnterSecureMode>
    e_ret_status = (*SE_CallGatePtr)(SE_CRYPTO_LL_DECRYPT_FINISH_ID, peSE_Status, primask_bit, pOutputBuffer,
 8005e70:	4621      	mov	r1, r4
 8005e72:	9a04      	ldr	r2, [sp, #16]
 8005e74:	4c07      	ldr	r4, [pc, #28]	; (8005e94 <SE_Decrypt_Finish+0x60>)
 8005e76:	9600      	str	r6, [sp, #0]
 8005e78:	462b      	mov	r3, r5
 8005e7a:	2006      	movs	r0, #6
 8005e7c:	47a0      	blx	r4
 8005e7e:	9003      	str	r0, [sp, #12]
    SE_ExitSecureMode(primask_bit);
 8005e80:	9804      	ldr	r0, [sp, #16]
 8005e82:	f000 f8e8 	bl	8006056 <SE_ExitSecureMode>
 8005e86:	e7ed      	b.n	8005e64 <SE_Decrypt_Finish+0x30>
  __IS_SFU_RESERVED();
 8005e88:	4803      	ldr	r0, [pc, #12]	; (8005e98 <SE_Decrypt_Finish+0x64>)
 8005e8a:	e7ec      	b.n	8005e66 <SE_Decrypt_Finish+0x32>
 8005e8c:	08006200 	.word	0x08006200
 8005e90:	0800efff 	.word	0x0800efff
 8005e94:	08000205 	.word	0x08000205
 8005e98:	00018799 	.word	0x00018799

08005e9c <SE_AuthenticateFW_Init>:
  *        This parameter can be SE_FW_IMAGE_COMPLETE or SE_FW_IMAGE_PARTIAL.
  * @retval SE_ErrorStatus SE_SUCCESS if successful, SE_ERROR otherwise.
  */
SE_ErrorStatus SE_AuthenticateFW_Init(SE_StatusTypeDef *peSE_Status, SE_FwRawHeaderTypeDef *pxSE_Metadata,
                                      uint32_t SE_FwType)
{
 8005e9c:	b570      	push	{r4, r5, r6, lr}
 8005e9e:	4605      	mov	r5, r0
 8005ea0:	b086      	sub	sp, #24
 8005ea2:	460e      	mov	r6, r1
 8005ea4:	4614      	mov	r4, r2
 8005ea6:	4672      	mov	r2, lr
  SE_ErrorStatus e_ret_status;
  uint32_t primask_bit; /*!< interruption mask saved when disabling ITs then restore when re-enabling ITs */

  /* Check if the call is coming from SFU code */
  __IS_SFU_RESERVED();
 8005ea8:	4b13      	ldr	r3, [pc, #76]	; (8005ef8 <SE_AuthenticateFW_Init+0x5c>)
 8005eaa:	429a      	cmp	r2, r3
 8005eac:	d322      	bcc.n	8005ef4 <SE_AuthenticateFW_Init+0x58>
 8005eae:	4672      	mov	r2, lr
 8005eb0:	4b12      	ldr	r3, [pc, #72]	; (8005efc <SE_AuthenticateFW_Init+0x60>)
 8005eb2:	429a      	cmp	r2, r3
 8005eb4:	d81e      	bhi.n	8005ef4 <SE_AuthenticateFW_Init+0x58>

  /* Check the parameter */
  if ((SE_FwType != SE_FW_IMAGE_COMPLETE) && (SE_FwType != SE_FW_IMAGE_PARTIAL))
 8005eb6:	2c01      	cmp	r4, #1
 8005eb8:	d81c      	bhi.n	8005ef4 <SE_AuthenticateFW_Init+0x58>
  {
    return SE_ERROR;
  }

#ifdef SFU_ISOLATE_SE_WITH_MPU
  if (0U != SE_IsUnprivileged())
 8005eba:	f000 f8d0 	bl	800605e <SE_IsUnprivileged>
 8005ebe:	b150      	cbz	r0, 8005ed6 <SE_AuthenticateFW_Init+0x3a>
  {
    uint32_t params[2] = {(uint32_t)pxSE_Metadata, (uint32_t)SE_FwType};
    SE_SysCall(&e_ret_status, SE_CRYPTO_LL_AUTHENTICATE_FW_INIT_ID, peSE_Status, &params);
 8005ec0:	ab04      	add	r3, sp, #16
 8005ec2:	462a      	mov	r2, r5
 8005ec4:	2107      	movs	r1, #7
 8005ec6:	a803      	add	r0, sp, #12
    uint32_t params[2] = {(uint32_t)pxSE_Metadata, (uint32_t)SE_FwType};
 8005ec8:	e9cd 6404 	strd	r6, r4, [sp, #16]
    SE_SysCall(&e_ret_status, SE_CRYPTO_LL_AUTHENTICATE_FW_INIT_ID, peSE_Status, &params);
 8005ecc:	f000 f8d1 	bl	8006072 <SE_SysCall>
    SE_ExitSecureMode(primask_bit);
#ifdef SFU_ISOLATE_SE_WITH_MPU
  }
#endif /* SFU_ISOLATE_SE_WITH_MPU */

  return e_ret_status;
 8005ed0:	9803      	ldr	r0, [sp, #12]
}
 8005ed2:	b006      	add	sp, #24
 8005ed4:	bd70      	pop	{r4, r5, r6, pc}
    SE_EnterSecureMode(&primask_bit);
 8005ed6:	a804      	add	r0, sp, #16
 8005ed8:	f000 f8b8 	bl	800604c <SE_EnterSecureMode>
    e_ret_status = (*SE_CallGatePtr)(SE_CRYPTO_LL_AUTHENTICATE_FW_INIT_ID, peSE_Status, primask_bit, pxSE_Metadata,
 8005edc:	9400      	str	r4, [sp, #0]
 8005ede:	9a04      	ldr	r2, [sp, #16]
 8005ee0:	4c07      	ldr	r4, [pc, #28]	; (8005f00 <SE_AuthenticateFW_Init+0x64>)
 8005ee2:	4633      	mov	r3, r6
 8005ee4:	4629      	mov	r1, r5
 8005ee6:	2007      	movs	r0, #7
 8005ee8:	47a0      	blx	r4
 8005eea:	9003      	str	r0, [sp, #12]
    SE_ExitSecureMode(primask_bit);
 8005eec:	9804      	ldr	r0, [sp, #16]
 8005eee:	f000 f8b2 	bl	8006056 <SE_ExitSecureMode>
 8005ef2:	e7ed      	b.n	8005ed0 <SE_AuthenticateFW_Init+0x34>
  __IS_SFU_RESERVED();
 8005ef4:	4803      	ldr	r0, [pc, #12]	; (8005f04 <SE_AuthenticateFW_Init+0x68>)
 8005ef6:	e7ec      	b.n	8005ed2 <SE_AuthenticateFW_Init+0x36>
 8005ef8:	08006200 	.word	0x08006200
 8005efc:	0800efff 	.word	0x0800efff
 8005f00:	08000205 	.word	0x08000205
 8005f04:	00018799 	.word	0x00018799

08005f08 <SE_AuthenticateFW_Append>:
  * @param pOutputSize pointer to Output Size (bytes).
  * @retval SE_ErrorStatus SE_SUCCESS if successful, SE_ERROR otherwise.
  */
SE_ErrorStatus SE_AuthenticateFW_Append(SE_StatusTypeDef *peSE_Status, const uint8_t *pInputBuffer, int32_t InputSize,
                                        uint8_t *pOutputBuffer, int32_t *pOutputSize)
{
 8005f08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005f0c:	b08a      	sub	sp, #40	; 0x28
 8005f0e:	4604      	mov	r4, r0
 8005f10:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
 8005f14:	460d      	mov	r5, r1
 8005f16:	4616      	mov	r6, r2
 8005f18:	461f      	mov	r7, r3
 8005f1a:	4672      	mov	r2, lr
  SE_ErrorStatus e_ret_status;
  uint32_t primask_bit; /*!< interruption mask saved when disabling ITs then restore when re-enabling ITs */

  /* Check if the call is coming from SFU code */
  __IS_SFU_RESERVED();
 8005f1c:	4b15      	ldr	r3, [pc, #84]	; (8005f74 <SE_AuthenticateFW_Append+0x6c>)
 8005f1e:	429a      	cmp	r2, r3
 8005f20:	d325      	bcc.n	8005f6e <SE_AuthenticateFW_Append+0x66>
 8005f22:	4672      	mov	r2, lr
 8005f24:	4b14      	ldr	r3, [pc, #80]	; (8005f78 <SE_AuthenticateFW_Append+0x70>)
 8005f26:	429a      	cmp	r2, r3
 8005f28:	d821      	bhi.n	8005f6e <SE_AuthenticateFW_Append+0x66>

#ifdef SFU_ISOLATE_SE_WITH_MPU
  if (0U != SE_IsUnprivileged())
 8005f2a:	f000 f898 	bl	800605e <SE_IsUnprivileged>
 8005f2e:	b168      	cbz	r0, 8005f4c <SE_AuthenticateFW_Append+0x44>
  {
    uint32_t params[4] = {(uint32_t)pInputBuffer, (uint32_t)InputSize, (uint32_t)pOutputBuffer, (uint32_t)pOutputSize};
    SE_SysCall(&e_ret_status, SE_CRYPTO_LL_AUTHENTICATE_FW_APPEND_ID, peSE_Status, &params);
 8005f30:	ab06      	add	r3, sp, #24
 8005f32:	4622      	mov	r2, r4
 8005f34:	2108      	movs	r1, #8
 8005f36:	a805      	add	r0, sp, #20
    uint32_t params[4] = {(uint32_t)pInputBuffer, (uint32_t)InputSize, (uint32_t)pOutputBuffer, (uint32_t)pOutputSize};
 8005f38:	e9cd 5606 	strd	r5, r6, [sp, #24]
 8005f3c:	e9cd 7808 	strd	r7, r8, [sp, #32]
    SE_SysCall(&e_ret_status, SE_CRYPTO_LL_AUTHENTICATE_FW_APPEND_ID, peSE_Status, &params);
 8005f40:	f000 f897 	bl	8006072 <SE_SysCall>
    SE_ExitSecureMode(primask_bit);
#ifdef SFU_ISOLATE_SE_WITH_MPU
  }
#endif /* SFU_ISOLATE_SE_WITH_MPU */

  return e_ret_status;
 8005f44:	9805      	ldr	r0, [sp, #20]
}
 8005f46:	b00a      	add	sp, #40	; 0x28
 8005f48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    SE_EnterSecureMode(&primask_bit);
 8005f4c:	a806      	add	r0, sp, #24
 8005f4e:	f000 f87d 	bl	800604c <SE_EnterSecureMode>
    e_ret_status = (*SE_CallGatePtr)(SE_CRYPTO_LL_AUTHENTICATE_FW_APPEND_ID, peSE_Status, primask_bit, pInputBuffer,
 8005f52:	4621      	mov	r1, r4
 8005f54:	e9cd 7801 	strd	r7, r8, [sp, #4]
 8005f58:	9a06      	ldr	r2, [sp, #24]
 8005f5a:	4c08      	ldr	r4, [pc, #32]	; (8005f7c <SE_AuthenticateFW_Append+0x74>)
 8005f5c:	9600      	str	r6, [sp, #0]
 8005f5e:	462b      	mov	r3, r5
 8005f60:	2008      	movs	r0, #8
 8005f62:	47a0      	blx	r4
 8005f64:	9005      	str	r0, [sp, #20]
    SE_ExitSecureMode(primask_bit);
 8005f66:	9806      	ldr	r0, [sp, #24]
 8005f68:	f000 f875 	bl	8006056 <SE_ExitSecureMode>
 8005f6c:	e7ea      	b.n	8005f44 <SE_AuthenticateFW_Append+0x3c>
  __IS_SFU_RESERVED();
 8005f6e:	4804      	ldr	r0, [pc, #16]	; (8005f80 <SE_AuthenticateFW_Append+0x78>)
 8005f70:	e7e9      	b.n	8005f46 <SE_AuthenticateFW_Append+0x3e>
 8005f72:	bf00      	nop
 8005f74:	08006200 	.word	0x08006200
 8005f78:	0800efff 	.word	0x0800efff
 8005f7c:	08000205 	.word	0x08000205
 8005f80:	00018799 	.word	0x00018799

08005f84 <SE_AuthenticateFW_Finish>:
  * @param pOutputBuffer pointer to Output Buffer.
  * @param pOutputSize pointer to Output Size (bytes).
  * @retval SE_ErrorStatus SE_SUCCESS if successful, SE_ERROR otherwise.
  */
SE_ErrorStatus SE_AuthenticateFW_Finish(SE_StatusTypeDef *peSE_Status, uint8_t *pOutputBuffer, int32_t *pOutputSize)
{
 8005f84:	b570      	push	{r4, r5, r6, lr}
 8005f86:	4604      	mov	r4, r0
 8005f88:	b086      	sub	sp, #24
 8005f8a:	460d      	mov	r5, r1
 8005f8c:	4616      	mov	r6, r2
 8005f8e:	4672      	mov	r2, lr
  SE_ErrorStatus e_ret_status;
  uint32_t primask_bit; /*!< interruption mask saved when disabling ITs then restore when re-enabling ITs */

  /* Check if the call is coming from SFU code */
  __IS_SFU_RESERVED();
 8005f90:	4b12      	ldr	r3, [pc, #72]	; (8005fdc <SE_AuthenticateFW_Finish+0x58>)
 8005f92:	429a      	cmp	r2, r3
 8005f94:	d320      	bcc.n	8005fd8 <SE_AuthenticateFW_Finish+0x54>
 8005f96:	4672      	mov	r2, lr
 8005f98:	4b11      	ldr	r3, [pc, #68]	; (8005fe0 <SE_AuthenticateFW_Finish+0x5c>)
 8005f9a:	429a      	cmp	r2, r3
 8005f9c:	d81c      	bhi.n	8005fd8 <SE_AuthenticateFW_Finish+0x54>

#ifdef SFU_ISOLATE_SE_WITH_MPU
  if (0U != SE_IsUnprivileged())
 8005f9e:	f000 f85e 	bl	800605e <SE_IsUnprivileged>
 8005fa2:	b150      	cbz	r0, 8005fba <SE_AuthenticateFW_Finish+0x36>
  {
    uint32_t params[2] = {(uint32_t)pOutputBuffer, (uint32_t)pOutputSize};
    SE_SysCall(&e_ret_status, SE_CRYPTO_LL_AUTHENTICATE_FW_FINISH_ID, peSE_Status, &params);
 8005fa4:	ab04      	add	r3, sp, #16
 8005fa6:	4622      	mov	r2, r4
 8005fa8:	2109      	movs	r1, #9
 8005faa:	a803      	add	r0, sp, #12
    uint32_t params[2] = {(uint32_t)pOutputBuffer, (uint32_t)pOutputSize};
 8005fac:	e9cd 5604 	strd	r5, r6, [sp, #16]
    SE_SysCall(&e_ret_status, SE_CRYPTO_LL_AUTHENTICATE_FW_FINISH_ID, peSE_Status, &params);
 8005fb0:	f000 f85f 	bl	8006072 <SE_SysCall>
    SE_ExitSecureMode(primask_bit);
#ifdef SFU_ISOLATE_SE_WITH_MPU
  }
#endif /* SFU_ISOLATE_SE_WITH_MPU */

  return e_ret_status;
 8005fb4:	9803      	ldr	r0, [sp, #12]
}
 8005fb6:	b006      	add	sp, #24
 8005fb8:	bd70      	pop	{r4, r5, r6, pc}
    SE_EnterSecureMode(&primask_bit);
 8005fba:	a804      	add	r0, sp, #16
 8005fbc:	f000 f846 	bl	800604c <SE_EnterSecureMode>
    e_ret_status = (*SE_CallGatePtr)(SE_CRYPTO_LL_AUTHENTICATE_FW_FINISH_ID, peSE_Status, primask_bit, pOutputBuffer,
 8005fc0:	4621      	mov	r1, r4
 8005fc2:	9a04      	ldr	r2, [sp, #16]
 8005fc4:	4c07      	ldr	r4, [pc, #28]	; (8005fe4 <SE_AuthenticateFW_Finish+0x60>)
 8005fc6:	9600      	str	r6, [sp, #0]
 8005fc8:	462b      	mov	r3, r5
 8005fca:	2009      	movs	r0, #9
 8005fcc:	47a0      	blx	r4
 8005fce:	9003      	str	r0, [sp, #12]
    SE_ExitSecureMode(primask_bit);
 8005fd0:	9804      	ldr	r0, [sp, #16]
 8005fd2:	f000 f840 	bl	8006056 <SE_ExitSecureMode>
 8005fd6:	e7ed      	b.n	8005fb4 <SE_AuthenticateFW_Finish+0x30>
  __IS_SFU_RESERVED();
 8005fd8:	4803      	ldr	r0, [pc, #12]	; (8005fe8 <SE_AuthenticateFW_Finish+0x64>)
 8005fda:	e7ec      	b.n	8005fb6 <SE_AuthenticateFW_Finish+0x32>
 8005fdc:	08006200 	.word	0x08006200
 8005fe0:	0800efff 	.word	0x0800efff
 8005fe4:	08000205 	.word	0x08000205
 8005fe8:	00018799 	.word	0x00018799

08005fec <SE_VerifyHeaderSignature>:
  *        This parameter can be a value of @ref SE_Status_Structure_definition.
  * @param pxFwRawHeader pointer to RawHeader Buffer.
  * @retval SE_ErrorStatus SE_SUCCESS if successful, SE_ERROR otherwise.
  */
SE_ErrorStatus SE_VerifyHeaderSignature(SE_StatusTypeDef *peSE_Status, SE_FwRawHeaderTypeDef *pxFwRawHeader)
{
 8005fec:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005fee:	4604      	mov	r4, r0
 8005ff0:	460d      	mov	r5, r1
 8005ff2:	4672      	mov	r2, lr
  SE_ErrorStatus e_ret_status;
  uint32_t primask_bit; /*!< interruption mask saved when disabling ITs then restore when re-enabling ITs */

  /* Check if the call is coming from SFU code */
  __IS_SFU_RESERVED();
 8005ff4:	4b11      	ldr	r3, [pc, #68]	; (800603c <SE_VerifyHeaderSignature+0x50>)
 8005ff6:	429a      	cmp	r2, r3
 8005ff8:	d31e      	bcc.n	8006038 <SE_VerifyHeaderSignature+0x4c>
 8005ffa:	4672      	mov	r2, lr
 8005ffc:	4b10      	ldr	r3, [pc, #64]	; (8006040 <SE_VerifyHeaderSignature+0x54>)
 8005ffe:	429a      	cmp	r2, r3
 8006000:	d81a      	bhi.n	8006038 <SE_VerifyHeaderSignature+0x4c>

#ifdef SFU_ISOLATE_SE_WITH_MPU
  if (0U != SE_IsUnprivileged())
 8006002:	f000 f82c 	bl	800605e <SE_IsUnprivileged>
 8006006:	b148      	cbz	r0, 800601c <SE_VerifyHeaderSignature+0x30>
  {
    uint32_t params[1] = {(uint32_t)pxFwRawHeader};
    SE_SysCall(&e_ret_status, SE_CRYPTO_HL_AUTHENTICATE_METADATA, peSE_Status, &params);
 8006008:	ab01      	add	r3, sp, #4
 800600a:	4622      	mov	r2, r4
 800600c:	2110      	movs	r1, #16
 800600e:	4668      	mov	r0, sp
    uint32_t params[1] = {(uint32_t)pxFwRawHeader};
 8006010:	9501      	str	r5, [sp, #4]
    SE_SysCall(&e_ret_status, SE_CRYPTO_HL_AUTHENTICATE_METADATA, peSE_Status, &params);
 8006012:	f000 f82e 	bl	8006072 <SE_SysCall>
    SE_ExitSecureMode(primask_bit);
#ifdef SFU_ISOLATE_SE_WITH_MPU
  }
#endif /* SFU_ISOLATE_SE_WITH_MPU */

  return e_ret_status;
 8006016:	9800      	ldr	r0, [sp, #0]

}
 8006018:	b003      	add	sp, #12
 800601a:	bd30      	pop	{r4, r5, pc}
    SE_EnterSecureMode(&primask_bit);
 800601c:	a801      	add	r0, sp, #4
 800601e:	f000 f815 	bl	800604c <SE_EnterSecureMode>
    e_ret_status = (*SE_CallGatePtr)(SE_CRYPTO_HL_AUTHENTICATE_METADATA, peSE_Status, primask_bit, pxFwRawHeader);
 8006022:	4621      	mov	r1, r4
 8006024:	9a01      	ldr	r2, [sp, #4]
 8006026:	4c07      	ldr	r4, [pc, #28]	; (8006044 <SE_VerifyHeaderSignature+0x58>)
 8006028:	462b      	mov	r3, r5
 800602a:	2010      	movs	r0, #16
 800602c:	47a0      	blx	r4
 800602e:	9000      	str	r0, [sp, #0]
    SE_ExitSecureMode(primask_bit);
 8006030:	9801      	ldr	r0, [sp, #4]
 8006032:	f000 f810 	bl	8006056 <SE_ExitSecureMode>
 8006036:	e7ee      	b.n	8006016 <SE_VerifyHeaderSignature+0x2a>
  __IS_SFU_RESERVED();
 8006038:	4803      	ldr	r0, [pc, #12]	; (8006048 <SE_VerifyHeaderSignature+0x5c>)
 800603a:	e7ed      	b.n	8006018 <SE_VerifyHeaderSignature+0x2c>
 800603c:	08006200 	.word	0x08006200
 8006040:	0800efff 	.word	0x0800efff
 8006044:	08000205 	.word	0x08000205
 8006048:	00018799 	.word	0x00018799

0800604c <SE_EnterSecureMode>:
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800604c:	f3ef 8310 	mrs	r3, PRIMASK
  */
void SE_EnterSecureMode(uint32_t *pPrimaskBit)
{
#if !defined(CKS_ENABLED)
  /* Disable interrupts */
  *pPrimaskBit = __get_PRIMASK();
 8006050:	6003      	str	r3, [r0, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8006052:	b672      	cpsid	i
  __disable_irq();
#endif /* !CKS_ENABLED */
}
 8006054:	4770      	bx	lr

08006056 <SE_ExitSecureMode>:
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006056:	f380 8810 	msr	PRIMASK, r0
  __ASM volatile ("cpsie i" : : : "memory");
 800605a:	b662      	cpsie	i
#if !defined(CKS_ENABLED)
  /* Re-enable the interrupts */
  __set_PRIMASK(PrimaskBit);
  __enable_irq();
#endif /* !CKS_ENABLED */
}
 800605c:	4770      	bx	lr

0800605e <SE_IsUnprivileged>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800605e:	f3ef 8305 	mrs	r3, IPSR
  * @param void
  * @retval 0 if we are in privileged mode, 1 if we are in non-privileged mode
  */
uint32_t SE_IsUnprivileged(void)
{
  return ((__get_IPSR() == 0U) && ((__get_CONTROL() & 1U) == 1U));
 8006062:	b923      	cbnz	r3, 800606e <SE_IsUnprivileged+0x10>
  __ASM volatile ("MRS %0, control" : "=r" (result) );
 8006064:	f3ef 8014 	mrs	r0, CONTROL
 8006068:	f000 0001 	and.w	r0, r0, #1
 800606c:	4770      	bx	lr
 800606e:	2000      	movs	r0, #0
}
 8006070:	4770      	bx	lr

08006072 <SE_SysCall>:
  /*
    * You cannot directly change to privileged mode from unprivileged mode without going through an exception,
    * for example an SVC.
    * Handled by @ref MPU_SVC_Handler()  and finally @ref SE_SVC_Handler()
    */
  __ASM __IO("SVC #0");    /* 0 is the hard-coded value to indicate a Secure Engine syscall */
 8006072:	df00      	svc	0
}
 8006074:	4770      	bx	lr
	...

08006078 <SE_SVC_Handler>:
  * @note When this function is entered, privileged mode has already been entered.
  *       When leaving this function, the unprivileged mode is automatically enabled.
  * @note This function is exported to the MPU SVC handler (see @ref MPU_SVC_Handler).
  */
void SE_SVC_Handler(uint32_t *args)
{
 8006078:	b530      	push	{r4, r5, lr}
 800607a:	4601      	mov	r1, r0
 800607c:	b087      	sub	sp, #28
  SE_ErrorStatus ret;
  SE_ErrorStatus *pRet = (SE_ErrorStatus *)(args[0]);
 800607e:	6805      	ldr	r5, [r0, #0]
  uint32_t primask_bit; /*!< interruption mask saved when disabling ITs then restore when re-enabling ITs */

  /* Set the CallGate function pointer */
  SET_CALLGATE();
 8006080:	4c33      	ldr	r4, [pc, #204]	; (8006150 <SE_SVC_Handler+0xd8>)

  /*Enter Secure Mode*/
  SE_EnterSecureMode(&primask_bit);
 8006082:	a805      	add	r0, sp, #20
 8006084:	f7ff ffe2 	bl	800604c <SE_EnterSecureMode>

  switch (args[1]) /* main case for short operations that can be done under interrupts */
 8006088:	6848      	ldr	r0, [r1, #4]
 800608a:	2893      	cmp	r0, #147	; 0x93
 800608c:	d81f      	bhi.n	80060ce <SE_SVC_Handler+0x56>
 800608e:	2891      	cmp	r0, #145	; 0x91
 8006090:	d847      	bhi.n	8006122 <SE_SVC_Handler+0xaa>
 8006092:	2810      	cmp	r0, #16
 8006094:	d80d      	bhi.n	80060b2 <SE_SVC_Handler+0x3a>
 8006096:	2803      	cmp	r0, #3
 8006098:	d921      	bls.n	80060de <SE_SVC_Handler+0x66>
 800609a:	1f03      	subs	r3, r0, #4
 800609c:	2b0c      	cmp	r3, #12
 800609e:	d81e      	bhi.n	80060de <SE_SVC_Handler+0x66>
 80060a0:	e8df f003 	tbb	[pc, r3]
 80060a4:	0d0d490d 	.word	0x0d0d490d
 80060a8:	1d1d0d49 	.word	0x1d1d0d49
 80060ac:	1d1d1d1d 	.word	0x1d1d1d1d
 80060b0:	39          	.byte	0x39
 80060b1:	00          	.byte	0x00
 80060b2:	2820      	cmp	r0, #32
 80060b4:	d003      	beq.n	80060be <SE_SVC_Handler+0x46>
 80060b6:	f1a0 0360 	sub.w	r3, r0, #96	; 0x60
 80060ba:	2b01      	cmp	r3, #1
 80060bc:	d80f      	bhi.n	80060de <SE_SVC_Handler+0x66>
    case SE_SYS_SAVE_DISABLE_IRQ:
    case SE_SYS_RESTORE_ENABLE_IRQ:
      ret = (*SE_CallGatePtr)((SE_FunctionIDTypeDef)args[1],
                              (SE_StatusTypeDef *)args[2],
                              primask_bit,
                              (void *)(((uint32_t *)args[3])[0]),
 80060be:	68cb      	ldr	r3, [r1, #12]
      ret = (*SE_CallGatePtr)((SE_FunctionIDTypeDef)args[1],
 80060c0:	685a      	ldr	r2, [r3, #4]
 80060c2:	9200      	str	r2, [sp, #0]
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	9a05      	ldr	r2, [sp, #20]
 80060c8:	6889      	ldr	r1, [r1, #8]
 80060ca:	47a0      	blx	r4
 80060cc:	e00c      	b.n	80060e8 <SE_SVC_Handler+0x70>
  switch (args[1]) /* main case for short operations that can be done under interrupts */
 80060ce:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
 80060d2:	d006      	beq.n	80060e2 <SE_SVC_Handler+0x6a>
 80060d4:	f5b0 7f88 	cmp.w	r0, #272	; 0x110
 80060d8:	d01d      	beq.n	8006116 <SE_SVC_Handler+0x9e>
 80060da:	2894      	cmp	r0, #148	; 0x94
 80060dc:	d0ef      	beq.n	80060be <SE_SVC_Handler+0x46>
 80060de:	4c1d      	ldr	r4, [pc, #116]	; (8006154 <SE_SVC_Handler+0xdc>)
 80060e0:	e003      	b.n	80060ea <SE_SVC_Handler+0x72>
      ret = (*SE_CallGatePtr)((SE_FunctionIDTypeDef)args[1],
 80060e2:	9a05      	ldr	r2, [sp, #20]
 80060e4:	6889      	ldr	r1, [r1, #8]
 80060e6:	47a0      	blx	r4
                              (void *)(((uint32_t *)args[3])[2]));
      break;
    /* four extra parameters calls */
    case SE_CRYPTO_LL_DECRYPT_APPEND_ID:
    case SE_CRYPTO_LL_AUTHENTICATE_FW_APPEND_ID:
      ret = (*SE_CallGatePtr)((SE_FunctionIDTypeDef)args[1],
 80060e8:	4604      	mov	r4, r0
      ret = SE_ERROR;
#endif /* KMS_ENABLED */
      break;
  }
  /*  Check return value address  */
  if ((SFU_LL_Buffer_in_ram((void *)pRet, sizeof(*pRet)) == SFU_SUCCESS)
 80060ea:	2104      	movs	r1, #4
 80060ec:	4628      	mov	r0, r5
 80060ee:	f002 fc31 	bl	8008954 <SFU_LL_Buffer_in_ram>
 80060f2:	4b19      	ldr	r3, [pc, #100]	; (8006158 <SE_SVC_Handler+0xe0>)
 80060f4:	4298      	cmp	r0, r3
 80060f6:	d108      	bne.n	800610a <SE_SVC_Handler+0x92>
      && (SFU_LL_BufferCheck_in_se_ram((void *)pRet, sizeof(*pRet)) == SFU_ERROR))
 80060f8:	2104      	movs	r1, #4
 80060fa:	4628      	mov	r0, r5
 80060fc:	f002 fc0e 	bl	800891c <SFU_LL_BufferCheck_in_se_ram>
 8006100:	f641 73e1 	movw	r3, #8161	; 0x1fe1
 8006104:	4298      	cmp	r0, r3
  {
    *pRet = ret;
 8006106:	bf08      	it	eq
 8006108:	602c      	streq	r4, [r5, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800610a:	9b05      	ldr	r3, [sp, #20]
 800610c:	f383 8810 	msr	PRIMASK, r3
  __ASM volatile ("cpsie i" : : : "memory");
 8006110:	b662      	cpsie	i
  SE_ExitSecureMode(primask_bit);

  /*
    * End of the privileged operation execution: switching to unprivileged mode automatically.
    */
}
 8006112:	b007      	add	sp, #28
 8006114:	bd30      	pop	{r4, r5, pc}
      ret = (*SE_CallGatePtr)((SE_FunctionIDTypeDef)args[1],
 8006116:	68cb      	ldr	r3, [r1, #12]
 8006118:	9a05      	ldr	r2, [sp, #20]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	6889      	ldr	r1, [r1, #8]
 800611e:	47a0      	blx	r4
 8006120:	e7e2      	b.n	80060e8 <SE_SVC_Handler+0x70>
                              (void *)(((uint32_t *)args[3])[0]),
 8006122:	68cb      	ldr	r3, [r1, #12]
      ret = (*SE_CallGatePtr)((SE_FunctionIDTypeDef)args[1],
 8006124:	689a      	ldr	r2, [r3, #8]
 8006126:	9201      	str	r2, [sp, #4]
 8006128:	685a      	ldr	r2, [r3, #4]
 800612a:	9200      	str	r2, [sp, #0]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	9a05      	ldr	r2, [sp, #20]
 8006130:	6889      	ldr	r1, [r1, #8]
 8006132:	47a0      	blx	r4
 8006134:	e7d8      	b.n	80060e8 <SE_SVC_Handler+0x70>
                              (void *)(((uint32_t *)args[3])[0]),
 8006136:	68cb      	ldr	r3, [r1, #12]
      ret = (*SE_CallGatePtr)((SE_FunctionIDTypeDef)args[1],
 8006138:	68da      	ldr	r2, [r3, #12]
 800613a:	9202      	str	r2, [sp, #8]
 800613c:	689a      	ldr	r2, [r3, #8]
 800613e:	9201      	str	r2, [sp, #4]
 8006140:	685a      	ldr	r2, [r3, #4]
 8006142:	9200      	str	r2, [sp, #0]
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	9a05      	ldr	r2, [sp, #20]
 8006148:	6889      	ldr	r1, [r1, #8]
 800614a:	47a0      	blx	r4
 800614c:	e7cc      	b.n	80060e8 <SE_SVC_Handler+0x70>
 800614e:	bf00      	nop
 8006150:	08000205 	.word	0x08000205
 8006154:	00018799 	.word	0x00018799
 8006158:	00122f11 	.word	0x00122f11

Disassembly of section .text:

08006200 <__do_global_dtors_aux>:
 8006200:	b510      	push	{r4, lr}
 8006202:	4c05      	ldr	r4, [pc, #20]	; (8006218 <__do_global_dtors_aux+0x18>)
 8006204:	7823      	ldrb	r3, [r4, #0]
 8006206:	b933      	cbnz	r3, 8006216 <__do_global_dtors_aux+0x16>
 8006208:	4b04      	ldr	r3, [pc, #16]	; (800621c <__do_global_dtors_aux+0x1c>)
 800620a:	b113      	cbz	r3, 8006212 <__do_global_dtors_aux+0x12>
 800620c:	4804      	ldr	r0, [pc, #16]	; (8006220 <__do_global_dtors_aux+0x20>)
 800620e:	f3af 8000 	nop.w
 8006212:	2301      	movs	r3, #1
 8006214:	7023      	strb	r3, [r4, #0]
 8006216:	bd10      	pop	{r4, pc}
 8006218:	200010d8 	.word	0x200010d8
 800621c:	00000000 	.word	0x00000000
 8006220:	0800b0a8 	.word	0x0800b0a8

08006224 <frame_dummy>:
 8006224:	b508      	push	{r3, lr}
 8006226:	4b03      	ldr	r3, [pc, #12]	; (8006234 <frame_dummy+0x10>)
 8006228:	b11b      	cbz	r3, 8006232 <frame_dummy+0xe>
 800622a:	4903      	ldr	r1, [pc, #12]	; (8006238 <frame_dummy+0x14>)
 800622c:	4803      	ldr	r0, [pc, #12]	; (800623c <frame_dummy+0x18>)
 800622e:	f3af 8000 	nop.w
 8006232:	bd08      	pop	{r3, pc}
 8006234:	00000000 	.word	0x00000000
 8006238:	200010dc 	.word	0x200010dc
 800623c:	0800b0a8 	.word	0x0800b0a8

08006240 <SVC_Handler>:
        .syntax unified
        .weak  MPU_SVC_Handler
        .global SVC_Handler
        .type  SVC_Handler, %function
SVC_Handler:
        MRS r0, PSP
 8006240:	f3ef 8009 	mrs	r0, PSP
        B MPU_SVC_Handler
 8006244:	f002 ba36 	b.w	80086b4 <MPU_SVC_Handler>

08006248 <jump_to_function>:

        .global jump_to_function
jump_to_function:
        LDR SP, [R0]
 8006248:	f8d0 d000 	ldr.w	sp, [r0]
        LDR PC, [R0,#4]
 800624c:	f8d0 f004 	ldr.w	pc, [r0, #4]

08006250 <launch_application>:
* return from exception to application launch function
* R0: application vector address
* R1: exit function address
* push interrupt context R0 R1 R2 R3 R12 LR PC xPSR
*******************************************************/
        MOV R2, #0x01000000 /* xPSR activate Thumb bit */
 8006250:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
        PUSH {R2}
 8006254:	b404      	push	{r2}
        MOV R2, #1
 8006256:	f04f 0201 	mov.w	r2, #1
        BIC R1, R1, R2      /* clear least significant bit of exit function */
 800625a:	ea21 0102 	bic.w	r1, r1, r2
        PUSH {R1}           /* return address = application entry point */
 800625e:	b402      	push	{r1}
        MOV R1, #0          /* clear other context registers */
 8006260:	f04f 0100 	mov.w	r1, #0
        PUSH {R1}
 8006264:	b402      	push	{r1}
        PUSH {R1}
 8006266:	b402      	push	{r1}
        PUSH {R1}
 8006268:	b402      	push	{r1}
        PUSH {R1}
 800626a:	b402      	push	{r1}
        PUSH {R1}
 800626c:	b402      	push	{r1}
        PUSH {R0}           /* R0 = application entry point */
 800626e:	b401      	push	{r0}
        MOV LR, #0xFFFFFFF9 /* set LR to return to thread mode with main stack */
 8006270:	f06f 0e06 	mvn.w	lr, #6
        BX LR               /* return from interrupt */
 8006274:	4770      	bx	lr
	...

08006280 <memchr>:
 8006280:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8006284:	2a10      	cmp	r2, #16
 8006286:	db2b      	blt.n	80062e0 <memchr+0x60>
 8006288:	f010 0f07 	tst.w	r0, #7
 800628c:	d008      	beq.n	80062a0 <memchr+0x20>
 800628e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8006292:	3a01      	subs	r2, #1
 8006294:	428b      	cmp	r3, r1
 8006296:	d02d      	beq.n	80062f4 <memchr+0x74>
 8006298:	f010 0f07 	tst.w	r0, #7
 800629c:	b342      	cbz	r2, 80062f0 <memchr+0x70>
 800629e:	d1f6      	bne.n	800628e <memchr+0xe>
 80062a0:	b4f0      	push	{r4, r5, r6, r7}
 80062a2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80062a6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80062aa:	f022 0407 	bic.w	r4, r2, #7
 80062ae:	f07f 0700 	mvns.w	r7, #0
 80062b2:	2300      	movs	r3, #0
 80062b4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80062b8:	3c08      	subs	r4, #8
 80062ba:	ea85 0501 	eor.w	r5, r5, r1
 80062be:	ea86 0601 	eor.w	r6, r6, r1
 80062c2:	fa85 f547 	uadd8	r5, r5, r7
 80062c6:	faa3 f587 	sel	r5, r3, r7
 80062ca:	fa86 f647 	uadd8	r6, r6, r7
 80062ce:	faa5 f687 	sel	r6, r5, r7
 80062d2:	b98e      	cbnz	r6, 80062f8 <memchr+0x78>
 80062d4:	d1ee      	bne.n	80062b4 <memchr+0x34>
 80062d6:	bcf0      	pop	{r4, r5, r6, r7}
 80062d8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80062dc:	f002 0207 	and.w	r2, r2, #7
 80062e0:	b132      	cbz	r2, 80062f0 <memchr+0x70>
 80062e2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80062e6:	3a01      	subs	r2, #1
 80062e8:	ea83 0301 	eor.w	r3, r3, r1
 80062ec:	b113      	cbz	r3, 80062f4 <memchr+0x74>
 80062ee:	d1f8      	bne.n	80062e2 <memchr+0x62>
 80062f0:	2000      	movs	r0, #0
 80062f2:	4770      	bx	lr
 80062f4:	3801      	subs	r0, #1
 80062f6:	4770      	bx	lr
 80062f8:	2d00      	cmp	r5, #0
 80062fa:	bf06      	itte	eq
 80062fc:	4635      	moveq	r5, r6
 80062fe:	3803      	subeq	r0, #3
 8006300:	3807      	subne	r0, #7
 8006302:	f015 0f01 	tst.w	r5, #1
 8006306:	d107      	bne.n	8006318 <memchr+0x98>
 8006308:	3001      	adds	r0, #1
 800630a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800630e:	bf02      	ittt	eq
 8006310:	3001      	addeq	r0, #1
 8006312:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8006316:	3001      	addeq	r0, #1
 8006318:	bcf0      	pop	{r4, r5, r6, r7}
 800631a:	3801      	subs	r0, #1
 800631c:	4770      	bx	lr
 800631e:	bf00      	nop

08006320 <__aeabi_uldivmod>:
 8006320:	b953      	cbnz	r3, 8006338 <__aeabi_uldivmod+0x18>
 8006322:	b94a      	cbnz	r2, 8006338 <__aeabi_uldivmod+0x18>
 8006324:	2900      	cmp	r1, #0
 8006326:	bf08      	it	eq
 8006328:	2800      	cmpeq	r0, #0
 800632a:	bf1c      	itt	ne
 800632c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8006330:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8006334:	f000 b974 	b.w	8006620 <__aeabi_idiv0>
 8006338:	f1ad 0c08 	sub.w	ip, sp, #8
 800633c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8006340:	f000 f806 	bl	8006350 <__udivmoddi4>
 8006344:	f8dd e004 	ldr.w	lr, [sp, #4]
 8006348:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800634c:	b004      	add	sp, #16
 800634e:	4770      	bx	lr

08006350 <__udivmoddi4>:
 8006350:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006354:	9d08      	ldr	r5, [sp, #32]
 8006356:	4604      	mov	r4, r0
 8006358:	468e      	mov	lr, r1
 800635a:	2b00      	cmp	r3, #0
 800635c:	d14d      	bne.n	80063fa <__udivmoddi4+0xaa>
 800635e:	428a      	cmp	r2, r1
 8006360:	4694      	mov	ip, r2
 8006362:	d969      	bls.n	8006438 <__udivmoddi4+0xe8>
 8006364:	fab2 f282 	clz	r2, r2
 8006368:	b152      	cbz	r2, 8006380 <__udivmoddi4+0x30>
 800636a:	fa01 f302 	lsl.w	r3, r1, r2
 800636e:	f1c2 0120 	rsb	r1, r2, #32
 8006372:	fa20 f101 	lsr.w	r1, r0, r1
 8006376:	fa0c fc02 	lsl.w	ip, ip, r2
 800637a:	ea41 0e03 	orr.w	lr, r1, r3
 800637e:	4094      	lsls	r4, r2
 8006380:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8006384:	0c21      	lsrs	r1, r4, #16
 8006386:	fbbe f6f8 	udiv	r6, lr, r8
 800638a:	fa1f f78c 	uxth.w	r7, ip
 800638e:	fb08 e316 	mls	r3, r8, r6, lr
 8006392:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8006396:	fb06 f107 	mul.w	r1, r6, r7
 800639a:	4299      	cmp	r1, r3
 800639c:	d90a      	bls.n	80063b4 <__udivmoddi4+0x64>
 800639e:	eb1c 0303 	adds.w	r3, ip, r3
 80063a2:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 80063a6:	f080 811f 	bcs.w	80065e8 <__udivmoddi4+0x298>
 80063aa:	4299      	cmp	r1, r3
 80063ac:	f240 811c 	bls.w	80065e8 <__udivmoddi4+0x298>
 80063b0:	3e02      	subs	r6, #2
 80063b2:	4463      	add	r3, ip
 80063b4:	1a5b      	subs	r3, r3, r1
 80063b6:	b2a4      	uxth	r4, r4
 80063b8:	fbb3 f0f8 	udiv	r0, r3, r8
 80063bc:	fb08 3310 	mls	r3, r8, r0, r3
 80063c0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80063c4:	fb00 f707 	mul.w	r7, r0, r7
 80063c8:	42a7      	cmp	r7, r4
 80063ca:	d90a      	bls.n	80063e2 <__udivmoddi4+0x92>
 80063cc:	eb1c 0404 	adds.w	r4, ip, r4
 80063d0:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80063d4:	f080 810a 	bcs.w	80065ec <__udivmoddi4+0x29c>
 80063d8:	42a7      	cmp	r7, r4
 80063da:	f240 8107 	bls.w	80065ec <__udivmoddi4+0x29c>
 80063de:	4464      	add	r4, ip
 80063e0:	3802      	subs	r0, #2
 80063e2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80063e6:	1be4      	subs	r4, r4, r7
 80063e8:	2600      	movs	r6, #0
 80063ea:	b11d      	cbz	r5, 80063f4 <__udivmoddi4+0xa4>
 80063ec:	40d4      	lsrs	r4, r2
 80063ee:	2300      	movs	r3, #0
 80063f0:	e9c5 4300 	strd	r4, r3, [r5]
 80063f4:	4631      	mov	r1, r6
 80063f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80063fa:	428b      	cmp	r3, r1
 80063fc:	d909      	bls.n	8006412 <__udivmoddi4+0xc2>
 80063fe:	2d00      	cmp	r5, #0
 8006400:	f000 80ef 	beq.w	80065e2 <__udivmoddi4+0x292>
 8006404:	2600      	movs	r6, #0
 8006406:	e9c5 0100 	strd	r0, r1, [r5]
 800640a:	4630      	mov	r0, r6
 800640c:	4631      	mov	r1, r6
 800640e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006412:	fab3 f683 	clz	r6, r3
 8006416:	2e00      	cmp	r6, #0
 8006418:	d14a      	bne.n	80064b0 <__udivmoddi4+0x160>
 800641a:	428b      	cmp	r3, r1
 800641c:	d302      	bcc.n	8006424 <__udivmoddi4+0xd4>
 800641e:	4282      	cmp	r2, r0
 8006420:	f200 80f9 	bhi.w	8006616 <__udivmoddi4+0x2c6>
 8006424:	1a84      	subs	r4, r0, r2
 8006426:	eb61 0303 	sbc.w	r3, r1, r3
 800642a:	2001      	movs	r0, #1
 800642c:	469e      	mov	lr, r3
 800642e:	2d00      	cmp	r5, #0
 8006430:	d0e0      	beq.n	80063f4 <__udivmoddi4+0xa4>
 8006432:	e9c5 4e00 	strd	r4, lr, [r5]
 8006436:	e7dd      	b.n	80063f4 <__udivmoddi4+0xa4>
 8006438:	b902      	cbnz	r2, 800643c <__udivmoddi4+0xec>
 800643a:	deff      	udf	#255	; 0xff
 800643c:	fab2 f282 	clz	r2, r2
 8006440:	2a00      	cmp	r2, #0
 8006442:	f040 8092 	bne.w	800656a <__udivmoddi4+0x21a>
 8006446:	eba1 010c 	sub.w	r1, r1, ip
 800644a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800644e:	fa1f fe8c 	uxth.w	lr, ip
 8006452:	2601      	movs	r6, #1
 8006454:	0c20      	lsrs	r0, r4, #16
 8006456:	fbb1 f3f7 	udiv	r3, r1, r7
 800645a:	fb07 1113 	mls	r1, r7, r3, r1
 800645e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8006462:	fb0e f003 	mul.w	r0, lr, r3
 8006466:	4288      	cmp	r0, r1
 8006468:	d908      	bls.n	800647c <__udivmoddi4+0x12c>
 800646a:	eb1c 0101 	adds.w	r1, ip, r1
 800646e:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8006472:	d202      	bcs.n	800647a <__udivmoddi4+0x12a>
 8006474:	4288      	cmp	r0, r1
 8006476:	f200 80cb 	bhi.w	8006610 <__udivmoddi4+0x2c0>
 800647a:	4643      	mov	r3, r8
 800647c:	1a09      	subs	r1, r1, r0
 800647e:	b2a4      	uxth	r4, r4
 8006480:	fbb1 f0f7 	udiv	r0, r1, r7
 8006484:	fb07 1110 	mls	r1, r7, r0, r1
 8006488:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800648c:	fb0e fe00 	mul.w	lr, lr, r0
 8006490:	45a6      	cmp	lr, r4
 8006492:	d908      	bls.n	80064a6 <__udivmoddi4+0x156>
 8006494:	eb1c 0404 	adds.w	r4, ip, r4
 8006498:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 800649c:	d202      	bcs.n	80064a4 <__udivmoddi4+0x154>
 800649e:	45a6      	cmp	lr, r4
 80064a0:	f200 80bb 	bhi.w	800661a <__udivmoddi4+0x2ca>
 80064a4:	4608      	mov	r0, r1
 80064a6:	eba4 040e 	sub.w	r4, r4, lr
 80064aa:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80064ae:	e79c      	b.n	80063ea <__udivmoddi4+0x9a>
 80064b0:	f1c6 0720 	rsb	r7, r6, #32
 80064b4:	40b3      	lsls	r3, r6
 80064b6:	fa22 fc07 	lsr.w	ip, r2, r7
 80064ba:	ea4c 0c03 	orr.w	ip, ip, r3
 80064be:	fa20 f407 	lsr.w	r4, r0, r7
 80064c2:	fa01 f306 	lsl.w	r3, r1, r6
 80064c6:	431c      	orrs	r4, r3
 80064c8:	40f9      	lsrs	r1, r7
 80064ca:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80064ce:	fa00 f306 	lsl.w	r3, r0, r6
 80064d2:	fbb1 f8f9 	udiv	r8, r1, r9
 80064d6:	0c20      	lsrs	r0, r4, #16
 80064d8:	fa1f fe8c 	uxth.w	lr, ip
 80064dc:	fb09 1118 	mls	r1, r9, r8, r1
 80064e0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80064e4:	fb08 f00e 	mul.w	r0, r8, lr
 80064e8:	4288      	cmp	r0, r1
 80064ea:	fa02 f206 	lsl.w	r2, r2, r6
 80064ee:	d90b      	bls.n	8006508 <__udivmoddi4+0x1b8>
 80064f0:	eb1c 0101 	adds.w	r1, ip, r1
 80064f4:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80064f8:	f080 8088 	bcs.w	800660c <__udivmoddi4+0x2bc>
 80064fc:	4288      	cmp	r0, r1
 80064fe:	f240 8085 	bls.w	800660c <__udivmoddi4+0x2bc>
 8006502:	f1a8 0802 	sub.w	r8, r8, #2
 8006506:	4461      	add	r1, ip
 8006508:	1a09      	subs	r1, r1, r0
 800650a:	b2a4      	uxth	r4, r4
 800650c:	fbb1 f0f9 	udiv	r0, r1, r9
 8006510:	fb09 1110 	mls	r1, r9, r0, r1
 8006514:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8006518:	fb00 fe0e 	mul.w	lr, r0, lr
 800651c:	458e      	cmp	lr, r1
 800651e:	d908      	bls.n	8006532 <__udivmoddi4+0x1e2>
 8006520:	eb1c 0101 	adds.w	r1, ip, r1
 8006524:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8006528:	d26c      	bcs.n	8006604 <__udivmoddi4+0x2b4>
 800652a:	458e      	cmp	lr, r1
 800652c:	d96a      	bls.n	8006604 <__udivmoddi4+0x2b4>
 800652e:	3802      	subs	r0, #2
 8006530:	4461      	add	r1, ip
 8006532:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8006536:	fba0 9402 	umull	r9, r4, r0, r2
 800653a:	eba1 010e 	sub.w	r1, r1, lr
 800653e:	42a1      	cmp	r1, r4
 8006540:	46c8      	mov	r8, r9
 8006542:	46a6      	mov	lr, r4
 8006544:	d356      	bcc.n	80065f4 <__udivmoddi4+0x2a4>
 8006546:	d053      	beq.n	80065f0 <__udivmoddi4+0x2a0>
 8006548:	b15d      	cbz	r5, 8006562 <__udivmoddi4+0x212>
 800654a:	ebb3 0208 	subs.w	r2, r3, r8
 800654e:	eb61 010e 	sbc.w	r1, r1, lr
 8006552:	fa01 f707 	lsl.w	r7, r1, r7
 8006556:	fa22 f306 	lsr.w	r3, r2, r6
 800655a:	40f1      	lsrs	r1, r6
 800655c:	431f      	orrs	r7, r3
 800655e:	e9c5 7100 	strd	r7, r1, [r5]
 8006562:	2600      	movs	r6, #0
 8006564:	4631      	mov	r1, r6
 8006566:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800656a:	f1c2 0320 	rsb	r3, r2, #32
 800656e:	40d8      	lsrs	r0, r3
 8006570:	fa0c fc02 	lsl.w	ip, ip, r2
 8006574:	fa21 f303 	lsr.w	r3, r1, r3
 8006578:	4091      	lsls	r1, r2
 800657a:	4301      	orrs	r1, r0
 800657c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8006580:	fa1f fe8c 	uxth.w	lr, ip
 8006584:	fbb3 f0f7 	udiv	r0, r3, r7
 8006588:	fb07 3610 	mls	r6, r7, r0, r3
 800658c:	0c0b      	lsrs	r3, r1, #16
 800658e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8006592:	fb00 f60e 	mul.w	r6, r0, lr
 8006596:	429e      	cmp	r6, r3
 8006598:	fa04 f402 	lsl.w	r4, r4, r2
 800659c:	d908      	bls.n	80065b0 <__udivmoddi4+0x260>
 800659e:	eb1c 0303 	adds.w	r3, ip, r3
 80065a2:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 80065a6:	d22f      	bcs.n	8006608 <__udivmoddi4+0x2b8>
 80065a8:	429e      	cmp	r6, r3
 80065aa:	d92d      	bls.n	8006608 <__udivmoddi4+0x2b8>
 80065ac:	3802      	subs	r0, #2
 80065ae:	4463      	add	r3, ip
 80065b0:	1b9b      	subs	r3, r3, r6
 80065b2:	b289      	uxth	r1, r1
 80065b4:	fbb3 f6f7 	udiv	r6, r3, r7
 80065b8:	fb07 3316 	mls	r3, r7, r6, r3
 80065bc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80065c0:	fb06 f30e 	mul.w	r3, r6, lr
 80065c4:	428b      	cmp	r3, r1
 80065c6:	d908      	bls.n	80065da <__udivmoddi4+0x28a>
 80065c8:	eb1c 0101 	adds.w	r1, ip, r1
 80065cc:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 80065d0:	d216      	bcs.n	8006600 <__udivmoddi4+0x2b0>
 80065d2:	428b      	cmp	r3, r1
 80065d4:	d914      	bls.n	8006600 <__udivmoddi4+0x2b0>
 80065d6:	3e02      	subs	r6, #2
 80065d8:	4461      	add	r1, ip
 80065da:	1ac9      	subs	r1, r1, r3
 80065dc:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80065e0:	e738      	b.n	8006454 <__udivmoddi4+0x104>
 80065e2:	462e      	mov	r6, r5
 80065e4:	4628      	mov	r0, r5
 80065e6:	e705      	b.n	80063f4 <__udivmoddi4+0xa4>
 80065e8:	4606      	mov	r6, r0
 80065ea:	e6e3      	b.n	80063b4 <__udivmoddi4+0x64>
 80065ec:	4618      	mov	r0, r3
 80065ee:	e6f8      	b.n	80063e2 <__udivmoddi4+0x92>
 80065f0:	454b      	cmp	r3, r9
 80065f2:	d2a9      	bcs.n	8006548 <__udivmoddi4+0x1f8>
 80065f4:	ebb9 0802 	subs.w	r8, r9, r2
 80065f8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80065fc:	3801      	subs	r0, #1
 80065fe:	e7a3      	b.n	8006548 <__udivmoddi4+0x1f8>
 8006600:	4646      	mov	r6, r8
 8006602:	e7ea      	b.n	80065da <__udivmoddi4+0x28a>
 8006604:	4620      	mov	r0, r4
 8006606:	e794      	b.n	8006532 <__udivmoddi4+0x1e2>
 8006608:	4640      	mov	r0, r8
 800660a:	e7d1      	b.n	80065b0 <__udivmoddi4+0x260>
 800660c:	46d0      	mov	r8, sl
 800660e:	e77b      	b.n	8006508 <__udivmoddi4+0x1b8>
 8006610:	3b02      	subs	r3, #2
 8006612:	4461      	add	r1, ip
 8006614:	e732      	b.n	800647c <__udivmoddi4+0x12c>
 8006616:	4630      	mov	r0, r6
 8006618:	e709      	b.n	800642e <__udivmoddi4+0xde>
 800661a:	4464      	add	r4, ip
 800661c:	3802      	subs	r0, #2
 800661e:	e742      	b.n	80064a6 <__udivmoddi4+0x156>

08006620 <__aeabi_idiv0>:
 8006620:	4770      	bx	lr
 8006622:	bf00      	nop

08006624 <main>:
  * @brief  main function
  * @param  None
  * @retval int
  */
int main(void)
{
 8006624:	b510      	push	{r4, lr}
 8006626:	b094      	sub	sp, #80	; 0x50

  /* MCU Configuration--------------------------------------------------------*/
  /* This part is NOT secure (security mechanisms NOT enabled yet)            */
  /* Reset of all peripherals, Initializes the Flash interface and the Systick*/
  (void) HAL_Init();
 8006628:	f002 fc5c 	bl	8008ee4 <HAL_Init>
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800662c:	2230      	movs	r2, #48	; 0x30
 800662e:	2100      	movs	r1, #0
 8006630:	a808      	add	r0, sp, #32
 8006632:	f003 fc5f 	bl	8009ef4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8006636:	2214      	movs	r2, #20
 8006638:	2100      	movs	r1, #0
 800663a:	a802      	add	r0, sp, #8
 800663c:	f003 fc5a 	bl	8009ef4 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8006640:	2200      	movs	r2, #0
 8006642:	4b1d      	ldr	r3, [pc, #116]	; (80066b8 <main+0x94>)
 8006644:	9200      	str	r2, [sp, #0]
 8006646:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8006648:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 800664c:	6419      	str	r1, [r3, #64]	; 0x40
 800664e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8006650:	491a      	ldr	r1, [pc, #104]	; (80066bc <main+0x98>)
  __HAL_RCC_PWR_CLK_ENABLE();
 8006652:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006656:	9300      	str	r3, [sp, #0]
 8006658:	9b00      	ldr	r3, [sp, #0]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 800665a:	9201      	str	r2, [sp, #4]
 800665c:	680b      	ldr	r3, [r1, #0]
 800665e:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8006662:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006666:	600b      	str	r3, [r1, #0]
 8006668:	680b      	ldr	r3, [r1, #0]
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800666a:	920d      	str	r2, [sp, #52]	; 0x34
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 800666c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8006670:	9301      	str	r3, [sp, #4]
 8006672:	9b01      	ldr	r3, [sp, #4]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8006674:	2302      	movs	r3, #2
 8006676:	9307      	str	r3, [sp, #28]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8006678:	2001      	movs	r0, #1
 800667a:	2310      	movs	r3, #16
 800667c:	e9cd 030a 	strd	r0, r3, [sp, #40]	; 0x28
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8006680:	a807      	add	r0, sp, #28
 8006682:	f003 f8c7 	bl	8009814 <HAL_RCC_OscConfig>
 8006686:	4601      	mov	r1, r0
 8006688:	b108      	cbz	r0, 800668e <main+0x6a>
  __ASM volatile ("cpsid i" : : : "memory");
 800668a:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800668c:	e7fe      	b.n	800668c <main+0x68>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800668e:	230f      	movs	r3, #15
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8006690:	e9cd 3002 	strd	r3, r0, [sp, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8006694:	e9cd 0004 	strd	r0, r0, [sp, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8006698:	9006      	str	r0, [sp, #24]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800669a:	a802      	add	r0, sp, #8
 800669c:	f002 fffe 	bl	800969c <HAL_RCC_ClockConfig>
 80066a0:	4604      	mov	r4, r0
 80066a2:	b108      	cbz	r0, 80066a8 <main+0x84>
 80066a4:	b672      	cpsid	i
  while (1)
 80066a6:	e7fe      	b.n	80066a6 <main+0x82>
  (void)SFU_BOOT_RunSecureBootService(); /* no need to take care of the returned value as we reboot in all cases */
 80066a8:	f000 fba8 	bl	8006dfc <SFU_BOOT_RunSecureBootService>
  SFU_BOOT_ForceReboot();
 80066ac:	f000 fa94 	bl	8006bd8 <SFU_BOOT_ForceReboot>
}
 80066b0:	4620      	mov	r0, r4
 80066b2:	b014      	add	sp, #80	; 0x50
 80066b4:	bd10      	pop	{r4, pc}
 80066b6:	bf00      	nop
 80066b8:	40023800 	.word	0x40023800
 80066bc:	40007000 	.word	0x40007000

080066c0 <HAL_MspInit>:
/* Functions Definition ------------------------------------------------------*/
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80066c0:	b513      	push	{r0, r1, r4, lr}
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80066c2:	4b18      	ldr	r3, [pc, #96]	; (8006724 <HAL_MspInit+0x64>)
 80066c4:	2400      	movs	r4, #0
 80066c6:	9401      	str	r4, [sp, #4]
 80066c8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80066ca:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80066ce:	645a      	str	r2, [r3, #68]	; 0x44
 80066d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80066d2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80066d6:	9301      	str	r3, [sp, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80066d8:	2003      	movs	r0, #3
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80066da:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80066dc:	f002 fc4a 	bl	8008f74 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0U, 0U);
 80066e0:	4622      	mov	r2, r4
 80066e2:	4621      	mov	r1, r4
 80066e4:	f06f 000b 	mvn.w	r0, #11
 80066e8:	f002 fc56 	bl	8008f98 <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0U, 0U);
 80066ec:	4622      	mov	r2, r4
 80066ee:	4621      	mov	r1, r4
 80066f0:	f06f 000a 	mvn.w	r0, #10
 80066f4:	f002 fc50 	bl	8008f98 <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0U, 0U);
 80066f8:	4622      	mov	r2, r4
 80066fa:	4621      	mov	r1, r4
 80066fc:	f06f 0009 	mvn.w	r0, #9
 8006700:	f002 fc4a 	bl	8008f98 <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0U, 0U);
 8006704:	4622      	mov	r2, r4
 8006706:	4621      	mov	r1, r4
 8006708:	f06f 0003 	mvn.w	r0, #3
 800670c:	f002 fc44 	bl	8008f98 <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0U, 0U);
 8006710:	4622      	mov	r2, r4
 8006712:	4621      	mov	r1, r4
 8006714:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff

}
 8006718:	b002      	add	sp, #8
 800671a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  HAL_NVIC_SetPriority(SysTick_IRQn, 0U, 0U);
 800671e:	f002 bc3b 	b.w	8008f98 <HAL_NVIC_SetPriority>
 8006722:	bf00      	nop
 8006724:	40023800 	.word	0x40023800

08006728 <HAL_UART_MspInit>:
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
  SFU_LL_UART_MspInit(huart);
 8006728:	f002 b8b2 	b.w	8008890 <SFU_LL_UART_MspInit>

0800672c <BusFault_Handler>:
  * @retval None
  */
void BusFault_Handler(void)
{
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 800672c:	e7fe      	b.n	800672c <BusFault_Handler>

0800672e <UsageFault_Handler>:
  * @retval None
  */
void UsageFault_Handler(void)
{
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 800672e:	e7fe      	b.n	800672e <UsageFault_Handler>

08006730 <DebugMon_Handler>:
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
}
 8006730:	4770      	bx	lr

08006732 <PendSV_Handler>:
 8006732:	4770      	bx	lr

08006734 <SysTick_Handler>:
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
  HAL_IncTick();
 8006734:	f002 bbf0 	b.w	8008f18 <HAL_IncTick>

08006738 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

int _read (int file, char *ptr, int len)
{
 8006738:	b570      	push	{r4, r5, r6, lr}
 800673a:	460d      	mov	r5, r1
 800673c:	4614      	mov	r4, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800673e:	460e      	mov	r6, r1
 8006740:	1b73      	subs	r3, r6, r5
 8006742:	429c      	cmp	r4, r3
 8006744:	dc01      	bgt.n	800674a <_read+0x12>
	{
		*ptr++ = __io_getchar();
	}

return len;
}
 8006746:	4620      	mov	r0, r4
 8006748:	bd70      	pop	{r4, r5, r6, pc}
		*ptr++ = __io_getchar();
 800674a:	f3af 8000 	nop.w
 800674e:	f806 0b01 	strb.w	r0, [r6], #1
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006752:	e7f5      	b.n	8006740 <_read+0x8>

08006754 <_write>:

int _write(int file, char *ptr, int len)
{
 8006754:	b570      	push	{r4, r5, r6, lr}
 8006756:	460d      	mov	r5, r1
 8006758:	4614      	mov	r4, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800675a:	460e      	mov	r6, r1
 800675c:	1b73      	subs	r3, r6, r5
 800675e:	429c      	cmp	r4, r3
 8006760:	dc01      	bgt.n	8006766 <_write+0x12>
	{
		__io_putchar(*ptr++);
	}
	return len;
}
 8006762:	4620      	mov	r0, r4
 8006764:	bd70      	pop	{r4, r5, r6, pc}
		__io_putchar(*ptr++);
 8006766:	f816 0b01 	ldrb.w	r0, [r6], #1
 800676a:	f000 fdd8 	bl	800731e <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800676e:	e7f5      	b.n	800675c <_write+0x8>

08006770 <_sbrk>:
{
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8006770:	4a0a      	ldr	r2, [pc, #40]	; (800679c <_sbrk+0x2c>)
 8006772:	6811      	ldr	r1, [r2, #0]
{
 8006774:	b508      	push	{r3, lr}
 8006776:	4603      	mov	r3, r0
	if (heap_end == 0)
 8006778:	b909      	cbnz	r1, 800677e <_sbrk+0xe>
		heap_end = &end;
 800677a:	4909      	ldr	r1, [pc, #36]	; (80067a0 <_sbrk+0x30>)
 800677c:	6011      	str	r1, [r2, #0]

	prev_heap_end = heap_end;
 800677e:	6810      	ldr	r0, [r2, #0]
	if (heap_end + incr > stack_ptr)
 8006780:	4669      	mov	r1, sp
 8006782:	4403      	add	r3, r0
 8006784:	428b      	cmp	r3, r1
 8006786:	d906      	bls.n	8006796 <_sbrk+0x26>
	{
//		write(1, "Heap and stack collision\n", 25);
//		abort();
		errno = ENOMEM;
 8006788:	f003 fb6c 	bl	8009e64 <__errno>
 800678c:	230c      	movs	r3, #12
 800678e:	6003      	str	r3, [r0, #0]
		return (caddr_t) -1;
 8006790:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
	}

	heap_end += incr;

	return (caddr_t) prev_heap_end;
}
 8006794:	bd08      	pop	{r3, pc}
	heap_end += incr;
 8006796:	6013      	str	r3, [r2, #0]
	return (caddr_t) prev_heap_end;
 8006798:	e7fc      	b.n	8006794 <_sbrk+0x24>
 800679a:	bf00      	nop
 800679c:	200010f4 	.word	0x200010f4
 80067a0:	200019a8 	.word	0x200019a8

080067a4 <_close>:

int _close(int file)
{
	return -1;
}
 80067a4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80067a8:	4770      	bx	lr

080067aa <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 80067aa:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80067ae:	604b      	str	r3, [r1, #4]
	return 0;
}
 80067b0:	2000      	movs	r0, #0
 80067b2:	4770      	bx	lr

080067b4 <_isatty>:

int _isatty(int file)
{
	return 1;
}
 80067b4:	2001      	movs	r0, #1
 80067b6:	4770      	bx	lr

080067b8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 80067b8:	2000      	movs	r0, #0
 80067ba:	4770      	bx	lr

080067bc <SFU_BOOT_SM_HandleCriticalFailure>:
  * @param  None
  * @note   After a Critical Failure a Reboot will be called.
  * @retval None
  */
static void SFU_BOOT_SM_HandleCriticalFailure(void)
{
 80067bc:	b508      	push	{r3, lr}
  TRACE("\r\n= [SBOOT] STATE: HANDLE CRITICAL FAILURE");
 80067be:	4805      	ldr	r0, [pc, #20]	; (80067d4 <SFU_BOOT_SM_HandleCriticalFailure+0x18>)
 80067c0:	f003 fba0 	bl	8009f04 <iprintf>

  /* It's not possible to continue without compromising the stability or the security of the solution.
     The State Machine needs to be aborted and a Reset must be triggered */
  SFU_SET_SM_IF_CURR_STATE(SFU_ERROR, SFU_STATE_REBOOT_STATE_MACHINE, SFU_STATE_REBOOT_STATE_MACHINE);
 80067c4:	4b04      	ldr	r3, [pc, #16]	; (80067d8 <SFU_BOOT_SM_HandleCriticalFailure+0x1c>)
 80067c6:	785a      	ldrb	r2, [r3, #1]
 80067c8:	b2d2      	uxtb	r2, r2
 80067ca:	701a      	strb	r2, [r3, #0]
 80067cc:	220a      	movs	r2, #10
 80067ce:	705a      	strb	r2, [r3, #1]
}
 80067d0:	bd08      	pop	{r3, pc}
 80067d2:	bf00      	nop
 80067d4:	0800b264 	.word	0x0800b264
 80067d8:	200010fc 	.word	0x200010fc

080067dc <SFU_BOOT_SM_RollbackInstallPrevUserFw>:
{
 80067dc:	b508      	push	{r3, lr}
  TRACE("\r\n= [SBOOT] STATE: ROLLBACK NOT SUPPORTED");
 80067de:	4805      	ldr	r0, [pc, #20]	; (80067f4 <SFU_BOOT_SM_RollbackInstallPrevUserFw+0x18>)
 80067e0:	f003 fb90 	bl	8009f04 <iprintf>
  SFU_SET_SM_CURR_STATE(SFU_STATE_HANDLE_CRITICAL_FAILURE);
 80067e4:	4b04      	ldr	r3, [pc, #16]	; (80067f8 <SFU_BOOT_SM_RollbackInstallPrevUserFw+0x1c>)
 80067e6:	785a      	ldrb	r2, [r3, #1]
 80067e8:	b2d2      	uxtb	r2, r2
 80067ea:	701a      	strb	r2, [r3, #0]
 80067ec:	2209      	movs	r2, #9
 80067ee:	705a      	strb	r2, [r3, #1]
}
 80067f0:	bd08      	pop	{r3, pc}
 80067f2:	bf00      	nop
 80067f4:	0800b28f 	.word	0x0800b28f
 80067f8:	200010fc 	.word	0x200010fc

080067fc <SFU_BOOT_SM_VerifyUserFwSignature>:
{
 80067fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  FLOW_CONTROL_CHECK(uFlowProtectValue, FLOW_CTRL_RUNTIME_PROTECT);
 80067fe:	4f35      	ldr	r7, [pc, #212]	; (80068d4 <SFU_BOOT_SM_VerifyUserFwSignature+0xd8>)
  TRACE("\r\n= [SBOOT] STATE: VERIFY USER FW SIGNATURE");
 8006800:	4835      	ldr	r0, [pc, #212]	; (80068d8 <SFU_BOOT_SM_VerifyUserFwSignature+0xdc>)
 8006802:	f003 fb7f 	bl	8009f04 <iprintf>
  FLOW_CONTROL_CHECK(uFlowProtectValue, FLOW_CTRL_RUNTIME_PROTECT);
 8006806:	683a      	ldr	r2, [r7, #0]
 8006808:	f243 03f1 	movw	r3, #12529	; 0x30f1
 800680c:	429a      	cmp	r2, r3
 800680e:	d001      	beq.n	8006814 <SFU_BOOT_SM_VerifyUserFwSignature+0x18>
 8006810:	f000 fdc4 	bl	800739c <SFU_EXCPT_Security_Error>
  FLOW_CONTROL_INIT(uFlowProtectValue, FLOW_CTRL_INIT_VALUE);
 8006814:	f245 7376 	movw	r3, #22390	; 0x5776
 8006818:	603b      	str	r3, [r7, #0]
  e_ret_status = SFU_LL_SECU_CheckApplyStaticProtections();
 800681a:	f002 fa1b 	bl	8008c54 <SFU_LL_SECU_CheckApplyStaticProtections>
  FLOW_CONTROL_CHECK(uFlowProtectValue, FLOW_CTRL_STATIC_PROTECT);
 800681e:	683a      	ldr	r2, [r7, #0]
 8006820:	f243 03f1 	movw	r3, #12529	; 0x30f1
 8006824:	429a      	cmp	r2, r3
  e_ret_status = SFU_LL_SECU_CheckApplyStaticProtections();
 8006826:	4604      	mov	r4, r0
  FLOW_CONTROL_CHECK(uFlowProtectValue, FLOW_CTRL_STATIC_PROTECT);
 8006828:	d001      	beq.n	800682e <SFU_BOOT_SM_VerifyUserFwSignature+0x32>
 800682a:	f000 fdb7 	bl	800739c <SFU_EXCPT_Security_Error>
  if (e_ret_status == SFU_SUCCESS)
 800682e:	4b2b      	ldr	r3, [pc, #172]	; (80068dc <SFU_BOOT_SM_VerifyUserFwSignature+0xe0>)
 8006830:	429c      	cmp	r4, r3
 8006832:	d103      	bne.n	800683c <SFU_BOOT_SM_VerifyUserFwSignature+0x40>
    e_ret_status = SFU_LL_SECU_CheckApplyRuntimeProtections(SFU_THIRD_CONFIGURATION);
 8006834:	2002      	movs	r0, #2
 8006836:	f002 fa39 	bl	8008cac <SFU_LL_SECU_CheckApplyRuntimeProtections>
 800683a:	4604      	mov	r4, r0
  FLOW_CONTROL_CHECK(uFlowProtectValue, FLOW_CTRL_RUNTIME_PROTECT);
 800683c:	683a      	ldr	r2, [r7, #0]
 800683e:	f243 03f1 	movw	r3, #12529	; 0x30f1
 8006842:	429a      	cmp	r2, r3
 8006844:	d001      	beq.n	800684a <SFU_BOOT_SM_VerifyUserFwSignature+0x4e>
 8006846:	f000 fda9 	bl	800739c <SFU_EXCPT_Security_Error>
  if (e_ret_status != SFU_SUCCESS)
 800684a:	4b24      	ldr	r3, [pc, #144]	; (80068dc <SFU_BOOT_SM_VerifyUserFwSignature+0xe0>)
 800684c:	4e24      	ldr	r6, [pc, #144]	; (80068e0 <SFU_BOOT_SM_VerifyUserFwSignature+0xe4>)
 800684e:	429c      	cmp	r4, r3
 8006850:	d015      	beq.n	800687e <SFU_BOOT_SM_VerifyUserFwSignature+0x82>
    SFU_SET_SM_CURR_STATE(SFU_STATE_HANDLE_CRITICAL_FAILURE);
 8006852:	7873      	ldrb	r3, [r6, #1]
 8006854:	b2db      	uxtb	r3, r3
 8006856:	7033      	strb	r3, [r6, #0]
  SFU_SET_SM_IF_CURR_STATE(e_ret_status, SFU_STATE_EXECUTE_USER_FW, SFU_STATE_HANDLE_CRITICAL_FAILURE);
 8006858:	2309      	movs	r3, #9
 800685a:	e038      	b.n	80068ce <SFU_BOOT_SM_VerifyUserFwSignature+0xd2>
          FLOW_CONTROL_CHECK(uFlowCryptoValue, FLOW_CTRL_INTEGRITY);
 800685c:	687a      	ldr	r2, [r7, #4]
 800685e:	f248 435a 	movw	r3, #33882	; 0x845a
 8006862:	429a      	cmp	r2, r3
 8006864:	d02c      	beq.n	80068c0 <SFU_BOOT_SM_VerifyUserFwSignature+0xc4>
 8006866:	f000 fd99 	bl	800739c <SFU_EXCPT_Security_Error>
 800686a:	e029      	b.n	80068c0 <SFU_BOOT_SM_VerifyUserFwSignature+0xc4>
        if (SFU_IMG_VerifyEmptyActiveSlot(SLOT_ACTIVE_1 + i) != SFU_SUCCESS)
 800686c:	2001      	movs	r0, #1
 800686e:	f001 f80f 	bl	8007890 <SFU_IMG_VerifyEmptyActiveSlot>
 8006872:	42a0      	cmp	r0, r4
 8006874:	d024      	beq.n	80068c0 <SFU_BOOT_SM_VerifyUserFwSignature+0xc4>
          (void)SFU_IMG_InvalidateCurrentFirmware(SLOT_ACTIVE_1 + i); /* If this fails we continue anyhow */
 8006876:	2001      	movs	r0, #1
 8006878:	f000 ffd2 	bl	8007820 <SFU_IMG_InvalidateCurrentFirmware>
 800687c:	e020      	b.n	80068c0 <SFU_BOOT_SM_VerifyUserFwSignature+0xc4>
    if (SlotStartAdd[SLOT_ACTIVE_1 + i] != 0U)
 800687e:	4b19      	ldr	r3, [pc, #100]	; (80068e4 <SFU_BOOT_SM_VerifyUserFwSignature+0xe8>)
 8006880:	685b      	ldr	r3, [r3, #4]
 8006882:	b1eb      	cbz	r3, 80068c0 <SFU_BOOT_SM_VerifyUserFwSignature+0xc4>
      if (SFU_SUCCESS == SFU_IMG_DetectFW(SLOT_ACTIVE_1 + i))
 8006884:	2001      	movs	r0, #1
 8006886:	f001 f8f5 	bl	8007a74 <SFU_IMG_DetectFW>
 800688a:	42a0      	cmp	r0, r4
 800688c:	d1ee      	bne.n	800686c <SFU_BOOT_SM_VerifyUserFwSignature+0x70>
        FLOW_CONTROL_INIT(uFlowCryptoValue, FLOW_CTRL_INIT_VALUE);
 800688e:	f245 7376 	movw	r3, #22390	; 0x5776
        e_ret_status = SFU_IMG_VerifyActiveImgMetadata(SLOT_ACTIVE_1 + i);
 8006892:	2001      	movs	r0, #1
        FLOW_CONTROL_INIT(uFlowCryptoValue, FLOW_CTRL_INIT_VALUE);
 8006894:	607b      	str	r3, [r7, #4]
        e_ret_status = SFU_IMG_VerifyActiveImgMetadata(SLOT_ACTIVE_1 + i);
 8006896:	f001 f8d7 	bl	8007a48 <SFU_IMG_VerifyActiveImgMetadata>
        if (SFU_SUCCESS == e_ret_status)
 800689a:	42a0      	cmp	r0, r4
        e_ret_status = SFU_IMG_VerifyActiveImgMetadata(SLOT_ACTIVE_1 + i);
 800689c:	4605      	mov	r5, r0
        if (SFU_SUCCESS == e_ret_status)
 800689e:	d10b      	bne.n	80068b8 <SFU_BOOT_SM_VerifyUserFwSignature+0xbc>
          e_ret_status = SFU_IMG_VerifyActiveImg(SLOT_ACTIVE_1 + i);
 80068a0:	2001      	movs	r0, #1
 80068a2:	f000 ffd1 	bl	8007848 <SFU_IMG_VerifyActiveImg>
          if (SFU_SUCCESS == e_ret_status)
 80068a6:	42a0      	cmp	r0, r4
          e_ret_status = SFU_IMG_VerifyActiveImg(SLOT_ACTIVE_1 + i);
 80068a8:	4605      	mov	r5, r0
          if (SFU_SUCCESS == e_ret_status)
 80068aa:	d105      	bne.n	80068b8 <SFU_BOOT_SM_VerifyUserFwSignature+0xbc>
            e_ret_status = SFU_IMG_VerifyActiveSlot(SLOT_ACTIVE_1 + i);
 80068ac:	2001      	movs	r0, #1
 80068ae:	f000 ffdb 	bl	8007868 <SFU_IMG_VerifyActiveSlot>
        if (SFU_SUCCESS != e_ret_status)
 80068b2:	42a0      	cmp	r0, r4
            e_ret_status = SFU_IMG_VerifyActiveSlot(SLOT_ACTIVE_1 + i);
 80068b4:	4605      	mov	r5, r0
        if (SFU_SUCCESS != e_ret_status)
 80068b6:	d0d1      	beq.n	800685c <SFU_BOOT_SM_VerifyUserFwSignature+0x60>
          (void)SFU_IMG_InvalidateCurrentFirmware(SLOT_ACTIVE_1 + i); /* If this fails we continue anyhow */
 80068b8:	2001      	movs	r0, #1
 80068ba:	f000 ffb1 	bl	8007820 <SFU_IMG_InvalidateCurrentFirmware>
 80068be:	462c      	mov	r4, r5
  SFU_SET_SM_IF_CURR_STATE(e_ret_status, SFU_STATE_EXECUTE_USER_FW, SFU_STATE_HANDLE_CRITICAL_FAILURE);
 80068c0:	7873      	ldrb	r3, [r6, #1]
 80068c2:	b2db      	uxtb	r3, r3
 80068c4:	7033      	strb	r3, [r6, #0]
 80068c6:	4b05      	ldr	r3, [pc, #20]	; (80068dc <SFU_BOOT_SM_VerifyUserFwSignature+0xe0>)
 80068c8:	429c      	cmp	r4, r3
 80068ca:	d1c5      	bne.n	8006858 <SFU_BOOT_SM_VerifyUserFwSignature+0x5c>
 80068cc:	2306      	movs	r3, #6
 80068ce:	7073      	strb	r3, [r6, #1]
}
 80068d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80068d2:	bf00      	nop
 80068d4:	20001000 	.word	0x20001000
 80068d8:	0800b2b9 	.word	0x0800b2b9
 80068dc:	00122f11 	.word	0x00122f11
 80068e0:	200010fc 	.word	0x200010fc
 80068e4:	0800b150 	.word	0x0800b150

080068e8 <SFU_BOOT_SM_CheckUserFwStatus>:
{
 80068e8:	b510      	push	{r4, lr}
  if (initialDeviceStatusCheck == 1U)
 80068ea:	4c42      	ldr	r4, [pc, #264]	; (80069f4 <SFU_BOOT_SM_CheckUserFwStatus+0x10c>)
 80068ec:	78a3      	ldrb	r3, [r4, #2]
 80068ee:	2b01      	cmp	r3, #1
 80068f0:	d102      	bne.n	80068f8 <SFU_BOOT_SM_CheckUserFwStatus+0x10>
    TRACE("\r\n= [SBOOT] STATE: CHECK USER FW STATUS");
 80068f2:	4841      	ldr	r0, [pc, #260]	; (80069f8 <SFU_BOOT_SM_CheckUserFwStatus+0x110>)
 80068f4:	f003 fb06 	bl	8009f04 <iprintf>
  e_PendingInstallStatus = SFU_IMG_CheckPendingInstallation(&m_DwlSlotToInstall, &m_ActiveSlotToResume,
 80068f8:	4a40      	ldr	r2, [pc, #256]	; (80069fc <SFU_BOOT_SM_CheckUserFwStatus+0x114>)
 80068fa:	1d11      	adds	r1, r2, #4
 80068fc:	f102 0008 	add.w	r0, r2, #8
 8006900:	f001 fba6 	bl	8008050 <SFU_IMG_CheckPendingInstallation>
  switch (e_PendingInstallStatus)
 8006904:	2803      	cmp	r0, #3
 8006906:	d83a      	bhi.n	800697e <SFU_BOOT_SM_CheckUserFwStatus+0x96>
 8006908:	e8df f000 	tbb	[pc, r0]
 800690c:	02240f1a 	.word	0x02240f1a
      m_DwlSlotToInstall = m_ActiveSlotToRollback - SLOT_ACTIVE_1 + SLOT_DWL_1;
 8006910:	6862      	ldr	r2, [r4, #4]
      TRACE("\r\n\t  Installation not validated: rollback procedure initiated (SLOT_ACTIVE_%d / SLOT_DWL_%d)",
 8006912:	483b      	ldr	r0, [pc, #236]	; (8006a00 <SFU_BOOT_SM_CheckUserFwStatus+0x118>)
      m_DwlSlotToInstall = m_ActiveSlotToRollback - SLOT_ACTIVE_1 + SLOT_DWL_1;
 8006914:	1cd3      	adds	r3, r2, #3
      TRACE("\r\n\t  Installation not validated: rollback procedure initiated (SLOT_ACTIVE_%d / SLOT_DWL_%d)",
 8006916:	4611      	mov	r1, r2
      m_DwlSlotToInstall = m_ActiveSlotToRollback - SLOT_ACTIVE_1 + SLOT_DWL_1;
 8006918:	60e3      	str	r3, [r4, #12]
      TRACE("\r\n\t  Installation not validated: rollback procedure initiated (SLOT_ACTIVE_%d / SLOT_DWL_%d)",
 800691a:	f003 faf3 	bl	8009f04 <iprintf>
      SFU_SET_SM_CURR_STATE(SFU_STATE_ROLLBACK_PREV_USER_FW);
 800691e:	7863      	ldrb	r3, [r4, #1]
 8006920:	b2db      	uxtb	r3, r3
 8006922:	7023      	strb	r3, [r4, #0]
 8006924:	2308      	movs	r3, #8
      SFU_SET_SM_CURR_STATE(SFU_STATE_HANDLE_CRITICAL_FAILURE);
 8006926:	7063      	strb	r3, [r4, #1]
}
 8006928:	e028      	b.n	800697c <SFU_BOOT_SM_CheckUserFwStatus+0x94>
      TRACE("\r\n\t  Installation Failed: resume installation procedure initiated (SLOT_ACTIVE_%d / SLOT_DWL_%d)",
 800692a:	68e2      	ldr	r2, [r4, #12]
 800692c:	68a1      	ldr	r1, [r4, #8]
 800692e:	4835      	ldr	r0, [pc, #212]	; (8006a04 <SFU_BOOT_SM_CheckUserFwStatus+0x11c>)
 8006930:	3a03      	subs	r2, #3
 8006932:	f003 fae7 	bl	8009f04 <iprintf>
      SFU_SET_SM_CURR_STATE(SFU_STATE_RESUME_INSTALL_NEW_USER_FW);
 8006936:	7863      	ldrb	r3, [r4, #1]
 8006938:	b2db      	uxtb	r3, r3
 800693a:	7023      	strb	r3, [r4, #0]
 800693c:	2307      	movs	r3, #7
 800693e:	e7f2      	b.n	8006926 <SFU_BOOT_SM_CheckUserFwStatus+0x3e>
      TRACE("\r\n\t  New Fw to be installed from slot SLOT_DWL_%d", m_DwlSlotToInstall - SLOT_DWL_1 + 1U);
 8006940:	68e1      	ldr	r1, [r4, #12]
 8006942:	4831      	ldr	r0, [pc, #196]	; (8006a08 <SFU_BOOT_SM_CheckUserFwStatus+0x120>)
 8006944:	3903      	subs	r1, #3
 8006946:	f003 fadd 	bl	8009f04 <iprintf>
      SFU_SET_SM_CURR_STATE(SFU_STATE_INSTALL_NEW_USER_FW);
 800694a:	7863      	ldrb	r3, [r4, #1]
 800694c:	b2db      	uxtb	r3, r3
 800694e:	7023      	strb	r3, [r4, #0]
 8006950:	2304      	movs	r3, #4
 8006952:	e7e8      	b.n	8006926 <SFU_BOOT_SM_CheckUserFwStatus+0x3e>
      m_ActiveSlotToExecute = 0U;
 8006954:	2300      	movs	r3, #0
        if (SFU_SUCCESS == SFU_IMG_DetectFW(MASTER_SLOT))
 8006956:	2001      	movs	r0, #1
      m_ActiveSlotToExecute = 0U;
 8006958:	6123      	str	r3, [r4, #16]
        if (SFU_SUCCESS == SFU_IMG_DetectFW(MASTER_SLOT))
 800695a:	f001 f88b 	bl	8007a74 <SFU_IMG_DetectFW>
 800695e:	4b2b      	ldr	r3, [pc, #172]	; (8006a0c <SFU_BOOT_SM_CheckUserFwStatus+0x124>)
 8006960:	4298      	cmp	r0, r3
 8006962:	d109      	bne.n	8006978 <SFU_BOOT_SM_CheckUserFwStatus+0x90>
          m_ActiveSlotToExecute = MASTER_SLOT;
 8006964:	2101      	movs	r1, #1
          TRACE("\r\n\t  A FW is detected in the slot SLOT_ACTIVE_%d", m_ActiveSlotToExecute);
 8006966:	482a      	ldr	r0, [pc, #168]	; (8006a10 <SFU_BOOT_SM_CheckUserFwStatus+0x128>)
          m_ActiveSlotToExecute = MASTER_SLOT;
 8006968:	6121      	str	r1, [r4, #16]
          TRACE("\r\n\t  A FW is detected in the slot SLOT_ACTIVE_%d", m_ActiveSlotToExecute);
 800696a:	f003 facb 	bl	8009f04 <iprintf>
          SFU_SET_SM_CURR_STATE(SFU_STATE_VERIFY_USER_FW_SIGNATURE);
 800696e:	7863      	ldrb	r3, [r4, #1]
 8006970:	b2db      	uxtb	r3, r3
 8006972:	7023      	strb	r3, [r4, #0]
 8006974:	2305      	movs	r3, #5
 8006976:	7063      	strb	r3, [r4, #1]
      if (m_ActiveSlotToExecute == 0U)
 8006978:	6923      	ldr	r3, [r4, #16]
 800697a:	b143      	cbz	r3, 800698e <SFU_BOOT_SM_CheckUserFwStatus+0xa6>
}
 800697c:	bd10      	pop	{r4, pc}
      TRACE("\r\n\t  Flash State Unknown, Critical failure");
 800697e:	4825      	ldr	r0, [pc, #148]	; (8006a14 <SFU_BOOT_SM_CheckUserFwStatus+0x12c>)
 8006980:	f003 fac0 	bl	8009f04 <iprintf>
      SFU_SET_SM_CURR_STATE(SFU_STATE_HANDLE_CRITICAL_FAILURE);
 8006984:	7863      	ldrb	r3, [r4, #1]
 8006986:	b2db      	uxtb	r3, r3
 8006988:	7023      	strb	r3, [r4, #0]
 800698a:	2309      	movs	r3, #9
 800698c:	e7cb      	b.n	8006926 <SFU_BOOT_SM_CheckUserFwStatus+0x3e>
          if (SlotStartAdd[SLOT_ACTIVE_1 + i] != 0U)         /* Slot configured ? */
 800698e:	4b22      	ldr	r3, [pc, #136]	; (8006a18 <SFU_BOOT_SM_CheckUserFwStatus+0x130>)
 8006990:	685b      	ldr	r3, [r3, #4]
 8006992:	b1fb      	cbz	r3, 80069d4 <SFU_BOOT_SM_CheckUserFwStatus+0xec>
            if (SFU_SUCCESS == SFU_IMG_DetectFW(SLOT_ACTIVE_1 + i))
 8006994:	2001      	movs	r0, #1
 8006996:	f001 f86d 	bl	8007a74 <SFU_IMG_DetectFW>
 800699a:	4b1c      	ldr	r3, [pc, #112]	; (8006a0c <SFU_BOOT_SM_CheckUserFwStatus+0x124>)
 800699c:	4298      	cmp	r0, r3
 800699e:	d109      	bne.n	80069b4 <SFU_BOOT_SM_CheckUserFwStatus+0xcc>
              m_ActiveSlotToExecute = SLOT_ACTIVE_1 + i;
 80069a0:	2101      	movs	r1, #1
              TRACE("\r\n\t  A FW is detected in the slot SLOT_ACTIVE_%d", m_ActiveSlotToExecute);
 80069a2:	481b      	ldr	r0, [pc, #108]	; (8006a10 <SFU_BOOT_SM_CheckUserFwStatus+0x128>)
              m_ActiveSlotToExecute = SLOT_ACTIVE_1 + i;
 80069a4:	6121      	str	r1, [r4, #16]
              TRACE("\r\n\t  A FW is detected in the slot SLOT_ACTIVE_%d", m_ActiveSlotToExecute);
 80069a6:	f003 faad 	bl	8009f04 <iprintf>
              SFU_SET_SM_CURR_STATE(SFU_STATE_VERIFY_USER_FW_SIGNATURE);
 80069aa:	7863      	ldrb	r3, [r4, #1]
 80069ac:	b2db      	uxtb	r3, r3
 80069ae:	7023      	strb	r3, [r4, #0]
 80069b0:	2305      	movs	r3, #5
 80069b2:	7063      	strb	r3, [r4, #1]
      if (m_ActiveSlotToExecute == 0U)
 80069b4:	6923      	ldr	r3, [r4, #16]
 80069b6:	2b00      	cmp	r3, #0
 80069b8:	d1e0      	bne.n	800697c <SFU_BOOT_SM_CheckUserFwStatus+0x94>
            if (SFU_IMG_VerifyEmptyActiveSlot(SLOT_ACTIVE_1 + i) != SFU_SUCCESS)
 80069ba:	2001      	movs	r0, #1
 80069bc:	f000 ff68 	bl	8007890 <SFU_IMG_VerifyEmptyActiveSlot>
 80069c0:	4b12      	ldr	r3, [pc, #72]	; (8006a0c <SFU_BOOT_SM_CheckUserFwStatus+0x124>)
 80069c2:	4298      	cmp	r0, r3
 80069c4:	d006      	beq.n	80069d4 <SFU_BOOT_SM_CheckUserFwStatus+0xec>
              TRACE("\r\n\t  Slot SLOT_ACTIVE_%d not empty : erasing ...", SLOT_ACTIVE_1 + i);
 80069c6:	4815      	ldr	r0, [pc, #84]	; (8006a1c <SFU_BOOT_SM_CheckUserFwStatus+0x134>)
 80069c8:	2101      	movs	r1, #1
 80069ca:	f003 fa9b 	bl	8009f04 <iprintf>
              (void)SFU_IMG_InvalidateCurrentFirmware(SLOT_ACTIVE_1 + i); /* If this fails we continue anyhow */
 80069ce:	2001      	movs	r0, #1
 80069d0:	f000 ff26 	bl	8007820 <SFU_IMG_InvalidateCurrentFirmware>
        if (1U == initialDeviceStatusCheck)
 80069d4:	78a3      	ldrb	r3, [r4, #2]
 80069d6:	2b01      	cmp	r3, #1
 80069d8:	d107      	bne.n	80069ea <SFU_BOOT_SM_CheckUserFwStatus+0x102>
          TRACE("\r\n\t  No valid FW found in the active slots nor new FW to be installed");
 80069da:	4811      	ldr	r0, [pc, #68]	; (8006a20 <SFU_BOOT_SM_CheckUserFwStatus+0x138>)
 80069dc:	f003 fa92 	bl	8009f04 <iprintf>
          TRACE("\r\n\t  Waiting for the local download to start... ");
 80069e0:	4810      	ldr	r0, [pc, #64]	; (8006a24 <SFU_BOOT_SM_CheckUserFwStatus+0x13c>)
 80069e2:	f003 fa8f 	bl	8009f04 <iprintf>
          initialDeviceStatusCheck = 0U;
 80069e6:	2300      	movs	r3, #0
 80069e8:	70a3      	strb	r3, [r4, #2]
        SFU_SET_SM_CURR_STATE(SFU_STATE_CHECK_NEW_FW_TO_DOWNLOAD);
 80069ea:	7863      	ldrb	r3, [r4, #1]
 80069ec:	b2db      	uxtb	r3, r3
 80069ee:	7023      	strb	r3, [r4, #0]
 80069f0:	2301      	movs	r3, #1
 80069f2:	e798      	b.n	8006926 <SFU_BOOT_SM_CheckUserFwStatus+0x3e>
 80069f4:	200010fc 	.word	0x200010fc
 80069f8:	0800b2e5 	.word	0x0800b2e5
 80069fc:	20001100 	.word	0x20001100
 8006a00:	0800b30d 	.word	0x0800b30d
 8006a04:	0800b36a 	.word	0x0800b36a
 8006a08:	0800b3cb 	.word	0x0800b3cb
 8006a0c:	00122f11 	.word	0x00122f11
 8006a10:	0800b3fd 	.word	0x0800b3fd
 8006a14:	0800b4d6 	.word	0x0800b4d6
 8006a18:	0800b150 	.word	0x0800b150
 8006a1c:	0800b42e 	.word	0x0800b42e
 8006a20:	0800b45f 	.word	0x0800b45f
 8006a24:	0800b4a5 	.word	0x0800b4a5

08006a28 <SFU_BOOT_SM_DownloadNewUserFw>:
{
 8006a28:	b530      	push	{r4, r5, lr}
 8006a2a:	b085      	sub	sp, #20
  SFU_LOADER_StatusTypeDef  e_ret_status_app = SFU_LOADER_ERR_COM;
 8006a2c:	2301      	movs	r3, #1
 8006a2e:	f88d 3007 	strb.w	r3, [sp, #7]
  TRACE("\r\n= [SBOOT] STATE: DOWNLOAD NEW USER FIRMWARE");
 8006a32:	4825      	ldr	r0, [pc, #148]	; (8006ac8 <SFU_BOOT_SM_DownloadNewUserFw+0xa0>)
  if (e_ret_status == SFU_SUCCESS)
 8006a34:	4d25      	ldr	r5, [pc, #148]	; (8006acc <SFU_BOOT_SM_DownloadNewUserFw+0xa4>)
  uint32_t                  u_size = 0;
 8006a36:	2300      	movs	r3, #0
 8006a38:	9303      	str	r3, [sp, #12]
  TRACE("\r\n= [SBOOT] STATE: DOWNLOAD NEW USER FIRMWARE");
 8006a3a:	f003 fa63 	bl	8009f04 <iprintf>
  e_ret_status = SFU_LOADER_DownloadNewUserFw(&e_ret_status_app, &dwl_slot, &u_size);
 8006a3e:	aa03      	add	r2, sp, #12
 8006a40:	a902      	add	r1, sp, #8
 8006a42:	f10d 0007 	add.w	r0, sp, #7
 8006a46:	f001 fd13 	bl	8008470 <SFU_LOADER_DownloadNewUserFw>
  if (e_ret_status == SFU_SUCCESS)
 8006a4a:	42a8      	cmp	r0, r5
  e_ret_status = SFU_LOADER_DownloadNewUserFw(&e_ret_status_app, &dwl_slot, &u_size);
 8006a4c:	4604      	mov	r4, r0
  if (e_ret_status == SFU_SUCCESS)
 8006a4e:	d11f      	bne.n	8006a90 <SFU_BOOT_SM_DownloadNewUserFw+0x68>
    e_ret_status = SFU_LL_FLASH_Read((uint8_t *) &fw_image_header_validated, (uint8_t *) SlotStartAdd[dwl_slot],
 8006a50:	4b1f      	ldr	r3, [pc, #124]	; (8006ad0 <SFU_BOOT_SM_DownloadNewUserFw+0xa8>)
 8006a52:	9902      	ldr	r1, [sp, #8]
 8006a54:	481f      	ldr	r0, [pc, #124]	; (8006ad4 <SFU_BOOT_SM_DownloadNewUserFw+0xac>)
 8006a56:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
 8006a5a:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8006a5e:	f001 ffad 	bl	80089bc <SFU_LL_FLASH_Read>
  if (e_ret_status == SFU_SUCCESS)
 8006a62:	42a8      	cmp	r0, r5
    e_ret_status = SFU_LL_FLASH_Read((uint8_t *) &fw_image_header_validated, (uint8_t *) SlotStartAdd[dwl_slot],
 8006a64:	4604      	mov	r4, r0
  if (e_ret_status == SFU_SUCCESS)
 8006a66:	d113      	bne.n	8006a90 <SFU_BOOT_SM_DownloadNewUserFw+0x68>
    if (SFU_IMG_InstallAtNextReset((uint8_t *) &fw_image_header_validated) != SFU_SUCCESS)
 8006a68:	481a      	ldr	r0, [pc, #104]	; (8006ad4 <SFU_BOOT_SM_DownloadNewUserFw+0xac>)
 8006a6a:	f001 fe4f 	bl	800870c <SFU_IMG_InstallAtNextReset>
 8006a6e:	42a0      	cmp	r0, r4
 8006a70:	d002      	beq.n	8006a78 <SFU_BOOT_SM_DownloadNewUserFw+0x50>
      (void) SFU_IMG_EraseDownloadedImg(dwl_slot);
 8006a72:	9802      	ldr	r0, [sp, #8]
 8006a74:	f001 fb62 	bl	800813c <SFU_IMG_EraseDownloadedImg>
  SFU_SET_SM_IF_CURR_STATE(e_ret_status, SFU_STATE_REBOOT_STATE_MACHINE, SFU_STATE_HANDLE_CRITICAL_FAILURE);
 8006a78:	4b17      	ldr	r3, [pc, #92]	; (8006ad8 <SFU_BOOT_SM_DownloadNewUserFw+0xb0>)
 8006a7a:	785a      	ldrb	r2, [r3, #1]
 8006a7c:	b2d2      	uxtb	r2, r2
 8006a7e:	701a      	strb	r2, [r3, #0]
 8006a80:	4a12      	ldr	r2, [pc, #72]	; (8006acc <SFU_BOOT_SM_DownloadNewUserFw+0xa4>)
 8006a82:	4294      	cmp	r4, r2
 8006a84:	bf0c      	ite	eq
 8006a86:	220a      	moveq	r2, #10
 8006a88:	2209      	movne	r2, #9
 8006a8a:	705a      	strb	r2, [r3, #1]
}
 8006a8c:	b005      	add	sp, #20
 8006a8e:	bd30      	pop	{r4, r5, pc}
    (void) SFU_IMG_EraseDownloadedImg(dwl_slot);
 8006a90:	9802      	ldr	r0, [sp, #8]
 8006a92:	f001 fb53 	bl	800813c <SFU_IMG_EraseDownloadedImg>
    switch (e_ret_status_app)
 8006a96:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8006a9a:	3b01      	subs	r3, #1
 8006a9c:	2b05      	cmp	r3, #5
 8006a9e:	d8eb      	bhi.n	8006a78 <SFU_BOOT_SM_DownloadNewUserFw+0x50>
 8006aa0:	e8df f003 	tbb	[pc, r3]
 8006aa4:	07090b03 	.word	0x07090b03
 8006aa8:	0f0d      	.short	0x0f0d
        SFU_EXCPT_SetError(SFU_EXCPT_COM_ERR);
 8006aaa:	2006      	movs	r0, #6
        SFU_EXCPT_SetError(SFU_EXCPT_DECRYPT_ERR);
 8006aac:	f000 fc44 	bl	8007338 <SFU_EXCPT_SetError>
        break;
 8006ab0:	e7e2      	b.n	8006a78 <SFU_BOOT_SM_DownloadNewUserFw+0x50>
        SFU_EXCPT_SetError(SFU_EXCPT_VERSION_ERR);
 8006ab2:	2017      	movs	r0, #23
 8006ab4:	e7fa      	b.n	8006aac <SFU_BOOT_SM_DownloadNewUserFw+0x84>
        SFU_EXCPT_SetError(SFU_EXCPT_FW_TOO_BIG);
 8006ab6:	2005      	movs	r0, #5
 8006ab8:	e7f8      	b.n	8006aac <SFU_BOOT_SM_DownloadNewUserFw+0x84>
        SFU_EXCPT_SetError(SFU_EXCPT_HEADER_AUTH_ERR);
 8006aba:	2007      	movs	r0, #7
 8006abc:	e7f6      	b.n	8006aac <SFU_BOOT_SM_DownloadNewUserFw+0x84>
        SFU_EXCPT_SetError(SFU_EXCPT_FLASH_ERR);
 8006abe:	200a      	movs	r0, #10
 8006ac0:	e7f4      	b.n	8006aac <SFU_BOOT_SM_DownloadNewUserFw+0x84>
        SFU_EXCPT_SetError(SFU_EXCPT_DECRYPT_ERR);
 8006ac2:	2008      	movs	r0, #8
 8006ac4:	e7f2      	b.n	8006aac <SFU_BOOT_SM_DownloadNewUserFw+0x84>
 8006ac6:	bf00      	nop
 8006ac8:	0800b501 	.word	0x0800b501
 8006acc:	00122f11 	.word	0x00122f11
 8006ad0:	0800b150 	.word	0x0800b150
 8006ad4:	20001538 	.word	0x20001538
 8006ad8:	200010fc 	.word	0x200010fc

08006adc <SFU_BOOT_SM_CheckNewFwToDownload>:
{
 8006adc:	b510      	push	{r4, lr}
  if (initialDeviceStatusCheck == 1U)
 8006ade:	4c0d      	ldr	r4, [pc, #52]	; (8006b14 <SFU_BOOT_SM_CheckNewFwToDownload+0x38>)
 8006ae0:	78a3      	ldrb	r3, [r4, #2]
 8006ae2:	2b01      	cmp	r3, #1
 8006ae4:	d00a      	beq.n	8006afc <SFU_BOOT_SM_CheckNewFwToDownload+0x20>
    e_ret_status = SFU_SUCCESS;
 8006ae6:	4a0c      	ldr	r2, [pc, #48]	; (8006b18 <SFU_BOOT_SM_CheckNewFwToDownload+0x3c>)
  SFU_SET_SM_IF_CURR_STATE(e_ret_status, SFU_STATE_DOWNLOAD_NEW_USER_FW, SFU_STATE_VERIFY_USER_FW_STATUS);
 8006ae8:	7863      	ldrb	r3, [r4, #1]
 8006aea:	b2db      	uxtb	r3, r3
 8006aec:	7023      	strb	r3, [r4, #0]
 8006aee:	4b0a      	ldr	r3, [pc, #40]	; (8006b18 <SFU_BOOT_SM_CheckNewFwToDownload+0x3c>)
 8006af0:	429a      	cmp	r2, r3
 8006af2:	bf0c      	ite	eq
 8006af4:	2302      	moveq	r3, #2
 8006af6:	2303      	movne	r3, #3
 8006af8:	7063      	strb	r3, [r4, #1]
}
 8006afa:	bd10      	pop	{r4, pc}
    TRACE("\r\n= [SBOOT] STATE: CHECK NEW FIRMWARE TO DOWNLOAD");
 8006afc:	4807      	ldr	r0, [pc, #28]	; (8006b1c <SFU_BOOT_SM_CheckNewFwToDownload+0x40>)
 8006afe:	f003 fa01 	bl	8009f04 <iprintf>
    if (0U != BUTTON_PUSHED())
 8006b02:	2000      	movs	r0, #0
 8006b04:	f002 f9b6 	bl	8008e74 <BSP_PB_GetState>
 8006b08:	2801      	cmp	r0, #1
 8006b0a:	d0ec      	beq.n	8006ae6 <SFU_BOOT_SM_CheckNewFwToDownload+0xa>
      e_ret_status = SFU_ERROR;
 8006b0c:	f641 72e1 	movw	r2, #8161	; 0x1fe1
 8006b10:	e7ea      	b.n	8006ae8 <SFU_BOOT_SM_CheckNewFwToDownload+0xc>
 8006b12:	bf00      	nop
 8006b14:	200010fc 	.word	0x200010fc
 8006b18:	00122f11 	.word	0x00122f11
 8006b1c:	0800b52f 	.word	0x0800b52f

08006b20 <SFU_BOOT_SM_CheckStatusOnReset>:
{
 8006b20:	b507      	push	{r0, r1, r2, lr}
  TRACE("\r\n= [SBOOT] STATE: CHECK STATUS ON RESET");
 8006b22:	4818      	ldr	r0, [pc, #96]	; (8006b84 <SFU_BOOT_SM_CheckStatusOnReset+0x64>)
 8006b24:	f003 f9ee 	bl	8009f04 <iprintf>
  * @param  None
  * @retval None
  */
static void SFU_BOOT_ManageResetSources(void)
{
  SFU_RESET_IdTypeDef e_wakeup_source_id = SFU_RESET_UNKNOWN;
 8006b28:	2300      	movs	r3, #0

  /* Check the wakeup sources */
  SFU_LL_SECU_GetResetSources(&e_wakeup_source_id);
 8006b2a:	f10d 0007 	add.w	r0, sp, #7
  SFU_RESET_IdTypeDef e_wakeup_source_id = SFU_RESET_UNKNOWN;
 8006b2e:	f88d 3007 	strb.w	r3, [sp, #7]
  SFU_LL_SECU_GetResetSources(&e_wakeup_source_id);
 8006b32:	f002 f8bf 	bl	8008cb4 <SFU_LL_SECU_GetResetSources>
  switch (e_wakeup_source_id)
 8006b36:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8006b3a:	3b01      	subs	r3, #1
 8006b3c:	2b05      	cmp	r3, #5
 8006b3e:	d81e      	bhi.n	8006b7e <SFU_BOOT_SM_CheckStatusOnReset+0x5e>
 8006b40:	e8df f003 	tbb	[pc, r3]
 8006b44:	17151303 	.word	0x17151303
 8006b48:	1b19      	.short	0x1b19
       * Please note that the example of reset causes handling below is only a basic example to illustrate the way the
       * RCC_CSR flags can be used to do so.
       */

    case SFU_RESET_WDG_RESET:
      TRACE("\r\n\t  WARNING: A Reboot has been triggered by a Watchdog reset!");
 8006b4a:	480f      	ldr	r0, [pc, #60]	; (8006b88 <SFU_BOOT_SM_CheckStatusOnReset+0x68>)
         ...
      */
      break;

    default:
      TRACE("\r\n\t  WARNING: A Reboot has been triggered by an Unknown reset source!");
 8006b4c:	f003 f9da 	bl	8009f04 <iprintf>
      */
      break;
  }

  /* Once the reset sources has been managed and a possible error has been set, clear the reset sources */
  SFU_LL_SECU_ClearResetSources();
 8006b50:	f002 f8cc 	bl	8008cec <SFU_LL_SECU_ClearResetSources>
  SFU_MPU_EnterUnprivilegedMode();
 8006b54:	f001 fdc8 	bl	80086e8 <SFU_MPU_EnterUnprivilegedMode>
  SFU_SET_SM_CURR_STATE(SFU_STATE_CHECK_NEW_FW_TO_DOWNLOAD);
 8006b58:	4b0c      	ldr	r3, [pc, #48]	; (8006b8c <SFU_BOOT_SM_CheckStatusOnReset+0x6c>)
 8006b5a:	785a      	ldrb	r2, [r3, #1]
 8006b5c:	b2d2      	uxtb	r2, r2
 8006b5e:	701a      	strb	r2, [r3, #0]
 8006b60:	2201      	movs	r2, #1
 8006b62:	705a      	strb	r2, [r3, #1]
}
 8006b64:	b003      	add	sp, #12
 8006b66:	f85d fb04 	ldr.w	pc, [sp], #4
      TRACE("\r\n\t  INFO: A Reboot has been triggered by a LowPower reset!");
 8006b6a:	4809      	ldr	r0, [pc, #36]	; (8006b90 <SFU_BOOT_SM_CheckStatusOnReset+0x70>)
 8006b6c:	e7ee      	b.n	8006b4c <SFU_BOOT_SM_CheckStatusOnReset+0x2c>
      TRACE("\r\n\t  INFO: A Reboot has been triggered by a Hardware reset!");
 8006b6e:	4809      	ldr	r0, [pc, #36]	; (8006b94 <SFU_BOOT_SM_CheckStatusOnReset+0x74>)
 8006b70:	e7ec      	b.n	8006b4c <SFU_BOOT_SM_CheckStatusOnReset+0x2c>
      TRACE("\r\n\t  INFO: A Reboot has been triggered by a BOR reset!");
 8006b72:	4809      	ldr	r0, [pc, #36]	; (8006b98 <SFU_BOOT_SM_CheckStatusOnReset+0x78>)
 8006b74:	e7ea      	b.n	8006b4c <SFU_BOOT_SM_CheckStatusOnReset+0x2c>
      TRACE("\r\n\t  INFO: A Reboot has been triggered by a Software reset!");
 8006b76:	4809      	ldr	r0, [pc, #36]	; (8006b9c <SFU_BOOT_SM_CheckStatusOnReset+0x7c>)
 8006b78:	e7e8      	b.n	8006b4c <SFU_BOOT_SM_CheckStatusOnReset+0x2c>
      TRACE("\r\n\t  WARNING: A Reboot has been triggered by an Option Bytes reload!");
 8006b7a:	4809      	ldr	r0, [pc, #36]	; (8006ba0 <SFU_BOOT_SM_CheckStatusOnReset+0x80>)
 8006b7c:	e7e6      	b.n	8006b4c <SFU_BOOT_SM_CheckStatusOnReset+0x2c>
      TRACE("\r\n\t  WARNING: A Reboot has been triggered by an Unknown reset source!");
 8006b7e:	4809      	ldr	r0, [pc, #36]	; (8006ba4 <SFU_BOOT_SM_CheckStatusOnReset+0x84>)
 8006b80:	e7e4      	b.n	8006b4c <SFU_BOOT_SM_CheckStatusOnReset+0x2c>
 8006b82:	bf00      	nop
 8006b84:	0800b561 	.word	0x0800b561
 8006b88:	0800b58a 	.word	0x0800b58a
 8006b8c:	200010fc 	.word	0x200010fc
 8006b90:	0800b5c9 	.word	0x0800b5c9
 8006b94:	0800b605 	.word	0x0800b605
 8006b98:	0800b641 	.word	0x0800b641
 8006b9c:	0800b678 	.word	0x0800b678
 8006ba0:	0800b6b4 	.word	0x0800b6b4
 8006ba4:	0800b6f9 	.word	0x0800b6f9

08006ba8 <SFU_BOOT_DeInit.isra.0>:
static SFU_ErrorStatus SFU_BOOT_DeInit(void)
 8006ba8:	b538      	push	{r3, r4, r5, lr}
  if (SFU_EXCPT_DeInit() != SFU_SUCCESS)
 8006baa:	f000 fc1f 	bl	80073ec <SFU_EXCPT_DeInit>
 8006bae:	4b09      	ldr	r3, [pc, #36]	; (8006bd4 <SFU_BOOT_DeInit.isra.0+0x2c>)
 8006bb0:	4298      	cmp	r0, r3
 8006bb2:	4605      	mov	r5, r0
 8006bb4:	d10c      	bne.n	8006bd0 <SFU_BOOT_DeInit.isra.0+0x28>
  if (SFU_LOADER_DeInit() != SFU_SUCCESS)
 8006bb6:	f001 fc57 	bl	8008468 <SFU_LOADER_DeInit>
 8006bba:	42a8      	cmp	r0, r5
 8006bbc:	4604      	mov	r4, r0
 8006bbe:	d107      	bne.n	8006bd0 <SFU_BOOT_DeInit.isra.0+0x28>
  if (SFU_COM_DeInit() != SFU_SUCCESS)
 8006bc0:	f000 fb9e 	bl	8007300 <SFU_COM_DeInit>
 8006bc4:	42a0      	cmp	r0, r4
 8006bc6:	d103      	bne.n	8006bd0 <SFU_BOOT_DeInit.isra.0+0x28>
}
 8006bc8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  if (SFU_LL_DeInit() != SFU_SUCCESS)
 8006bcc:	f001 bdb4 	b.w	8008738 <SFU_LL_DeInit>
}
 8006bd0:	bd38      	pop	{r3, r4, r5, pc}
 8006bd2:	bf00      	nop
 8006bd4:	00122f11 	.word	0x00122f11

08006bd8 <SFU_BOOT_ForceReboot>:
{
 8006bd8:	b508      	push	{r3, lr}
  TRACE("\r\n========= End of Execution ==========");
 8006bda:	480d      	ldr	r0, [pc, #52]	; (8006c10 <SFU_BOOT_ForceReboot+0x38>)
 8006bdc:	f003 f992 	bl	8009f04 <iprintf>
  TRACE("\r\n\r\n\r\n");
 8006be0:	480c      	ldr	r0, [pc, #48]	; (8006c14 <SFU_BOOT_ForceReboot+0x3c>)
 8006be2:	f003 fa15 	bl	800a010 <puts>
  if (0U != SFU_MPU_IsUnprivileged())
 8006be6:	f001 fd75 	bl	80086d4 <SFU_MPU_IsUnprivileged>
 8006bea:	b120      	cbz	r0, 8006bf6 <SFU_BOOT_ForceReboot+0x1e>
}
 8006bec:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    SFU_MPU_SysCall((uint32_t)SB_SYSCALL_RESET);
 8006bf0:	2002      	movs	r0, #2
 8006bf2:	f001 bd6b 	b.w	80086cc <SFU_MPU_SysCall>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8006bf6:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8006bfa:	4907      	ldr	r1, [pc, #28]	; (8006c18 <SFU_BOOT_ForceReboot+0x40>)
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8006bfc:	4b07      	ldr	r3, [pc, #28]	; (8006c1c <SFU_BOOT_ForceReboot+0x44>)
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8006bfe:	68ca      	ldr	r2, [r1, #12]
 8006c00:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8006c04:	4313      	orrs	r3, r2
 8006c06:	60cb      	str	r3, [r1, #12]
 8006c08:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8006c0c:	bf00      	nop
  for(;;)                                                           /* wait until reset */
 8006c0e:	e7fd      	b.n	8006c0c <SFU_BOOT_ForceReboot+0x34>
 8006c10:	0800b73f 	.word	0x0800b73f
 8006c14:	0800b767 	.word	0x0800b767
 8006c18:	e000ed00 	.word	0xe000ed00
 8006c1c:	05fa0004 	.word	0x05fa0004

08006c20 <SFU_BOOT_SM_RebootStateMachine>:
{
 8006c20:	b508      	push	{r3, lr}
  TRACE("\r\n= [SBOOT] STATE: REBOOT STATE MACHINE");
 8006c22:	4804      	ldr	r0, [pc, #16]	; (8006c34 <SFU_BOOT_SM_RebootStateMachine+0x14>)
 8006c24:	f003 f96e 	bl	8009f04 <iprintf>
  (void)SFU_BOOT_DeInit();
 8006c28:	f7ff ffbe 	bl	8006ba8 <SFU_BOOT_DeInit.isra.0>
}
 8006c2c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  SFU_BOOT_ForceReboot();
 8006c30:	f7ff bfd2 	b.w	8006bd8 <SFU_BOOT_ForceReboot>
 8006c34:	0800b76d 	.word	0x0800b76d

08006c38 <SFU_BOOT_SM_ResumeInstallNewUserFw>:
{
 8006c38:	b510      	push	{r4, lr}
  e_ret_status = SFU_IMG_TriggerResumeInstallation(m_ActiveSlotToResume, m_DwlSlotToInstall);
 8006c3a:	4c0a      	ldr	r4, [pc, #40]	; (8006c64 <SFU_BOOT_SM_ResumeInstallNewUserFw+0x2c>)
  TRACE("\r\n= [SBOOT] STATE: RESUME INSTALLATION OF NEW USER FIRMWARE");
 8006c3c:	480a      	ldr	r0, [pc, #40]	; (8006c68 <SFU_BOOT_SM_ResumeInstallNewUserFw+0x30>)
 8006c3e:	f003 f961 	bl	8009f04 <iprintf>
  e_ret_status = SFU_IMG_TriggerResumeInstallation(m_ActiveSlotToResume, m_DwlSlotToInstall);
 8006c42:	e9d4 0102 	ldrd	r0, r1, [r4, #8]
 8006c46:	f001 fa3b 	bl	80080c0 <SFU_IMG_TriggerResumeInstallation>
  if (SFU_SUCCESS == e_ret_status)
 8006c4a:	4b08      	ldr	r3, [pc, #32]	; (8006c6c <SFU_BOOT_SM_ResumeInstallNewUserFw+0x34>)
 8006c4c:	4298      	cmp	r0, r3
 8006c4e:	d103      	bne.n	8006c58 <SFU_BOOT_SM_ResumeInstallNewUserFw+0x20>
}
 8006c50:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    SFU_BOOT_ForceReboot();
 8006c54:	f7ff bfc0 	b.w	8006bd8 <SFU_BOOT_ForceReboot>
    SFU_SET_SM_CURR_STATE(SFU_STATE_HANDLE_CRITICAL_FAILURE);
 8006c58:	7863      	ldrb	r3, [r4, #1]
 8006c5a:	b2db      	uxtb	r3, r3
 8006c5c:	7023      	strb	r3, [r4, #0]
 8006c5e:	2309      	movs	r3, #9
 8006c60:	7063      	strb	r3, [r4, #1]
}
 8006c62:	bd10      	pop	{r4, pc}
 8006c64:	200010fc 	.word	0x200010fc
 8006c68:	0800b795 	.word	0x0800b795
 8006c6c:	00122f11 	.word	0x00122f11

08006c70 <SFU_BOOT_SM_ExecuteUserFw>:
{
 8006c70:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  FLOW_CONTROL_CHECK(uFlowCryptoValue, FLOW_CTRL_INTEGRITY);
 8006c72:	4d33      	ldr	r5, [pc, #204]	; (8006d40 <SFU_BOOT_SM_ExecuteUserFw+0xd0>)
  SE_StatusTypeDef e_se_status = SE_KO;
 8006c74:	4b33      	ldr	r3, [pc, #204]	; (8006d44 <SFU_BOOT_SM_ExecuteUserFw+0xd4>)
  TRACE("\r\n= [SBOOT] STATE: EXECUTE USER FIRMWARE");
 8006c76:	4834      	ldr	r0, [pc, #208]	; (8006d48 <SFU_BOOT_SM_ExecuteUserFw+0xd8>)
  SE_StatusTypeDef e_se_status = SE_KO;
 8006c78:	9301      	str	r3, [sp, #4]
  TRACE("\r\n= [SBOOT] STATE: EXECUTE USER FIRMWARE");
 8006c7a:	f003 f943 	bl	8009f04 <iprintf>
  (void) SFU_LL_SECU_IWDG_Refresh();
 8006c7e:	f002 f83d 	bl	8008cfc <SFU_LL_SECU_IWDG_Refresh>
  FLOW_CONTROL_CHECK(uFlowCryptoValue, FLOW_CTRL_INTEGRITY);
 8006c82:	686a      	ldr	r2, [r5, #4]
 8006c84:	f248 435a 	movw	r3, #33882	; 0x845a
 8006c88:	429a      	cmp	r2, r3
 8006c8a:	d001      	beq.n	8006c90 <SFU_BOOT_SM_ExecuteUserFw+0x20>
 8006c8c:	f000 fb86 	bl	800739c <SFU_EXCPT_Security_Error>
    if (SlotStartAdd[SLOT_ACTIVE_1 + i] != 0U)
 8006c90:	4b2e      	ldr	r3, [pc, #184]	; (8006d4c <SFU_BOOT_SM_ExecuteUserFw+0xdc>)
 8006c92:	685b      	ldr	r3, [r3, #4]
 8006c94:	b133      	cbz	r3, 8006ca4 <SFU_BOOT_SM_ExecuteUserFw+0x34>
      if (SFU_SUCCESS == SFU_IMG_DetectFW(SLOT_ACTIVE_1 + i))
 8006c96:	2001      	movs	r0, #1
 8006c98:	f000 feec 	bl	8007a74 <SFU_IMG_DetectFW>
 8006c9c:	4b2c      	ldr	r3, [pc, #176]	; (8006d50 <SFU_BOOT_SM_ExecuteUserFw+0xe0>)
 8006c9e:	4298      	cmp	r0, r3
 8006ca0:	4604      	mov	r4, r0
 8006ca2:	d012      	beq.n	8006cca <SFU_BOOT_SM_ExecuteUserFw+0x5a>
  e_ret_status = SFU_LL_FLASH_Config_Exe(m_ActiveSlotToExecute);
 8006ca4:	4c2b      	ldr	r4, [pc, #172]	; (8006d54 <SFU_BOOT_SM_ExecuteUserFw+0xe4>)
 8006ca6:	6920      	ldr	r0, [r4, #16]
 8006ca8:	f001 fe96 	bl	80089d8 <SFU_LL_FLASH_Config_Exe>
  if (e_ret_status != SFU_SUCCESS)
 8006cac:	4b28      	ldr	r3, [pc, #160]	; (8006d50 <SFU_BOOT_SM_ExecuteUserFw+0xe0>)
 8006cae:	4298      	cmp	r0, r3
 8006cb0:	d027      	beq.n	8006d02 <SFU_BOOT_SM_ExecuteUserFw+0x92>
    SFU_EXCPT_SetError(SFU_EXCPT_FLASH_CFG_ERR);
 8006cb2:	200b      	movs	r0, #11
        SFU_EXCPT_SetError(SFU_EXCPT_LOCK_SE_SERVICES_ERR);
 8006cb4:	f000 fb40 	bl	8007338 <SFU_EXCPT_SetError>
        SFU_BOOT_ForceReboot();
 8006cb8:	f7ff ff8e 	bl	8006bd8 <SFU_BOOT_ForceReboot>
  SFU_SET_SM_IF_CURR_STATE(e_ret_status, SFU_STATE_HANDLE_CRITICAL_FAILURE, SFU_STATE_HANDLE_CRITICAL_FAILURE);
 8006cbc:	7863      	ldrb	r3, [r4, #1]
 8006cbe:	b2db      	uxtb	r3, r3
 8006cc0:	7023      	strb	r3, [r4, #0]
 8006cc2:	2309      	movs	r3, #9
 8006cc4:	7063      	strb	r3, [r4, #1]
}
 8006cc6:	b003      	add	sp, #12
 8006cc8:	bdf0      	pop	{r4, r5, r6, r7, pc}
        FLOW_CONTROL_INIT(uFlowCryptoValue, FLOW_CTRL_INIT_VALUE);
 8006cca:	f245 7376 	movw	r3, #22390	; 0x5776
        if (SFU_IMG_VerifyActiveImgMetadata(SLOT_ACTIVE_1 + i) != SFU_SUCCESS)
 8006cce:	2001      	movs	r0, #1
        FLOW_CONTROL_INIT(uFlowCryptoValue, FLOW_CTRL_INIT_VALUE);
 8006cd0:	606b      	str	r3, [r5, #4]
        if (SFU_IMG_VerifyActiveImgMetadata(SLOT_ACTIVE_1 + i) != SFU_SUCCESS)
 8006cd2:	f000 feb9 	bl	8007a48 <SFU_IMG_VerifyActiveImgMetadata>
 8006cd6:	42a0      	cmp	r0, r4
 8006cd8:	d001      	beq.n	8006cde <SFU_BOOT_SM_ExecuteUserFw+0x6e>
          SFU_EXCPT_Security_Error();
 8006cda:	f000 fb5f 	bl	800739c <SFU_EXCPT_Security_Error>
        if (SFU_IMG_ControlActiveImgTag(SLOT_ACTIVE_1 + i) != SFU_SUCCESS)
 8006cde:	2001      	movs	r0, #1
 8006ce0:	f000 fde8 	bl	80078b4 <SFU_IMG_ControlActiveImgTag>
 8006ce4:	4b1a      	ldr	r3, [pc, #104]	; (8006d50 <SFU_BOOT_SM_ExecuteUserFw+0xe0>)
 8006ce6:	4298      	cmp	r0, r3
 8006ce8:	d001      	beq.n	8006cee <SFU_BOOT_SM_ExecuteUserFw+0x7e>
          SFU_EXCPT_Security_Error();
 8006cea:	f000 fb57 	bl	800739c <SFU_EXCPT_Security_Error>
        FLOW_CONTROL_CHECK(uFlowCryptoValue, FLOW_CTRL_INTEGRITY);
 8006cee:	686a      	ldr	r2, [r5, #4]
 8006cf0:	f248 435a 	movw	r3, #33882	; 0x845a
 8006cf4:	429a      	cmp	r2, r3
 8006cf6:	d0d5      	beq.n	8006ca4 <SFU_BOOT_SM_ExecuteUserFw+0x34>
 8006cf8:	f000 fb50 	bl	800739c <SFU_EXCPT_Security_Error>
  for (i = 0U; i < SFU_NB_MAX_ACTIVE_IMAGE; i++)
 8006cfc:	e7d2      	b.n	8006ca4 <SFU_BOOT_SM_ExecuteUserFw+0x34>
        SFU_EXCPT_SetError(SFU_EXCPT_LOCK_SE_SERVICES_ERR);
 8006cfe:	2004      	movs	r0, #4
 8006d00:	e7d8      	b.n	8006cb4 <SFU_BOOT_SM_ExecuteUserFw+0x44>
    if (SE_LockRestrictServices(&e_se_status) == SE_SUCCESS)
 8006d02:	a801      	add	r0, sp, #4
 8006d04:	f7fe feec 	bl	8005ae0 <SE_LockRestrictServices>
 8006d08:	4b13      	ldr	r3, [pc, #76]	; (8006d58 <SFU_BOOT_SM_ExecuteUserFw+0xe8>)
 8006d0a:	4298      	cmp	r0, r3
 8006d0c:	4606      	mov	r6, r0
 8006d0e:	d1f6      	bne.n	8006cfe <SFU_BOOT_SM_ExecuteUserFw+0x8e>
      if (SE_LockRestrictServices(&e_se_status) == SE_SUCCESS)
 8006d10:	a801      	add	r0, sp, #4
 8006d12:	f7fe fee5 	bl	8005ae0 <SE_LockRestrictServices>
 8006d16:	42b0      	cmp	r0, r6
 8006d18:	d1f1      	bne.n	8006cfe <SFU_BOOT_SM_ExecuteUserFw+0x8e>
        (void)SFU_BOOT_DeInit(); /* the return value is not checked, we will always try launching the UserApp */
 8006d1a:	f7ff ff45 	bl	8006ba8 <SFU_BOOT_DeInit.isra.0>
        FLOW_CONTROL_STEP(uFlowCryptoValue, FLOW_STEP_LOCK_SERVICE, FLOW_CTRL_LOCK_SERVICE);
 8006d1e:	686a      	ldr	r2, [r5, #4]
 8006d20:	f482 4334 	eor.w	r3, r2, #46080	; 0xb400
 8006d24:	f083 03ab 	eor.w	r3, r3, #171	; 0xab
 8006d28:	606b      	str	r3, [r5, #4]
 8006d2a:	f248 435a 	movw	r3, #33882	; 0x845a
 8006d2e:	429a      	cmp	r2, r3
 8006d30:	d001      	beq.n	8006d36 <SFU_BOOT_SM_ExecuteUserFw+0xc6>
 8006d32:	f000 fb33 	bl	800739c <SFU_EXCPT_Security_Error>
        e_ret_status = SFU_IMG_LaunchActiveImg(m_ActiveSlotToExecute);
 8006d36:	6920      	ldr	r0, [r4, #16]
 8006d38:	f000 fdda 	bl	80078f0 <SFU_IMG_LaunchActiveImg>
        while (1 == 1)
 8006d3c:	e7fe      	b.n	8006d3c <SFU_BOOT_SM_ExecuteUserFw+0xcc>
 8006d3e:	bf00      	nop
 8006d40:	20001000 	.word	0x20001000
 8006d44:	0013023d 	.word	0x0013023d
 8006d48:	0800b7d1 	.word	0x0800b7d1
 8006d4c:	0800b150 	.word	0x0800b150
 8006d50:	00122f11 	.word	0x00122f11
 8006d54:	200010fc 	.word	0x200010fc
 8006d58:	0012310f 	.word	0x0012310f

08006d5c <SFU_BOOT_SM_InstallNewUserFw>:
{
 8006d5c:	b538      	push	{r3, r4, r5, lr}
  FLOW_CONTROL_CHECK(uFlowProtectValue, FLOW_CTRL_RUNTIME_PROTECT);
 8006d5e:	4c23      	ldr	r4, [pc, #140]	; (8006dec <SFU_BOOT_SM_InstallNewUserFw+0x90>)
  TRACE("\r\n= [SBOOT] STATE: INSTALL NEW USER FIRMWARE ");
 8006d60:	4823      	ldr	r0, [pc, #140]	; (8006df0 <SFU_BOOT_SM_InstallNewUserFw+0x94>)
 8006d62:	f003 f8cf 	bl	8009f04 <iprintf>
  FLOW_CONTROL_CHECK(uFlowProtectValue, FLOW_CTRL_RUNTIME_PROTECT);
 8006d66:	6822      	ldr	r2, [r4, #0]
 8006d68:	f243 03f1 	movw	r3, #12529	; 0x30f1
 8006d6c:	429a      	cmp	r2, r3
 8006d6e:	d001      	beq.n	8006d74 <SFU_BOOT_SM_InstallNewUserFw+0x18>
 8006d70:	f000 fb14 	bl	800739c <SFU_EXCPT_Security_Error>
  FLOW_CONTROL_INIT(uFlowProtectValue, FLOW_CTRL_INIT_VALUE);
 8006d74:	f245 7376 	movw	r3, #22390	; 0x5776
 8006d78:	6023      	str	r3, [r4, #0]
  e_ret_status = SFU_LL_SECU_CheckApplyStaticProtections();
 8006d7a:	f001 ff6b 	bl	8008c54 <SFU_LL_SECU_CheckApplyStaticProtections>
  FLOW_CONTROL_CHECK(uFlowProtectValue, FLOW_CTRL_STATIC_PROTECT);
 8006d7e:	6822      	ldr	r2, [r4, #0]
 8006d80:	f243 03f1 	movw	r3, #12529	; 0x30f1
 8006d84:	429a      	cmp	r2, r3
  e_ret_status = SFU_LL_SECU_CheckApplyStaticProtections();
 8006d86:	4605      	mov	r5, r0
  FLOW_CONTROL_CHECK(uFlowProtectValue, FLOW_CTRL_STATIC_PROTECT);
 8006d88:	d001      	beq.n	8006d8e <SFU_BOOT_SM_InstallNewUserFw+0x32>
 8006d8a:	f000 fb07 	bl	800739c <SFU_EXCPT_Security_Error>
  if (e_ret_status == SFU_SUCCESS)
 8006d8e:	4b19      	ldr	r3, [pc, #100]	; (8006df4 <SFU_BOOT_SM_InstallNewUserFw+0x98>)
 8006d90:	429d      	cmp	r5, r3
 8006d92:	d103      	bne.n	8006d9c <SFU_BOOT_SM_InstallNewUserFw+0x40>
    e_ret_status = SFU_LL_SECU_CheckApplyRuntimeProtections(SFU_SECOND_CONFIGURATION);
 8006d94:	2001      	movs	r0, #1
 8006d96:	f001 ff89 	bl	8008cac <SFU_LL_SECU_CheckApplyRuntimeProtections>
 8006d9a:	4605      	mov	r5, r0
  FLOW_CONTROL_CHECK(uFlowProtectValue, FLOW_CTRL_RUNTIME_PROTECT);
 8006d9c:	6822      	ldr	r2, [r4, #0]
 8006d9e:	f243 03f1 	movw	r3, #12529	; 0x30f1
 8006da2:	429a      	cmp	r2, r3
 8006da4:	d001      	beq.n	8006daa <SFU_BOOT_SM_InstallNewUserFw+0x4e>
 8006da6:	f000 faf9 	bl	800739c <SFU_EXCPT_Security_Error>
  if (e_ret_status != SFU_SUCCESS)
 8006daa:	4b12      	ldr	r3, [pc, #72]	; (8006df4 <SFU_BOOT_SM_InstallNewUserFw+0x98>)
 8006dac:	4c12      	ldr	r4, [pc, #72]	; (8006df8 <SFU_BOOT_SM_InstallNewUserFw+0x9c>)
 8006dae:	429d      	cmp	r5, r3
 8006db0:	d005      	beq.n	8006dbe <SFU_BOOT_SM_InstallNewUserFw+0x62>
    SFU_SET_SM_CURR_STATE(SFU_STATE_HANDLE_CRITICAL_FAILURE);
 8006db2:	7863      	ldrb	r3, [r4, #1]
 8006db4:	b2db      	uxtb	r3, r3
 8006db6:	7023      	strb	r3, [r4, #0]
 8006db8:	2309      	movs	r3, #9
 8006dba:	7063      	strb	r3, [r4, #1]
}
 8006dbc:	bd38      	pop	{r3, r4, r5, pc}
  e_ret_status = SFU_IMG_CheckCandidateVersion(m_DwlSlotToInstall);
 8006dbe:	68e0      	ldr	r0, [r4, #12]
 8006dc0:	f000 fe8e 	bl	8007ae0 <SFU_IMG_CheckCandidateVersion>
  if (SFU_SUCCESS != e_ret_status)
 8006dc4:	42a8      	cmp	r0, r5
    (void) SFU_IMG_EraseDownloadedImg(m_DwlSlotToInstall);
 8006dc6:	68e0      	ldr	r0, [r4, #12]
  if (SFU_SUCCESS != e_ret_status)
 8006dc8:	d002      	beq.n	8006dd0 <SFU_BOOT_SM_InstallNewUserFw+0x74>
    (void) SFU_IMG_EraseDownloadedImg(m_DwlSlotToInstall);
 8006dca:	f001 f9b7 	bl	800813c <SFU_IMG_EraseDownloadedImg>
  if (SFU_SUCCESS == e_ret_status)
 8006dce:	e7f0      	b.n	8006db2 <SFU_BOOT_SM_InstallNewUserFw+0x56>
    e_ret_status = SFU_IMG_CheckCandidateVersion(m_DwlSlotToInstall);
 8006dd0:	f000 fe86 	bl	8007ae0 <SFU_IMG_CheckCandidateVersion>
  if (SFU_SUCCESS == e_ret_status)
 8006dd4:	42a8      	cmp	r0, r5
 8006dd6:	d1ec      	bne.n	8006db2 <SFU_BOOT_SM_InstallNewUserFw+0x56>
    e_ret_status = SFU_IMG_TriggerImageInstallation(m_DwlSlotToInstall);
 8006dd8:	68e0      	ldr	r0, [r4, #12]
 8006dda:	f001 f9e3 	bl	80081a4 <SFU_IMG_TriggerImageInstallation>
  if (SFU_SUCCESS == e_ret_status)
 8006dde:	42a8      	cmp	r0, r5
 8006de0:	d1e7      	bne.n	8006db2 <SFU_BOOT_SM_InstallNewUserFw+0x56>
}
 8006de2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    SFU_BOOT_ForceReboot();
 8006de6:	f7ff bef7 	b.w	8006bd8 <SFU_BOOT_ForceReboot>
 8006dea:	bf00      	nop
 8006dec:	20001000 	.word	0x20001000
 8006df0:	0800b7fa 	.word	0x0800b7fa
 8006df4:	00122f11 	.word	0x00122f11
 8006df8:	200010fc 	.word	0x200010fc

08006dfc <SFU_BOOT_RunSecureBootService>:
{
 8006dfc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  if (SE_Startup() == SE_SUCCESS)
 8006dfe:	f7fe fe4b 	bl	8005a98 <SE_Startup>
 8006e02:	4b3c      	ldr	r3, [pc, #240]	; (8006ef4 <SFU_BOOT_RunSecureBootService+0xf8>)
 8006e04:	4298      	cmp	r0, r3
 8006e06:	4604      	mov	r4, r0
 8006e08:	d171      	bne.n	8006eee <SFU_BOOT_RunSecureBootService+0xf2>
  (void) SFU_COM_Init();
 8006e0a:	f000 fa69 	bl	80072e0 <SFU_COM_Init>
  if (SFU_LL_SECU_CheckApplyStaticProtections() == SFU_SUCCESS)
 8006e0e:	f001 ff21 	bl	8008c54 <SFU_LL_SECU_CheckApplyStaticProtections>
 8006e12:	4b39      	ldr	r3, [pc, #228]	; (8006ef8 <SFU_BOOT_RunSecureBootService+0xfc>)
 8006e14:	4298      	cmp	r0, r3
 8006e16:	4606      	mov	r6, r0
 8006e18:	d005      	beq.n	8006e26 <SFU_BOOT_RunSecureBootService+0x2a>
    TRACE("\r\n= [SBOOT] System Security Check failed! Rebooting...");
 8006e1a:	4838      	ldr	r0, [pc, #224]	; (8006efc <SFU_BOOT_RunSecureBootService+0x100>)
 8006e1c:	f003 f872 	bl	8009f04 <iprintf>
      e_ret_code = SFU_BOOT_SECIPS_CFG_FAIL;
 8006e20:	2001      	movs	r0, #1
}
 8006e22:	b003      	add	sp, #12
 8006e24:	bdf0      	pop	{r4, r5, r6, r7, pc}
    e_ret_status = SFU_LL_SECU_CheckApplyRuntimeProtections(SFU_INITIAL_CONFIGURATION);
 8006e26:	2000      	movs	r0, #0
 8006e28:	f001 ff40 	bl	8008cac <SFU_LL_SECU_CheckApplyRuntimeProtections>
  if (SFU_BOOT_CheckApplySecurityProtections() != SFU_SUCCESS)
 8006e2c:	42b0      	cmp	r0, r6
    e_ret_status = SFU_LL_SECU_CheckApplyRuntimeProtections(SFU_INITIAL_CONFIGURATION);
 8006e2e:	4605      	mov	r5, r0
  if (SFU_BOOT_CheckApplySecurityProtections() != SFU_SUCCESS)
 8006e30:	d1f3      	bne.n	8006e1a <SFU_BOOT_RunSecureBootService+0x1e>
    TRACE("\r\n= [SBOOT] System Security Check successfully passed. Starting...");
 8006e32:	4833      	ldr	r0, [pc, #204]	; (8006f00 <SFU_BOOT_RunSecureBootService+0x104>)
  initialDeviceStatusCheck = 1U;
 8006e34:	4f33      	ldr	r7, [pc, #204]	; (8006f04 <SFU_BOOT_RunSecureBootService+0x108>)
    TRACE("\r\n= [SBOOT] System Security Check successfully passed. Starting...");
 8006e36:	f003 f865 	bl	8009f04 <iprintf>
  (void) BSP_LED_Init(SFU_STATUS_LED);
 8006e3a:	2000      	movs	r0, #0
 8006e3c:	f001 ff8c 	bl	8008d58 <BSP_LED_Init>
  BUTTON_INIT();
 8006e40:	2100      	movs	r1, #0
 8006e42:	4608      	mov	r0, r1
 8006e44:	f001 ffd8 	bl	8008df8 <BSP_PB_Init>
  initialDeviceStatusCheck = 1U;
 8006e48:	2301      	movs	r3, #1
 8006e4a:	70bb      	strb	r3, [r7, #2]
  if (SFU_LL_Init() != SFU_SUCCESS)
 8006e4c:	f001 fca0 	bl	8008790 <SFU_LL_Init>
 8006e50:	42a8      	cmp	r0, r5
 8006e52:	4606      	mov	r6, r0
 8006e54:	d134      	bne.n	8006ec0 <SFU_BOOT_RunSecureBootService+0xc4>
  if (SFU_LL_FLASH_Init() != SFU_SUCCESS)
 8006e56:	f001 fd95 	bl	8008984 <SFU_LL_FLASH_Init>
 8006e5a:	42b0      	cmp	r0, r6
 8006e5c:	4605      	mov	r5, r0
 8006e5e:	d12f      	bne.n	8006ec0 <SFU_BOOT_RunSecureBootService+0xc4>
  if (SFU_COM_Init() != SFU_SUCCESS)
 8006e60:	f000 fa3e 	bl	80072e0 <SFU_COM_Init>
 8006e64:	42a8      	cmp	r0, r5
 8006e66:	4606      	mov	r6, r0
 8006e68:	d12a      	bne.n	8006ec0 <SFU_BOOT_RunSecureBootService+0xc4>
  if (SFU_LOADER_Init() != SFU_SUCCESS)
 8006e6a:	f001 faf9 	bl	8008460 <SFU_LOADER_Init>
 8006e6e:	42b0      	cmp	r0, r6
 8006e70:	4605      	mov	r5, r0
 8006e72:	d125      	bne.n	8006ec0 <SFU_BOOT_RunSecureBootService+0xc4>
  if (SFU_EXCPT_Init() != SFU_SUCCESS)
 8006e74:	f000 fab6 	bl	80073e4 <SFU_EXCPT_Init>
 8006e78:	42a8      	cmp	r0, r5
 8006e7a:	d121      	bne.n	8006ec0 <SFU_BOOT_RunSecureBootService+0xc4>
  if (SFU_IMG_InitImageHandling() != SFU_IMG_INIT_OK)
 8006e7c:	f000 fc68 	bl	8007750 <SFU_IMG_InitImageHandling>
 8006e80:	b9f0      	cbnz	r0, 8006ec0 <SFU_BOOT_RunSecureBootService+0xc4>
  TRACE("\r\n\r\n");
 8006e82:	4821      	ldr	r0, [pc, #132]	; (8006f08 <SFU_BOOT_RunSecureBootService+0x10c>)
 8006e84:	f003 f8c4 	bl	800a010 <puts>
  TRACE("\r\n======================================================================");
 8006e88:	4820      	ldr	r0, [pc, #128]	; (8006f0c <SFU_BOOT_RunSecureBootService+0x110>)
 8006e8a:	f003 f83b 	bl	8009f04 <iprintf>
  TRACE("\r\n=              (C) COPYRIGHT 2017 STMicroelectronics                 =");
 8006e8e:	4820      	ldr	r0, [pc, #128]	; (8006f10 <SFU_BOOT_RunSecureBootService+0x114>)
 8006e90:	f003 f838 	bl	8009f04 <iprintf>
  TRACE("\r\n=                                                                    =");
 8006e94:	481f      	ldr	r0, [pc, #124]	; (8006f14 <SFU_BOOT_RunSecureBootService+0x118>)
 8006e96:	f003 f835 	bl	8009f04 <iprintf>
  TRACE("\r\n=              Secure Boot and Secure Firmware Update                =");
 8006e9a:	481f      	ldr	r0, [pc, #124]	; (8006f18 <SFU_BOOT_RunSecureBootService+0x11c>)
 8006e9c:	f003 f832 	bl	8009f04 <iprintf>
  TRACE("\r\n======================================================================");
 8006ea0:	481a      	ldr	r0, [pc, #104]	; (8006f0c <SFU_BOOT_RunSecureBootService+0x110>)
 8006ea2:	f003 f82f 	bl	8009f04 <iprintf>
  TRACE("\r\n\r\n");
 8006ea6:	4818      	ldr	r0, [pc, #96]	; (8006f08 <SFU_BOOT_RunSecureBootService+0x10c>)
 8006ea8:	f003 f8b2 	bl	800a010 <puts>
  if (SE_Init(&e_se_status, SystemCoreClock) != SE_SUCCESS)
 8006eac:	4b1b      	ldr	r3, [pc, #108]	; (8006f1c <SFU_BOOT_RunSecureBootService+0x120>)
 8006eae:	a801      	add	r0, sp, #4
 8006eb0:	6819      	ldr	r1, [r3, #0]
 8006eb2:	f7fe fdcb 	bl	8005a4c <SE_Init>
 8006eb6:	42a0      	cmp	r0, r4
 8006eb8:	d004      	beq.n	8006ec4 <SFU_BOOT_RunSecureBootService+0xc8>
    TRACE("\r\n= [SBOOT] SECURE ENGINE INITIALIZATION CRITICAL FAILURE!");
 8006eba:	4819      	ldr	r0, [pc, #100]	; (8006f20 <SFU_BOOT_RunSecureBootService+0x124>)
 8006ebc:	f003 f822 	bl	8009f04 <iprintf>
        e_ret_code = SFU_BOOT_INIT_FAIL;
 8006ec0:	2002      	movs	r0, #2
 8006ec2:	e7ae      	b.n	8006e22 <SFU_BOOT_RunSecureBootService+0x26>
    TRACE("\r\n= [SBOOT] SECURE ENGINE INITIALIZATION SUCCESSFUL");
 8006ec4:	4817      	ldr	r0, [pc, #92]	; (8006f24 <SFU_BOOT_RunSecureBootService+0x128>)
    if (SFU_BOOT_SecuritySafetyCheck() == SFU_SUCCESS)
 8006ec6:	4c0c      	ldr	r4, [pc, #48]	; (8006ef8 <SFU_BOOT_RunSecureBootService+0xfc>)
      fnStateMachineFunction = fnStateMachineTable[(uint8_t)m_StateMachineContext.CurrState];
 8006ec8:	4d17      	ldr	r5, [pc, #92]	; (8006f28 <SFU_BOOT_RunSecureBootService+0x12c>)
    TRACE("\r\n= [SBOOT] SECURE ENGINE INITIALIZATION SUCCESSFUL");
 8006eca:	f003 f81b 	bl	8009f04 <iprintf>
  e_ret_status = SFU_LL_SECU_IWDG_Refresh();
 8006ece:	f001 ff15 	bl	8008cfc <SFU_LL_SECU_IWDG_Refresh>
    if (SFU_BOOT_SecuritySafetyCheck() == SFU_SUCCESS)
 8006ed2:	42a0      	cmp	r0, r4
 8006ed4:	d006      	beq.n	8006ee4 <SFU_BOOT_RunSecureBootService+0xe8>
  SFU_EXCPT_SetError(SFU_EXCPT_UNKNOWN);
 8006ed6:	2018      	movs	r0, #24
 8006ed8:	f000 fa2e 	bl	8007338 <SFU_EXCPT_SetError>
  SFU_BOOT_ForceReboot();
 8006edc:	f7ff fe7c 	bl	8006bd8 <SFU_BOOT_ForceReboot>
  SFU_BOOT_InitErrorTypeDef e_ret_code = SFU_BOOT_INIT_ERROR;
 8006ee0:	2003      	movs	r0, #3
  return e_ret_status;
 8006ee2:	e79e      	b.n	8006e22 <SFU_BOOT_RunSecureBootService+0x26>
      fnStateMachineFunction = fnStateMachineTable[(uint8_t)m_StateMachineContext.CurrState];
 8006ee4:	787b      	ldrb	r3, [r7, #1]
      fnStateMachineFunction();
 8006ee6:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 8006eea:	4798      	blx	r3
 8006eec:	e7ef      	b.n	8006ece <SFU_BOOT_RunSecureBootService+0xd2>
    e_ret_code = SFU_BOOT_SECENG_INIT_FAIL;
 8006eee:	2000      	movs	r0, #0
 8006ef0:	e797      	b.n	8006e22 <SFU_BOOT_RunSecureBootService+0x26>
 8006ef2:	bf00      	nop
 8006ef4:	0012310f 	.word	0x0012310f
 8006ef8:	00122f11 	.word	0x00122f11
 8006efc:	0800b828 	.word	0x0800b828
 8006f00:	0800b85f 	.word	0x0800b85f
 8006f04:	200010fc 	.word	0x200010fc
 8006f08:	0800b769 	.word	0x0800b769
 8006f0c:	0800b8a2 	.word	0x0800b8a2
 8006f10:	0800b8eb 	.word	0x0800b8eb
 8006f14:	0800b934 	.word	0x0800b934
 8006f18:	0800b97d 	.word	0x0800b97d
 8006f1c:	20001064 	.word	0x20001064
 8006f20:	0800b9c6 	.word	0x0800b9c6
 8006f24:	0800ba01 	.word	0x0800ba01
 8006f28:	0800b0c0 	.word	0x0800b0c0

08006f2c <MemManage_Handler>:
  * @param  None
  * @retval None
  */
void SFU_CALLBACK_MEMORYFAULT(void)
{
  SFU_EXCPT_IrqExceptionHandler(SFU_EXCPT_MEMORY_FAULT);
 8006f2c:	2001      	movs	r0, #1
 8006f2e:	f000 ba11 	b.w	8007354 <SFU_EXCPT_IrqExceptionHandler>

08006f32 <SFU_COM_Serial_PutByte>:
  * @brief  Transmit a byte to the COM Port.
  * @param  uParam: The byte to be sent.
  * @retval SFU_ErrorStatus SFU_SUCCESS if successful, SFU_ERROR otherwise.
  */
SFU_ErrorStatus SFU_COM_Serial_PutByte(uint8_t uParam)
{
 8006f32:	b507      	push	{r0, r1, r2, lr}
  return SFU_LL_UART_Transmit(&uParam, 1U, SFU_COM_LOADER_SERIAL_TIME_OUT);
 8006f34:	2264      	movs	r2, #100	; 0x64
{
 8006f36:	f88d 0007 	strb.w	r0, [sp, #7]
  return SFU_LL_UART_Transmit(&uParam, 1U, SFU_COM_LOADER_SERIAL_TIME_OUT);
 8006f3a:	2101      	movs	r1, #1
 8006f3c:	f10d 0007 	add.w	r0, sp, #7
 8006f40:	f001 fc74 	bl	800882c <SFU_LL_UART_Transmit>
}
 8006f44:	b003      	add	sp, #12
 8006f46:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08006f4c <SFU_COM_YMODEM_Receive>:
{
 8006f4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006f50:	b08b      	sub	sp, #44	; 0x2c
  if ((peCOMStatus == NULL) || (puSize == NULL))
 8006f52:	4605      	mov	r5, r0
{
 8006f54:	9102      	str	r1, [sp, #8]
  if ((peCOMStatus == NULL) || (puSize == NULL))
 8006f56:	b920      	cbnz	r0, 8006f62 <SFU_COM_YMODEM_Receive+0x16>
                      return SFU_ERROR;
 8006f58:	f641 70e1 	movw	r0, #8161	; 0x1fe1
}
 8006f5c:	b00b      	add	sp, #44	; 0x2c
 8006f5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  if ((peCOMStatus == NULL) || (puSize == NULL))
 8006f62:	9b02      	ldr	r3, [sp, #8]
 8006f64:	2b00      	cmp	r3, #0
 8006f66:	d0f7      	beq.n	8006f58 <SFU_COM_YMODEM_Receive+0xc>
  *peCOMStatus = SFU_COM_YMODEM_OK;
 8006f68:	2400      	movs	r4, #0
        break;
      default:
        status = HAL_ERROR;
        break;
    }
    *pData = char1;
 8006f6a:	f8df 8268 	ldr.w	r8, [pc, #616]	; 80071d4 <SFU_COM_YMODEM_Receive+0x288>
  *peCOMStatus = SFU_COM_YMODEM_OK;
 8006f6e:	7004      	strb	r4, [r0, #0]
  uint32_t session_begin = 0U;
 8006f70:	9401      	str	r4, [sp, #4]
  uint32_t errors = 0U;
 8006f72:	4626      	mov	r6, r4
  if (eRetStatus == SFU_SUCCESS)
 8006f74:	4f95      	ldr	r7, [pc, #596]	; (80071cc <SFU_COM_YMODEM_Receive+0x280>)
{
 8006f76:	f04f 0900 	mov.w	r9, #0
 8006f7a:	e139      	b.n	80071f0 <SFU_COM_YMODEM_Receive+0x2a4>
    switch (char1)
 8006f7c:	2b61      	cmp	r3, #97	; 0x61
 8006f7e:	d03b      	beq.n	8006ff8 <SFU_COM_YMODEM_Receive+0xac>
 8006f80:	2b72      	cmp	r3, #114	; 0x72
 8006f82:	d01e      	beq.n	8006fc2 <SFU_COM_YMODEM_Receive+0x76>
        status = HAL_BUSY;
 8006f84:	2b41      	cmp	r3, #65	; 0x41
 8006f86:	bf14      	ite	ne
 8006f88:	f04f 0b01 	movne.w	fp, #1
 8006f8c:	f04f 0b02 	moveq.w	fp, #2
  uint32_t packet_size = 0U;
 8006f90:	f04f 0a00 	mov.w	sl, #0
 8006f94:	e14f      	b.n	8007236 <SFU_COM_YMODEM_Receive+0x2ea>
        if ((SFU_LL_UART_Receive(&char1, 1U, uTimeout) == SFU_SUCCESS) && (char1 == SFU_COM_YMODEM_CA))
 8006f96:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8006f9a:	2101      	movs	r1, #1
 8006f9c:	f10d 0013 	add.w	r0, sp, #19
 8006fa0:	f001 fc58 	bl	8008854 <SFU_LL_UART_Receive>
 8006fa4:	42b8      	cmp	r0, r7
 8006fa6:	d12a      	bne.n	8006ffe <SFU_COM_YMODEM_Receive+0xb2>
 8006fa8:	f89d 3013 	ldrb.w	r3, [sp, #19]
    status = HAL_OK;
 8006fac:	2b18      	cmp	r3, #24
 8006fae:	bf15      	itete	ne
 8006fb0:	f04f 0b01 	movne.w	fp, #1
 8006fb4:	f04f 0b00 	moveq.w	fp, #0
 8006fb8:	f04f 0a00 	movne.w	sl, #0
 8006fbc:	f04f 0a02 	moveq.w	sl, #2
 8006fc0:	e139      	b.n	8007236 <SFU_COM_YMODEM_Receive+0x2ea>
        (void) SFU_LL_UART_Receive(&char1, 1U, uTimeout);             /* Ymodem startup sequence : rb ==> 0x72 + 0x62 + 0x0D */
 8006fc2:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8006fc6:	2101      	movs	r1, #1
 8006fc8:	f10d 0013 	add.w	r0, sp, #19
 8006fcc:	f001 fc42 	bl	8008854 <SFU_LL_UART_Receive>
        (void) SFU_LL_UART_Receive(&char1, 1U, uTimeout);
 8006fd0:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8006fd4:	2101      	movs	r1, #1
 8006fd6:	f10d 0013 	add.w	r0, sp, #19
 8006fda:	f001 fc3b 	bl	8008854 <SFU_LL_UART_Receive>
    status = HAL_OK;
 8006fde:	f04f 0b00 	mov.w	fp, #0
        packet_size = 3U;
 8006fe2:	f04f 0a03 	mov.w	sl, #3
        break;
 8006fe6:	e126      	b.n	8007236 <SFU_COM_YMODEM_Receive+0x2ea>
    status = HAL_OK;
 8006fe8:	f04f 0b00 	mov.w	fp, #0
        packet_size = SFU_COM_YMODEM_PACKET_1K_SIZE;
 8006fec:	f44f 6a80 	mov.w	sl, #1024	; 0x400
 8006ff0:	e121      	b.n	8007236 <SFU_COM_YMODEM_Receive+0x2ea>
    status = HAL_OK;
 8006ff2:	f04f 0b00 	mov.w	fp, #0
 8006ff6:	e7cb      	b.n	8006f90 <SFU_COM_YMODEM_Receive+0x44>
        status = HAL_BUSY;
 8006ff8:	f04f 0b02 	mov.w	fp, #2
 8006ffc:	e7c8      	b.n	8006f90 <SFU_COM_YMODEM_Receive+0x44>
          status = HAL_ERROR;
 8006ffe:	f04f 0b01 	mov.w	fp, #1
 8007002:	e7c5      	b.n	8006f90 <SFU_COM_YMODEM_Receive+0x44>
      switch (ReceivePacket(m_aPacketData, &packet_length, SFU_COM_YMODEM_DOWNLOAD_TIMEOUT))
 8007004:	f1bb 0f00 	cmp.w	fp, #0
 8007008:	d012      	beq.n	8007030 <SFU_COM_YMODEM_Receive+0xe4>
 800700a:	f1bb 0f02 	cmp.w	fp, #2
 800700e:	f000 80e3 	beq.w	80071d8 <SFU_COM_YMODEM_Receive+0x28c>
          if (session_begin > 0U)
 8007012:	9b01      	ldr	r3, [sp, #4]
 8007014:	b103      	cbz	r3, 8007018 <SFU_COM_YMODEM_Receive+0xcc>
            errors ++;
 8007016:	3601      	adds	r6, #1
          if (errors > SFU_COM_YMODEM_MAX_ERRORS)
 8007018:	2e03      	cmp	r6, #3
 800701a:	f240 8150 	bls.w	80072be <SFU_COM_YMODEM_Receive+0x372>
            (void) SFU_COM_Serial_PutByte(SFU_COM_YMODEM_CA);
 800701e:	2018      	movs	r0, #24
 8007020:	f7ff ff87 	bl	8006f32 <SFU_COM_Serial_PutByte>
            (void) SFU_COM_Serial_PutByte(SFU_COM_YMODEM_CA);
 8007024:	2018      	movs	r0, #24
 8007026:	f7ff ff84 	bl	8006f32 <SFU_COM_Serial_PutByte>
            *peCOMStatus = SFU_COM_YMODEM_ABORT;
 800702a:	2302      	movs	r3, #2
 800702c:	702b      	strb	r3, [r5, #0]
 800702e:	e0db      	b.n	80071e8 <SFU_COM_YMODEM_Receive+0x29c>
          switch (packet_length)
 8007030:	f1ba 0f02 	cmp.w	sl, #2
 8007034:	d010      	beq.n	8007058 <SFU_COM_YMODEM_Receive+0x10c>
 8007036:	f1ba 0f03 	cmp.w	sl, #3
 800703a:	d012      	beq.n	8007062 <SFU_COM_YMODEM_Receive+0x116>
 800703c:	f1ba 0f00 	cmp.w	sl, #0
 8007040:	f040 812a 	bne.w	8007298 <SFU_COM_YMODEM_Receive+0x34c>
              (void) SFU_COM_Serial_PutByte(SFU_COM_YMODEM_ACK);
 8007044:	2006      	movs	r0, #6
 8007046:	f7ff ff74 	bl	8006f32 <SFU_COM_Serial_PutByte>
              *puSize = filesize;
 800704a:	9b02      	ldr	r3, [sp, #8]
 800704c:	4656      	mov	r6, sl
 800704e:	601c      	str	r4, [r3, #0]
  while ((session_done == 0U) && (*peCOMStatus == SFU_COM_YMODEM_OK))
 8007050:	782b      	ldrb	r3, [r5, #0]
 8007052:	2b00      	cmp	r3, #0
 8007054:	d08e      	beq.n	8006f74 <SFU_COM_YMODEM_Receive+0x28>
 8007056:	e09e      	b.n	8007196 <SFU_COM_YMODEM_Receive+0x24a>
              (void) SFU_COM_Serial_PutByte(SFU_COM_YMODEM_ACK);
 8007058:	2006      	movs	r0, #6
 800705a:	f7ff ff6a 	bl	8006f32 <SFU_COM_Serial_PutByte>
              *peCOMStatus = SFU_COM_YMODEM_ABORT;
 800705e:	f885 a000 	strb.w	sl, [r5]
              break;
 8007062:	465e      	mov	r6, fp
 8007064:	e0c0      	b.n	80071e8 <SFU_COM_YMODEM_Receive+0x29c>
                      i++;
 8007066:	3301      	adds	r3, #1
                    while ((*file_ptr != 0U) && (i < SFU_COM_YMODEM_FILE_NAME_LENGTH))
 8007068:	f812 1b01 	ldrb.w	r1, [r2], #1
 800706c:	b109      	cbz	r1, 8007072 <SFU_COM_YMODEM_Receive+0x126>
 800706e:	2b40      	cmp	r3, #64	; 0x40
 8007070:	d1f9      	bne.n	8007066 <SFU_COM_YMODEM_Receive+0x11a>
 8007072:	a805      	add	r0, sp, #20
                    file_ptr = m_aPacketData + SFU_COM_YMODEM_PACKET_DATA_INDEX;
 8007074:	4606      	mov	r6, r0
 8007076:	2300      	movs	r3, #0
 8007078:	e002      	b.n	8007080 <SFU_COM_YMODEM_Receive+0x134>
                      file_size[i] = *file_ptr;
 800707a:	f806 1b01 	strb.w	r1, [r6], #1
                      i++;
 800707e:	3301      	adds	r3, #1
                    while ((*file_ptr != (uint8_t) ' ') && (i < SFU_COM_YMODEM_FILE_SIZE_LENGTH))
 8007080:	5cd1      	ldrb	r1, [r2, r3]
 8007082:	2920      	cmp	r1, #32
 8007084:	d001      	beq.n	800708a <SFU_COM_YMODEM_Receive+0x13e>
 8007086:	2b10      	cmp	r3, #16
 8007088:	d1f7      	bne.n	800707a <SFU_COM_YMODEM_Receive+0x12e>
                    file_size[i] = (uint8_t) '\0';
 800708a:	3328      	adds	r3, #40	; 0x28
 800708c:	eb0d 0203 	add.w	r2, sp, r3
 8007090:	2300      	movs	r3, #0
 8007092:	f802 3c14 	strb.w	r3, [r2, #-20]
  if ((pInputStr[0] == (uint8_t)'0') && ((pInputStr[1] == (uint8_t)'x') || (pInputStr[1] == (uint8_t)'X')))
 8007096:	f89d 2014 	ldrb.w	r2, [sp, #20]
 800709a:	2a30      	cmp	r2, #48	; 0x30
 800709c:	d105      	bne.n	80070aa <SFU_COM_YMODEM_Receive+0x15e>
 800709e:	f89d 2015 	ldrb.w	r2, [sp, #21]
 80070a2:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 80070a6:	2a58      	cmp	r2, #88	; 0x58
 80070a8:	d049      	beq.n	800713e <SFU_COM_YMODEM_Receive+0x1f2>
 80070aa:	4619      	mov	r1, r3
        val = (val * 10U) + digit;
 80070ac:	260a      	movs	r6, #10
      if (pInputStr[i] == (uint8_t)'\0')
 80070ae:	f810 2b01 	ldrb.w	r2, [r0], #1
 80070b2:	b132      	cbz	r2, 80070c2 <SFU_COM_YMODEM_Receive+0x176>
      else if (((pInputStr[i] == (uint8_t)'k') || (pInputStr[i] == (uint8_t)'K')) && (i > 0U))
 80070b4:	2a6b      	cmp	r2, #107	; 0x6b
 80070b6:	d001      	beq.n	80070bc <SFU_COM_YMODEM_Receive+0x170>
 80070b8:	2a4b      	cmp	r2, #75	; 0x4b
 80070ba:	d142      	bne.n	8007142 <SFU_COM_YMODEM_Receive+0x1f6>
 80070bc:	2900      	cmp	r1, #0
 80070be:	d048      	beq.n	8007152 <SFU_COM_YMODEM_Receive+0x206>
        val = val << 10U;
 80070c0:	029b      	lsls	r3, r3, #10
        res = 1U;
 80070c2:	461c      	mov	r4, r3
        res = 1U;
 80070c4:	2201      	movs	r2, #1
 80070c6:	e04b      	b.n	8007160 <SFU_COM_YMODEM_Receive+0x214>
        digit = CONVERTHEX(pInputStr[i]);
 80070c8:	2a09      	cmp	r2, #9
 80070ca:	d908      	bls.n	80070de <SFU_COM_YMODEM_Receive+0x192>
 80070cc:	f1ac 0241 	sub.w	r2, ip, #65	; 0x41
 80070d0:	2a05      	cmp	r2, #5
 80070d2:	bf94      	ite	ls
 80070d4:	f1ac 0237 	subls.w	r2, ip, #55	; 0x37
 80070d8:	f1ac 0257 	subhi.w	r2, ip, #87	; 0x57
 80070dc:	b2d2      	uxtb	r2, r2
      i++;
 80070de:	3601      	adds	r6, #1
    while ((i < 11U) && (pInputStr[i] != (uint8_t)'\0'))
 80070e0:	2e0b      	cmp	r6, #11
        val = (val << 4U) + digit;
 80070e2:	eb02 1303 	add.w	r3, r2, r3, lsl #4
    while ((i < 11U) && (pInputStr[i] != (uint8_t)'\0'))
 80070e6:	d00e      	beq.n	8007106 <SFU_COM_YMODEM_Receive+0x1ba>
 80070e8:	f810 c006 	ldrb.w	ip, [r0, r6]
 80070ec:	f1bc 0f00 	cmp.w	ip, #0
 80070f0:	d009      	beq.n	8007106 <SFU_COM_YMODEM_Receive+0x1ba>
      if (ISVALIDHEX(pInputStr[i]))
 80070f2:	f1ac 0130 	sub.w	r1, ip, #48	; 0x30
 80070f6:	b2ca      	uxtb	r2, r1
 80070f8:	f02c 0120 	bic.w	r1, ip, #32
 80070fc:	3941      	subs	r1, #65	; 0x41
 80070fe:	2905      	cmp	r1, #5
 8007100:	d9e2      	bls.n	80070c8 <SFU_COM_YMODEM_Receive+0x17c>
 8007102:	2a09      	cmp	r2, #9
 8007104:	d9eb      	bls.n	80070de <SFU_COM_YMODEM_Receive+0x192>
    if (pInputStr[i] == (uint8_t)'\0')
 8007106:	f106 0228 	add.w	r2, r6, #40	; 0x28
 800710a:	eb0d 0602 	add.w	r6, sp, r2
 800710e:	f816 2c14 	ldrb.w	r2, [r6, #-20]
 8007112:	2a00      	cmp	r2, #0
 8007114:	bf08      	it	eq
 8007116:	461c      	moveq	r4, r3
                    if (SFU_COM_YMODEM_HeaderPktRxCpltCallback((uint32_t) filesize) == SFU_SUCCESS)
 8007118:	4620      	mov	r0, r4
 800711a:	f001 f9f9 	bl	8008510 <SFU_COM_YMODEM_HeaderPktRxCpltCallback>
 800711e:	42b8      	cmp	r0, r7
 8007120:	d124      	bne.n	800716c <SFU_COM_YMODEM_Receive+0x220>
                      (void) SFU_COM_Serial_PutByte(SFU_COM_YMODEM_ACK);
 8007122:	2006      	movs	r0, #6
 8007124:	f7ff ff05 	bl	8006f32 <SFU_COM_Serial_PutByte>
                      (void) SFU_LL_UART_Flush();
 8007128:	f001 fba8 	bl	800887c <SFU_LL_UART_Flush>
                      (void) SFU_COM_Serial_PutByte(SFU_COM_YMODEM_CRC16);
 800712c:	2043      	movs	r0, #67	; 0x43
                    (void) SFU_COM_Serial_PutByte(SFU_COM_YMODEM_ACK);
 800712e:	f7ff ff00 	bl	8006f32 <SFU_COM_Serial_PutByte>
                session_begin = 1;
 8007132:	2301      	movs	r3, #1
                packets_received ++;
 8007134:	f109 0901 	add.w	r9, r9, #1
                session_begin = 1;
 8007138:	9301      	str	r3, [sp, #4]
          errors = 0U;
 800713a:	2600      	movs	r6, #0
    while ((file_done == 0U) && (*peCOMStatus == SFU_COM_YMODEM_OK))
 800713c:	e054      	b.n	80071e8 <SFU_COM_YMODEM_Receive+0x29c>
 800713e:	2602      	movs	r6, #2
 8007140:	e7d2      	b.n	80070e8 <SFU_COM_YMODEM_Receive+0x19c>
      else if (((pInputStr[i] == (uint8_t)'m') || (pInputStr[i] == (uint8_t)'M')) && (i > 0U))
 8007142:	f002 0cdf 	and.w	ip, r2, #223	; 0xdf
 8007146:	f1bc 0f4d 	cmp.w	ip, #77	; 0x4d
 800714a:	d102      	bne.n	8007152 <SFU_COM_YMODEM_Receive+0x206>
 800714c:	b109      	cbz	r1, 8007152 <SFU_COM_YMODEM_Receive+0x206>
        val = val << 20U;
 800714e:	051b      	lsls	r3, r3, #20
        res = 1U;
 8007150:	e7b7      	b.n	80070c2 <SFU_COM_YMODEM_Receive+0x176>
      else if (ISVALIDDEC(pInputStr[i]))
 8007152:	3a30      	subs	r2, #48	; 0x30
 8007154:	b2d2      	uxtb	r2, r2
 8007156:	2a09      	cmp	r2, #9
 8007158:	d8de      	bhi.n	8007118 <SFU_COM_YMODEM_Receive+0x1cc>
        val = (val * 10U) + digit;
 800715a:	fb06 2303 	mla	r3, r6, r3, r2
 800715e:	2200      	movs	r2, #0
      i++;
 8007160:	3101      	adds	r1, #1
    while ((i < 11U) && (res != 1U))
 8007162:	290b      	cmp	r1, #11
 8007164:	d0d8      	beq.n	8007118 <SFU_COM_YMODEM_Receive+0x1cc>
 8007166:	2a00      	cmp	r2, #0
 8007168:	d0a1      	beq.n	80070ae <SFU_COM_YMODEM_Receive+0x162>
 800716a:	e7d5      	b.n	8007118 <SFU_COM_YMODEM_Receive+0x1cc>
                      tmp = SFU_COM_YMODEM_CA;
 800716c:	2318      	movs	r3, #24
                      (void) SFU_LL_UART_Transmit(&tmp, 1U, SFU_COM_YMODEM_NAK_TIMEOUT);
 800716e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8007172:	2101      	movs	r1, #1
 8007174:	f10d 0013 	add.w	r0, sp, #19
                      tmp = SFU_COM_YMODEM_CA;
 8007178:	f88d 3013 	strb.w	r3, [sp, #19]
                      (void) SFU_LL_UART_Transmit(&tmp, 1U, SFU_COM_YMODEM_NAK_TIMEOUT);
 800717c:	f001 fb56 	bl	800882c <SFU_LL_UART_Transmit>
                      (void) SFU_LL_UART_Transmit(&tmp, 1U, SFU_COM_YMODEM_NAK_TIMEOUT);
 8007180:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8007184:	2101      	movs	r1, #1
 8007186:	f10d 0013 	add.w	r0, sp, #19
 800718a:	f001 fb4f 	bl	800882c <SFU_LL_UART_Transmit>
 800718e:	e6e3      	b.n	8006f58 <SFU_COM_YMODEM_Receive+0xc>
                    (void) SFU_COM_Serial_PutByte(SFU_COM_YMODEM_ACK);
 8007190:	2006      	movs	r0, #6
 8007192:	f7ff fece 	bl	8006f32 <SFU_COM_Serial_PutByte>
  (void) BSP_LED_Off(SFU_STATUS_LED);
 8007196:	2000      	movs	r0, #0
 8007198:	f001 fe14 	bl	8008dc4 <BSP_LED_Off>
  if (*peCOMStatus == SFU_COM_YMODEM_OK)
 800719c:	782b      	ldrb	r3, [r5, #0]
 800719e:	2b00      	cmp	r3, #0
 80071a0:	f47f aeda 	bne.w	8006f58 <SFU_COM_YMODEM_Receive+0xc>
    return SFU_SUCCESS;
 80071a4:	4809      	ldr	r0, [pc, #36]	; (80071cc <SFU_COM_YMODEM_Receive+0x280>)
 80071a6:	e6d9      	b.n	8006f5c <SFU_COM_YMODEM_Receive+0x10>
                  if (SFU_COM_YMODEM_DataPktRxCpltCallback(&m_aPacketData[SFU_COM_YMODEM_PACKET_DATA_INDEX],
 80071a8:	4809      	ldr	r0, [pc, #36]	; (80071d0 <SFU_COM_YMODEM_Receive+0x284>)
 80071aa:	4651      	mov	r1, sl
 80071ac:	f001 f9c4 	bl	8008538 <SFU_COM_YMODEM_DataPktRxCpltCallback>
 80071b0:	42b8      	cmp	r0, r7
 80071b2:	d101      	bne.n	80071b8 <SFU_COM_YMODEM_Receive+0x26c>
                    (void) SFU_COM_Serial_PutByte(SFU_COM_YMODEM_ACK);
 80071b4:	2006      	movs	r0, #6
 80071b6:	e7ba      	b.n	800712e <SFU_COM_YMODEM_Receive+0x1e2>
                    (void) SFU_COM_Serial_PutByte(SFU_COM_YMODEM_CA);
 80071b8:	2018      	movs	r0, #24
 80071ba:	f7ff feba 	bl	8006f32 <SFU_COM_Serial_PutByte>
                    (void) SFU_COM_Serial_PutByte(SFU_COM_YMODEM_CA);
 80071be:	2018      	movs	r0, #24
 80071c0:	f7ff feb7 	bl	8006f32 <SFU_COM_Serial_PutByte>
                    *peCOMStatus = SFU_COM_YMODEM_DATA;
 80071c4:	2304      	movs	r3, #4
 80071c6:	702b      	strb	r3, [r5, #0]
 80071c8:	e7b3      	b.n	8007132 <SFU_COM_YMODEM_Receive+0x1e6>
 80071ca:	bf00      	nop
 80071cc:	00122f11 	.word	0x00122f11
 80071d0:	20001114 	.word	0x20001114
 80071d4:	20001110 	.word	0x20001110
          (void) SFU_COM_Serial_PutByte(SFU_COM_YMODEM_CA);
 80071d8:	2018      	movs	r0, #24
 80071da:	f7ff feaa 	bl	8006f32 <SFU_COM_Serial_PutByte>
          (void) SFU_COM_Serial_PutByte(SFU_COM_YMODEM_CA);
 80071de:	2018      	movs	r0, #24
 80071e0:	f7ff fea7 	bl	8006f32 <SFU_COM_Serial_PutByte>
          *peCOMStatus = SFU_COM_YMODEM_ABORT;
 80071e4:	f885 b000 	strb.w	fp, [r5]
    while ((file_done == 0U) && (*peCOMStatus == SFU_COM_YMODEM_OK))
 80071e8:	782b      	ldrb	r3, [r5, #0]
 80071ea:	2b00      	cmp	r3, #0
 80071ec:	f47f af30 	bne.w	8007050 <SFU_COM_YMODEM_Receive+0x104>
  (void) SFU_LL_SECU_IWDG_Refresh();
 80071f0:	f001 fd84 	bl	8008cfc <SFU_LL_SECU_IWDG_Refresh>
  eRetStatus = SFU_LL_UART_Receive(&char1, 1, uTimeout);
 80071f4:	f640 32b8 	movw	r2, #3000	; 0xbb8
 80071f8:	2101      	movs	r1, #1
 80071fa:	f10d 0013 	add.w	r0, sp, #19
 80071fe:	f001 fb29 	bl	8008854 <SFU_LL_UART_Receive>
  if (eRetStatus == SFU_SUCCESS)
 8007202:	42b8      	cmp	r0, r7
 8007204:	f47f af05 	bne.w	8007012 <SFU_COM_YMODEM_Receive+0xc6>
    switch (char1)
 8007208:	f89d 3013 	ldrb.w	r3, [sp, #19]
 800720c:	2b18      	cmp	r3, #24
 800720e:	f43f aec2 	beq.w	8006f96 <SFU_COM_YMODEM_Receive+0x4a>
 8007212:	f63f aeb3 	bhi.w	8006f7c <SFU_COM_YMODEM_Receive+0x30>
 8007216:	2b02      	cmp	r3, #2
 8007218:	f43f aee6 	beq.w	8006fe8 <SFU_COM_YMODEM_Receive+0x9c>
 800721c:	2b04      	cmp	r3, #4
 800721e:	f43f aee8 	beq.w	8006ff2 <SFU_COM_YMODEM_Receive+0xa6>
 8007222:	2b01      	cmp	r3, #1
 8007224:	bf15      	itete	ne
 8007226:	f04f 0b01 	movne.w	fp, #1
 800722a:	f04f 0b00 	moveq.w	fp, #0
 800722e:	f04f 0a00 	movne.w	sl, #0
 8007232:	f04f 0a80 	moveq.w	sl, #128	; 0x80
    *pData = char1;
 8007236:	f89d 2013 	ldrb.w	r2, [sp, #19]
 800723a:	f888 2000 	strb.w	r2, [r8]

    if (packet_size >= SFU_COM_YMODEM_PACKET_SIZE)
 800723e:	f1ba 0f7f 	cmp.w	sl, #127	; 0x7f
 8007242:	f67f aedf 	bls.w	8007004 <SFU_COM_YMODEM_Receive+0xb8>
    {

#ifndef MINICOM_YMODEM
      eRetStatus = SFU_LL_UART_Receive(&pData[SFU_COM_YMODEM_PACKET_NUMBER_INDEX],
 8007246:	4823      	ldr	r0, [pc, #140]	; (80072d4 <SFU_COM_YMODEM_Receive+0x388>)
 8007248:	f640 32b8 	movw	r2, #3000	; 0xbb8
 800724c:	f10a 0104 	add.w	r1, sl, #4
 8007250:	f001 fb00 	bl	8008854 <SFU_LL_UART_Receive>
        eRetStatus = SFU_SUCCESS;
      }
#endif /* MINICOM_YMODEM */

      /* Simple packet sanity check */
      if (eRetStatus == SFU_SUCCESS)
 8007254:	42b8      	cmp	r0, r7
 8007256:	f47f aedc 	bne.w	8007012 <SFU_COM_YMODEM_Receive+0xc6>
      {
        status = HAL_OK;

        if (pData[SFU_COM_YMODEM_PACKET_NUMBER_INDEX] != ((pData[SFU_COM_YMODEM_PACKET_CNUMBER_INDEX]) ^
 800725a:	f898 2003 	ldrb.w	r2, [r8, #3]
 800725e:	f898 1002 	ldrb.w	r1, [r8, #2]
 8007262:	43d2      	mvns	r2, r2
 8007264:	b2d2      	uxtb	r2, r2
 8007266:	4291      	cmp	r1, r2
 8007268:	f47f aed3 	bne.w	8007012 <SFU_COM_YMODEM_Receive+0xc6>
          status = HAL_ERROR;
        }
        else
        {
          /* Check packet CRC*/
          crc = (((uint32_t)pData[ packet_size + SFU_COM_YMODEM_PACKET_DATA_INDEX ]) << 8U) & 0x0000FF00U;
 800726c:	eb08 020a 	add.w	r2, r8, sl
          crc += pData[ packet_size + SFU_COM_YMODEM_PACKET_DATA_INDEX + 1U ];

          /*Configure CRC with 16-bit polynomial*/
          if (SFU_LL_CRC_Config(SFU_CRC_CONFIG_16BIT) == SFU_SUCCESS)
 8007270:	2002      	movs	r0, #2
          crc = (((uint32_t)pData[ packet_size + SFU_COM_YMODEM_PACKET_DATA_INDEX ]) << 8U) & 0x0000FF00U;
 8007272:	7913      	ldrb	r3, [r2, #4]
          crc += pData[ packet_size + SFU_COM_YMODEM_PACKET_DATA_INDEX + 1U ];
 8007274:	f892 b005 	ldrb.w	fp, [r2, #5]
          crc = (((uint32_t)pData[ packet_size + SFU_COM_YMODEM_PACKET_DATA_INDEX ]) << 8U) & 0x0000FF00U;
 8007278:	9303      	str	r3, [sp, #12]
          if (SFU_LL_CRC_Config(SFU_CRC_CONFIG_16BIT) == SFU_SUCCESS)
 800727a:	f001 fa61 	bl	8008740 <SFU_LL_CRC_Config>
 800727e:	42b8      	cmp	r0, r7
 8007280:	f47f aec7 	bne.w	8007012 <SFU_COM_YMODEM_Receive+0xc6>
          {
            if (SFU_LL_CRC_Calculate((uint32_t *)(uint32_t)&pData[SFU_COM_YMODEM_PACKET_DATA_INDEX], packet_size) != crc)
 8007284:	4814      	ldr	r0, [pc, #80]	; (80072d8 <SFU_COM_YMODEM_Receive+0x38c>)
 8007286:	4651      	mov	r1, sl
 8007288:	f001 fa84 	bl	8008794 <SFU_LL_CRC_Calculate>
          crc += pData[ packet_size + SFU_COM_YMODEM_PACKET_DATA_INDEX + 1U ];
 800728c:	9b03      	ldr	r3, [sp, #12]
 800728e:	eb0b 2b03 	add.w	fp, fp, r3, lsl #8
            if (SFU_LL_CRC_Calculate((uint32_t *)(uint32_t)&pData[SFU_COM_YMODEM_PACKET_DATA_INDEX], packet_size) != crc)
 8007292:	4583      	cmp	fp, r0
 8007294:	f47f aebd 	bne.w	8007012 <SFU_COM_YMODEM_Receive+0xc6>
              if (m_aPacketData[SFU_COM_YMODEM_PACKET_NUMBER_INDEX] != (packets_received & 0x000000FFU))
 8007298:	f898 1002 	ldrb.w	r1, [r8, #2]
 800729c:	fa5f f289 	uxtb.w	r2, r9
 80072a0:	4291      	cmp	r1, r2
 80072a2:	f47f af4a 	bne.w	800713a <SFU_COM_YMODEM_Receive+0x1ee>
                if (packets_received == 0U)
 80072a6:	f1b9 0f00 	cmp.w	r9, #0
 80072aa:	f47f af7d 	bne.w	80071a8 <SFU_COM_YMODEM_Receive+0x25c>
                  if (m_aPacketData[SFU_COM_YMODEM_PACKET_DATA_INDEX] != 0U)
 80072ae:	f898 3004 	ldrb.w	r3, [r8, #4]
 80072b2:	2b00      	cmp	r3, #0
 80072b4:	f43f af6c 	beq.w	8007190 <SFU_COM_YMODEM_Receive+0x244>
                    file_ptr = m_aPacketData + SFU_COM_YMODEM_PACKET_DATA_INDEX;
 80072b8:	4a07      	ldr	r2, [pc, #28]	; (80072d8 <SFU_COM_YMODEM_Receive+0x38c>)
                    i = 0U;
 80072ba:	464b      	mov	r3, r9
 80072bc:	e6d4      	b.n	8007068 <SFU_COM_YMODEM_Receive+0x11c>
            (void) SFU_COM_Serial_PutByte(SFU_COM_YMODEM_CRC16); /* Ask for a packet */
 80072be:	2043      	movs	r0, #67	; 0x43
 80072c0:	f7ff fe37 	bl	8006f32 <SFU_COM_Serial_PutByte>
            TRACE("\b.");                                 /* Replace C char by . on display console */
 80072c4:	4805      	ldr	r0, [pc, #20]	; (80072dc <SFU_COM_YMODEM_Receive+0x390>)
 80072c6:	f002 fe1d 	bl	8009f04 <iprintf>
            (void) BSP_LED_Toggle(SFU_STATUS_LED);
 80072ca:	2000      	movs	r0, #0
 80072cc:	f001 fd88 	bl	8008de0 <BSP_LED_Toggle>
 80072d0:	e78a      	b.n	80071e8 <SFU_COM_YMODEM_Receive+0x29c>
 80072d2:	bf00      	nop
 80072d4:	20001112 	.word	0x20001112
 80072d8:	20001114 	.word	0x20001114
 80072dc:	0800ba35 	.word	0x0800ba35

080072e0 <SFU_COM_Init>:
  * @brief  SFU Com Init function.
  * @param  None.
  * @retval SFU_ErrorStatus SFU_SUCCESS if successful, SFU_ERROR otherwise.
  */
SFU_ErrorStatus SFU_COM_Init(void)
{
 80072e0:	b508      	push	{r3, lr}
#if defined(__GNUC__)
  setvbuf(stdout, NULL, _IONBF, 0);
 80072e2:	4b06      	ldr	r3, [pc, #24]	; (80072fc <SFU_COM_Init+0x1c>)
 80072e4:	6818      	ldr	r0, [r3, #0]
 80072e6:	2300      	movs	r3, #0
 80072e8:	4619      	mov	r1, r3
 80072ea:	6880      	ldr	r0, [r0, #8]
 80072ec:	2202      	movs	r2, #2
 80072ee:	f002 fe97 	bl	800a020 <setvbuf>
#endif /* __GNUC__ */
  return SFU_LL_UART_Init();
}
 80072f2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  return SFU_LL_UART_Init();
 80072f6:	f001 ba75 	b.w	80087e4 <SFU_LL_UART_Init>
 80072fa:	bf00      	nop
 80072fc:	20001070 	.word	0x20001070

08007300 <SFU_COM_DeInit>:
  * @param  None.
  * @retval SFU_ErrorStatus SFU_SUCCESS if successful, SFU_ERROR otherwise.
  */
SFU_ErrorStatus SFU_COM_DeInit(void)
{
  return SFU_LL_UART_DeInit();
 8007300:	f001 ba90 	b.w	8008824 <SFU_LL_UART_DeInit>

08007304 <SFU_COM_Serial_PutString>:
SFU_ErrorStatus SFU_COM_Serial_PutString(uint8_t *pString)
{
  uint16_t length = 0U;

  /* Check the pointers allocation */
  if (pString == NULL)
 8007304:	b140      	cbz	r0, 8007318 <SFU_COM_Serial_PutString+0x14>
 8007306:	2300      	movs	r3, #0
 8007308:	b299      	uxth	r1, r3
  {
    return SFU_ERROR;
  }

  while (pString[length] != (uint8_t)'\0')
 800730a:	3301      	adds	r3, #1
 800730c:	5c42      	ldrb	r2, [r0, r1]
 800730e:	2a00      	cmp	r2, #0
 8007310:	d1fa      	bne.n	8007308 <SFU_COM_Serial_PutString+0x4>
  {
    length++;
  }

  return SFU_LL_UART_Transmit(pString, length, SFU_COM_TRACE_SERIAL_TIME_OUT);
 8007312:	2264      	movs	r2, #100	; 0x64
 8007314:	f001 ba8a 	b.w	800882c <SFU_LL_UART_Transmit>

}
 8007318:	f641 70e1 	movw	r0, #8161	; 0x1fe1
 800731c:	4770      	bx	lr

0800731e <__io_putchar>:
  * @brief  Retargets the C library printf function to SFU UART.
  * @param  None
  * @retval ch
  */
PUTCHAR_PROTOTYPE
{
 800731e:	b507      	push	{r0, r1, r2, lr}
  /* Place your implementation of fputc here */
  /* e.g. write a character to the USART1 and Loop until the end of transmission */
  (void) SFU_LL_UART_Transmit((uint8_t *)&ch, 1U, 0xFFFFU);
 8007320:	f64f 72ff 	movw	r2, #65535	; 0xffff
{
 8007324:	9001      	str	r0, [sp, #4]
  (void) SFU_LL_UART_Transmit((uint8_t *)&ch, 1U, 0xFFFFU);
 8007326:	2101      	movs	r1, #1
 8007328:	a801      	add	r0, sp, #4
 800732a:	f001 fa7f 	bl	800882c <SFU_LL_UART_Transmit>

  return ch;
}
 800732e:	9801      	ldr	r0, [sp, #4]
 8007330:	b003      	add	sp, #12
 8007332:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08007338 <SFU_EXCPT_SetError>:
  * @param  Error Error code.
  * @retval None
  */
void SFU_EXCPT_SetError(SFU_EXCPT_IdTypeDef eExceptionId)
{
  if (eExceptionId <= SFU_EXCPT_UNKNOWN)
 8007338:	2818      	cmp	r0, #24
 800733a:	d805      	bhi.n	8007348 <SFU_EXCPT_SetError+0x10>
  {
#ifdef SFU_DEBUG_MODE
    TRACE("\r\n\t%s",m_aErrorStrings[(uint32_t) eExceptionId]);
 800733c:	4b03      	ldr	r3, [pc, #12]	; (800734c <SFU_EXCPT_SetError+0x14>)
 800733e:	f853 1020 	ldr.w	r1, [r3, r0, lsl #2]
 8007342:	4803      	ldr	r0, [pc, #12]	; (8007350 <SFU_EXCPT_SetError+0x18>)
 8007344:	f002 bdde 	b.w	8009f04 <iprintf>
#endif /* SFU_DEBUG_MODE */
  }
}
 8007348:	4770      	bx	lr
 800734a:	bf00      	nop
 800734c:	0800b0ec 	.word	0x0800b0ec
 8007350:	0800ba38 	.word	0x0800ba38

08007354 <SFU_EXCPT_IrqExceptionHandler>:
  *         it's not possible to continue without compromising the stability or
  *         the security of the solution. A System Reset is forced at the end.
  * @retval None
  */
void SFU_EXCPT_IrqExceptionHandler(SFU_EXCPT_IdTypeDef eExceptionId)
{
 8007354:	b510      	push	{r4, lr}
#ifdef SFU_DEBUG_MODE
  uint8_t message[150];
  uint32_t i = 0U;

  /* Avoid warning with cast frombetween char* and uint8_t* */
  while ((m_aErrorStrings[(uint32_t) eExceptionId][i] != 0u) && (i < 149U))
 8007356:	4b0f      	ldr	r3, [pc, #60]	; (8007394 <SFU_EXCPT_IrqExceptionHandler+0x40>)
{
 8007358:	b0a6      	sub	sp, #152	; 0x98
 800735a:	466a      	mov	r2, sp
  while ((m_aErrorStrings[(uint32_t) eExceptionId][i] != 0u) && (i < 149U))
 800735c:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 8007360:	4614      	mov	r4, r2
  uint32_t i = 0U;
 8007362:	2300      	movs	r3, #0
  while ((m_aErrorStrings[(uint32_t) eExceptionId][i] != 0u) && (i < 149U))
 8007364:	5cc1      	ldrb	r1, [r0, r3]
 8007366:	b109      	cbz	r1, 800736c <SFU_EXCPT_IrqExceptionHandler+0x18>
 8007368:	2b95      	cmp	r3, #149	; 0x95
 800736a:	d10e      	bne.n	800738a <SFU_EXCPT_IrqExceptionHandler+0x36>
  {
    message[i] = m_aErrorStrings[(uint32_t) eExceptionId][i];
    i++;
  }
  message[i] = 0U;
 800736c:	3398      	adds	r3, #152	; 0x98
 800736e:	446b      	add	r3, sp
 8007370:	2200      	movs	r2, #0
 8007372:	f803 2c98 	strb.w	r2, [r3, #-152]

  /* Print relevant error message */
  TRACE_IRQ((uint8_t *)"\r\n\t  ");
 8007376:	4808      	ldr	r0, [pc, #32]	; (8007398 <SFU_EXCPT_IrqExceptionHandler+0x44>)
 8007378:	f7ff ffc4 	bl	8007304 <SFU_COM_Serial_PutString>
  TRACE_IRQ(message);
 800737c:	4620      	mov	r0, r4
 800737e:	f7ff ffc1 	bl	8007304 <SFU_COM_Serial_PutString>
  /* Try to take an action */
  SFU_EXCPT_RuntimeExceptionHandler(eExceptionId);

  /* It's not possible to continue without compromising the stability or the security of the solution.
  The State Machine needs to be aborted and a Reset must be triggered */
  SFU_BOOT_ForceReboot();
 8007382:	f7ff fc29 	bl	8006bd8 <SFU_BOOT_ForceReboot>
}
 8007386:	b026      	add	sp, #152	; 0x98
 8007388:	bd10      	pop	{r4, pc}
    message[i] = m_aErrorStrings[(uint32_t) eExceptionId][i];
 800738a:	f802 1b01 	strb.w	r1, [r2], #1
    i++;
 800738e:	3301      	adds	r3, #1
 8007390:	e7e8      	b.n	8007364 <SFU_EXCPT_IrqExceptionHandler+0x10>
 8007392:	bf00      	nop
 8007394:	0800b0ec 	.word	0x0800b0ec
 8007398:	0800ba3e 	.word	0x0800ba3e

0800739c <SFU_EXCPT_Security_Error>:
  *         This parameter can be a value of @ref SFU_EXCPT_ID_Structure_definition.
  * @retval SFU_ErrorStatus SFU_SUCCESS if successful, SFU_ERROR otherwise.
  */

void SFU_EXCPT_Security_Error(void)
{
 800739c:	b508      	push	{r3, lr}
  TRACE("\r\n= [SBOOT] Security issue : execution stopped !");
 800739e:	480e      	ldr	r0, [pc, #56]	; (80073d8 <SFU_EXCPT_Security_Error+0x3c>)
 80073a0:	f002 fdb0 	bl	8009f04 <iprintf>
  HAL_Delay(1000);
 80073a4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80073a8:	f001 fdc8 	bl	8008f3c <HAL_Delay>
  /* While(1) by-passed by an fault injection attack ==> Reset */
  if (0U != SFU_MPU_IsUnprivileged())
 80073ac:	f001 f992 	bl	80086d4 <SFU_MPU_IsUnprivileged>
 80073b0:	b120      	cbz	r0, 80073bc <SFU_EXCPT_Security_Error+0x20>
  }
  else
  {
    NVIC_SystemReset();
  }
}
 80073b2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    SFU_MPU_SysCall((uint32_t)SB_SYSCALL_RESET);
 80073b6:	2002      	movs	r0, #2
 80073b8:	f001 b988 	b.w	80086cc <SFU_MPU_SysCall>
 80073bc:	f3bf 8f4f 	dsb	sy
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 80073c0:	4906      	ldr	r1, [pc, #24]	; (80073dc <SFU_EXCPT_Security_Error+0x40>)
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 80073c2:	4b07      	ldr	r3, [pc, #28]	; (80073e0 <SFU_EXCPT_Security_Error+0x44>)
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 80073c4:	68ca      	ldr	r2, [r1, #12]
 80073c6:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 80073ca:	4313      	orrs	r3, r2
 80073cc:	60cb      	str	r3, [r1, #12]
 80073ce:	f3bf 8f4f 	dsb	sy
    __NOP();
 80073d2:	bf00      	nop
  for(;;)                                                           /* wait until reset */
 80073d4:	e7fd      	b.n	80073d2 <SFU_EXCPT_Security_Error+0x36>
 80073d6:	bf00      	nop
 80073d8:	0800ba44 	.word	0x0800ba44
 80073dc:	e000ed00 	.word	0xe000ed00
 80073e0:	05fa0004 	.word	0x05fa0004

080073e4 <SFU_EXCPT_Init>:
       ...
  */
  e_ret_status = SFU_SUCCESS;

  return e_ret_status;
}
 80073e4:	4800      	ldr	r0, [pc, #0]	; (80073e8 <SFU_EXCPT_Init+0x4>)
 80073e6:	4770      	bx	lr
 80073e8:	00122f11 	.word	0x00122f11

080073ec <SFU_EXCPT_DeInit>:
 80073ec:	4800      	ldr	r0, [pc, #0]	; (80073f0 <SFU_EXCPT_DeInit+0x4>)
 80073ee:	4770      	bx	lr
 80073f0:	00122f11 	.word	0x00122f11

080073f4 <MemoryCompare>:
  * @param  pAdd2 Address of the second buffer to compare
  * @param  Size Size of the comparison
  * @retval SFU_ SUCCESS if equal, a SFU_error otherwise.
  */
SFU_ErrorStatus MemoryCompare(uint8_t *pAdd1, uint8_t *pAdd2, uint32_t Size)
{
 80073f4:	b537      	push	{r0, r1, r2, r4, r5, lr}
  /* Use of __IO to force recheck of these variables values */
  uint8_t __IO result = 0x00U;
 80073f6:	2300      	movs	r3, #0
 80073f8:	f88d 3003 	strb.w	r3, [sp, #3]
  uint32_t __IO i;
  uint32_t tmp;

  for (i = 0U; i < Size; i++)
 80073fc:	9301      	str	r3, [sp, #4]
 80073fe:	9b01      	ldr	r3, [sp, #4]
 8007400:	4293      	cmp	r3, r2
 8007402:	d311      	bcc.n	8007428 <MemoryCompare+0x34>
    tmp = pAdd1[i];
    tmp ^= pAdd2[i];
    result |= tmp;
  }

  if ((result == 0x00U) && (i == Size)) /* Add check that loop exited normally without any fault injection */
 8007404:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8007408:	b9db      	cbnz	r3, 8007442 <MemoryCompare+0x4e>
 800740a:	9b01      	ldr	r3, [sp, #4]
 800740c:	4293      	cmp	r3, r2
 800740e:	d118      	bne.n	8007442 <MemoryCompare+0x4e>
  {
    return (((result != 0x00U) || (i != Size))? SFU_ERROR : SFU_SUCCESS);
 8007410:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8007414:	b9ab      	cbnz	r3, 8007442 <MemoryCompare+0x4e>
 8007416:	9901      	ldr	r1, [sp, #4]
 8007418:	4b0b      	ldr	r3, [pc, #44]	; (8007448 <MemoryCompare+0x54>)
 800741a:	f641 70e1 	movw	r0, #8161	; 0x1fe1
 800741e:	4291      	cmp	r1, r2
 8007420:	bf08      	it	eq
 8007422:	4618      	moveq	r0, r3
  }
  else
  {
    return SFU_ERROR;
  }
}
 8007424:	b003      	add	sp, #12
 8007426:	bd30      	pop	{r4, r5, pc}
    tmp = pAdd1[i];
 8007428:	9c01      	ldr	r4, [sp, #4]
    tmp ^= pAdd2[i];
 800742a:	9d01      	ldr	r5, [sp, #4]
    result |= tmp;
 800742c:	5d04      	ldrb	r4, [r0, r4]
 800742e:	5d4d      	ldrb	r5, [r1, r5]
 8007430:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8007434:	406c      	eors	r4, r5
 8007436:	4323      	orrs	r3, r4
 8007438:	f88d 3003 	strb.w	r3, [sp, #3]
  for (i = 0U; i < Size; i++)
 800743c:	9b01      	ldr	r3, [sp, #4]
 800743e:	3301      	adds	r3, #1
 8007440:	e7dc      	b.n	80073fc <MemoryCompare+0x8>
    return SFU_ERROR;
 8007442:	f641 70e1 	movw	r0, #8161	; 0x1fe1
 8007446:	e7ed      	b.n	8007424 <MemoryCompare+0x30>
 8007448:	00122f11 	.word	0x00122f11

0800744c <VerifyFwSignatureScatter.part.0>:
  * @param pSE_Payload: pointer to Payload Buffer descriptor.
  * @param SE_FwType: Type of Fw Image.
  *        This parameter can be SE_FW_IMAGE_COMPLETE or SE_FW_IMAGE_PARTIAL.
  * @retval SE_ErrorStatus SE_SUCCESS if successful, SE_ERROR otherwise.
  */
SFU_ErrorStatus VerifyFwSignatureScatter(SE_StatusTypeDef *pSeStatus, uint32_t SlotNumber,
 800744c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007450:	f6ad 0d4c 	subw	sp, sp, #2124	; 0x84c
 8007454:	4604      	mov	r4, r0
 8007456:	9107      	str	r1, [sp, #28]
 8007458:	4611      	mov	r1, r2
 800745a:	f8dd 2870 	ldr.w	r2, [sp, #2160]	; 0x870
 800745e:	461e      	mov	r6, r3
  {
    return SFU_ERROR;
  }

  /* Check the parameters value and set fw_size and fw_tag to check */
  if (SE_FwType == SE_FW_IMAGE_COMPLETE)
 8007460:	2a00      	cmp	r2, #0
 8007462:	f040 8094 	bne.w	800758e <VerifyFwSignatureScatter.part.0+0x142>
  {
    fw_size = pSE_Metadata->FwSize;
 8007466:	688b      	ldr	r3, [r1, #8]
 8007468:	9303      	str	r3, [sp, #12]
    fw_tag = pSE_Metadata->FwTag;
 800746a:	f101 0b14 	add.w	fp, r1, #20
  else
  {
    return SFU_ERROR;
  }

  if ((pSE_Payload->PayloadSize[0] + pSE_Payload->PayloadSize[1]) != fw_size)
 800746e:	e9d6 3002 	ldrd	r3, r0, [r6, #8]
 8007472:	9d03      	ldr	r5, [sp, #12]
 8007474:	4403      	add	r3, r0
 8007476:	42ab      	cmp	r3, r5
 8007478:	f040 808b 	bne.w	8007592 <VerifyFwSignatureScatter.part.0+0x146>
  {
    scatter_nb = 2U;
  }
  else
  {
    scatter_nb = 1U;
 800747c:	2800      	cmp	r0, #0
  }


  /* Encryption process*/
  se_ret_status = SE_AuthenticateFW_Init(pSeStatus, pSE_Metadata, SE_FwType);
 800747e:	4620      	mov	r0, r4
    scatter_nb = 1U;
 8007480:	bf14      	ite	ne
 8007482:	2502      	movne	r5, #2
 8007484:	2501      	moveq	r5, #1
  se_ret_status = SE_AuthenticateFW_Init(pSeStatus, pSE_Metadata, SE_FwType);
 8007486:	f7fe fd09 	bl	8005e9c <SE_AuthenticateFW_Init>

  /* check for initialization errors */
  if ((se_ret_status == SE_SUCCESS) && (*pSeStatus == SE_OK))
 800748a:	4a66      	ldr	r2, [pc, #408]	; (8007624 <VerifyFwSignatureScatter.part.0+0x1d8>)
 800748c:	4290      	cmp	r0, r2
  se_ret_status = SE_AuthenticateFW_Init(pSeStatus, pSE_Metadata, SE_FwType);
 800748e:	4603      	mov	r3, r0
  if ((se_ret_status == SE_SUCCESS) && (*pSeStatus == SE_OK))
 8007490:	d17f      	bne.n	8007592 <VerifyFwSignatureScatter.part.0+0x146>
 8007492:	6821      	ldr	r1, [r4, #0]
 8007494:	4a64      	ldr	r2, [pc, #400]	; (8007628 <VerifyFwSignatureScatter.part.0+0x1dc>)
 8007496:	4291      	cmp	r1, r2
 8007498:	d17b      	bne.n	8007592 <VerifyFwSignatureScatter.part.0+0x146>
 800749a:	eb06 0285 	add.w	r2, r6, r5, lsl #2
  SFU_ErrorStatus sfu_ret_status = SFU_SUCCESS;
 800749e:	4d63      	ldr	r5, [pc, #396]	; (800762c <VerifyFwSignatureScatter.part.0+0x1e0>)
 80074a0:	9206      	str	r2, [sp, #24]
  uint32_t fw_verified_total_size = 0; /* number of bytes that have been processed during authentication check */
 80074a2:	f04f 0800 	mov.w	r8, #0
    for (j = 0; j < scatter_nb; j++)
    {
      payloadsize = pSE_Payload->PayloadSize[j];
      ppayload = pSE_Payload->pPayload[j];
      i = 0;
      fw_chunk_size = CHUNK_SIZE_SIGN_VERIFICATION;
 80074a6:	af09      	add	r7, sp, #36	; 0x24
      payloadsize = pSE_Payload->PayloadSize[j];
 80074a8:	68b2      	ldr	r2, [r6, #8]
 80074aa:	9204      	str	r2, [sp, #16]
      fw_chunk_size = CHUNK_SIZE_SIGN_VERIFICATION;
 80074ac:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80074b0:	603a      	str	r2, [r7, #0]

      while ((i < (payloadsize / CHUNK_SIZE_SIGN_VERIFICATION)) && (*pSeStatus == SE_OK) &&
 80074b2:	9a04      	ldr	r2, [sp, #16]
      ppayload = pSE_Payload->pPayload[j];
 80074b4:	f856 9b04 	ldr.w	r9, [r6], #4
      while ((i < (payloadsize / CHUNK_SIZE_SIGN_VERIFICATION)) && (*pSeStatus == SE_OK) &&
 80074b8:	0a92      	lsrs	r2, r2, #10
 80074ba:	9205      	str	r2, [sp, #20]
      i = 0;
 80074bc:	f04f 0a00 	mov.w	sl, #0
      while ((i < (payloadsize / CHUNK_SIZE_SIGN_VERIFICATION)) && (*pSeStatus == SE_OK) &&
 80074c0:	9a05      	ldr	r2, [sp, #20]
 80074c2:	4592      	cmp	sl, r2
 80074c4:	d006      	beq.n	80074d4 <VerifyFwSignatureScatter.part.0+0x88>
 80074c6:	6822      	ldr	r2, [r4, #0]
 80074c8:	4957      	ldr	r1, [pc, #348]	; (8007628 <VerifyFwSignatureScatter.part.0+0x1dc>)
 80074ca:	428a      	cmp	r2, r1
 80074cc:	d102      	bne.n	80074d4 <VerifyFwSignatureScatter.part.0+0x88>
 80074ce:	4a57      	ldr	r2, [pc, #348]	; (800762c <VerifyFwSignatureScatter.part.0+0x1e0>)
 80074d0:	4295      	cmp	r5, r2
 80074d2:	d06a      	beq.n	80075aa <VerifyFwSignatureScatter.part.0+0x15e>
        ppayload += fw_chunk_size;
        fw_verified_total_size += fw_chunk_size;
        i++;
      }
      /* this the last path , size can be smaller */
      fw_chunk_size = pSE_Payload->pPayload[j] + pSE_Payload->PayloadSize[j] - ppayload;
 80074d4:	f856 2c04 	ldr.w	r2, [r6, #-4]
 80074d8:	6871      	ldr	r1, [r6, #4]
 80074da:	440a      	add	r2, r1
 80074dc:	eba2 0209 	sub.w	r2, r2, r9
 80074e0:	603a      	str	r2, [r7, #0]
      if ((fw_chunk_size != 0U) && (se_ret_status == SE_SUCCESS) && (*pSeStatus == SE_OK))
 80074e2:	b1e2      	cbz	r2, 800751e <VerifyFwSignatureScatter.part.0+0xd2>
 80074e4:	494f      	ldr	r1, [pc, #316]	; (8007624 <VerifyFwSignatureScatter.part.0+0x1d8>)
 80074e6:	428b      	cmp	r3, r1
 80074e8:	d119      	bne.n	800751e <VerifyFwSignatureScatter.part.0+0xd2>
 80074ea:	6820      	ldr	r0, [r4, #0]
 80074ec:	494e      	ldr	r1, [pc, #312]	; (8007628 <VerifyFwSignatureScatter.part.0+0x1dc>)
 80074ee:	4288      	cmp	r0, r1
 80074f0:	d115      	bne.n	800751e <VerifyFwSignatureScatter.part.0+0xd2>
      {
        sfu_ret_status = SFU_LL_FLASH_Read(fw_image_chunk, (uint8_t *)ppayload, fw_chunk_size) ;
 80074f2:	4649      	mov	r1, r9
 80074f4:	f50d 6089 	add.w	r0, sp, #1096	; 0x448
 80074f8:	f001 fa60 	bl	80089bc <SFU_LL_FLASH_Read>
        if (sfu_ret_status == SFU_SUCCESS)
 80074fc:	4b4b      	ldr	r3, [pc, #300]	; (800762c <VerifyFwSignatureScatter.part.0+0x1e0>)
 80074fe:	4298      	cmp	r0, r3
        sfu_ret_status = SFU_LL_FLASH_Read(fw_image_chunk, (uint8_t *)ppayload, fw_chunk_size) ;
 8007500:	4605      	mov	r5, r0
        if (sfu_ret_status == SFU_SUCCESS)
 8007502:	d171      	bne.n	80075e8 <VerifyFwSignatureScatter.part.0+0x19c>
        {

          se_ret_status = SE_AuthenticateFW_Append(pSeStatus, fw_image_chunk,
 8007504:	9a04      	ldr	r2, [sp, #16]
 8007506:	9700      	str	r7, [sp, #0]
 8007508:	ab12      	add	r3, sp, #72	; 0x48
 800750a:	eba2 228a 	sub.w	r2, r2, sl, lsl #10
 800750e:	f50d 6189 	add.w	r1, sp, #1096	; 0x448
 8007512:	4620      	mov	r0, r4
 8007514:	f7fe fcf8 	bl	8005f08 <SE_AuthenticateFW_Append>
 8007518:	4603      	mov	r3, r0
        {
          *pSeStatus = SE_ERR_FLASH_READ;
          se_ret_status = SE_ERROR;
          sfu_ret_status = SFU_ERROR;
        }
        fw_verified_total_size += fw_chunk_size;
 800751a:	683a      	ldr	r2, [r7, #0]
 800751c:	4490      	add	r8, r2
    for (j = 0; j < scatter_nb; j++)
 800751e:	9a06      	ldr	r2, [sp, #24]
 8007520:	4296      	cmp	r6, r2
 8007522:	d1c1      	bne.n	80074a8 <VerifyFwSignatureScatter.part.0+0x5c>
      }
    }
  }

  if ((sfu_ret_status == SFU_SUCCESS) && (se_ret_status == SE_SUCCESS) && (*pSeStatus == SE_OK))
 8007524:	4a41      	ldr	r2, [pc, #260]	; (800762c <VerifyFwSignatureScatter.part.0+0x1e0>)
 8007526:	4295      	cmp	r5, r2
 8007528:	d133      	bne.n	8007592 <VerifyFwSignatureScatter.part.0+0x146>
 800752a:	f502 72ff 	add.w	r2, r2, #510	; 0x1fe
 800752e:	4293      	cmp	r3, r2
 8007530:	d12f      	bne.n	8007592 <VerifyFwSignatureScatter.part.0+0x146>
 8007532:	6826      	ldr	r6, [r4, #0]
 8007534:	4a3c      	ldr	r2, [pc, #240]	; (8007628 <VerifyFwSignatureScatter.part.0+0x1dc>)
 8007536:	4296      	cmp	r6, r2
 8007538:	d12b      	bne.n	8007592 <VerifyFwSignatureScatter.part.0+0x146>
  {
    if (fw_verified_total_size <= fw_size)
 800753a:	9a03      	ldr	r2, [sp, #12]
 800753c:	4542      	cmp	r2, r8
 800753e:	d328      	bcc.n	8007592 <VerifyFwSignatureScatter.part.0+0x146>
    {
      /* Do the Finalization, check the authentication TAG*/
      fw_tag_len = sizeof(fw_tag_output);
 8007540:	2220      	movs	r2, #32
 8007542:	9208      	str	r2, [sp, #32]
      se_ret_status =   SE_AuthenticateFW_Finish(pSeStatus, fw_tag_output, (int32_t *)&fw_tag_len);
 8007544:	a90a      	add	r1, sp, #40	; 0x28
 8007546:	446a      	add	r2, sp
 8007548:	4620      	mov	r0, r4
 800754a:	9303      	str	r3, [sp, #12]
 800754c:	f7fe fd1a 	bl	8005f84 <SE_AuthenticateFW_Finish>

      if ((se_ret_status == SE_SUCCESS) && (*pSeStatus == SE_OK) && (fw_tag_len == SE_TAG_LEN))
 8007550:	9b03      	ldr	r3, [sp, #12]
 8007552:	4298      	cmp	r0, r3
 8007554:	d11d      	bne.n	8007592 <VerifyFwSignatureScatter.part.0+0x146>
 8007556:	6823      	ldr	r3, [r4, #0]
 8007558:	42b3      	cmp	r3, r6
 800755a:	d11a      	bne.n	8007592 <VerifyFwSignatureScatter.part.0+0x146>
 800755c:	9a08      	ldr	r2, [sp, #32]
 800755e:	2a20      	cmp	r2, #32
 8007560:	d117      	bne.n	8007592 <VerifyFwSignatureScatter.part.0+0x146>
      {
        /* Firmware tag verification */
        if (MemoryCompare(fw_tag_output, fw_tag, SE_TAG_LEN) != SFU_SUCCESS)
 8007562:	4659      	mov	r1, fp
 8007564:	a80a      	add	r0, sp, #40	; 0x28
 8007566:	f7ff ff45 	bl	80073f4 <MemoryCompare>
          se_ret_status = SE_ERROR;
          sfu_ret_status = SFU_ERROR;

          /* Save result for active slot :
             to avoid single fault attack the signature will be double checked before UserApp execution */
          if ((SlotNumber >= SLOT_ACTIVE_1) && (SlotNumber < SLOT_DWL_1))
 800756a:	9b07      	ldr	r3, [sp, #28]
        if (MemoryCompare(fw_tag_output, fw_tag, SE_TAG_LEN) != SFU_SUCCESS)
 800756c:	4602      	mov	r2, r0
 800756e:	42aa      	cmp	r2, r5
          if ((SlotNumber >= SLOT_ACTIVE_1) && (SlotNumber < SLOT_DWL_1))
 8007570:	f103 30ff 	add.w	r0, r3, #4294967295	; 0xffffffff
        if (MemoryCompare(fw_tag_output, fw_tag, SE_TAG_LEN) != SFU_SUCCESS)
 8007574:	d03e      	beq.n	80075f4 <VerifyFwSignatureScatter.part.0+0x1a8>
          *pSeStatus = SE_SIGNATURE_ERR;
 8007576:	4b2e      	ldr	r3, [pc, #184]	; (8007630 <VerifyFwSignatureScatter.part.0+0x1e4>)
 8007578:	6023      	str	r3, [r4, #0]
          if ((SlotNumber >= SLOT_ACTIVE_1) && (SlotNumber < SLOT_DWL_1))
 800757a:	2802      	cmp	r0, #2
 800757c:	d809      	bhi.n	8007592 <VerifyFwSignatureScatter.part.0+0x146>
          {
            (void) memset(&fw_tag_validated[SlotNumber - SLOT_ACTIVE_1][0U], 0x00, SE_TAG_LEN);
 800757e:	4b2d      	ldr	r3, [pc, #180]	; (8007634 <VerifyFwSignatureScatter.part.0+0x1e8>)
 8007580:	2220      	movs	r2, #32
 8007582:	2100      	movs	r1, #0
 8007584:	eb03 1040 	add.w	r0, r3, r0, lsl #5
 8007588:	f002 fcb4 	bl	8009ef4 <memset>
 800758c:	e001      	b.n	8007592 <VerifyFwSignatureScatter.part.0+0x146>
  else if (SE_FwType == SE_FW_IMAGE_PARTIAL)
 800758e:	2a01      	cmp	r2, #1
 8007590:	d006      	beq.n	80075a0 <VerifyFwSignatureScatter.part.0+0x154>
          sfu_ret_status = SFU_ERROR;
 8007592:	f641 72e1 	movw	r2, #8161	; 0x1fe1
  else
  {
    sfu_ret_status = SFU_ERROR;
  }
  return sfu_ret_status;
}
 8007596:	4610      	mov	r0, r2
 8007598:	f60d 0d4c 	addw	sp, sp, #2124	; 0x84c
 800759c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    fw_size = pSE_Metadata->PartialFwSize;
 80075a0:	690b      	ldr	r3, [r1, #16]
 80075a2:	9303      	str	r3, [sp, #12]
    fw_tag = pSE_Metadata->PartialFwTag;
 80075a4:	f101 0b34 	add.w	fp, r1, #52	; 0x34
 80075a8:	e761      	b.n	800746e <VerifyFwSignatureScatter.part.0+0x22>
        sfu_ret_status = SFU_LL_FLASH_Read(fw_image_chunk, (uint8_t *)ppayload, fw_chunk_size) ;
 80075aa:	683a      	ldr	r2, [r7, #0]
 80075ac:	4649      	mov	r1, r9
 80075ae:	f50d 6089 	add.w	r0, sp, #1096	; 0x448
 80075b2:	f001 fa03 	bl	80089bc <SFU_LL_FLASH_Read>
        if (sfu_ret_status == SFU_SUCCESS)
 80075b6:	4b1d      	ldr	r3, [pc, #116]	; (800762c <VerifyFwSignatureScatter.part.0+0x1e0>)
 80075b8:	4298      	cmp	r0, r3
        sfu_ret_status = SFU_LL_FLASH_Read(fw_image_chunk, (uint8_t *)ppayload, fw_chunk_size) ;
 80075ba:	4605      	mov	r5, r0
        if (sfu_ret_status == SFU_SUCCESS)
 80075bc:	d10e      	bne.n	80075dc <VerifyFwSignatureScatter.part.0+0x190>
          se_ret_status = SE_AuthenticateFW_Append(pSeStatus, fw_image_chunk, (int32_t)fw_chunk_size,
 80075be:	9700      	str	r7, [sp, #0]
 80075c0:	ab12      	add	r3, sp, #72	; 0x48
 80075c2:	683a      	ldr	r2, [r7, #0]
 80075c4:	f50d 6189 	add.w	r1, sp, #1096	; 0x448
 80075c8:	4620      	mov	r0, r4
 80075ca:	f7fe fc9d 	bl	8005f08 <SE_AuthenticateFW_Append>
 80075ce:	4603      	mov	r3, r0
        ppayload += fw_chunk_size;
 80075d0:	683a      	ldr	r2, [r7, #0]
        i++;
 80075d2:	f10a 0a01 	add.w	sl, sl, #1
        ppayload += fw_chunk_size;
 80075d6:	4491      	add	r9, r2
        fw_verified_total_size += fw_chunk_size;
 80075d8:	4490      	add	r8, r2
        i++;
 80075da:	e771      	b.n	80074c0 <VerifyFwSignatureScatter.part.0+0x74>
          *pSeStatus = SE_ERR_FLASH_READ;
 80075dc:	4b16      	ldr	r3, [pc, #88]	; (8007638 <VerifyFwSignatureScatter.part.0+0x1ec>)
 80075de:	6023      	str	r3, [r4, #0]
          sfu_ret_status = SFU_ERROR;
 80075e0:	f641 75e1 	movw	r5, #8161	; 0x1fe1
          se_ret_status = SE_ERROR;
 80075e4:	4b15      	ldr	r3, [pc, #84]	; (800763c <VerifyFwSignatureScatter.part.0+0x1f0>)
 80075e6:	e7f3      	b.n	80075d0 <VerifyFwSignatureScatter.part.0+0x184>
          *pSeStatus = SE_ERR_FLASH_READ;
 80075e8:	4b13      	ldr	r3, [pc, #76]	; (8007638 <VerifyFwSignatureScatter.part.0+0x1ec>)
 80075ea:	6023      	str	r3, [r4, #0]
          sfu_ret_status = SFU_ERROR;
 80075ec:	f641 75e1 	movw	r5, #8161	; 0x1fe1
          se_ret_status = SE_ERROR;
 80075f0:	4b12      	ldr	r3, [pc, #72]	; (800763c <VerifyFwSignatureScatter.part.0+0x1f0>)
 80075f2:	e792      	b.n	800751a <VerifyFwSignatureScatter.part.0+0xce>
          FLOW_STEP(uFlowCryptoValue, FLOW_STEP_INTEGRITY);
 80075f4:	4912      	ldr	r1, [pc, #72]	; (8007640 <VerifyFwSignatureScatter.part.0+0x1f4>)
 80075f6:	680b      	ldr	r3, [r1, #0]
 80075f8:	f483 432a 	eor.w	r3, r3, #43520	; 0xaa00
 80075fc:	f083 03b5 	eor.w	r3, r3, #181	; 0xb5
          if ((SlotNumber >= SLOT_ACTIVE_1) && (SlotNumber < SLOT_DWL_1))
 8007600:	2802      	cmp	r0, #2
          FLOW_STEP(uFlowCryptoValue, FLOW_STEP_INTEGRITY);
 8007602:	600b      	str	r3, [r1, #0]
          if ((SlotNumber >= SLOT_ACTIVE_1) && (SlotNumber < SLOT_DWL_1))
 8007604:	d8c7      	bhi.n	8007596 <VerifyFwSignatureScatter.part.0+0x14a>
            (void) memcpy(&fw_tag_validated[SlotNumber - SLOT_ACTIVE_1][0U], fw_tag_output, SE_TAG_LEN);
 8007606:	4c0b      	ldr	r4, [pc, #44]	; (8007634 <VerifyFwSignatureScatter.part.0+0x1e8>)
 8007608:	ab0a      	add	r3, sp, #40	; 0x28
 800760a:	eb04 1440 	add.w	r4, r4, r0, lsl #5
 800760e:	ae12      	add	r6, sp, #72	; 0x48
 8007610:	461d      	mov	r5, r3
 8007612:	cd03      	ldmia	r5!, {r0, r1}
 8007614:	42b5      	cmp	r5, r6
 8007616:	6020      	str	r0, [r4, #0]
 8007618:	6061      	str	r1, [r4, #4]
 800761a:	462b      	mov	r3, r5
 800761c:	f104 0408 	add.w	r4, r4, #8
 8007620:	d1f6      	bne.n	8007610 <VerifyFwSignatureScatter.part.0+0x1c4>
 8007622:	e7b8      	b.n	8007596 <VerifyFwSignatureScatter.part.0+0x14a>
 8007624:	0012310f 	.word	0x0012310f
 8007628:	0012e223 	.word	0x0012e223
 800762c:	00122f11 	.word	0x00122f11
 8007630:	00146ac1 	.word	0x00146ac1
 8007634:	20001518 	.word	0x20001518
 8007638:	0014b817 	.word	0x0014b817
 800763c:	00018799 	.word	0x00018799
 8007640:	20001004 	.word	0x20001004

08007644 <VerifyFwSignatureScatter>:
{
 8007644:	b430      	push	{r4, r5}
 8007646:	9c02      	ldr	r4, [sp, #8]
  if ((pSeStatus == NULL) || (pSE_Metadata == NULL) || (pSE_Payload == NULL))
 8007648:	b158      	cbz	r0, 8007662 <VerifyFwSignatureScatter+0x1e>
 800764a:	b152      	cbz	r2, 8007662 <VerifyFwSignatureScatter+0x1e>
 800764c:	b14b      	cbz	r3, 8007662 <VerifyFwSignatureScatter+0x1e>
  if ((pSE_Payload->pPayload[0] == 0U) || ((pSE_Payload->pPayload[1] == 0U) && (pSE_Payload->PayloadSize[1] != 0U)))
 800764e:	681d      	ldr	r5, [r3, #0]
 8007650:	b13d      	cbz	r5, 8007662 <VerifyFwSignatureScatter+0x1e>
 8007652:	685d      	ldr	r5, [r3, #4]
 8007654:	b90d      	cbnz	r5, 800765a <VerifyFwSignatureScatter+0x16>
 8007656:	68dd      	ldr	r5, [r3, #12]
 8007658:	b91d      	cbnz	r5, 8007662 <VerifyFwSignatureScatter+0x1e>
 800765a:	9402      	str	r4, [sp, #8]
}
 800765c:	bc30      	pop	{r4, r5}
 800765e:	f7ff bef5 	b.w	800744c <VerifyFwSignatureScatter.part.0>
 8007662:	f641 70e1 	movw	r0, #8161	; 0x1fe1
 8007666:	bc30      	pop	{r4, r5}
 8007668:	4770      	bx	lr
	...

0800766c <ParseFWInfo>:
  * @param pBuffer
  * @param BufferSize
  * @retval SFU_SUCCESS if successful, a SFU_ERROR otherwise.
  */
SFU_ErrorStatus ParseFWInfo(SE_FwRawHeaderTypeDef *pFwHeader, uint8_t *pBuffer)
{
 800766c:	b508      	push	{r3, lr}
  /* Check the pointers allocation */
  if ((pFwHeader == NULL) || (pBuffer == NULL))
 800766e:	b130      	cbz	r0, 800767e <ParseFWInfo+0x12>
 8007670:	b129      	cbz	r1, 800767e <ParseFWInfo+0x12>
  {
    return SFU_ERROR;
  }
  (void) memcpy(pFwHeader, pBuffer, sizeof(*pFwHeader));
 8007672:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8007676:	f002 fc2f 	bl	8009ed8 <memcpy>
  return SFU_SUCCESS;
 800767a:	4802      	ldr	r0, [pc, #8]	; (8007684 <ParseFWInfo+0x18>)
}
 800767c:	bd08      	pop	{r3, pc}
    return SFU_ERROR;
 800767e:	f641 70e1 	movw	r0, #8161	; 0x1fe1
 8007682:	e7fb      	b.n	800767c <ParseFWInfo+0x10>
 8007684:	00122f11 	.word	0x00122f11

08007688 <VerifyFwSignature>:
  * @retval SFU_SUCCESS if successful, a SFU_ErrorStatus error otherwise.
  */
SFU_ErrorStatus VerifyFwSignature(SE_StatusTypeDef  *pSeStatus, uint32_t SlotNumber,
                                  SE_FwRawHeaderTypeDef *pFwImageHeader,
                                  uint32_t SE_FwType)
{
 8007688:	b570      	push	{r4, r5, r6, lr}
  SE_Ex_PayloadDescTypeDef  pse_payload;
  uint32_t fw_size;
  uint32_t fw_offset;

  /*  put it OK, to discriminate error in SFU FWIMG parts */
  *pSeStatus = SE_OK;
 800768a:	4c10      	ldr	r4, [pc, #64]	; (80076cc <VerifyFwSignature+0x44>)
 800768c:	6004      	str	r4, [r0, #0]
{
 800768e:	b086      	sub	sp, #24

  /* Check the parameters value */
  if (pFwImageHeader == NULL)
 8007690:	b1c2      	cbz	r2, 80076c4 <VerifyFwSignature+0x3c>
  {
    return SFU_ERROR;
  }
  if ((SE_FwType != SE_FW_IMAGE_PARTIAL) && (SE_FwType != SE_FW_IMAGE_COMPLETE))
 8007692:	2b01      	cmp	r3, #1
 8007694:	d816      	bhi.n	80076c4 <VerifyFwSignature+0x3c>
      fw_size = 0U;
      fw_offset = 0U;
      break;
  }

  pse_payload.pPayload[0] = SlotStartAdd[SlotNumber] + fw_offset + SFU_IMG_IMAGE_OFFSET;
 8007696:	4c0e      	ldr	r4, [pc, #56]	; (80076d0 <VerifyFwSignature+0x48>)
      fw_size = pFwImageHeader->FwSize;
 8007698:	bf18      	it	ne
 800769a:	6895      	ldrne	r5, [r2, #8]
  pse_payload.pPayload[0] = SlotStartAdd[SlotNumber] + fw_offset + SFU_IMG_IMAGE_OFFSET;
 800769c:	f854 4021 	ldr.w	r4, [r4, r1, lsl #2]
  pse_payload.PayloadSize[0] = fw_size;
  pse_payload.pPayload[1] = 0U;
  pse_payload.PayloadSize[1] = 0U;

  return  VerifyFwSignatureScatter(pSeStatus, SlotNumber, pFwImageHeader, &pse_payload, SE_FwType);
 80076a0:	9300      	str	r3, [sp, #0]
      fw_offset = pFwImageHeader->PartialFwOffset;
 80076a2:	bf0c      	ite	eq
 80076a4:	e9d2 6503 	ldrdeq	r6, r5, [r2, #12]
      fw_offset = 0U;
 80076a8:	2600      	movne	r6, #0
  pse_payload.pPayload[0] = SlotStartAdd[SlotNumber] + fw_offset + SFU_IMG_IMAGE_OFFSET;
 80076aa:	f504 7400 	add.w	r4, r4, #512	; 0x200
 80076ae:	4434      	add	r4, r6
 80076b0:	9402      	str	r4, [sp, #8]
  return  VerifyFwSignatureScatter(pSeStatus, SlotNumber, pFwImageHeader, &pse_payload, SE_FwType);
 80076b2:	ab02      	add	r3, sp, #8
  pse_payload.pPayload[1] = 0U;
 80076b4:	2400      	movs	r4, #0
  pse_payload.PayloadSize[0] = fw_size;
 80076b6:	9504      	str	r5, [sp, #16]
  pse_payload.pPayload[1] = 0U;
 80076b8:	9403      	str	r4, [sp, #12]
  pse_payload.PayloadSize[1] = 0U;
 80076ba:	9405      	str	r4, [sp, #20]
  return  VerifyFwSignatureScatter(pSeStatus, SlotNumber, pFwImageHeader, &pse_payload, SE_FwType);
 80076bc:	f7ff ffc2 	bl	8007644 <VerifyFwSignatureScatter>
}
 80076c0:	b006      	add	sp, #24
 80076c2:	bd70      	pop	{r4, r5, r6, pc}
    return SFU_ERROR;
 80076c4:	f641 70e1 	movw	r0, #8161	; 0x1fe1
 80076c8:	e7fa      	b.n	80076c0 <VerifyFwSignature+0x38>
 80076ca:	bf00      	nop
 80076cc:	0012e223 	.word	0x0012e223
 80076d0:	0800b150 	.word	0x0800b150

080076d4 <VerifySlot>:
  * @param uSlotSize Size of a slot.
  * @param uFwSize Size of the firmware image.
  * @retval SFU_ErrorStatus SFU_SUCCESS if successful, error code otherwise
  */
SFU_ErrorStatus VerifySlot(uint8_t *pSlotBegin, uint32_t uSlotSize, uint32_t uFwSize)
{
 80076d4:	b410      	push	{r4}
  uint32_t length;
  SFU_ErrorStatus e_ret_status = SFU_ERROR;

  /* Check is already clean */
  pdata = pSlotBegin + SFU_IMG_IMAGE_OFFSET + uFwSize;
  length = uSlotSize - SFU_IMG_IMAGE_OFFSET - uFwSize;
 80076d6:	f5a1 7300 	sub.w	r3, r1, #512	; 0x200
  pdata = pSlotBegin + SFU_IMG_IMAGE_OFFSET + uFwSize;
 80076da:	f502 7400 	add.w	r4, r2, #512	; 0x200
  e_ret_status = SFU_LL_FLASH_Compare(pdata, 0x00000000U, 0xFFFFFFFFU, length);
 80076de:	1a9b      	subs	r3, r3, r2
 80076e0:	4420      	add	r0, r4
 80076e2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff

  return e_ret_status;
}
 80076e6:	f85d 4b04 	ldr.w	r4, [sp], #4
  e_ret_status = SFU_LL_FLASH_Compare(pdata, 0x00000000U, 0xFFFFFFFFU, length);
 80076ea:	2100      	movs	r1, #0
 80076ec:	f001 b96d 	b.w	80089ca <SFU_LL_FLASH_Compare>

080076f0 <CleanUpSlot>:
  * @param  uSlotSize Size of a slot.
  * @param  uOffset Offset in the slot to start cleanup, until end of the slot.
  * @retval SFU_ErrorStatus SFU_SUCCESS if successful, SFU_ERROR otherwise.
  */
SFU_ErrorStatus CleanUpSlot(uint8_t *pSlotBegin, uint32_t uSlotSize, uint32_t uOffset)
{
 80076f0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80076f2:	2300      	movs	r3, #0
  slot_begin = (uint32_t) pSlotBegin;
  for (pdata = slot_begin + uOffset; pdata < (slot_begin + uSlotSize); pdata += sizeof(SFU_LL_FLASH_write_t))
  {
    e_ret_status =  SFU_LL_FLASH_Read((uint8_t *) &value, (uint8_t *) pdata, sizeof(SFU_LL_FLASH_write_t));

    if (e_ret_status == SFU_SUCCESS)
 80076f4:	4f15      	ldr	r7, [pc, #84]	; (800774c <CleanUpSlot+0x5c>)
 80076f6:	f88d 3005 	strb.w	r3, [sp, #5]
  for (pdata = slot_begin + uOffset; pdata < (slot_begin + uSlotSize); pdata += sizeof(SFU_LL_FLASH_write_t))
 80076fa:	1885      	adds	r5, r0, r2
  SFU_ErrorStatus e_ret_status = SFU_ERROR;
 80076fc:	f641 74e1 	movw	r4, #8161	; 0x1fe1
  for (pdata = slot_begin + uOffset; pdata < (slot_begin + uSlotSize); pdata += sizeof(SFU_LL_FLASH_write_t))
 8007700:	1846      	adds	r6, r0, r1
 8007702:	42ae      	cmp	r6, r5
 8007704:	d802      	bhi.n	800770c <CleanUpSlot+0x1c>
    {
      (void) SFU_LL_SECU_IWDG_Refresh();
    }
  }
  return e_ret_status;
}
 8007706:	4620      	mov	r0, r4
 8007708:	b003      	add	sp, #12
 800770a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    e_ret_status =  SFU_LL_FLASH_Read((uint8_t *) &value, (uint8_t *) pdata, sizeof(SFU_LL_FLASH_write_t));
 800770c:	2201      	movs	r2, #1
 800770e:	4629      	mov	r1, r5
 8007710:	f10d 0006 	add.w	r0, sp, #6
 8007714:	f001 f952 	bl	80089bc <SFU_LL_FLASH_Read>
    if (e_ret_status == SFU_SUCCESS)
 8007718:	42b8      	cmp	r0, r7
    e_ret_status =  SFU_LL_FLASH_Read((uint8_t *) &value, (uint8_t *) pdata, sizeof(SFU_LL_FLASH_write_t));
 800771a:	4604      	mov	r4, r0
    if (e_ret_status == SFU_SUCCESS)
 800771c:	d105      	bne.n	800772a <CleanUpSlot+0x3a>
      if (memcmp((void *) &value, (void *) &pattern, sizeof(SFU_LL_FLASH_write_t)) != 0)
 800771e:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8007722:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8007726:	429a      	cmp	r2, r3
 8007728:	d008      	beq.n	800773c <CleanUpSlot+0x4c>
      e_ret_status = SFU_LL_FLASH_Write(&flash_if_info, (uint8_t *) pdata, (uint8_t *) &pattern,
 800772a:	2301      	movs	r3, #1
 800772c:	f10d 0205 	add.w	r2, sp, #5
 8007730:	4629      	mov	r1, r5
 8007732:	f10d 0007 	add.w	r0, sp, #7
 8007736:	f001 f93a 	bl	80089ae <SFU_LL_FLASH_Write>
 800773a:	4604      	mov	r4, r0
    if ((pdata % 0x1000U) == 0U)
 800773c:	f3c5 030b 	ubfx	r3, r5, #0, #12
 8007740:	b90b      	cbnz	r3, 8007746 <CleanUpSlot+0x56>
      (void) SFU_LL_SECU_IWDG_Refresh();
 8007742:	f001 fadb 	bl	8008cfc <SFU_LL_SECU_IWDG_Refresh>
  for (pdata = slot_begin + uOffset; pdata < (slot_begin + uSlotSize); pdata += sizeof(SFU_LL_FLASH_write_t))
 8007746:	3501      	adds	r5, #1
 8007748:	e7db      	b.n	8007702 <CleanUpSlot+0x12>
 800774a:	bf00      	nop
 800774c:	00122f11 	.word	0x00122f11

08007750 <SFU_IMG_InitImageHandling>:
  *        Must be called first (and once) before calling the other Image handling services.
  * @param  None.
  * @retval SFU_IMG_InitStatusTypeDef SFU_IMG_INIT_OK if successful, an error code otherwise.
  */
SFU_IMG_InitStatusTypeDef SFU_IMG_InitImageHandling(void)
{
 8007750:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007752:	b087      	sub	sp, #28
   * starting with 0s.
   * This causes an issue when calling CLEAN_TRAILER_MAGIC (because of this we added an erase that generated
   * side-effects).
   * To avoid all these problems we can initialize fw_image_header_validated with a non-0  value.
   */
  (void) memset((uint8_t *) &fw_image_header_validated, 0xFE, sizeof(fw_image_header_validated));
 8007754:	4827      	ldr	r0, [pc, #156]	; (80077f4 <SFU_IMG_InitImageHandling+0xa4>)
   */
  for (i = 0U; i < SFU_NB_MAX_ACTIVE_IMAGE; i++)
  {
#if defined(__GNUC__)
    __IO uint32_t start_add;
    start_add = SlotStartAdd[SLOT_ACTIVE_1 + i];
 8007756:	4f28      	ldr	r7, [pc, #160]	; (80077f8 <SFU_IMG_InitImageHandling+0xa8>)
  (void) memset((uint8_t *) &fw_image_header_validated, 0xFE, sizeof(fw_image_header_validated));
 8007758:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800775c:	21fe      	movs	r1, #254	; 0xfe
 800775e:	f002 fbc9 	bl	8009ef4 <memset>
    start_add = SlotStartAdd[SLOT_ACTIVE_1 + i];
 8007762:	9701      	str	r7, [sp, #4]
    if (start_add != 0U)
 8007764:	9c01      	ldr	r4, [sp, #4]
 8007766:	b144      	cbz	r4, 800777a <SFU_IMG_InitImageHandling+0x2a>
#else
    if (SlotStartAdd[SLOT_ACTIVE_1 + i] != 0U)
#endif /* (__GNUC__) */
    {
      if (!IS_ALIGNED(SlotStartAdd[SLOT_ACTIVE_1 + i]))
 8007768:	f3c7 040a 	ubfx	r4, r7, #0, #11
 800776c:	b12c      	cbz	r4, 800777a <SFU_IMG_InitImageHandling+0x2a>
      {
        e_ret_status = SFU_IMG_INIT_FLASH_CONSTRAINTS_ERROR;
        TRACE("\r\n= [FWIMG] SLOT_ACTIVE_%d (%x) is not properly aligned\r\n",
 800776e:	4823      	ldr	r0, [pc, #140]	; (80077fc <SFU_IMG_InitImageHandling+0xac>)
 8007770:	463a      	mov	r2, r7
 8007772:	2101      	movs	r1, #1
 8007774:	f002 fbc6 	bl	8009f04 <iprintf>
        e_ret_status = SFU_IMG_INIT_FLASH_CONSTRAINTS_ERROR;
 8007778:	2403      	movs	r4, #3

  for (i = 0U; i < SFU_NB_MAX_DWL_AREA; i++)
  {
#if defined(__GNUC__)
    __IO uint32_t start_add;
    start_add = SlotStartAdd[SLOT_DWL_1 + i];
 800777a:	4d21      	ldr	r5, [pc, #132]	; (8007800 <SFU_IMG_InitImageHandling+0xb0>)
 800777c:	9502      	str	r5, [sp, #8]
    if (start_add != 0U)
 800777e:	9b02      	ldr	r3, [sp, #8]
 8007780:	b143      	cbz	r3, 8007794 <SFU_IMG_InitImageHandling+0x44>
#else
    if (SlotStartAdd[SLOT_DWL_1 + i] != 0U)
#endif /* (__GNUC__) */
    {
      if (!IS_ALIGNED(SlotStartAdd[SLOT_DWL_1 + i]))
 8007782:	f3c5 030a 	ubfx	r3, r5, #0, #11
 8007786:	b12b      	cbz	r3, 8007794 <SFU_IMG_InitImageHandling+0x44>
      {
        e_ret_status = SFU_IMG_INIT_FLASH_CONSTRAINTS_ERROR;
        TRACE("\r\n= [FWIMG] SLOT_DWL_%d (%x) is not properly aligned\r\n",
 8007788:	4a1e      	ldr	r2, [pc, #120]	; (8007804 <SFU_IMG_InitImageHandling+0xb4>)
 800778a:	481f      	ldr	r0, [pc, #124]	; (8007808 <SFU_IMG_InitImageHandling+0xb8>)
 800778c:	2101      	movs	r1, #1
 800778e:	f002 fbb9 	bl	8009f04 <iprintf>
        e_ret_status = SFU_IMG_INIT_FLASH_CONSTRAINTS_ERROR;
 8007792:	2403      	movs	r4, #3
   */
  for (i = 0U; i < SFU_NB_MAX_ACTIVE_IMAGE; i++)
  {
#if defined(__GNUC__)
    __IO uint32_t start_add;
    start_add = SlotStartAdd[SLOT_ACTIVE_1 + i];
 8007794:	9703      	str	r7, [sp, #12]
    if (start_add != 0U)
 8007796:	9b03      	ldr	r3, [sp, #12]
 8007798:	b16b      	cbz	r3, 80077b6 <SFU_IMG_InitImageHandling+0x66>
#else
    if (SlotStartAdd[SLOT_ACTIVE_1 + i] != 0U)
#endif /* (__GNUC__) */
    {
      if ((SFU_LL_FLASH_GetSector(SlotStartAdd[SLOT_ACTIVE_1 + i])) <= SFU_PROTECT_WRP_PAGE_END_1)
 800779a:	4817      	ldr	r0, [pc, #92]	; (80077f8 <SFU_IMG_InitImageHandling+0xa8>)
 800779c:	f001 f92a 	bl	80089f4 <SFU_LL_FLASH_GetSector>
 80077a0:	4606      	mov	r6, r0
 80077a2:	481a      	ldr	r0, [pc, #104]	; (800780c <SFU_IMG_InitImageHandling+0xbc>)
 80077a4:	f001 f926 	bl	80089f4 <SFU_LL_FLASH_GetSector>
 80077a8:	4286      	cmp	r6, r0
 80077aa:	d804      	bhi.n	80077b6 <SFU_IMG_InitImageHandling+0x66>
      {
        TRACE("\r\n= [FWIMG] SLOT_ACTIVE_%d overlaps SBSFU code area protected by WRP\r\n", i + 1U);
 80077ac:	4818      	ldr	r0, [pc, #96]	; (8007810 <SFU_IMG_InitImageHandling+0xc0>)
 80077ae:	2101      	movs	r1, #1
 80077b0:	f002 fba8 	bl	8009f04 <iprintf>
        e_ret_status = SFU_IMG_INIT_FLASH_CONSTRAINTS_ERROR;
 80077b4:	2403      	movs	r4, #3
   */
  for (i = 0U; i < SFU_NB_MAX_DWL_AREA; i++)
  {
#if defined(__GNUC__)
    __IO uint32_t start_add;
    start_add = SlotStartAdd[SLOT_DWL_1 + i];
 80077b6:	9504      	str	r5, [sp, #16]
    if (start_add != 0U)
 80077b8:	9b04      	ldr	r3, [sp, #16]
 80077ba:	b16b      	cbz	r3, 80077d8 <SFU_IMG_InitImageHandling+0x88>
#else /* (__GNUC__) */
    if (SlotStartAdd[SLOT_DWL_1 + i] != 0U)
#endif /* (__GNUC__) */
    {
      if ((SFU_LL_FLASH_GetSector(SlotStartAdd[SLOT_DWL_1 + i])) <= SFU_PROTECT_WRP_PAGE_END_1)
 80077bc:	4810      	ldr	r0, [pc, #64]	; (8007800 <SFU_IMG_InitImageHandling+0xb0>)
 80077be:	f001 f919 	bl	80089f4 <SFU_LL_FLASH_GetSector>
 80077c2:	4605      	mov	r5, r0
 80077c4:	4811      	ldr	r0, [pc, #68]	; (800780c <SFU_IMG_InitImageHandling+0xbc>)
 80077c6:	f001 f915 	bl	80089f4 <SFU_LL_FLASH_GetSector>
 80077ca:	4285      	cmp	r5, r0
 80077cc:	d804      	bhi.n	80077d8 <SFU_IMG_InitImageHandling+0x88>
      {
        TRACE("\r\n= [FWIMG] SLOT_DWL_%d overlaps SBSFU code area protected by WRP\r\n", i + 1U);
 80077ce:	4811      	ldr	r0, [pc, #68]	; (8007814 <SFU_IMG_InitImageHandling+0xc4>)
 80077d0:	2101      	movs	r1, #1
 80077d2:	f002 fb97 	bl	8009f04 <iprintf>
        e_ret_status = SFU_IMG_INIT_FLASH_CONSTRAINTS_ERROR;
 80077d6:	2403      	movs	r4, #3

  for (i = 0U; i < SFU_NB_MAX_ACTIVE_IMAGE; i++)
  {
#if defined(__GNUC__)
    __IO uint32_t start_add;
    start_add = SlotStartAdd[SLOT_ACTIVE_1 + i];
 80077d8:	9705      	str	r7, [sp, #20]
    if (start_add != 0U)
 80077da:	9b05      	ldr	r3, [sp, #20]
 80077dc:	b13b      	cbz	r3, 80077ee <SFU_IMG_InitImageHandling+0x9e>
#else
    if (SlotStartAdd[SLOT_ACTIVE_1 + i] != 0U)
#endif /* (__GNUC__) */
    {
      if (!((SlotHeaderAdd[SLOT_ACTIVE_1 + i] >= SFU_PROTECT_MPU_HEADER_START)
 80077de:	4b0e      	ldr	r3, [pc, #56]	; (8007818 <SFU_IMG_InitImageHandling+0xc8>)
 80077e0:	33c0      	adds	r3, #192	; 0xc0
 80077e2:	d304      	bcc.n	80077ee <SFU_IMG_InitImageHandling+0x9e>
            && ((SlotHeaderAdd[SLOT_ACTIVE_1 + i] + SE_FW_HEADER_TOT_LEN) <=
                (SFU_PROTECT_MPU_HEADER_START + mpu_size))))
      {
        TRACE("\r\n= [FWIMG] Header of SLOT_ACTIVE_%d is not under the MPU protection\r\n", i + 1U);
 80077e4:	480d      	ldr	r0, [pc, #52]	; (800781c <SFU_IMG_InitImageHandling+0xcc>)
 80077e6:	2101      	movs	r1, #1
 80077e8:	f002 fb8c 	bl	8009f04 <iprintf>
        e_ret_status = SFU_IMG_INIT_FLASH_CONSTRAINTS_ERROR;
 80077ec:	2403      	movs	r4, #3
  }
#endif /* defined(SFU_NO_SWAP) */


  return e_ret_status;
}
 80077ee:	4620      	mov	r0, r4
 80077f0:	b007      	add	sp, #28
 80077f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80077f4:	20001538 	.word	0x20001538
 80077f8:	08012000 	.word	0x08012000
 80077fc:	0800bca9 	.word	0x0800bca9
 8007800:	08029000 	.word	0x08029000
 8007804:	00000000 	.word	0x00000000
 8007808:	0800bce3 	.word	0x0800bce3
 800780c:	0800efff 	.word	0x0800efff
 8007810:	0800bd1a 	.word	0x0800bd1a
 8007814:	0800bd61 	.word	0x0800bd61
 8007818:	08012140 	.word	0x08012140
 800781c:	0800bda5 	.word	0x0800bda5

08007820 <SFU_IMG_InvalidateCurrentFirmware>:
  *       running the procedure).
  * @param  SlotNumber index of the slot in the list
  * @retval SFU_SUCCESS if successful,SFU_ERROR error otherwise.
  */
SFU_ErrorStatus SFU_IMG_InvalidateCurrentFirmware(uint32_t SlotNumber)
{
 8007820:	b510      	push	{r4, lr}
 8007822:	4604      	mov	r4, r0
  SFU_ErrorStatus e_ret_status = SFU_ERROR;

  /* Reload Watchdog */
  (void) SFU_LL_SECU_IWDG_Refresh();
 8007824:	f001 fa6a 	bl	8008cfc <SFU_LL_SECU_IWDG_Refresh>

  /* erase active slot except Header (under SECoreBin protection) for the anti-rollback check during next Fw update */
  e_ret_status = CleanUpSlot((uint8_t *) SlotStartAdd[SlotNumber], SLOT_SIZE(SlotNumber), SFU_IMG_IMAGE_OFFSET);
 8007828:	4b06      	ldr	r3, [pc, #24]	; (8007844 <SFU_IMG_InvalidateCurrentFirmware+0x24>)
 800782a:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 800782e:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8007832:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007836:	6a19      	ldr	r1, [r3, #32]
 8007838:	3101      	adds	r1, #1

  return (e_ret_status);
}
 800783a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  e_ret_status = CleanUpSlot((uint8_t *) SlotStartAdd[SlotNumber], SLOT_SIZE(SlotNumber), SFU_IMG_IMAGE_OFFSET);
 800783e:	1a09      	subs	r1, r1, r0
 8007840:	f7ff bf56 	b.w	80076f0 <CleanUpSlot>
 8007844:	0800b150 	.word	0x0800b150

08007848 <SFU_IMG_VerifyActiveImg>:
  *       fw_image_header_validated.
  * @param  SlotNumber index of the slot in the list
  * @retval SFU_ErrorStatus SFU_SUCCESS if successful, error code otherwise
  */
SFU_ErrorStatus SFU_IMG_VerifyActiveImg(uint32_t SlotNumber)
{
 8007848:	b507      	push	{r0, r1, r2, lr}
  SFU_ErrorStatus e_ret_status = SFU_ERROR;
  SE_StatusTypeDef e_se_status = SE_KO;
 800784a:	4b05      	ldr	r3, [pc, #20]	; (8007860 <SFU_IMG_VerifyActiveImg+0x18>)
 800784c:	9301      	str	r3, [sp, #4]
{
 800784e:	4601      	mov	r1, r0

  /*
   * fw_image_header_validated MUST have been populated with valid metadata first,
   */
  e_ret_status = VerifyFwSignature(&e_se_status, SlotNumber, &fw_image_header_validated, SE_FW_IMAGE_COMPLETE);
 8007850:	4a04      	ldr	r2, [pc, #16]	; (8007864 <SFU_IMG_VerifyActiveImg+0x1c>)
 8007852:	2300      	movs	r3, #0
 8007854:	a801      	add	r0, sp, #4
 8007856:	f7ff ff17 	bl	8007688 <VerifyFwSignature>
    TRACE("\r\n=         SFU_IMG_VerifyActiveImg failure with se_status=%d!", e_se_status);
  }
#endif /* SFU_VERBOSE_DEBUG_MODE */

  return (e_ret_status);
}
 800785a:	b003      	add	sp, #12
 800785c:	f85d fb04 	ldr.w	pc, [sp], #4
 8007860:	0013023d 	.word	0x0013023d
 8007864:	20001538 	.word	0x20001538

08007868 <SFU_IMG_VerifyActiveSlot>:
SFU_ErrorStatus SFU_IMG_VerifyActiveSlot(uint32_t SlotNumber)
{
  /*
   * fw_image_header_validated MUST have been populated with valid metadata first,
   */
  return (VerifySlot((uint8_t *) SlotStartAdd[SlotNumber], SLOT_SIZE(SlotNumber), fw_image_header_validated.FwSize));
 8007868:	4b07      	ldr	r3, [pc, #28]	; (8007888 <SFU_IMG_VerifyActiveSlot+0x20>)
{
 800786a:	b410      	push	{r4}
  return (VerifySlot((uint8_t *) SlotStartAdd[SlotNumber], SLOT_SIZE(SlotNumber), fw_image_header_validated.FwSize));
 800786c:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
 8007870:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 8007874:	4620      	mov	r0, r4
 8007876:	6a19      	ldr	r1, [r3, #32]
 8007878:	4b04      	ldr	r3, [pc, #16]	; (800788c <SFU_IMG_VerifyActiveSlot+0x24>)
 800787a:	3101      	adds	r1, #1
 800787c:	1b09      	subs	r1, r1, r4
 800787e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
}
 8007880:	f85d 4b04 	ldr.w	r4, [sp], #4
  return (VerifySlot((uint8_t *) SlotStartAdd[SlotNumber], SLOT_SIZE(SlotNumber), fw_image_header_validated.FwSize));
 8007884:	f7ff bf26 	b.w	80076d4 <VerifySlot>
 8007888:	0800b150 	.word	0x0800b150
 800788c:	20001518 	.word	0x20001518

08007890 <SFU_IMG_VerifyEmptyActiveSlot>:
  * @param  SlotNumber index of the slot in the list
  * @retval SFU_ErrorStatus SFU_SUCCESS if successful, error code otherwise
  */
SFU_ErrorStatus SFU_IMG_VerifyEmptyActiveSlot(uint32_t SlotNumber)
{
  return (VerifySlot((uint8_t *) SlotStartAdd[SlotNumber], SLOT_SIZE(SlotNumber), 0U));
 8007890:	4b07      	ldr	r3, [pc, #28]	; (80078b0 <SFU_IMG_VerifyEmptyActiveSlot+0x20>)
{
 8007892:	b410      	push	{r4}
  return (VerifySlot((uint8_t *) SlotStartAdd[SlotNumber], SLOT_SIZE(SlotNumber), 0U));
 8007894:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
 8007898:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 800789c:	2200      	movs	r2, #0
 800789e:	6a19      	ldr	r1, [r3, #32]
 80078a0:	3101      	adds	r1, #1
 80078a2:	1b09      	subs	r1, r1, r4
 80078a4:	4620      	mov	r0, r4
}
 80078a6:	f85d 4b04 	ldr.w	r4, [sp], #4
  return (VerifySlot((uint8_t *) SlotStartAdd[SlotNumber], SLOT_SIZE(SlotNumber), 0U));
 80078aa:	f7ff bf13 	b.w	80076d4 <VerifySlot>
 80078ae:	bf00      	nop
 80078b0:	0800b150 	.word	0x0800b150

080078b4 <SFU_IMG_ControlActiveImgTag>:
  * @note   This control will be done twice for security reasons (first control done in VerifyFwSignatureScatter)
  * @param  SlotNumber index of the slot in the list
  * @retval SFU_SUCCESS if successful,SFU_ERROR otherwise.
  */
SFU_ErrorStatus SFU_IMG_ControlActiveImgTag(uint32_t SlotNumber)
{
 80078b4:	b508      	push	{r3, lr}
  /*
   * fw_image_header_validated MUST have been populated with valid metadata first,
   */
  if (MemoryCompare(fw_tag_validated[SlotNumber - SLOT_ACTIVE_1], fw_image_header_validated.FwTag,
 80078b6:	4b0b      	ldr	r3, [pc, #44]	; (80078e4 <SFU_IMG_ControlActiveImgTag+0x30>)
 80078b8:	3801      	subs	r0, #1
 80078ba:	2220      	movs	r2, #32
 80078bc:	f103 0134 	add.w	r1, r3, #52	; 0x34
 80078c0:	eb03 1040 	add.w	r0, r3, r0, lsl #5
 80078c4:	f7ff fd96 	bl	80073f4 <MemoryCompare>
 80078c8:	4b07      	ldr	r3, [pc, #28]	; (80078e8 <SFU_IMG_ControlActiveImgTag+0x34>)
 80078ca:	4298      	cmp	r0, r3
  {
    return SFU_ERROR;
  }
  else
  {
    FLOW_STEP(uFlowCryptoValue, FLOW_STEP_INTEGRITY);
 80078cc:	bf01      	itttt	eq
 80078ce:	4a07      	ldreq	r2, [pc, #28]	; (80078ec <SFU_IMG_ControlActiveImgTag+0x38>)
 80078d0:	6813      	ldreq	r3, [r2, #0]
 80078d2:	f483 432a 	eoreq.w	r3, r3, #43520	; 0xaa00
 80078d6:	f083 03b5 	eoreq.w	r3, r3, #181	; 0xb5
 80078da:	bf0c      	ite	eq
 80078dc:	6013      	streq	r3, [r2, #0]
    return SFU_ERROR;
 80078de:	f641 70e1 	movwne	r0, #8161	; 0x1fe1
    return SFU_SUCCESS;
  }

}
 80078e2:	bd08      	pop	{r3, pc}
 80078e4:	20001518 	.word	0x20001518
 80078e8:	00122f11 	.word	0x00122f11
 80078ec:	20001004 	.word	0x20001004

080078f0 <SFU_IMG_LaunchActiveImg>:
SFU_ErrorStatus SFU_IMG_LaunchActiveImg(uint32_t SlotNumber)
{
  SFU_ErrorStatus e_ret_status = SFU_SUCCESS;

  /* Verify if authentication/integrity/lock SE service performed */
  FLOW_CONTROL_CHECK(uFlowCryptoValue, FLOW_CTRL_LOCK_SERVICE);
 80078f0:	4b09      	ldr	r3, [pc, #36]	; (8007918 <SFU_IMG_LaunchActiveImg+0x28>)
 80078f2:	681a      	ldr	r2, [r3, #0]
 80078f4:	f243 03f1 	movw	r3, #12529	; 0x30f1
 80078f8:	429a      	cmp	r2, r3
{
 80078fa:	b510      	push	{r4, lr}
 80078fc:	4604      	mov	r4, r0
  FLOW_CONTROL_CHECK(uFlowCryptoValue, FLOW_CTRL_LOCK_SERVICE);
 80078fe:	d001      	beq.n	8007904 <SFU_IMG_LaunchActiveImg+0x14>
 8007900:	f7ff fd4c 	bl	800739c <SFU_EXCPT_Security_Error>


  /* this function does not return */
  /* first image identified as master image */
  SFU_MPU_SysCall((uint32_t)SB_SYSCALL_LAUNCH_APP, SlotStartAdd[SlotNumber] + SFU_IMG_IMAGE_OFFSET);
 8007904:	4b05      	ldr	r3, [pc, #20]	; (800791c <SFU_IMG_LaunchActiveImg+0x2c>)
 8007906:	f853 1024 	ldr.w	r1, [r3, r4, lsl #2]
 800790a:	2001      	movs	r0, #1
 800790c:	f501 7100 	add.w	r1, r1, #512	; 0x200
 8007910:	f000 fedc 	bl	80086cc <SFU_MPU_SysCall>

  /* The point below should NOT be reached */
  return (e_ret_status);
}
 8007914:	4802      	ldr	r0, [pc, #8]	; (8007920 <SFU_IMG_LaunchActiveImg+0x30>)
 8007916:	bd10      	pop	{r4, pc}
 8007918:	20001004 	.word	0x20001004
 800791c:	0800b150 	.word	0x0800b150
 8007920:	00122f11 	.word	0x00122f11

08007924 <SFU_IMG_Validation>:
{
  SFU_ErrorStatus e_ret_status = SFU_ERROR;
  SFU_FLASH_StatusTypeDef flash_if_status;

  /* Header writing: encrypted part with signature */
  e_ret_status = SFU_LL_FLASH_Write(&flash_if_status, (uint8_t *) SlotHeaderAdd[SlotNumber], (uint8_t *) pFWImageHeader,
 8007924:	4b1b      	ldr	r3, [pc, #108]	; (8007994 <SFU_IMG_Validation+0x70>)
{
 8007926:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  e_ret_status = SFU_LL_FLASH_Write(&flash_if_status, (uint8_t *) SlotHeaderAdd[SlotNumber], (uint8_t *) pFWImageHeader,
 8007928:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800792c:	460a      	mov	r2, r1
 800792e:	6c07      	ldr	r7, [r0, #64]	; 0x40
{
 8007930:	460d      	mov	r5, r1
  e_ret_status = SFU_LL_FLASH_Write(&flash_if_status, (uint8_t *) SlotHeaderAdd[SlotNumber], (uint8_t *) pFWImageHeader,
 8007932:	23c0      	movs	r3, #192	; 0xc0
 8007934:	4639      	mov	r1, r7
 8007936:	f10d 0007 	add.w	r0, sp, #7
 800793a:	f001 f838 	bl	80089ae <SFU_LL_FLASH_Write>
                                    SE_FW_AUTH_LEN + SE_FW_HEADER_SIGN_LEN);
  STATUS_FWIMG(e_ret_status == SFU_ERROR, SFU_IMG_FLASH_WRITE_FAILED);
 800793e:	f641 76e1 	movw	r6, #8161	; 0x1fe1
 8007942:	42b0      	cmp	r0, r6
  e_ret_status = SFU_LL_FLASH_Write(&flash_if_status, (uint8_t *) SlotHeaderAdd[SlotNumber], (uint8_t *) pFWImageHeader,
 8007944:	4604      	mov	r4, r0
  STATUS_FWIMG(e_ret_status == SFU_ERROR, SFU_IMG_FLASH_WRITE_FAILED);
 8007946:	d10e      	bne.n	8007966 <SFU_IMG_Validation+0x42>
 8007948:	4b13      	ldr	r3, [pc, #76]	; (8007998 <SFU_IMG_Validation+0x74>)
 800794a:	2102      	movs	r1, #2
 800794c:	f883 1160 	strb.w	r1, [r3, #352]	; 0x160
 8007950:	f240 32aa 	movw	r2, #938	; 0x3aa
  if (e_ret_status == SFU_SUCCESS)
  {
    e_ret_status = SFU_LL_FLASH_Write(&flash_if_status, (uint8_t *)(SlotHeaderAdd[SlotNumber] + SE_FW_HEADER_TOT_LEN -
                                                                    SE_FW_HEADER_FINGERPRINT_LEN),
                                      (uint8_t *) pFWImageHeader->PrevHeaderFingerprint, SE_FW_HEADER_FINGERPRINT_LEN);
    STATUS_FWIMG(e_ret_status == SFU_ERROR, SFU_IMG_FLASH_WRITE_FAILED);
 8007954:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164
 8007958:	4810      	ldr	r0, [pc, #64]	; (800799c <SFU_IMG_Validation+0x78>)
 800795a:	4b11      	ldr	r3, [pc, #68]	; (80079a0 <SFU_IMG_Validation+0x7c>)
 800795c:	f002 fad2 	bl	8009f04 <iprintf>
  }


  return e_ret_status;
}
 8007960:	4620      	mov	r0, r4
 8007962:	b003      	add	sp, #12
 8007964:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (e_ret_status == SFU_SUCCESS)
 8007966:	4b0f      	ldr	r3, [pc, #60]	; (80079a4 <SFU_IMG_Validation+0x80>)
 8007968:	4298      	cmp	r0, r3
 800796a:	d1f9      	bne.n	8007960 <SFU_IMG_Validation+0x3c>
    e_ret_status = SFU_LL_FLASH_Write(&flash_if_status, (uint8_t *)(SlotHeaderAdd[SlotNumber] + SE_FW_HEADER_TOT_LEN -
 800796c:	2320      	movs	r3, #32
 800796e:	f505 7290 	add.w	r2, r5, #288	; 0x120
 8007972:	f507 7190 	add.w	r1, r7, #288	; 0x120
 8007976:	f10d 0007 	add.w	r0, sp, #7
 800797a:	f001 f818 	bl	80089ae <SFU_LL_FLASH_Write>
    STATUS_FWIMG(e_ret_status == SFU_ERROR, SFU_IMG_FLASH_WRITE_FAILED);
 800797e:	42b0      	cmp	r0, r6
    e_ret_status = SFU_LL_FLASH_Write(&flash_if_status, (uint8_t *)(SlotHeaderAdd[SlotNumber] + SE_FW_HEADER_TOT_LEN -
 8007980:	4604      	mov	r4, r0
    STATUS_FWIMG(e_ret_status == SFU_ERROR, SFU_IMG_FLASH_WRITE_FAILED);
 8007982:	d1ed      	bne.n	8007960 <SFU_IMG_Validation+0x3c>
 8007984:	4b04      	ldr	r3, [pc, #16]	; (8007998 <SFU_IMG_Validation+0x74>)
 8007986:	2102      	movs	r1, #2
 8007988:	f883 1160 	strb.w	r1, [r3, #352]	; 0x160
 800798c:	f44f 726d 	mov.w	r2, #948	; 0x3b4
 8007990:	e7e0      	b.n	8007954 <SFU_IMG_Validation+0x30>
 8007992:	bf00      	nop
 8007994:	0800b150 	.word	0x0800b150
 8007998:	20001518 	.word	0x20001518
 800799c:	0800be81 	.word	0x0800be81
 80079a0:	0800bdec 	.word	0x0800bdec
 80079a4:	00122f11 	.word	0x00122f11

080079a8 <SFU_IMG_GetFwImageSlot>:
  * @brief  Get firmware image ID from header.
  * @param  pFwImageHeader pointer to a structure to handle the header info
  * @retval Fw Id : SLOT_ACTIVE_1 / 2 /... / SFU_NB_MAX_ACTIVE_IMAGE
  */
uint32_t SFU_IMG_GetFwImageSlot(SE_FwRawHeaderTypeDef *pFwImageHeader)
{
 80079a8:	b508      	push	{r3, lr}
  uint32_t active_slot;

  if (memcmp(pFwImageHeader->SFUMagic, SFUM_1, strlen(SFUM_1)) == 0)
 80079aa:	4904      	ldr	r1, [pc, #16]	; (80079bc <SFU_IMG_GetFwImageSlot+0x14>)
 80079ac:	2204      	movs	r2, #4
 80079ae:	f002 fa83 	bl	8009eb8 <memcmp>
  {
    active_slot = SLOT_INACTIVE;
  }

  return active_slot;
}
 80079b2:	fab0 f080 	clz	r0, r0
 80079b6:	0940      	lsrs	r0, r0, #5
 80079b8:	bd08      	pop	{r3, pc}
 80079ba:	bf00      	nop
 80079bc:	0800bebb 	.word	0x0800bebb

080079c0 <VerifyHeaderSignature>:
{
 80079c0:	b513      	push	{r0, r1, r4, lr}
 80079c2:	4604      	mov	r4, r0
  if (SFU_IMG_GetFwImageSlot(pFwImageHeader) != SLOT_INACTIVE)
 80079c4:	f7ff fff0 	bl	80079a8 <SFU_IMG_GetFwImageSlot>
 80079c8:	b918      	cbnz	r0, 80079d2 <VerifyHeaderSignature+0x12>
  SFU_ErrorStatus e_ret_status = SFU_ERROR;
 80079ca:	f641 70e1 	movw	r0, #8161	; 0x1fe1
}
 80079ce:	b002      	add	sp, #8
 80079d0:	bd10      	pop	{r4, pc}
 80079d2:	f104 0264 	add.w	r2, r4, #100	; 0x64
 80079d6:	f104 0180 	add.w	r1, r4, #128	; 0x80
  uint8_t result = 0x00U;
 80079da:	2300      	movs	r3, #0
      result |= pFwImageHeader->Reserved[i] ^ 0x00U;
 80079dc:	f812 0b01 	ldrb.w	r0, [r2], #1
    for (i = 0U; i < sizeof(pFwImageHeader->Reserved); i++)
 80079e0:	428a      	cmp	r2, r1
      result |= pFwImageHeader->Reserved[i] ^ 0x00U;
 80079e2:	ea43 0300 	orr.w	r3, r3, r0
    for (i = 0U; i < sizeof(pFwImageHeader->Reserved); i++)
 80079e6:	d1f9      	bne.n	80079dc <VerifyHeaderSignature+0x1c>
    if (result == 0x00U)
 80079e8:	2b00      	cmp	r3, #0
 80079ea:	d1ee      	bne.n	80079ca <VerifyHeaderSignature+0xa>
      if (SE_VerifyHeaderSignature(&se_status, pFwImageHeader) == SE_SUCCESS)
 80079ec:	4621      	mov	r1, r4
 80079ee:	a801      	add	r0, sp, #4
 80079f0:	f7fe fafc 	bl	8005fec <SE_VerifyHeaderSignature>
 80079f4:	4b05      	ldr	r3, [pc, #20]	; (8007a0c <VerifyHeaderSignature+0x4c>)
 80079f6:	4298      	cmp	r0, r3
 80079f8:	d1e7      	bne.n	80079ca <VerifyHeaderSignature+0xa>
        FLOW_STEP(uFlowCryptoValue, FLOW_STEP_AUTHENTICATE);
 80079fa:	4a05      	ldr	r2, [pc, #20]	; (8007a10 <VerifyHeaderSignature+0x50>)
 80079fc:	4805      	ldr	r0, [pc, #20]	; (8007a14 <VerifyHeaderSignature+0x54>)
 80079fe:	6813      	ldr	r3, [r2, #0]
 8007a00:	f483 43f3 	eor.w	r3, r3, #31104	; 0x7980
 8007a04:	f083 0319 	eor.w	r3, r3, #25
 8007a08:	6013      	str	r3, [r2, #0]
  return e_ret_status;
 8007a0a:	e7e0      	b.n	80079ce <VerifyHeaderSignature+0xe>
 8007a0c:	0012310f 	.word	0x0012310f
 8007a10:	20001004 	.word	0x20001004
 8007a14:	00122f11 	.word	0x00122f11

08007a18 <CheckAndGetFWHeader>:
  e_ret_status = SFU_LL_FLASH_Read((uint8_t *) pFwImageHeader, (uint8_t *) SlotHeaderAdd[SlotNumber],
 8007a18:	4b09      	ldr	r3, [pc, #36]	; (8007a40 <CheckAndGetFWHeader+0x28>)
 8007a1a:	eb03 0080 	add.w	r0, r3, r0, lsl #2
{
 8007a1e:	b510      	push	{r4, lr}
 8007a20:	460c      	mov	r4, r1
  e_ret_status = SFU_LL_FLASH_Read((uint8_t *) pFwImageHeader, (uint8_t *) SlotHeaderAdd[SlotNumber],
 8007a22:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8007a26:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8007a28:	4620      	mov	r0, r4
 8007a2a:	f000 ffc7 	bl	80089bc <SFU_LL_FLASH_Read>
  if (e_ret_status == SFU_SUCCESS)
 8007a2e:	4b05      	ldr	r3, [pc, #20]	; (8007a44 <CheckAndGetFWHeader+0x2c>)
 8007a30:	4298      	cmp	r0, r3
 8007a32:	d104      	bne.n	8007a3e <CheckAndGetFWHeader+0x26>
    e_ret_status = VerifyHeaderSignature(pFwImageHeader);
 8007a34:	4620      	mov	r0, r4
}
 8007a36:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    e_ret_status = VerifyHeaderSignature(pFwImageHeader);
 8007a3a:	f7ff bfc1 	b.w	80079c0 <VerifyHeaderSignature>
}
 8007a3e:	bd10      	pop	{r4, pc}
 8007a40:	0800b150 	.word	0x0800b150
 8007a44:	00122f11 	.word	0x00122f11

08007a48 <SFU_IMG_VerifyActiveImgMetadata>:
  return (CheckAndGetFWHeader(SlotNumber, &fw_image_header_validated));
 8007a48:	4901      	ldr	r1, [pc, #4]	; (8007a50 <SFU_IMG_VerifyActiveImgMetadata+0x8>)
 8007a4a:	f7ff bfe5 	b.w	8007a18 <CheckAndGetFWHeader>
 8007a4e:	bf00      	nop
 8007a50:	20001538 	.word	0x20001538

08007a54 <SFU_IMG_GetActiveFwVersion>:
{
 8007a54:	b500      	push	{lr}
 8007a56:	b0d1      	sub	sp, #324	; 0x144
  e_ret_status = CheckAndGetFWHeader(SlotNumber, &fw_image_header);
 8007a58:	4669      	mov	r1, sp
 8007a5a:	f7ff ffdd 	bl	8007a18 <CheckAndGetFWHeader>
  if (e_ret_status == SFU_SUCCESS)
 8007a5e:	4b04      	ldr	r3, [pc, #16]	; (8007a70 <SFU_IMG_GetActiveFwVersion+0x1c>)
 8007a60:	4298      	cmp	r0, r3
    version = fw_image_header.FwVersion;
 8007a62:	bf0c      	ite	eq
 8007a64:	f8bd 0006 	ldrheq.w	r0, [sp, #6]
  uint16_t version = 0;
 8007a68:	2000      	movne	r0, #0
}
 8007a6a:	b051      	add	sp, #324	; 0x144
 8007a6c:	f85d fb04 	ldr.w	pc, [sp], #4
 8007a70:	00122f11 	.word	0x00122f11

08007a74 <SFU_IMG_DetectFW>:
{
 8007a74:	b570      	push	{r4, r5, r6, lr}
  pbuffer = (uint8_t *) SlotHeaderAdd[SlotNumber];
 8007a76:	4e11      	ldr	r6, [pc, #68]	; (8007abc <SFU_IMG_DetectFW+0x48>)
 8007a78:	eb06 0380 	add.w	r3, r6, r0, lsl #2
{
 8007a7c:	b0d0      	sub	sp, #320	; 0x140
  if (SFU_LL_FLASH_Read(buffer, pbuffer, sizeof(buffer)) == SFU_SUCCESS)
 8007a7e:	6c19      	ldr	r1, [r3, #64]	; 0x40
{
 8007a80:	4605      	mov	r5, r0
  if (SFU_LL_FLASH_Read(buffer, pbuffer, sizeof(buffer)) == SFU_SUCCESS)
 8007a82:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8007a86:	4668      	mov	r0, sp
 8007a88:	f000 ff98 	bl	80089bc <SFU_LL_FLASH_Read>
 8007a8c:	4b0c      	ldr	r3, [pc, #48]	; (8007ac0 <SFU_IMG_DetectFW+0x4c>)
 8007a8e:	4298      	cmp	r0, r3
 8007a90:	4604      	mov	r4, r0
 8007a92:	d004      	beq.n	8007a9e <SFU_IMG_DetectFW+0x2a>
  SFU_ErrorStatus e_ret_status = SFU_ERROR;
 8007a94:	f641 74e1 	movw	r4, #8161	; 0x1fe1
}
 8007a98:	4620      	mov	r0, r4
 8007a9a:	b050      	add	sp, #320	; 0x140
 8007a9c:	bd70      	pop	{r4, r5, r6, pc}
    if (SFU_IMG_GetFwImageSlot(p_header) != SLOT_INACTIVE)
 8007a9e:	4668      	mov	r0, sp
 8007aa0:	f7ff ff82 	bl	80079a8 <SFU_IMG_GetFwImageSlot>
 8007aa4:	2800      	cmp	r0, #0
 8007aa6:	d0f5      	beq.n	8007a94 <SFU_IMG_DetectFW+0x20>
      if (VerifySlot((uint8_t *) SlotStartAdd[SlotNumber], SFU_IMG_IMAGE_OFFSET + 0x20U, 0U) != SFU_SUCCESS)
 8007aa8:	f856 0025 	ldr.w	r0, [r6, r5, lsl #2]
 8007aac:	2200      	movs	r2, #0
 8007aae:	f44f 7108 	mov.w	r1, #544	; 0x220
 8007ab2:	f7ff fe0f 	bl	80076d4 <VerifySlot>
 8007ab6:	42a0      	cmp	r0, r4
 8007ab8:	d1ee      	bne.n	8007a98 <SFU_IMG_DetectFW+0x24>
 8007aba:	e7eb      	b.n	8007a94 <SFU_IMG_DetectFW+0x20>
 8007abc:	0800b150 	.word	0x0800b150
 8007ac0:	00122f11 	.word	0x00122f11

08007ac4 <SFU_IMG_CheckFwVersion>:
     * installation of a specific version identified by SFU_FW_VERSION_INIT_NUM.
     */
    if (CandidateVersion == SFU_FW_VERSION_INIT_NUM)
    {
      /* Candidate version is allowed */
      e_ret_status = SFU_SUCCESS;
 8007ac4:	4b05      	ldr	r3, [pc, #20]	; (8007adc <SFU_IMG_CheckFwVersion+0x18>)
 8007ac6:	f641 70e1 	movw	r0, #8161	; 0x1fe1
  if (CurrentVersion == 0U)
 8007aca:	b919      	cbnz	r1, 8007ad4 <SFU_IMG_CheckFwVersion+0x10>
      e_ret_status = SFU_SUCCESS;
 8007acc:	2a01      	cmp	r2, #1
 8007ace:	bf08      	it	eq
 8007ad0:	4618      	moveq	r0, r3
 8007ad2:	4770      	bx	lr
 8007ad4:	4291      	cmp	r1, r2
 8007ad6:	bf98      	it	ls
 8007ad8:	4618      	movls	r0, r3
#endif /* SFU_VERBOSE_DEBUG_MODE */

  }

  return e_ret_status;
}
 8007ada:	4770      	bx	lr
 8007adc:	00122f11 	.word	0x00122f11

08007ae0 <SFU_IMG_CheckCandidateVersion>:
#elif defined ( __GNUC__ )
__attribute__((optimize("O1")))
#endif /* __ICCARM__ */

SFU_ErrorStatus SFU_IMG_CheckCandidateVersion(uint32_t DwlSlot)
{
 8007ae0:	b570      	push	{r4, r5, r6, lr}
 8007ae2:	b082      	sub	sp, #8
 8007ae4:	4605      	mov	r5, r0
   * - Check version is allowed
   *      SFU_IMG_GetActiveFwVersion() returns 0 if the header of active firmware is not valid
   */

  /* Header analysis to find slot based on number with magic tag */
  active_slot = SFU_IMG_GetFwImageSlot(&fw_image_header_to_test);
 8007ae6:	4e1f      	ldr	r6, [pc, #124]	; (8007b64 <SFU_IMG_CheckCandidateVersion+0x84>)
 8007ae8:	f506 70b4 	add.w	r0, r6, #360	; 0x168
 8007aec:	f7ff ff5c 	bl	80079a8 <SFU_IMG_GetFwImageSlot>
 8007af0:	4604      	mov	r4, r0

  /* Get the version of active_slot */
  cur_ver = SFU_IMG_GetActiveFwVersion(active_slot);
 8007af2:	f7ff ffaf 	bl	8007a54 <SFU_IMG_GetActiveFwVersion>
 8007af6:	4601      	mov	r1, r0

  if (SFU_IMG_CheckFwVersion(active_slot, cur_ver, fw_image_header_to_test.FwVersion) != SFU_SUCCESS)
 8007af8:	f8b6 216e 	ldrh.w	r2, [r6, #366]	; 0x16e
 8007afc:	4620      	mov	r0, r4
 8007afe:	f7ff ffe1 	bl	8007ac4 <SFU_IMG_CheckFwVersion>
 8007b02:	4b19      	ldr	r3, [pc, #100]	; (8007b68 <SFU_IMG_CheckCandidateVersion+0x88>)
 8007b04:	4298      	cmp	r0, r3
 8007b06:	d021      	beq.n	8007b4c <SFU_IMG_CheckCandidateVersion+0x6c>
  {
    /* The installation is forbidden */
    /* Memorize this error as this will be handled as a critical failure */
    SFU_EXCPT_SetError(SFU_EXCPT_VERSION_ERR);
 8007b08:	2017      	movs	r0, #23
 8007b0a:	f7ff fc15 	bl	8007338 <SFU_EXCPT_SetError>

    /* We would enter an infinite loop of installation attempts if we do not clean-up the dwl slot header */
    e_ret_status = SFU_LL_FLASH_Erase_Size(&flash_if_status, (uint8_t *)SlotStartAdd[DwlSlot], SFU_IMG_IMAGE_OFFSET);
 8007b0e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007b12:	4b16      	ldr	r3, [pc, #88]	; (8007b6c <SFU_IMG_CheckCandidateVersion+0x8c>)
 8007b14:	f853 1025 	ldr.w	r1, [r3, r5, lsl #2]
 8007b18:	f10d 0007 	add.w	r0, sp, #7
 8007b1c:	f000 ff40 	bl	80089a0 <SFU_LL_FLASH_Erase_Size>
 8007b20:	4604      	mov	r4, r0
    STATUS_FWIMG(e_ret_status == SFU_ERROR, SFU_IMG_FLASH_ERASE_FAILED);
 8007b22:	f641 73e1 	movw	r3, #8161	; 0x1fe1
 8007b26:	4298      	cmp	r0, r3
 8007b28:	d004      	beq.n	8007b34 <SFU_IMG_CheckCandidateVersion+0x54>

    /* leave now to handle the critical failure in the appropriate FSM state */
    e_ret_status = SFU_ERROR;
 8007b2a:	f641 74e1 	movw	r4, #8161	; 0x1fe1
    e_ret_status = SFU_IMG_CheckFwVersion(active_slot, verif_ver, fw_image_header_to_test.FwVersion);
  }

  /* Return the result */
  return (e_ret_status);
}
 8007b2e:	4620      	mov	r0, r4
 8007b30:	b002      	add	sp, #8
 8007b32:	bd70      	pop	{r4, r5, r6, pc}
    STATUS_FWIMG(e_ret_status == SFU_ERROR, SFU_IMG_FLASH_ERASE_FAILED);
 8007b34:	2101      	movs	r1, #1
 8007b36:	f886 1160 	strb.w	r1, [r6, #352]	; 0x160
 8007b3a:	f240 424c 	movw	r2, #1100	; 0x44c
 8007b3e:	f8c6 2164 	str.w	r2, [r6, #356]	; 0x164
 8007b42:	4b0b      	ldr	r3, [pc, #44]	; (8007b70 <SFU_IMG_CheckCandidateVersion+0x90>)
 8007b44:	480b      	ldr	r0, [pc, #44]	; (8007b74 <SFU_IMG_CheckCandidateVersion+0x94>)
 8007b46:	f002 f9dd 	bl	8009f04 <iprintf>
 8007b4a:	e7f0      	b.n	8007b2e <SFU_IMG_CheckCandidateVersion+0x4e>
    verif_ver = SFU_IMG_GetActiveFwVersion(active_slot);
 8007b4c:	4620      	mov	r0, r4
 8007b4e:	f7ff ff81 	bl	8007a54 <SFU_IMG_GetActiveFwVersion>
 8007b52:	4601      	mov	r1, r0
    e_ret_status = SFU_IMG_CheckFwVersion(active_slot, verif_ver, fw_image_header_to_test.FwVersion);
 8007b54:	4b03      	ldr	r3, [pc, #12]	; (8007b64 <SFU_IMG_CheckCandidateVersion+0x84>)
 8007b56:	f8b3 216e 	ldrh.w	r2, [r3, #366]	; 0x16e
 8007b5a:	4620      	mov	r0, r4
 8007b5c:	f7ff ffb2 	bl	8007ac4 <SFU_IMG_CheckFwVersion>
 8007b60:	4604      	mov	r4, r0
 8007b62:	e7e4      	b.n	8007b2e <SFU_IMG_CheckCandidateVersion+0x4e>
 8007b64:	20001518 	.word	0x20001518
 8007b68:	00122f11 	.word	0x00122f11
 8007b6c:	0800b150 	.word	0x0800b150
 8007b70:	0800bdec 	.word	0x0800bdec
 8007b74:	0800be81 	.word	0x0800be81

08007b78 <DecryptImageFromDwlSlotToActiveSlot.constprop.0>:
  * @retval SFU_SUCCESS if successful, a SFU_ErrorStatus error otherwise.
  */
#if defined(__ICCARM__)
#pragma inline=never
#endif
static SFU_ErrorStatus DecryptImageFromDwlSlotToActiveSlot(uint32_t ActiveSlot, uint32_t DwlSlot,
 8007b78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007b7c:	f2ad 4d4c 	subw	sp, sp, #1100	; 0x44c
 8007b80:	4605      	mov	r5, r0
  uint32_t size;
  uint32_t fw_decrypted_chunk_size;
  uint32_t fw_tag_len;
  uint8_t fw_tag_output[SE_TAG_LEN];

  TRACE("\r\n\t  Image preparation done.\r\n\t  Installation started ...");
 8007b82:	485c      	ldr	r0, [pc, #368]	; (8007cf4 <DecryptImageFromDwlSlotToActiveSlot.constprop.0+0x17c>)
  {
    return e_ret_status;
  }

  /* Control the firwmare size vs slot size */
  if ((pFwImageHeader->FwSize + SFU_IMG_IMAGE_OFFSET) > SLOT_SIZE(ActiveSlot))
 8007b84:	f8df a18c 	ldr.w	sl, [pc, #396]	; 8007d14 <DecryptImageFromDwlSlotToActiveSlot.constprop.0+0x19c>
static SFU_ErrorStatus DecryptImageFromDwlSlotToActiveSlot(uint32_t ActiveSlot, uint32_t DwlSlot,
 8007b88:	9105      	str	r1, [sp, #20]
  TRACE("\r\n\t  Image preparation done.\r\n\t  Installation started ...");
 8007b8a:	f002 f9bb 	bl	8009f04 <iprintf>
  if ((pFwImageHeader->FwSize + SFU_IMG_IMAGE_OFFSET) > SLOT_SIZE(ActiveSlot))
 8007b8e:	4b5a      	ldr	r3, [pc, #360]	; (8007cf8 <DecryptImageFromDwlSlotToActiveSlot.constprop.0+0x180>)
 8007b90:	4f5a      	ldr	r7, [pc, #360]	; (8007cfc <DecryptImageFromDwlSlotToActiveSlot.constprop.0+0x184>)
 8007b92:	f853 6025 	ldr.w	r6, [r3, r5, lsl #2]
 8007b96:	f85a 8025 	ldr.w	r8, [sl, r5, lsl #2]
 8007b9a:	68bb      	ldr	r3, [r7, #8]
 8007b9c:	eba6 0608 	sub.w	r6, r6, r8
 8007ba0:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8007ba4:	1c72      	adds	r2, r6, #1
 8007ba6:	4293      	cmp	r3, r2
 8007ba8:	d852      	bhi.n	8007c50 <DecryptImageFromDwlSlotToActiveSlot.constprop.0+0xd8>
    return e_ret_status;
  }

  /* Decryption process initialization
     ================================= */
  se_ret_status = SE_Decrypt_Init(&e_se_status, pFwImageHeader, SE_FW_IMAGE_COMPLETE);
 8007baa:	2200      	movs	r2, #0
 8007bac:	4639      	mov	r1, r7
 8007bae:	a807      	add	r0, sp, #28
 8007bb0:	f7fe f8cc 	bl	8005d4c <SE_Decrypt_Init>
  if (se_ret_status == SE_SUCCESS)
 8007bb4:	f8df 9160 	ldr.w	r9, [pc, #352]	; 8007d18 <DecryptImageFromDwlSlotToActiveSlot.constprop.0+0x1a0>
  se_ret_status = SE_Decrypt_Init(&e_se_status, pFwImageHeader, SE_FW_IMAGE_COMPLETE);
 8007bb8:	9003      	str	r0, [sp, #12]
  if (se_ret_status == SE_SUCCESS)
 8007bba:	4548      	cmp	r0, r9
 8007bbc:	d148      	bne.n	8007c50 <DecryptImageFromDwlSlotToActiveSlot.constprop.0+0xd8>
     ================= */

    /*
     *  The header may not be contiguous with the FW image : 2 erasing operations needed
     */
    e_ret_status = SFU_LL_FLASH_Erase_Size(&flash_if_status, (uint8_t *) SlotHeaderAdd[ActiveSlot],
 8007bbe:	4b50      	ldr	r3, [pc, #320]	; (8007d00 <DecryptImageFromDwlSlotToActiveSlot.constprop.0+0x188>)
                                           SFU_IMG_IMAGE_OFFSET);
    if (e_ret_status == SFU_SUCCESS)
 8007bc0:	f8df b158 	ldr.w	fp, [pc, #344]	; 8007d1c <DecryptImageFromDwlSlotToActiveSlot.constprop.0+0x1a4>
    e_ret_status = SFU_LL_FLASH_Erase_Size(&flash_if_status, (uint8_t *) SlotHeaderAdd[ActiveSlot],
 8007bc4:	f853 1025 	ldr.w	r1, [r3, r5, lsl #2]
 8007bc8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007bcc:	f10d 001b 	add.w	r0, sp, #27
 8007bd0:	f000 fee6 	bl	80089a0 <SFU_LL_FLASH_Erase_Size>
    if (e_ret_status == SFU_SUCCESS)
 8007bd4:	4558      	cmp	r0, fp
    e_ret_status = SFU_LL_FLASH_Erase_Size(&flash_if_status, (uint8_t *) SlotHeaderAdd[ActiveSlot],
 8007bd6:	4604      	mov	r4, r0
    if (e_ret_status == SFU_SUCCESS)
 8007bd8:	f040 8087 	bne.w	8007cea <DecryptImageFromDwlSlotToActiveSlot.constprop.0+0x172>
    {
      e_ret_status = SFU_LL_FLASH_Erase_Size(&flash_if_status,
 8007bdc:	f46f 73ff 	mvn.w	r3, #510	; 0x1fe
 8007be0:	18f2      	adds	r2, r6, r3
 8007be2:	f508 7100 	add.w	r1, r8, #512	; 0x200
 8007be6:	f10d 001b 	add.w	r0, sp, #27
 8007bea:	f000 fed9 	bl	80089a0 <SFU_LL_FLASH_Erase_Size>
                                             (uint8_t *)(SlotStartAdd[ActiveSlot] + SFU_IMG_IMAGE_OFFSET),
                                             SLOT_SIZE(ActiveSlot) - SFU_IMG_IMAGE_OFFSET);
    }
    STATUS_FWIMG(e_ret_status == SFU_ERROR, SFU_IMG_FLASH_ERASE_FAILED);
 8007bee:	f641 73e1 	movw	r3, #8161	; 0x1fe1
 8007bf2:	4298      	cmp	r0, r3
      e_ret_status = SFU_LL_FLASH_Erase_Size(&flash_if_status,
 8007bf4:	4604      	mov	r4, r0
    STATUS_FWIMG(e_ret_status == SFU_ERROR, SFU_IMG_FLASH_ERASE_FAILED);
 8007bf6:	d132      	bne.n	8007c5e <DecryptImageFromDwlSlotToActiveSlot.constprop.0+0xe6>
 8007bf8:	4b42      	ldr	r3, [pc, #264]	; (8007d04 <DecryptImageFromDwlSlotToActiveSlot.constprop.0+0x18c>)
 8007bfa:	4843      	ldr	r0, [pc, #268]	; (8007d08 <DecryptImageFromDwlSlotToActiveSlot.constprop.0+0x190>)
 8007bfc:	2101      	movs	r1, #1
 8007bfe:	7019      	strb	r1, [r3, #0]
 8007c00:	4b42      	ldr	r3, [pc, #264]	; (8007d0c <DecryptImageFromDwlSlotToActiveSlot.constprop.0+0x194>)
 8007c02:	f44f 7201 	mov.w	r2, #516	; 0x204
 8007c06:	601a      	str	r2, [r3, #0]
 8007c08:	4b41      	ldr	r3, [pc, #260]	; (8007d10 <DecryptImageFromDwlSlotToActiveSlot.constprop.0+0x198>)
 8007c0a:	f002 f97b 	bl	8009f04 <iprintf>
 8007c0e:	f641 74e1 	movw	r4, #8161	; 0x1fe1
    /*
     * Skip header : no decryption needed
     */
    fw_index = SFU_IMG_IMAGE_OFFSET;

    while ((e_ret_status == SFU_SUCCESS) && (se_ret_status == SE_SUCCESS) &&
 8007c12:	f8df b108 	ldr.w	fp, [pc, #264]	; 8007d1c <DecryptImageFromDwlSlotToActiveSlot.constprop.0+0x1a4>
      {
        (void) SFU_LL_SECU_IWDG_Refresh();
      }

      /* Set size of reading/decryption */
      size = SFU_IMG_CHUNK_SIZE;
 8007c16:	f44f 7600 	mov.w	r6, #512	; 0x200
      if ((fw_index % 10U) != 0U)
 8007c1a:	230a      	movs	r3, #10
 8007c1c:	fbb6 f2f3 	udiv	r2, r6, r3
 8007c20:	fb03 6312 	mls	r3, r3, r2, r6
 8007c24:	9304      	str	r3, [sp, #16]
 8007c26:	9b03      	ldr	r3, [sp, #12]
    while ((e_ret_status == SFU_SUCCESS) && (se_ret_status == SE_SUCCESS) &&
 8007c28:	455c      	cmp	r4, fp
 8007c2a:	d111      	bne.n	8007c50 <DecryptImageFromDwlSlotToActiveSlot.constprop.0+0xd8>
 8007c2c:	454b      	cmp	r3, r9
 8007c2e:	d10f      	bne.n	8007c50 <DecryptImageFromDwlSlotToActiveSlot.constprop.0+0xd8>
           (fw_index < (pFwImageHeader->FwSize + SFU_IMG_IMAGE_OFFSET)))
 8007c30:	68ba      	ldr	r2, [r7, #8]
 8007c32:	f502 7200 	add.w	r2, r2, #512	; 0x200
    while ((e_ret_status == SFU_SUCCESS) && (se_ret_status == SE_SUCCESS) &&
 8007c36:	42b2      	cmp	r2, r6
 8007c38:	d819      	bhi.n	8007c6e <DecryptImageFromDwlSlotToActiveSlot.constprop.0+0xf6>
#endif /* SFU_ENCRYPTED_IMAGE */

  if ((se_ret_status == SE_SUCCESS) && (e_ret_status == SFU_SUCCESS))
  {
    /* Do the Finalization, check the authentication TAG*/
    fw_tag_len = sizeof(fw_tag_output);
 8007c3a:	2220      	movs	r2, #32
 8007c3c:	9209      	str	r2, [sp, #36]	; 0x24
    se_ret_status = SE_Decrypt_Finish(&e_se_status, fw_tag_output, (int32_t *)&fw_tag_len);
 8007c3e:	a90a      	add	r1, sp, #40	; 0x28
 8007c40:	aa09      	add	r2, sp, #36	; 0x24
 8007c42:	a807      	add	r0, sp, #28
 8007c44:	9303      	str	r3, [sp, #12]
 8007c46:	f7fe f8f5 	bl	8005e34 <SE_Decrypt_Finish>
    if (se_ret_status != SE_SUCCESS)
 8007c4a:	9b03      	ldr	r3, [sp, #12]
 8007c4c:	4298      	cmp	r0, r3
 8007c4e:	d001      	beq.n	8007c54 <DecryptImageFromDwlSlotToActiveSlot.constprop.0+0xdc>
    {
      e_ret_status = SFU_ERROR;
 8007c50:	f641 74e1 	movw	r4, #8161	; 0x1fe1
  else
  {
    e_ret_status = SFU_ERROR;
  }
  return e_ret_status;
}
 8007c54:	4620      	mov	r0, r4
 8007c56:	f20d 4d4c 	addw	sp, sp, #1100	; 0x44c
 8007c5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (e_ret_status == SFU_SUCCESS)
 8007c5e:	4558      	cmp	r0, fp
 8007c60:	d1d7      	bne.n	8007c12 <DecryptImageFromDwlSlotToActiveSlot.constprop.0+0x9a>
      e_ret_status = SFU_IMG_Validation(ActiveSlot, pFwImageHeader);
 8007c62:	4639      	mov	r1, r7
 8007c64:	4628      	mov	r0, r5
 8007c66:	f7ff fe5d 	bl	8007924 <SFU_IMG_Validation>
 8007c6a:	4604      	mov	r4, r0
      if (e_ret_status != SFU_SUCCESS)
 8007c6c:	e7d1      	b.n	8007c12 <DecryptImageFromDwlSlotToActiveSlot.constprop.0+0x9a>
      if ((fw_index % 10U) != 0U)
 8007c6e:	9b04      	ldr	r3, [sp, #16]
 8007c70:	b10b      	cbz	r3, 8007c76 <DecryptImageFromDwlSlotToActiveSlot.constprop.0+0xfe>
        (void) SFU_LL_SECU_IWDG_Refresh();
 8007c72:	f001 f843 	bl	8008cfc <SFU_LL_SECU_IWDG_Refresh>
      if (((pFwImageHeader->FwSize + SFU_IMG_IMAGE_OFFSET) - fw_index) < size)
 8007c76:	68bd      	ldr	r5, [r7, #8]
      e_ret_status = SFU_LL_FLASH_Read(fw_encrypted_chunk, (uint8_t *)(SlotStartAdd[DwlSlot] + fw_index), size);
 8007c78:	9b05      	ldr	r3, [sp, #20]
      if (((pFwImageHeader->FwSize + SFU_IMG_IMAGE_OFFSET) - fw_index) < size)
 8007c7a:	f505 7500 	add.w	r5, r5, #512	; 0x200
 8007c7e:	1bad      	subs	r5, r5, r6
      size = SFU_IMG_CHUNK_SIZE;
 8007c80:	f5b5 7f00 	cmp.w	r5, #512	; 0x200
      e_ret_status = SFU_LL_FLASH_Read(fw_encrypted_chunk, (uint8_t *)(SlotStartAdd[DwlSlot] + fw_index), size);
 8007c84:	f85a 1023 	ldr.w	r1, [sl, r3, lsl #2]
      size = SFU_IMG_CHUNK_SIZE;
 8007c88:	bf28      	it	cs
 8007c8a:	f44f 7500 	movcs.w	r5, #512	; 0x200
      e_ret_status = SFU_LL_FLASH_Read(fw_encrypted_chunk, (uint8_t *)(SlotStartAdd[DwlSlot] + fw_index), size);
 8007c8e:	462a      	mov	r2, r5
 8007c90:	4431      	add	r1, r6
 8007c92:	a812      	add	r0, sp, #72	; 0x48
 8007c94:	f000 fe92 	bl	80089bc <SFU_LL_FLASH_Read>
      if (e_ret_status == SFU_SUCCESS)
 8007c98:	4558      	cmp	r0, fp
      e_ret_status = SFU_LL_FLASH_Read(fw_encrypted_chunk, (uint8_t *)(SlotStartAdd[DwlSlot] + fw_index), size);
 8007c9a:	4604      	mov	r4, r0
      if (e_ret_status == SFU_SUCCESS)
 8007c9c:	d1d8      	bne.n	8007c50 <DecryptImageFromDwlSlotToActiveSlot.constprop.0+0xd8>
        fw_decrypted_chunk_size = size;
 8007c9e:	ab08      	add	r3, sp, #32
        se_ret_status = SE_Decrypt_Append(&e_se_status, fw_encrypted_chunk, (int32_t)size, fw_decrypted_chunk,
 8007ca0:	9300      	str	r3, [sp, #0]
 8007ca2:	462a      	mov	r2, r5
 8007ca4:	ab92      	add	r3, sp, #584	; 0x248
 8007ca6:	a912      	add	r1, sp, #72	; 0x48
 8007ca8:	a807      	add	r0, sp, #28
        fw_decrypted_chunk_size = size;
 8007caa:	9508      	str	r5, [sp, #32]
        se_ret_status = SE_Decrypt_Append(&e_se_status, fw_encrypted_chunk, (int32_t)size, fw_decrypted_chunk,
 8007cac:	f7fe f884 	bl	8005db8 <SE_Decrypt_Append>
        if (se_ret_status == SE_SUCCESS)
 8007cb0:	4548      	cmp	r0, r9
        se_ret_status = SE_Decrypt_Append(&e_se_status, fw_encrypted_chunk, (int32_t)size, fw_decrypted_chunk,
 8007cb2:	4603      	mov	r3, r0
        if (se_ret_status == SE_SUCCESS)
 8007cb4:	d1b8      	bne.n	8007c28 <DecryptImageFromDwlSlotToActiveSlot.constprop.0+0xb0>
          e_ret_status = SFU_LL_FLASH_Write(&flash_if_status, (uint8_t *)(SlotStartAdd[ActiveSlot] + fw_index),
 8007cb6:	462b      	mov	r3, r5
 8007cb8:	aa92      	add	r2, sp, #584	; 0x248
 8007cba:	eb08 0106 	add.w	r1, r8, r6
 8007cbe:	f10d 001b 	add.w	r0, sp, #27
 8007cc2:	f000 fe74 	bl	80089ae <SFU_LL_FLASH_Write>
          STATUS_FWIMG(e_ret_status == SFU_ERROR, SFU_IMG_FLASH_WRITE_FAILED);
 8007cc6:	f641 73e1 	movw	r3, #8161	; 0x1fe1
 8007cca:	4298      	cmp	r0, r3
          e_ret_status = SFU_LL_FLASH_Write(&flash_if_status, (uint8_t *)(SlotStartAdd[ActiveSlot] + fw_index),
 8007ccc:	4604      	mov	r4, r0
          STATUS_FWIMG(e_ret_status == SFU_ERROR, SFU_IMG_FLASH_WRITE_FAILED);
 8007cce:	d10a      	bne.n	8007ce6 <DecryptImageFromDwlSlotToActiveSlot.constprop.0+0x16e>
 8007cd0:	4b0c      	ldr	r3, [pc, #48]	; (8007d04 <DecryptImageFromDwlSlotToActiveSlot.constprop.0+0x18c>)
 8007cd2:	480d      	ldr	r0, [pc, #52]	; (8007d08 <DecryptImageFromDwlSlotToActiveSlot.constprop.0+0x190>)
 8007cd4:	2102      	movs	r1, #2
 8007cd6:	7019      	strb	r1, [r3, #0]
 8007cd8:	4b0c      	ldr	r3, [pc, #48]	; (8007d0c <DecryptImageFromDwlSlotToActiveSlot.constprop.0+0x194>)
 8007cda:	f44f 720f 	mov.w	r2, #572	; 0x23c
 8007cde:	601a      	str	r2, [r3, #0]
 8007ce0:	4b0b      	ldr	r3, [pc, #44]	; (8007d10 <DecryptImageFromDwlSlotToActiveSlot.constprop.0+0x198>)
 8007ce2:	f002 f90f 	bl	8009f04 <iprintf>
          fw_index += size;
 8007ce6:	442e      	add	r6, r5
 8007ce8:	e797      	b.n	8007c1a <DecryptImageFromDwlSlotToActiveSlot.constprop.0+0xa2>
    STATUS_FWIMG(e_ret_status == SFU_ERROR, SFU_IMG_FLASH_ERASE_FAILED);
 8007cea:	f641 73e1 	movw	r3, #8161	; 0x1fe1
 8007cee:	4298      	cmp	r0, r3
 8007cf0:	d18f      	bne.n	8007c12 <DecryptImageFromDwlSlotToActiveSlot.constprop.0+0x9a>
 8007cf2:	e781      	b.n	8007bf8 <DecryptImageFromDwlSlotToActiveSlot.constprop.0+0x80>
 8007cf4:	0800bec0 	.word	0x0800bec0
 8007cf8:	0800b170 	.word	0x0800b170
 8007cfc:	20001680 	.word	0x20001680
 8007d00:	0800b190 	.word	0x0800b190
 8007d04:	20001678 	.word	0x20001678
 8007d08:	0800be81 	.word	0x0800be81
 8007d0c:	2000167c 	.word	0x2000167c
 8007d10:	0800befa 	.word	0x0800befa
 8007d14:	0800b150 	.word	0x0800b150
 8007d18:	0012310f 	.word	0x0012310f
 8007d1c:	00122f11 	.word	0x00122f11

08007d20 <VerifyFwSignatureBeforeDecrypt.constprop.0>:
static SFU_ErrorStatus VerifyFwSignatureBeforeDecrypt(uint32_t DwlSlot, SE_FwRawHeaderTypeDef *pFwImageHeader)
 8007d20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d24:	f2ad 6d3c 	subw	sp, sp, #1596	; 0x63c
  se_ret_status = SE_Decrypt_Init(&e_se_status, pFwImageHeader, SE_FW_IMAGE_COMPLETE);
 8007d28:	4934      	ldr	r1, [pc, #208]	; (8007dfc <VerifyFwSignatureBeforeDecrypt.constprop.0+0xdc>)
  if (se_ret_status == SE_SUCCESS)
 8007d2a:	f8df 80dc 	ldr.w	r8, [pc, #220]	; 8007e08 <VerifyFwSignatureBeforeDecrypt.constprop.0+0xe8>
 8007d2e:	f8df 90cc 	ldr.w	r9, [pc, #204]	; 8007dfc <VerifyFwSignatureBeforeDecrypt.constprop.0+0xdc>
static SFU_ErrorStatus VerifyFwSignatureBeforeDecrypt(uint32_t DwlSlot, SE_FwRawHeaderTypeDef *pFwImageHeader)
 8007d32:	4607      	mov	r7, r0
  se_ret_status = SE_Decrypt_Init(&e_se_status, pFwImageHeader, SE_FW_IMAGE_COMPLETE);
 8007d34:	2200      	movs	r2, #0
 8007d36:	a802      	add	r0, sp, #8
 8007d38:	f7fe f808 	bl	8005d4c <SE_Decrypt_Init>
  if (se_ret_status == SE_SUCCESS)
 8007d3c:	4540      	cmp	r0, r8
 8007d3e:	d12e      	bne.n	8007d9e <VerifyFwSignatureBeforeDecrypt.constprop.0+0x7e>
    se_ret_status = SE_AuthenticateFW_Init(&e_se_status, pFwImageHeader, SE_FW_IMAGE_COMPLETE);
 8007d40:	2200      	movs	r2, #0
 8007d42:	4649      	mov	r1, r9
 8007d44:	a802      	add	r0, sp, #8
 8007d46:	f7fe f8a9 	bl	8005e9c <SE_AuthenticateFW_Init>
      e_ret_status = SFU_LL_FLASH_Read(fw_encrypted_chunk, (uint8_t *)(SlotStartAdd[DwlSlot] + fw_index), size);
 8007d4a:	f8df a0c0 	ldr.w	sl, [pc, #192]	; 8007e0c <VerifyFwSignatureBeforeDecrypt.constprop.0+0xec>
      if (e_ret_status == SFU_SUCCESS)
 8007d4e:	f8df b0b4 	ldr.w	fp, [pc, #180]	; 8007e04 <VerifyFwSignatureBeforeDecrypt.constprop.0+0xe4>
    se_ret_status = SE_AuthenticateFW_Init(&e_se_status, pFwImageHeader, SE_FW_IMAGE_COMPLETE);
 8007d52:	4604      	mov	r4, r0
    fw_index = SFU_IMG_IMAGE_OFFSET;
 8007d54:	f44f 7600 	mov.w	r6, #512	; 0x200
    while ((e_ret_status == SFU_SUCCESS) && (se_ret_status == SE_SUCCESS) &&
 8007d58:	4544      	cmp	r4, r8
 8007d5a:	d120      	bne.n	8007d9e <VerifyFwSignatureBeforeDecrypt.constprop.0+0x7e>
           (fw_index < (pFwImageHeader->FwSize + SFU_IMG_IMAGE_OFFSET)))
 8007d5c:	f8d9 5008 	ldr.w	r5, [r9, #8]
 8007d60:	f505 7500 	add.w	r5, r5, #512	; 0x200
    while ((e_ret_status == SFU_SUCCESS) && (se_ret_status == SE_SUCCESS) &&
 8007d64:	42b5      	cmp	r5, r6
 8007d66:	d820      	bhi.n	8007daa <VerifyFwSignatureBeforeDecrypt.constprop.0+0x8a>
    fw_tag_len = sizeof(fw_tag_output);
 8007d68:	2520      	movs	r5, #32
    se_ret_status = SE_Decrypt_Finish(&e_se_status, fw_tag_output, (int32_t *)&fw_tag_len);
 8007d6a:	aa05      	add	r2, sp, #20
 8007d6c:	a906      	add	r1, sp, #24
 8007d6e:	a802      	add	r0, sp, #8
    fw_tag_len = sizeof(fw_tag_output);
 8007d70:	9505      	str	r5, [sp, #20]
    se_ret_status = SE_Decrypt_Finish(&e_se_status, fw_tag_output, (int32_t *)&fw_tag_len);
 8007d72:	f7fe f85f 	bl	8005e34 <SE_Decrypt_Finish>
    if (se_ret_status == SE_SUCCESS)
 8007d76:	42a0      	cmp	r0, r4
 8007d78:	d111      	bne.n	8007d9e <VerifyFwSignatureBeforeDecrypt.constprop.0+0x7e>
      se_ret_status = SE_AuthenticateFW_Finish(&e_se_status, fw_tag_output, (int32_t *)&fw_tag_len);
 8007d7a:	aa05      	add	r2, sp, #20
 8007d7c:	a906      	add	r1, sp, #24
 8007d7e:	a802      	add	r0, sp, #8
      fw_tag_len = sizeof(fw_tag_output);
 8007d80:	9505      	str	r5, [sp, #20]
      se_ret_status = SE_AuthenticateFW_Finish(&e_se_status, fw_tag_output, (int32_t *)&fw_tag_len);
 8007d82:	f7fe f8ff 	bl	8005f84 <SE_AuthenticateFW_Finish>
      if ((se_ret_status == SE_SUCCESS) && (fw_tag_len == SE_TAG_LEN))
 8007d86:	42a0      	cmp	r0, r4
 8007d88:	d109      	bne.n	8007d9e <VerifyFwSignatureBeforeDecrypt.constprop.0+0x7e>
 8007d8a:	9a05      	ldr	r2, [sp, #20]
 8007d8c:	2a20      	cmp	r2, #32
 8007d8e:	d106      	bne.n	8007d9e <VerifyFwSignatureBeforeDecrypt.constprop.0+0x7e>
        if (MemoryCompare(fw_tag_output, pFwImageHeader->FwTag, SE_TAG_LEN) == SFU_SUCCESS)
 8007d90:	491b      	ldr	r1, [pc, #108]	; (8007e00 <VerifyFwSignatureBeforeDecrypt.constprop.0+0xe0>)
 8007d92:	a806      	add	r0, sp, #24
 8007d94:	f7ff fb2e 	bl	80073f4 <MemoryCompare>
 8007d98:	4b1a      	ldr	r3, [pc, #104]	; (8007e04 <VerifyFwSignatureBeforeDecrypt.constprop.0+0xe4>)
 8007d9a:	4298      	cmp	r0, r3
 8007d9c:	d001      	beq.n	8007da2 <VerifyFwSignatureBeforeDecrypt.constprop.0+0x82>
    e_ret_status = SFU_ERROR;
 8007d9e:	f641 70e1 	movw	r0, #8161	; 0x1fe1
}
 8007da2:	f20d 6d3c 	addw	sp, sp, #1596	; 0x63c
 8007da6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      if (((pFwImageHeader->FwSize + SFU_IMG_IMAGE_OFFSET) - fw_index) < size)
 8007daa:	1bad      	subs	r5, r5, r6
      size = SFU_IMG_CHUNK_SIZE;
 8007dac:	f5b5 7f00 	cmp.w	r5, #512	; 0x200
      e_ret_status = SFU_LL_FLASH_Read(fw_encrypted_chunk, (uint8_t *)(SlotStartAdd[DwlSlot] + fw_index), size);
 8007db0:	f85a 1027 	ldr.w	r1, [sl, r7, lsl #2]
      size = SFU_IMG_CHUNK_SIZE;
 8007db4:	bf28      	it	cs
 8007db6:	f44f 7500 	movcs.w	r5, #512	; 0x200
      e_ret_status = SFU_LL_FLASH_Read(fw_encrypted_chunk, (uint8_t *)(SlotStartAdd[DwlSlot] + fw_index), size);
 8007dba:	462a      	mov	r2, r5
 8007dbc:	4431      	add	r1, r6
 8007dbe:	a80e      	add	r0, sp, #56	; 0x38
 8007dc0:	f000 fdfc 	bl	80089bc <SFU_LL_FLASH_Read>
      if (e_ret_status == SFU_SUCCESS)
 8007dc4:	4558      	cmp	r0, fp
 8007dc6:	d1ea      	bne.n	8007d9e <VerifyFwSignatureBeforeDecrypt.constprop.0+0x7e>
        fw_decrypted_chunk_size = size;
 8007dc8:	ab03      	add	r3, sp, #12
        se_ret_status = SE_Decrypt_Append(&e_se_status, fw_encrypted_chunk, (int32_t)size, fw_decrypted_chunk,
 8007dca:	9300      	str	r3, [sp, #0]
 8007dcc:	462a      	mov	r2, r5
 8007dce:	ab8e      	add	r3, sp, #568	; 0x238
 8007dd0:	a90e      	add	r1, sp, #56	; 0x38
 8007dd2:	a802      	add	r0, sp, #8
        fw_decrypted_chunk_size = size;
 8007dd4:	9503      	str	r5, [sp, #12]
        se_ret_status = SE_Decrypt_Append(&e_se_status, fw_encrypted_chunk, (int32_t)size, fw_decrypted_chunk,
 8007dd6:	f7fd ffef 	bl	8005db8 <SE_Decrypt_Append>
        if (se_ret_status == SE_SUCCESS)
 8007dda:	4540      	cmp	r0, r8
 8007ddc:	d1df      	bne.n	8007d9e <VerifyFwSignatureBeforeDecrypt.constprop.0+0x7e>
          fw_authenticated_chunk_size = sizeof(fw_authenticated_chunk);
 8007dde:	ab04      	add	r3, sp, #16
 8007de0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007de4:	9204      	str	r2, [sp, #16]
          se_ret_status = SE_AuthenticateFW_Append(&e_se_status, fw_decrypted_chunk, (int32_t)size,
 8007de6:	9300      	str	r3, [sp, #0]
 8007de8:	462a      	mov	r2, r5
 8007dea:	f50d 6387 	add.w	r3, sp, #1080	; 0x438
 8007dee:	a98e      	add	r1, sp, #568	; 0x238
 8007df0:	a802      	add	r0, sp, #8
 8007df2:	f7fe f889 	bl	8005f08 <SE_AuthenticateFW_Append>
          fw_index += size;
 8007df6:	442e      	add	r6, r5
          se_ret_status = SE_AuthenticateFW_Append(&e_se_status, fw_decrypted_chunk, (int32_t)size,
 8007df8:	4604      	mov	r4, r0
          fw_index += size;
 8007dfa:	e7ad      	b.n	8007d58 <VerifyFwSignatureBeforeDecrypt.constprop.0+0x38>
 8007dfc:	20001680 	.word	0x20001680
 8007e00:	20001694 	.word	0x20001694
 8007e04:	00122f11 	.word	0x00122f11
 8007e08:	0012310f 	.word	0x0012310f
 8007e0c:	0800b150 	.word	0x0800b150

08007e10 <FirmwareToResume.constprop.0>:
static SFU_ErrorStatus  FirmwareToResume(uint32_t ActiveSlot, uint32_t DwlSlot, SE_FwRawHeaderTypeDef *pValidHeader,
 8007e10:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007e14:	f2ad 5d04 	subw	sp, sp, #1284	; 0x504
  (void) memset(erased_flash_pattern, 0xFF, MAGIC_LENGTH);
 8007e18:	2220      	movs	r2, #32
 8007e1a:	21ff      	movs	r1, #255	; 0xff
 8007e1c:	a8f0      	add	r0, sp, #960	; 0x3c0
 8007e1e:	f002 f869 	bl	8009ef4 <memset>
                        (uint8_t *)((uint32_t)TRAILER_HDR_VALID(DwlSlot) + SE_FW_AUTH_LEN + (MAGIC_LENGTH / 2U)),
 8007e22:	4b81      	ldr	r3, [pc, #516]	; (8008028 <FirmwareToResume.constprop.0+0x218>)
 8007e24:	691e      	ldr	r6, [r3, #16]
  if (SFU_LL_FLASH_Read(signature_valid,
 8007e26:	2210      	movs	r2, #16
 8007e28:	f2a6 210f 	subw	r1, r6, #527	; 0x20f
 8007e2c:	4668      	mov	r0, sp
 8007e2e:	f000 fdc5 	bl	80089bc <SFU_LL_FLASH_Read>
 8007e32:	4b7e      	ldr	r3, [pc, #504]	; (800802c <FirmwareToResume.constprop.0+0x21c>)
 8007e34:	4298      	cmp	r0, r3
 8007e36:	4605      	mov	r5, r0
 8007e38:	d002      	beq.n	8007e40 <FirmwareToResume.constprop.0+0x30>
        e_ret_status = SFU_ERROR;
 8007e3a:	f641 74e1 	movw	r4, #8161	; 0x1fe1
 8007e3e:	e03e      	b.n	8007ebe <FirmwareToResume.constprop.0+0xae>
  if (SFU_LL_FLASH_Read(signature_test,
 8007e40:	2210      	movs	r2, #16
 8007e42:	f1a6 01cf 	sub.w	r1, r6, #207	; 0xcf
 8007e46:	a850      	add	r0, sp, #320	; 0x140
 8007e48:	f000 fdb8 	bl	80089bc <SFU_LL_FLASH_Read>
 8007e4c:	42a8      	cmp	r0, r5
 8007e4e:	4604      	mov	r4, r0
 8007e50:	d1f3      	bne.n	8007e3a <FirmwareToResume.constprop.0+0x2a>
  if (SFU_LL_FLASH_Read(magic, TRAILER_SWAP_ADDR(DwlSlot), MAGIC_LENGTH) != SFU_SUCCESS)
 8007e52:	2220      	movs	r2, #32
 8007e54:	f1a6 011f 	sub.w	r1, r6, #31
 8007e58:	a8a0      	add	r0, sp, #640	; 0x280
 8007e5a:	f000 fdaf 	bl	80089bc <SFU_LL_FLASH_Read>
 8007e5e:	42a0      	cmp	r0, r4
 8007e60:	4605      	mov	r5, r0
 8007e62:	d1ea      	bne.n	8007e3a <FirmwareToResume.constprop.0+0x2a>
  if ((memcmp(magic, signature_valid, sizeof(signature_valid)) != 0)
 8007e64:	2210      	movs	r2, #16
 8007e66:	4669      	mov	r1, sp
 8007e68:	a8a0      	add	r0, sp, #640	; 0x280
 8007e6a:	f002 f825 	bl	8009eb8 <memcmp>
 8007e6e:	2800      	cmp	r0, #0
 8007e70:	d1e3      	bne.n	8007e3a <FirmwareToResume.constprop.0+0x2a>
      || (memcmp(&magic[MAGIC_LENGTH / 2U], signature_test, sizeof(signature_test)) != 0)
 8007e72:	2210      	movs	r2, #16
 8007e74:	a950      	add	r1, sp, #320	; 0x140
 8007e76:	a8a4      	add	r0, sp, #656	; 0x290
 8007e78:	f002 f81e 	bl	8009eb8 <memcmp>
 8007e7c:	2800      	cmp	r0, #0
 8007e7e:	d1dc      	bne.n	8007e3a <FirmwareToResume.constprop.0+0x2a>
      || (memcmp(magic, erased_flash_pattern, MAGIC_LENGTH) == 0))
 8007e80:	2220      	movs	r2, #32
 8007e82:	a9f0      	add	r1, sp, #960	; 0x3c0
 8007e84:	a8a0      	add	r0, sp, #640	; 0x280
 8007e86:	f002 f817 	bl	8009eb8 <memcmp>
 8007e8a:	2800      	cmp	r0, #0
 8007e8c:	d0d5      	beq.n	8007e3a <FirmwareToResume.constprop.0+0x2a>
    e_ret_status = SFU_LL_FLASH_Read(fw_header_trailer_test, TRAILER_HDR_TEST(DwlSlot), sizeof(fw_header_trailer_test));
 8007e8e:	f46f 73af 	mvn.w	r3, #350	; 0x15e
 8007e92:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8007e96:	18f1      	adds	r1, r6, r3
 8007e98:	eb0d 0002 	add.w	r0, sp, r2
 8007e9c:	f000 fd8e 	bl	80089bc <SFU_LL_FLASH_Read>
    STATUS_FWIMG(e_ret_status == SFU_ERROR, SFU_IMG_FLASH_READ_FAILED);
 8007ea0:	f641 73e1 	movw	r3, #8161	; 0x1fe1
 8007ea4:	4298      	cmp	r0, r3
    e_ret_status = SFU_LL_FLASH_Read(fw_header_trailer_test, TRAILER_HDR_TEST(DwlSlot), sizeof(fw_header_trailer_test));
 8007ea6:	4604      	mov	r4, r0
    STATUS_FWIMG(e_ret_status == SFU_ERROR, SFU_IMG_FLASH_READ_FAILED);
 8007ea8:	d10e      	bne.n	8007ec8 <FirmwareToResume.constprop.0+0xb8>
 8007eaa:	4b61      	ldr	r3, [pc, #388]	; (8008030 <FirmwareToResume.constprop.0+0x220>)
 8007eac:	2103      	movs	r1, #3
 8007eae:	7019      	strb	r1, [r3, #0]
 8007eb0:	22b2      	movs	r2, #178	; 0xb2
      STATUS_FWIMG(e_ret_status == SFU_ERROR, SFU_IMG_FLASH_READ_FAILED);
 8007eb2:	4b60      	ldr	r3, [pc, #384]	; (8008034 <FirmwareToResume.constprop.0+0x224>)
 8007eb4:	4860      	ldr	r0, [pc, #384]	; (8008038 <FirmwareToResume.constprop.0+0x228>)
 8007eb6:	601a      	str	r2, [r3, #0]
 8007eb8:	4b60      	ldr	r3, [pc, #384]	; (800803c <FirmwareToResume.constprop.0+0x22c>)
 8007eba:	f002 f823 	bl	8009f04 <iprintf>
}
 8007ebe:	4620      	mov	r0, r4
 8007ec0:	f20d 5d04 	addw	sp, sp, #1284	; 0x504
 8007ec4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  if (e_ret_status == SFU_SUCCESS)
 8007ec8:	42a8      	cmp	r0, r5
 8007eca:	d1b6      	bne.n	8007e3a <FirmwareToResume.constprop.0+0x2a>
    e_ret_status = ParseFWInfo(pTestHeader, fw_header_trailer_test);
 8007ecc:	485c      	ldr	r0, [pc, #368]	; (8008040 <FirmwareToResume.constprop.0+0x230>)
 8007ece:	4f5c      	ldr	r7, [pc, #368]	; (8008040 <FirmwareToResume.constprop.0+0x230>)
 8007ed0:	a950      	add	r1, sp, #320	; 0x140
 8007ed2:	f7ff fbcb 	bl	800766c <ParseFWInfo>
  if (e_ret_status == SFU_SUCCESS)
 8007ed6:	42a0      	cmp	r0, r4
 8007ed8:	d1af      	bne.n	8007e3a <FirmwareToResume.constprop.0+0x2a>
    if (ActiveSlot == SFU_IMG_GetFwImageSlot(pTestHeader))
 8007eda:	4638      	mov	r0, r7
 8007edc:	f7ff fd64 	bl	80079a8 <SFU_IMG_GetFwImageSlot>
 8007ee0:	2801      	cmp	r0, #1
 8007ee2:	d1aa      	bne.n	8007e3a <FirmwareToResume.constprop.0+0x2a>
      e_ret_status = VerifyHeaderSignature((SE_FwRawHeaderTypeDef *)(uint32_t)fw_header_trailer_test);
 8007ee4:	a850      	add	r0, sp, #320	; 0x140
 8007ee6:	f7ff fd6b 	bl	80079c0 <VerifyHeaderSignature>
  if (e_ret_status == SFU_SUCCESS)
 8007eea:	4b50      	ldr	r3, [pc, #320]	; (800802c <FirmwareToResume.constprop.0+0x21c>)
 8007eec:	4298      	cmp	r0, r3
 8007eee:	d1a4      	bne.n	8007e3a <FirmwareToResume.constprop.0+0x2a>
    e_ret_status = SFU_LL_FLASH_Read(fw_header_dwl_slot, (uint8_t *) SlotStartAdd[DwlSlot],
 8007ef0:	4b54      	ldr	r3, [pc, #336]	; (8008044 <FirmwareToResume.constprop.0+0x234>)
 8007ef2:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8007ef6:	6919      	ldr	r1, [r3, #16]
 8007ef8:	a8f0      	add	r0, sp, #960	; 0x3c0
 8007efa:	f000 fd5f 	bl	80089bc <SFU_LL_FLASH_Read>
    STATUS_FWIMG(e_ret_status == SFU_ERROR, SFU_IMG_FLASH_READ_FAILED);
 8007efe:	f641 73e1 	movw	r3, #8161	; 0x1fe1
 8007f02:	4298      	cmp	r0, r3
    e_ret_status = SFU_LL_FLASH_Read(fw_header_dwl_slot, (uint8_t *) SlotStartAdd[DwlSlot],
 8007f04:	4605      	mov	r5, r0
    STATUS_FWIMG(e_ret_status == SFU_ERROR, SFU_IMG_FLASH_READ_FAILED);
 8007f06:	d109      	bne.n	8007f1c <FirmwareToResume.constprop.0+0x10c>
 8007f08:	4b49      	ldr	r3, [pc, #292]	; (8008030 <FirmwareToResume.constprop.0+0x220>)
 8007f0a:	484b      	ldr	r0, [pc, #300]	; (8008038 <FirmwareToResume.constprop.0+0x228>)
 8007f0c:	2103      	movs	r1, #3
 8007f0e:	7019      	strb	r1, [r3, #0]
 8007f10:	4b48      	ldr	r3, [pc, #288]	; (8008034 <FirmwareToResume.constprop.0+0x224>)
 8007f12:	22d2      	movs	r2, #210	; 0xd2
 8007f14:	601a      	str	r2, [r3, #0]
 8007f16:	4b49      	ldr	r3, [pc, #292]	; (800803c <FirmwareToResume.constprop.0+0x22c>)
 8007f18:	f001 fff4 	bl	8009f04 <iprintf>
    if (memcmp(fw_header_dwl_slot, fw_header_trailer_test, SE_FW_AUTH_LEN) != 0U)
 8007f1c:	2280      	movs	r2, #128	; 0x80
 8007f1e:	a950      	add	r1, sp, #320	; 0x140
 8007f20:	a8f0      	add	r0, sp, #960	; 0x3c0
 8007f22:	f001 ffc9 	bl	8009eb8 <memcmp>
 8007f26:	2800      	cmp	r0, #0
 8007f28:	d187      	bne.n	8007e3a <FirmwareToResume.constprop.0+0x2a>
  if (e_ret_status != SFU_SUCCESS)
 8007f2a:	4b40      	ldr	r3, [pc, #256]	; (800802c <FirmwareToResume.constprop.0+0x21c>)
 8007f2c:	429d      	cmp	r5, r3
 8007f2e:	d184      	bne.n	8007e3a <FirmwareToResume.constprop.0+0x2a>
  e_ret_status = SFU_LL_FLASH_Read(fw_header_active_slot, (uint8_t *) SlotHeaderAdd[ActiveSlot],
 8007f30:	4b45      	ldr	r3, [pc, #276]	; (8008048 <FirmwareToResume.constprop.0+0x238>)
 8007f32:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8007f36:	6859      	ldr	r1, [r3, #4]
 8007f38:	a8a0      	add	r0, sp, #640	; 0x280
 8007f3a:	f000 fd3f 	bl	80089bc <SFU_LL_FLASH_Read>
  STATUS_FWIMG(e_ret_status == SFU_ERROR, SFU_IMG_FLASH_READ_FAILED);
 8007f3e:	f641 79e1 	movw	r9, #8161	; 0x1fe1
 8007f42:	4548      	cmp	r0, r9
 8007f44:	d11b      	bne.n	8007f7e <FirmwareToResume.constprop.0+0x16e>
 8007f46:	4b3a      	ldr	r3, [pc, #232]	; (8008030 <FirmwareToResume.constprop.0+0x220>)
 8007f48:	483b      	ldr	r0, [pc, #236]	; (8008038 <FirmwareToResume.constprop.0+0x228>)
 8007f4a:	2103      	movs	r1, #3
 8007f4c:	7019      	strb	r1, [r3, #0]
 8007f4e:	4b39      	ldr	r3, [pc, #228]	; (8008034 <FirmwareToResume.constprop.0+0x224>)
 8007f50:	22e5      	movs	r2, #229	; 0xe5
 8007f52:	601a      	str	r2, [r3, #0]
 8007f54:	4b39      	ldr	r3, [pc, #228]	; (800803c <FirmwareToResume.constprop.0+0x22c>)
 8007f56:	f001 ffd5 	bl	8009f04 <iprintf>
    e_ret_status = SFU_LL_FLASH_Read(fw_header_trailer_valid, TRAILER_HDR_VALID(DwlSlot),
 8007f5a:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8007f5e:	f2a6 219f 	subw	r1, r6, #671	; 0x29f
 8007f62:	4668      	mov	r0, sp
 8007f64:	f000 fd2a 	bl	80089bc <SFU_LL_FLASH_Read>
    STATUS_FWIMG(e_ret_status == SFU_ERROR, SFU_IMG_FLASH_READ_FAILED);
 8007f68:	f641 73e1 	movw	r3, #8161	; 0x1fe1
 8007f6c:	4298      	cmp	r0, r3
    e_ret_status = SFU_LL_FLASH_Read(fw_header_trailer_valid, TRAILER_HDR_VALID(DwlSlot),
 8007f6e:	4604      	mov	r4, r0
    STATUS_FWIMG(e_ret_status == SFU_ERROR, SFU_IMG_FLASH_READ_FAILED);
 8007f70:	d13f      	bne.n	8007ff2 <FirmwareToResume.constprop.0+0x1e2>
 8007f72:	4b2f      	ldr	r3, [pc, #188]	; (8008030 <FirmwareToResume.constprop.0+0x220>)
 8007f74:	2103      	movs	r1, #3
 8007f76:	7019      	strb	r1, [r3, #0]
 8007f78:	f240 122b 	movw	r2, #299	; 0x12b
 8007f7c:	e799      	b.n	8007eb2 <FirmwareToResume.constprop.0+0xa2>
  if (e_ret_status == SFU_SUCCESS)
 8007f7e:	42a8      	cmp	r0, r5
 8007f80:	d1eb      	bne.n	8007f5a <FirmwareToResume.constprop.0+0x14a>
    e_ret_status = VerifyHeaderSignature((SE_FwRawHeaderTypeDef *)(uint32_t)fw_header_active_slot);
 8007f82:	a8a0      	add	r0, sp, #640	; 0x280
 8007f84:	f7ff fd1c 	bl	80079c0 <VerifyHeaderSignature>
  if (e_ret_status == SFU_SUCCESS)
 8007f88:	42a8      	cmp	r0, r5
 8007f8a:	d1e6      	bne.n	8007f5a <FirmwareToResume.constprop.0+0x14a>
    e_ret_status = ParseFWInfo(pValidHeader, fw_header_active_slot);
 8007f8c:	f8df 80bc 	ldr.w	r8, [pc, #188]	; 800804c <FirmwareToResume.constprop.0+0x23c>
 8007f90:	a9a0      	add	r1, sp, #640	; 0x280
 8007f92:	4640      	mov	r0, r8
 8007f94:	f7ff fb6a 	bl	800766c <ParseFWInfo>
    if (e_ret_status == SFU_SUCCESS)
 8007f98:	42a8      	cmp	r0, r5
    e_ret_status = ParseFWInfo(pValidHeader, fw_header_active_slot);
 8007f9a:	4604      	mov	r4, r0
    if (e_ret_status == SFU_SUCCESS)
 8007f9c:	d18f      	bne.n	8007ebe <FirmwareToResume.constprop.0+0xae>
      e_ret_status = SFU_LL_FLASH_Read(fw_header_trailer_valid, TRAILER_HDR_VALID(DwlSlot),
 8007f9e:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8007fa2:	f2a6 219f 	subw	r1, r6, #671	; 0x29f
 8007fa6:	4668      	mov	r0, sp
 8007fa8:	f000 fd08 	bl	80089bc <SFU_LL_FLASH_Read>
      STATUS_FWIMG(e_ret_status == SFU_ERROR, SFU_IMG_FLASH_READ_FAILED);
 8007fac:	4548      	cmp	r0, r9
      e_ret_status = SFU_LL_FLASH_Read(fw_header_trailer_valid, TRAILER_HDR_VALID(DwlSlot),
 8007fae:	4604      	mov	r4, r0
      STATUS_FWIMG(e_ret_status == SFU_ERROR, SFU_IMG_FLASH_READ_FAILED);
 8007fb0:	d104      	bne.n	8007fbc <FirmwareToResume.constprop.0+0x1ac>
 8007fb2:	4b1f      	ldr	r3, [pc, #124]	; (8008030 <FirmwareToResume.constprop.0+0x220>)
 8007fb4:	2103      	movs	r1, #3
 8007fb6:	7019      	strb	r1, [r3, #0]
 8007fb8:	22f8      	movs	r2, #248	; 0xf8
 8007fba:	e77a      	b.n	8007eb2 <FirmwareToResume.constprop.0+0xa2>
    if (e_ret_status == SFU_SUCCESS)
 8007fbc:	42a8      	cmp	r0, r5
 8007fbe:	f47f af7e 	bne.w	8007ebe <FirmwareToResume.constprop.0+0xae>
      if (memcmp(fw_header_active_slot, fw_header_trailer_valid, SE_FW_AUTH_LEN) == 0U)
 8007fc2:	2280      	movs	r2, #128	; 0x80
 8007fc4:	4669      	mov	r1, sp
 8007fc6:	a8a0      	add	r0, sp, #640	; 0x280
 8007fc8:	f001 ff76 	bl	8009eb8 <memcmp>
 8007fcc:	b938      	cbnz	r0, 8007fde <FirmwareToResume.constprop.0+0x1ce>
        e_ret_status = SFU_IMG_CheckFwVersion(ActiveSlot, pValidHeader->FwVersion, pTestHeader->FwVersion);
 8007fce:	88fa      	ldrh	r2, [r7, #6]
 8007fd0:	f8b8 1006 	ldrh.w	r1, [r8, #6]
          e_ret_status = SFU_IMG_CheckFwVersion(ActiveSlot, pValidHeader->FwVersion, pTestHeader->FwVersion);
 8007fd4:	2001      	movs	r0, #1
 8007fd6:	f7ff fd75 	bl	8007ac4 <SFU_IMG_CheckFwVersion>
 8007fda:	4604      	mov	r4, r0
 8007fdc:	e76f      	b.n	8007ebe <FirmwareToResume.constprop.0+0xae>
      else if (memcmp(fw_header_active_slot, fw_header_trailer_test, SE_FW_AUTH_LEN) == 0U)
 8007fde:	2280      	movs	r2, #128	; 0x80
 8007fe0:	a950      	add	r1, sp, #320	; 0x140
 8007fe2:	a8a0      	add	r0, sp, #640	; 0x280
 8007fe4:	f001 ff68 	bl	8009eb8 <memcmp>
 8007fe8:	2800      	cmp	r0, #0
 8007fea:	f47f af26 	bne.w	8007e3a <FirmwareToResume.constprop.0+0x2a>
          e_ret_status = SFU_SUCCESS;
 8007fee:	462c      	mov	r4, r5
 8007ff0:	e765      	b.n	8007ebe <FirmwareToResume.constprop.0+0xae>
    if (e_ret_status == SFU_SUCCESS)
 8007ff2:	4e0e      	ldr	r6, [pc, #56]	; (800802c <FirmwareToResume.constprop.0+0x21c>)
 8007ff4:	42b0      	cmp	r0, r6
 8007ff6:	f47f af62 	bne.w	8007ebe <FirmwareToResume.constprop.0+0xae>
      e_ret_status = VerifyHeaderSignature((SE_FwRawHeaderTypeDef *)(uint32_t)fw_header_trailer_valid);
 8007ffa:	4668      	mov	r0, sp
 8007ffc:	f7ff fce0 	bl	80079c0 <VerifyHeaderSignature>
      if (e_ret_status == SFU_SUCCESS)
 8008000:	42b0      	cmp	r0, r6
      e_ret_status = VerifyHeaderSignature((SE_FwRawHeaderTypeDef *)(uint32_t)fw_header_trailer_valid);
 8008002:	4604      	mov	r4, r0
      if (e_ret_status == SFU_SUCCESS)
 8008004:	d10b      	bne.n	800801e <FirmwareToResume.constprop.0+0x20e>
        e_ret_status = ParseFWInfo(pValidHeader, fw_header_trailer_valid);
 8008006:	4d11      	ldr	r5, [pc, #68]	; (800804c <FirmwareToResume.constprop.0+0x23c>)
 8008008:	4669      	mov	r1, sp
 800800a:	4628      	mov	r0, r5
 800800c:	f7ff fb2e 	bl	800766c <ParseFWInfo>
        if (e_ret_status == SFU_SUCCESS)
 8008010:	42b0      	cmp	r0, r6
        e_ret_status = ParseFWInfo(pValidHeader, fw_header_trailer_valid);
 8008012:	4604      	mov	r4, r0
        if (e_ret_status == SFU_SUCCESS)
 8008014:	f47f af53 	bne.w	8007ebe <FirmwareToResume.constprop.0+0xae>
          e_ret_status = SFU_IMG_CheckFwVersion(ActiveSlot, pValidHeader->FwVersion, pTestHeader->FwVersion);
 8008018:	88fa      	ldrh	r2, [r7, #6]
 800801a:	88e9      	ldrh	r1, [r5, #6]
 800801c:	e7da      	b.n	8007fd4 <FirmwareToResume.constprop.0+0x1c4>
        if (pTestHeader->FwVersion == SFU_FW_VERSION_INIT_NUM)
 800801e:	88fb      	ldrh	r3, [r7, #6]
 8008020:	2b01      	cmp	r3, #1
 8008022:	f47f af4c 	bne.w	8007ebe <FirmwareToResume.constprop.0+0xae>
 8008026:	e7e2      	b.n	8007fee <FirmwareToResume.constprop.0+0x1de>
 8008028:	0800b170 	.word	0x0800b170
 800802c:	00122f11 	.word	0x00122f11
 8008030:	20001678 	.word	0x20001678
 8008034:	2000167c 	.word	0x2000167c
 8008038:	0800be81 	.word	0x0800be81
 800803c:	0800befa 	.word	0x0800befa
 8008040:	20001680 	.word	0x20001680
 8008044:	0800b150 	.word	0x0800b150
 8008048:	0800b190 	.word	0x0800b190
 800804c:	20001538 	.word	0x20001538

08008050 <SFU_IMG_CheckPendingInstallation>:
  SFU_IMG_ImgInstallStateTypeDef e_ret_state = SFU_IMG_NO_FWUPDATE;
  uint32_t i;
  uint32_t j;

  /* No rollback capability in "NO_SWAP" configuration */
  *pActiveSlotToResume = SLOT_INACTIVE;
 8008050:	2300      	movs	r3, #0
{
 8008052:	b570      	push	{r4, r5, r6, lr}
  *pActiveSlotToResume = SLOT_INACTIVE;
 8008054:	600b      	str	r3, [r1, #0]
  *pActiveSlotToRollback = SLOT_INACTIVE;
 8008056:	6013      	str	r3, [r2, #0]
  *pDwlSlotToInstall = SLOT_INACTIVE;
 8008058:	6003      	str	r3, [r0, #0]
    if (SlotStartAdd[SLOT_ACTIVE_1 + i] != 0U)
    {
      for (j = 0U; j < SFU_NB_MAX_DWL_AREA; j++)
      {
        /* Slot configured ? */
        if (SlotStartAdd[SLOT_DWL_1 + j] != 0U)
 800805a:	4b15      	ldr	r3, [pc, #84]	; (80080b0 <SFU_IMG_CheckPendingInstallation+0x60>)
 800805c:	691e      	ldr	r6, [r3, #16]
    if (SlotStartAdd[SLOT_ACTIVE_1 + i] != 0U)
 800805e:	685b      	ldr	r3, [r3, #4]
{
 8008060:	4604      	mov	r4, r0
 8008062:	460d      	mov	r5, r1
    if (SlotStartAdd[SLOT_ACTIVE_1 + i] != 0U)
 8008064:	b1c3      	cbz	r3, 8008098 <SFU_IMG_CheckPendingInstallation+0x48>
        if (SlotStartAdd[SLOT_DWL_1 + j] != 0U)
 8008066:	b306      	cbz	r6, 80080aa <SFU_IMG_CheckPendingInstallation+0x5a>
        {
          if (SFU_SUCCESS == FirmwareToResume(SLOT_ACTIVE_1 + i, SLOT_DWL_1 + j, &fw_image_header_validated,
 8008068:	f7ff fed2 	bl	8007e10 <FirmwareToResume.constprop.0>
 800806c:	4b11      	ldr	r3, [pc, #68]	; (80080b4 <SFU_IMG_CheckPendingInstallation+0x64>)
 800806e:	4298      	cmp	r0, r3
 8008070:	d113      	bne.n	800809a <SFU_IMG_CheckPendingInstallation+0x4a>
          {
            /* A Firmware Update has been stopped
             * fw_image_header_to_test & fw_image_header_validated have been populated
             * Stop at first occurrence : next ones if any will be resumed after reset
             */
            *pActiveSlotToResume = SLOT_ACTIVE_1 + i;
 8008072:	2001      	movs	r0, #1
            *pDwlSlotToInstall = SLOT_DWL_1 + j;
 8008074:	2204      	movs	r2, #4
            *pActiveSlotToResume = SLOT_ACTIVE_1 + i;
 8008076:	6028      	str	r0, [r5, #0]
            *pDwlSlotToInstall = SLOT_DWL_1 + j;
 8008078:	6022      	str	r2, [r4, #0]
      }
    }
  }

  return e_ret_state;
}
 800807a:	bd70      	pop	{r4, r5, r6, pc}
  uint32_t trailer_begin = (uint32_t) TRAILER_BEGIN(DwlSlot);
 800807c:	4b0e      	ldr	r3, [pc, #56]	; (80080b8 <SFU_IMG_CheckPendingInstallation+0x68>)
 800807e:	691b      	ldr	r3, [r3, #16]
 8008080:	f2a3 229f 	subw	r2, r3, #671	; 0x29f
    end_of_test_image = (SlotStartAdd[DwlSlot] + pFwImageHeader->FwSize +
 8008084:	68ab      	ldr	r3, [r5, #8]
 8008086:	4433      	add	r3, r6
 8008088:	f503 7300 	add.w	r3, r3, #512	; 0x200
    if (trailer_begin < end_of_test_image)
 800808c:	429a      	cmp	r2, r3
 800808e:	d30c      	bcc.n	80080aa <SFU_IMG_CheckPendingInstallation+0x5a>
        *pDwlSlotToInstall = SLOT_DWL_1 + i;
 8008090:	2304      	movs	r3, #4
 8008092:	6023      	str	r3, [r4, #0]
        return SFU_IMG_FWIMAGE_TO_INSTALL;
 8008094:	2000      	movs	r0, #0
 8008096:	e7f0      	b.n	800807a <SFU_IMG_CheckPendingInstallation+0x2a>
    if (SlotStartAdd[SLOT_DWL_1 + i] != 0U)
 8008098:	b13e      	cbz	r6, 80080aa <SFU_IMG_CheckPendingInstallation+0x5a>
  e_ret_status = CheckAndGetFWHeader(DwlSlot, pFwImageHeader);
 800809a:	4d08      	ldr	r5, [pc, #32]	; (80080bc <SFU_IMG_CheckPendingInstallation+0x6c>)
 800809c:	2004      	movs	r0, #4
 800809e:	4629      	mov	r1, r5
 80080a0:	f7ff fcba 	bl	8007a18 <CheckAndGetFWHeader>
  if (e_ret_status == SFU_SUCCESS)
 80080a4:	4b03      	ldr	r3, [pc, #12]	; (80080b4 <SFU_IMG_CheckPendingInstallation+0x64>)
 80080a6:	4298      	cmp	r0, r3
 80080a8:	d0e8      	beq.n	800807c <SFU_IMG_CheckPendingInstallation+0x2c>
  return e_ret_state;
 80080aa:	2002      	movs	r0, #2
 80080ac:	e7e5      	b.n	800807a <SFU_IMG_CheckPendingInstallation+0x2a>
 80080ae:	bf00      	nop
 80080b0:	0800b150 	.word	0x0800b150
 80080b4:	00122f11 	.word	0x00122f11
 80080b8:	0800b170 	.word	0x0800b170
 80080bc:	20001680 	.word	0x20001680

080080c0 <SFU_IMG_TriggerResumeInstallation>:
  * @param  ActiveSlot identification of the active image
  * @param  DwlSlot identification of the downloaded area
  * @retval SFU_ErrorStatus SFU_SUCCESS
  */
SFU_ErrorStatus SFU_IMG_TriggerResumeInstallation(uint32_t ActiveSlot, uint32_t DwlSlot)
{
 80080c0:	b513      	push	{r0, r1, r4, lr}
 80080c2:	460c      	mov	r4, r1
  SFU_FLASH_StatusTypeDef x_flash_info;

  /*
   * Decrypt the FW image : from dwl slot to active slot
   */
  e_ret_status = DecryptImageFromDwlSlotToActiveSlot(ActiveSlot, DwlSlot, &fw_image_header_to_test);
 80080c4:	f7ff fd58 	bl	8007b78 <DecryptImageFromDwlSlotToActiveSlot.constprop.0>
  if (e_ret_status != SFU_SUCCESS)
 80080c8:	4b15      	ldr	r3, [pc, #84]	; (8008120 <SFU_IMG_TriggerResumeInstallation+0x60>)
 80080ca:	4298      	cmp	r0, r3
 80080cc:	d002      	beq.n	80080d4 <SFU_IMG_TriggerResumeInstallation+0x14>
  {
    SFU_EXCPT_SetError(SFU_EXCPT_DECRYPT_ERR);
 80080ce:	2008      	movs	r0, #8
 80080d0:	f7ff f932 	bl	8007338 <SFU_EXCPT_SetError>
  }

  /*
   * erase downloaded FW after installation
   */
  e_ret_status = SFU_LL_FLASH_Erase_Size(&x_flash_info, (uint8_t *) SlotStartAdd[DwlSlot], SLOT_SIZE(DwlSlot));
 80080d4:	4b13      	ldr	r3, [pc, #76]	; (8008124 <SFU_IMG_TriggerResumeInstallation+0x64>)
 80080d6:	f853 1024 	ldr.w	r1, [r3, r4, lsl #2]
 80080da:	4b13      	ldr	r3, [pc, #76]	; (8008128 <SFU_IMG_TriggerResumeInstallation+0x68>)
 80080dc:	f853 2024 	ldr.w	r2, [r3, r4, lsl #2]
 80080e0:	3201      	adds	r2, #1
 80080e2:	1a52      	subs	r2, r2, r1
 80080e4:	f10d 0007 	add.w	r0, sp, #7
 80080e8:	f000 fc5a 	bl	80089a0 <SFU_LL_FLASH_Erase_Size>
  if (e_ret_status != SFU_SUCCESS)
 80080ec:	4b0c      	ldr	r3, [pc, #48]	; (8008120 <SFU_IMG_TriggerResumeInstallation+0x60>)
 80080ee:	4298      	cmp	r0, r3
  e_ret_status = SFU_LL_FLASH_Erase_Size(&x_flash_info, (uint8_t *) SlotStartAdd[DwlSlot], SLOT_SIZE(DwlSlot));
 80080f0:	4604      	mov	r4, r0
  if (e_ret_status != SFU_SUCCESS)
 80080f2:	d011      	beq.n	8008118 <SFU_IMG_TriggerResumeInstallation+0x58>
  {
    STATUS_FWIMG(e_ret_status == SFU_ERROR, SFU_IMG_FLASH_ERASE_FAILED);
 80080f4:	f641 73e1 	movw	r3, #8161	; 0x1fe1
 80080f8:	4298      	cmp	r0, r3
 80080fa:	d10a      	bne.n	8008112 <SFU_IMG_TriggerResumeInstallation+0x52>
 80080fc:	4b0b      	ldr	r3, [pc, #44]	; (800812c <SFU_IMG_TriggerResumeInstallation+0x6c>)
 80080fe:	480c      	ldr	r0, [pc, #48]	; (8008130 <SFU_IMG_TriggerResumeInstallation+0x70>)
 8008100:	2101      	movs	r1, #1
 8008102:	7019      	strb	r1, [r3, #0]
 8008104:	4b0b      	ldr	r3, [pc, #44]	; (8008134 <SFU_IMG_TriggerResumeInstallation+0x74>)
 8008106:	f240 323d 	movw	r2, #829	; 0x33d
 800810a:	601a      	str	r2, [r3, #0]
 800810c:	4b0a      	ldr	r3, [pc, #40]	; (8008138 <SFU_IMG_TriggerResumeInstallation+0x78>)
 800810e:	f001 fef9 	bl	8009f04 <iprintf>
    SFU_EXCPT_SetError(SFU_EXCPT_DWL_SLOT_ERASING_ERR);
 8008112:	2013      	movs	r0, #19
 8008114:	f7ff f910 	bl	8007338 <SFU_EXCPT_SetError>
    TRACE("\r\n\t  Resume procedure cannot be finalized!");
  }
#endif /* SFU_VERBOSE_DEBUG_MODE */

  return (e_ret_status);
}
 8008118:	4620      	mov	r0, r4
 800811a:	b002      	add	sp, #8
 800811c:	bd10      	pop	{r4, pc}
 800811e:	bf00      	nop
 8008120:	00122f11 	.word	0x00122f11
 8008124:	0800b150 	.word	0x0800b150
 8008128:	0800b170 	.word	0x0800b170
 800812c:	20001678 	.word	0x20001678
 8008130:	0800be81 	.word	0x0800be81
 8008134:	2000167c 	.word	0x2000167c
 8008138:	0800befa 	.word	0x0800befa

0800813c <SFU_IMG_EraseDownloadedImg>:
SFU_ErrorStatus SFU_IMG_EraseDownloadedImg(uint32_t DwlSlot)
{
  SFU_FLASH_StatusTypeDef flash_if_status;
  SFU_ErrorStatus e_ret_status_dwl = SFU_ERROR;

  e_ret_status_dwl = SFU_LL_FLASH_Erase_Size(&flash_if_status, (uint8_t *) SlotStartAdd[DwlSlot],
 800813c:	4b12      	ldr	r3, [pc, #72]	; (8008188 <SFU_IMG_EraseDownloadedImg+0x4c>)
{
 800813e:	b513      	push	{r0, r1, r4, lr}
  e_ret_status_dwl = SFU_LL_FLASH_Erase_Size(&flash_if_status, (uint8_t *) SlotStartAdd[DwlSlot],
 8008140:	f853 1020 	ldr.w	r1, [r3, r0, lsl #2]
                                             SLOT_SIZE(DwlSlot));
 8008144:	4b11      	ldr	r3, [pc, #68]	; (800818c <SFU_IMG_EraseDownloadedImg+0x50>)
  e_ret_status_dwl = SFU_LL_FLASH_Erase_Size(&flash_if_status, (uint8_t *) SlotStartAdd[DwlSlot],
 8008146:	f853 2020 	ldr.w	r2, [r3, r0, lsl #2]
 800814a:	3201      	adds	r2, #1
 800814c:	1a52      	subs	r2, r2, r1
 800814e:	f10d 0007 	add.w	r0, sp, #7
 8008152:	f000 fc25 	bl	80089a0 <SFU_LL_FLASH_Erase_Size>
  STATUS_FWIMG(e_ret_status_dwl == SFU_ERROR, SFU_IMG_FLASH_ERASE_FAILED);
 8008156:	f641 73e1 	movw	r3, #8161	; 0x1fe1
 800815a:	4298      	cmp	r0, r3
  e_ret_status_dwl = SFU_LL_FLASH_Erase_Size(&flash_if_status, (uint8_t *) SlotStartAdd[DwlSlot],
 800815c:	4604      	mov	r4, r0
  STATUS_FWIMG(e_ret_status_dwl == SFU_ERROR, SFU_IMG_FLASH_ERASE_FAILED);
 800815e:	d10d      	bne.n	800817c <SFU_IMG_EraseDownloadedImg+0x40>
 8008160:	4b0b      	ldr	r3, [pc, #44]	; (8008190 <SFU_IMG_EraseDownloadedImg+0x54>)
 8008162:	480c      	ldr	r0, [pc, #48]	; (8008194 <SFU_IMG_EraseDownloadedImg+0x58>)
 8008164:	2101      	movs	r1, #1
 8008166:	7019      	strb	r1, [r3, #0]
 8008168:	4b0b      	ldr	r3, [pc, #44]	; (8008198 <SFU_IMG_EraseDownloadedImg+0x5c>)
 800816a:	f240 3295 	movw	r2, #917	; 0x395
 800816e:	601a      	str	r2, [r3, #0]
 8008170:	4b0a      	ldr	r3, [pc, #40]	; (800819c <SFU_IMG_EraseDownloadedImg+0x60>)
 8008172:	f001 fec7 	bl	8009f04 <iprintf>

  return ((e_ret_status_dwl != SFU_SUCCESS) ?  SFU_ERROR : SFU_SUCCESS);
}
 8008176:	4620      	mov	r0, r4
 8008178:	b002      	add	sp, #8
 800817a:	bd10      	pop	{r4, pc}
  return ((e_ret_status_dwl != SFU_SUCCESS) ?  SFU_ERROR : SFU_SUCCESS);
 800817c:	4a08      	ldr	r2, [pc, #32]	; (80081a0 <SFU_IMG_EraseDownloadedImg+0x64>)
 800817e:	4290      	cmp	r0, r2
 8008180:	bf0c      	ite	eq
 8008182:	4614      	moveq	r4, r2
 8008184:	461c      	movne	r4, r3
 8008186:	e7f6      	b.n	8008176 <SFU_IMG_EraseDownloadedImg+0x3a>
 8008188:	0800b150 	.word	0x0800b150
 800818c:	0800b170 	.word	0x0800b170
 8008190:	20001678 	.word	0x20001678
 8008194:	0800be81 	.word	0x0800be81
 8008198:	2000167c 	.word	0x2000167c
 800819c:	0800befa 	.word	0x0800befa
 80081a0:	00122f11 	.word	0x00122f11

080081a4 <SFU_IMG_TriggerImageInstallation>:
{
 80081a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  active_slot = SFU_IMG_GetFwImageSlot(&fw_image_header_to_test);
 80081a8:	4d45      	ldr	r5, [pc, #276]	; (80082c0 <SFU_IMG_TriggerImageInstallation+0x11c>)
  if (SFU_SUCCESS == e_ret_status)
 80081aa:	4e46      	ldr	r6, [pc, #280]	; (80082c4 <SFU_IMG_TriggerImageInstallation+0x120>)
{
 80081ac:	b08d      	sub	sp, #52	; 0x34
 80081ae:	4607      	mov	r7, r0
  active_slot = SFU_IMG_GetFwImageSlot(&fw_image_header_to_test);
 80081b0:	4628      	mov	r0, r5
 80081b2:	f7ff fbf9 	bl	80079a8 <SFU_IMG_GetFwImageSlot>
  e_ret_status = SFU_LL_FLASH_Read((uint8_t *) &fw_image_header_validated, pbuffer,
 80081b6:	4b44      	ldr	r3, [pc, #272]	; (80082c8 <SFU_IMG_TriggerImageInstallation+0x124>)
  active_slot = SFU_IMG_GetFwImageSlot(&fw_image_header_to_test);
 80081b8:	9001      	str	r0, [sp, #4]
  e_ret_status = SFU_LL_FLASH_Read((uint8_t *) &fw_image_header_validated, pbuffer,
 80081ba:	f853 1020 	ldr.w	r1, [r3, r0, lsl #2]
 80081be:	4843      	ldr	r0, [pc, #268]	; (80082cc <SFU_IMG_TriggerImageInstallation+0x128>)
 80081c0:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80081c4:	f000 fbfa 	bl	80089bc <SFU_LL_FLASH_Read>
  if (SFU_SUCCESS == e_ret_status)
 80081c8:	42b0      	cmp	r0, r6
  e_ret_status = SFU_LL_FLASH_Read((uint8_t *) &fw_image_header_validated, pbuffer,
 80081ca:	4604      	mov	r4, r0
  if (SFU_SUCCESS == e_ret_status)
 80081cc:	d108      	bne.n	80081e0 <SFU_IMG_TriggerImageInstallation+0x3c>
  e_ret_status = VerifyFwSignatureBeforeDecrypt(DwlSlot, pTestHeader);
 80081ce:	4638      	mov	r0, r7
 80081d0:	f7ff fda6 	bl	8007d20 <VerifyFwSignatureBeforeDecrypt.constprop.0>
  if (e_ret_status != SFU_SUCCESS)
 80081d4:	42b0      	cmp	r0, r6
  e_ret_status = VerifyFwSignatureBeforeDecrypt(DwlSlot, pTestHeader);
 80081d6:	4604      	mov	r4, r0
  if (e_ret_status != SFU_SUCCESS)
 80081d8:	d009      	beq.n	80081ee <SFU_IMG_TriggerImageInstallation+0x4a>
    SFU_EXCPT_SetError(SFU_EXCPT_SIGNATURE_ERR);
 80081da:	2009      	movs	r0, #9
    SFU_EXCPT_SetError(SFU_EXCPT_DWL_SLOT_ERASING_ERR);
 80081dc:	f7ff f8ac 	bl	8007338 <SFU_EXCPT_SetError>
    (void) SFU_IMG_EraseDownloadedImg(DwlSlot);
 80081e0:	4638      	mov	r0, r7
 80081e2:	f7ff ffab 	bl	800813c <SFU_IMG_EraseDownloadedImg>
}
 80081e6:	4620      	mov	r0, r4
 80081e8:	b00d      	add	sp, #52	; 0x34
 80081ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  e_ret_status = VerifySlot((uint8_t *) SlotStartAdd[DwlSlot], SLOT_SIZE(DwlSlot), pTestHeader->FwSize);
 80081ee:	4b38      	ldr	r3, [pc, #224]	; (80082d0 <SFU_IMG_TriggerImageInstallation+0x12c>)
 80081f0:	68aa      	ldr	r2, [r5, #8]
 80081f2:	f853 b027 	ldr.w	fp, [r3, r7, lsl #2]
 80081f6:	4b37      	ldr	r3, [pc, #220]	; (80082d4 <SFU_IMG_TriggerImageInstallation+0x130>)
 80081f8:	f853 a027 	ldr.w	sl, [r3, r7, lsl #2]
 80081fc:	f10a 0901 	add.w	r9, sl, #1
 8008200:	eba9 090b 	sub.w	r9, r9, fp
 8008204:	4649      	mov	r1, r9
 8008206:	4658      	mov	r0, fp
 8008208:	f7ff fa64 	bl	80076d4 <VerifySlot>
  if (e_ret_status != SFU_SUCCESS)
 800820c:	42b0      	cmp	r0, r6
  e_ret_status = VerifySlot((uint8_t *) SlotStartAdd[DwlSlot], SLOT_SIZE(DwlSlot), pTestHeader->FwSize);
 800820e:	4604      	mov	r4, r0
  if (e_ret_status != SFU_SUCCESS)
 8008210:	d001      	beq.n	8008216 <SFU_IMG_TriggerImageInstallation+0x72>
    SFU_EXCPT_SetError(SFU_EXCPT_ADDITIONAL_CODE_ERR);
 8008212:	200e      	movs	r0, #14
 8008214:	e7e2      	b.n	80081dc <SFU_IMG_TriggerImageInstallation+0x38>
  e_ret_status = SFU_LL_FLASH_Write(&flash_if_info, TRAILER_HDR_TEST(DwlSlot), (uint8_t *) pTestHeader,
 8008216:	f46f 71af 	mvn.w	r1, #350	; 0x15e
 800821a:	f44f 73a0 	mov.w	r3, #320	; 0x140
 800821e:	462a      	mov	r2, r5
 8008220:	4451      	add	r1, sl
 8008222:	f10d 000f 	add.w	r0, sp, #15
 8008226:	f000 fbc2 	bl	80089ae <SFU_LL_FLASH_Write>
  if (e_ret_status == SFU_SUCCESS)
 800822a:	42b0      	cmp	r0, r6
  e_ret_status = SFU_LL_FLASH_Write(&flash_if_info, TRAILER_HDR_TEST(DwlSlot), (uint8_t *) pTestHeader,
 800822c:	4604      	mov	r4, r0
  if (e_ret_status == SFU_SUCCESS)
 800822e:	d122      	bne.n	8008276 <SFU_IMG_TriggerImageInstallation+0xd2>
    e_ret_status = SFU_LL_FLASH_Write(&flash_if_info, TRAILER_HDR_VALID(DwlSlot), (uint8_t *) pValidHeader,
 8008230:	4a26      	ldr	r2, [pc, #152]	; (80082cc <SFU_IMG_TriggerImageInstallation+0x128>)
 8008232:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8008236:	f2aa 219f 	subw	r1, sl, #671	; 0x29f
 800823a:	f10d 000f 	add.w	r0, sp, #15
 800823e:	f000 fbb6 	bl	80089ae <SFU_LL_FLASH_Write>
  if (e_ret_status == SFU_SUCCESS)
 8008242:	42b0      	cmp	r0, r6
    e_ret_status = SFU_LL_FLASH_Write(&flash_if_info, TRAILER_HDR_VALID(DwlSlot), (uint8_t *) pValidHeader,
 8008244:	4604      	mov	r4, r0
  if (e_ret_status == SFU_SUCCESS)
 8008246:	d116      	bne.n	8008276 <SFU_IMG_TriggerImageInstallation+0xd2>
    (void) memcpy(&magic[0U], (uint8_t *)(buffer + SE_FW_AUTH_LEN + (MAGIC_LENGTH / 2U)), MAGIC_LENGTH / 2U);
 8008248:	4b23      	ldr	r3, [pc, #140]	; (80082d8 <SFU_IMG_TriggerImageInstallation+0x134>)
 800824a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800824c:	f10d 0810 	add.w	r8, sp, #16
    (void) memcpy(&magic[MAGIC_LENGTH / 2U], (uint8_t *)(buffer + SE_FW_AUTH_LEN + (MAGIC_LENGTH / 2U)),
 8008250:	3590      	adds	r5, #144	; 0x90
    (void) memcpy(&magic[0U], (uint8_t *)(buffer + SE_FW_AUTH_LEN + (MAGIC_LENGTH / 2U)), MAGIC_LENGTH / 2U);
 8008252:	e888 000f 	stmia.w	r8, {r0, r1, r2, r3}
    (void) memcpy(&magic[MAGIC_LENGTH / 2U], (uint8_t *)(buffer + SE_FW_AUTH_LEN + (MAGIC_LENGTH / 2U)),
 8008256:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800825a:	ac0c      	add	r4, sp, #48	; 0x30
 800825c:	e904 000f 	stmdb	r4, {r0, r1, r2, r3}
    e_ret_status = SFU_LL_FLASH_Write(&flash_if_info, TRAILER_SWAP_ADDR(DwlSlot), magic, MAGIC_LENGTH);
 8008260:	2320      	movs	r3, #32
 8008262:	4642      	mov	r2, r8
 8008264:	f1aa 011f 	sub.w	r1, sl, #31
 8008268:	f10d 000f 	add.w	r0, sp, #15
 800826c:	f000 fb9f 	bl	80089ae <SFU_LL_FLASH_Write>
  if (e_ret_status != SFU_SUCCESS)
 8008270:	42b0      	cmp	r0, r6
    e_ret_status = SFU_LL_FLASH_Write(&flash_if_info, TRAILER_SWAP_ADDR(DwlSlot), magic, MAGIC_LENGTH);
 8008272:	4604      	mov	r4, r0
  if (e_ret_status != SFU_SUCCESS)
 8008274:	d001      	beq.n	800827a <SFU_IMG_TriggerImageInstallation+0xd6>
    SFU_EXCPT_SetError(SFU_EXCPT_TRAILER_UPDATE_ERR);
 8008276:	2015      	movs	r0, #21
 8008278:	e7b0      	b.n	80081dc <SFU_IMG_TriggerImageInstallation+0x38>
  e_ret_status = DecryptImageFromDwlSlotToActiveSlot(ActiveSlot, DwlSlot, pTestHeader);
 800827a:	9801      	ldr	r0, [sp, #4]
 800827c:	4639      	mov	r1, r7
 800827e:	f7ff fc7b 	bl	8007b78 <DecryptImageFromDwlSlotToActiveSlot.constprop.0>
  if (e_ret_status != SFU_SUCCESS)
 8008282:	42b0      	cmp	r0, r6
  e_ret_status = DecryptImageFromDwlSlotToActiveSlot(ActiveSlot, DwlSlot, pTestHeader);
 8008284:	4604      	mov	r4, r0
  if (e_ret_status != SFU_SUCCESS)
 8008286:	d001      	beq.n	800828c <SFU_IMG_TriggerImageInstallation+0xe8>
    SFU_EXCPT_SetError(SFU_EXCPT_DECRYPT_ERR);
 8008288:	2008      	movs	r0, #8
 800828a:	e7a7      	b.n	80081dc <SFU_IMG_TriggerImageInstallation+0x38>
  e_ret_status = SFU_LL_FLASH_Erase_Size(&x_flash_info, (uint8_t *) SlotStartAdd[DwlSlot], SLOT_SIZE(DwlSlot));
 800828c:	464a      	mov	r2, r9
 800828e:	4659      	mov	r1, fp
 8008290:	4640      	mov	r0, r8
 8008292:	f000 fb85 	bl	80089a0 <SFU_LL_FLASH_Erase_Size>
  if (e_ret_status != SFU_SUCCESS)
 8008296:	42b0      	cmp	r0, r6
  e_ret_status = SFU_LL_FLASH_Erase_Size(&x_flash_info, (uint8_t *) SlotStartAdd[DwlSlot], SLOT_SIZE(DwlSlot));
 8008298:	4604      	mov	r4, r0
  if (e_ret_status != SFU_SUCCESS)
 800829a:	d0a4      	beq.n	80081e6 <SFU_IMG_TriggerImageInstallation+0x42>
    STATUS_FWIMG(e_ret_status == SFU_ERROR, SFU_IMG_FLASH_ERASE_FAILED);
 800829c:	f641 73e1 	movw	r3, #8161	; 0x1fe1
 80082a0:	4298      	cmp	r0, r3
 80082a2:	d10a      	bne.n	80082ba <SFU_IMG_TriggerImageInstallation+0x116>
 80082a4:	4b0d      	ldr	r3, [pc, #52]	; (80082dc <SFU_IMG_TriggerImageInstallation+0x138>)
 80082a6:	480e      	ldr	r0, [pc, #56]	; (80082e0 <SFU_IMG_TriggerImageInstallation+0x13c>)
 80082a8:	2101      	movs	r1, #1
 80082aa:	7019      	strb	r1, [r3, #0]
 80082ac:	4b0d      	ldr	r3, [pc, #52]	; (80082e4 <SFU_IMG_TriggerImageInstallation+0x140>)
 80082ae:	f240 229d 	movw	r2, #669	; 0x29d
 80082b2:	601a      	str	r2, [r3, #0]
 80082b4:	4b0c      	ldr	r3, [pc, #48]	; (80082e8 <SFU_IMG_TriggerImageInstallation+0x144>)
 80082b6:	f001 fe25 	bl	8009f04 <iprintf>
    SFU_EXCPT_SetError(SFU_EXCPT_DWL_SLOT_ERASING_ERR);
 80082ba:	2013      	movs	r0, #19
 80082bc:	e78e      	b.n	80081dc <SFU_IMG_TriggerImageInstallation+0x38>
 80082be:	bf00      	nop
 80082c0:	20001680 	.word	0x20001680
 80082c4:	00122f11 	.word	0x00122f11
 80082c8:	0800b190 	.word	0x0800b190
 80082cc:	20001538 	.word	0x20001538
 80082d0:	0800b150 	.word	0x0800b150
 80082d4:	0800b170 	.word	0x0800b170
 80082d8:	200015c8 	.word	0x200015c8
 80082dc:	20001678 	.word	0x20001678
 80082e0:	0800be81 	.word	0x0800be81
 80082e4:	2000167c 	.word	0x2000167c
 80082e8:	0800befa 	.word	0x0800befa

080082ec <SFU_LOADER_VerifyFwHeader>:
#elif defined ( __GNUC__ )
__attribute__((optimize("O0")))
#endif /* __ICCARM__ */

static SFU_ErrorStatus SFU_LOADER_VerifyFwHeader(uint8_t *pBuffer)
{
 80082ec:	b580      	push	{r7, lr}
 80082ee:	b08c      	sub	sp, #48	; 0x30
 80082f0:	af00      	add	r7, sp, #0
 80082f2:	6078      	str	r0, [r7, #4]
  SFU_ErrorStatus e_ret_status = SFU_ERROR;
 80082f4:	f641 73e1 	movw	r3, #8161	; 0x1fe1
 80082f8:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint16_t                      cur_ver;
  uint16_t                      verif_ver;
  uint32_t                      active_slot;

  /*Parse the received buffer*/
  p_x_fw_raw_header = (SE_FwRawHeaderTypeDef *)(uint32_t)pBuffer;
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	62bb      	str	r3, [r7, #40]	; 0x28

  /*Check if the received header packet is authentic*/
  if (SE_VerifyHeaderSignature(&e_se_status, p_x_fw_raw_header) != SE_ERROR)
 80082fe:	f107 031c 	add.w	r3, r7, #28
 8008302:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008304:	4618      	mov	r0, r3
 8008306:	f7fd fe71 	bl	8005fec <SE_VerifyHeaderSignature>
 800830a:	4603      	mov	r3, r0
 800830c:	4a4b      	ldr	r2, [pc, #300]	; (800843c <SFU_LOADER_VerifyFwHeader+0x150>)
 800830e:	4293      	cmp	r3, r2
 8008310:	f000 808c 	beq.w	800842c <SFU_LOADER_VerifyFwHeader+0x140>
  {
    active_slot = SFU_IMG_GetFwImageSlot(p_x_fw_raw_header);
 8008314:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008316:	f7ff fb47 	bl	80079a8 <SFU_IMG_GetFwImageSlot>
 800831a:	6278      	str	r0, [r7, #36]	; 0x24
     *   It will be based on SFU magic :
     *   - same number as active_slot if configured.
     *   - else : SLOT_DWL_1
     *    As example : Header magic is SFU2, active slot is SLOT_ACTIVE_2 and dwl slot will be SLOT_DWL2.
     */
    m_uDwlSlot = active_slot - SLOT_ACTIVE_1 + SLOT_DWL_1;
 800831c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800831e:	3303      	adds	r3, #3
 8008320:	4a47      	ldr	r2, [pc, #284]	; (8008440 <SFU_LOADER_VerifyFwHeader+0x154>)
 8008322:	6013      	str	r3, [r2, #0]
    if (SLOT_SIZE(m_uDwlSlot) == 1U)
 8008324:	4b46      	ldr	r3, [pc, #280]	; (8008440 <SFU_LOADER_VerifyFwHeader+0x154>)
 8008326:	681b      	ldr	r3, [r3, #0]
 8008328:	4a46      	ldr	r2, [pc, #280]	; (8008444 <SFU_LOADER_VerifyFwHeader+0x158>)
 800832a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800832e:	4b44      	ldr	r3, [pc, #272]	; (8008440 <SFU_LOADER_VerifyFwHeader+0x154>)
 8008330:	681b      	ldr	r3, [r3, #0]
 8008332:	4945      	ldr	r1, [pc, #276]	; (8008448 <SFU_LOADER_VerifyFwHeader+0x15c>)
 8008334:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8008338:	429a      	cmp	r2, r3
 800833a:	d102      	bne.n	8008342 <SFU_LOADER_VerifyFwHeader+0x56>
    {
      m_uDwlSlot = SLOT_DWL_1;
 800833c:	4b40      	ldr	r3, [pc, #256]	; (8008440 <SFU_LOADER_VerifyFwHeader+0x154>)
 800833e:	2204      	movs	r2, #4
 8008340:	601a      	str	r2, [r3, #0]
    }
    SFU_IMG_GetDownloadAreaInfo(m_uDwlSlot, &fw_image_flash_data);
 8008342:	4b3f      	ldr	r3, [pc, #252]	; (8008440 <SFU_LOADER_VerifyFwHeader+0x154>)
 8008344:	681b      	ldr	r3, [r3, #0]
 8008346:	f107 020c 	add.w	r2, r7, #12
 800834a:	4611      	mov	r1, r2
 800834c:	4618      	mov	r0, r3
 800834e:	f000 f9e1 	bl	8008714 <SFU_IMG_GetDownloadAreaInfo>

    /* Assign the download flash address to be used during the YMODEM process */
    m_uDwlAreaStart = fw_image_flash_data.DownloadAddr;
 8008352:	693b      	ldr	r3, [r7, #16]
 8008354:	4a3d      	ldr	r2, [pc, #244]	; (800844c <SFU_LOADER_VerifyFwHeader+0x160>)
 8008356:	6013      	str	r3, [r2, #0]
    m_uDwlAreaSize = fw_image_flash_data.MaxSizeInBytes;
 8008358:	68fb      	ldr	r3, [r7, #12]
 800835a:	4a3d      	ldr	r2, [pc, #244]	; (8008450 <SFU_LOADER_VerifyFwHeader+0x164>)
 800835c:	6013      	str	r3, [r2, #0]

    /*
     * Check if the version is allowed
     * ==> SFU_IMG_GetActiveFwVersion() returns 0 if the header of active firmware is not valid
     */
    cur_ver = SFU_IMG_GetActiveFwVersion(active_slot);
 800835e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008360:	f7ff fb78 	bl	8007a54 <SFU_IMG_GetActiveFwVersion>
 8008364:	4603      	mov	r3, r0
 8008366:	847b      	strh	r3, [r7, #34]	; 0x22
    if (SFU_IMG_CheckFwVersion(active_slot, cur_ver, p_x_fw_raw_header->FwVersion) == SFU_SUCCESS)
 8008368:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800836a:	88da      	ldrh	r2, [r3, #6]
 800836c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800836e:	4619      	mov	r1, r3
 8008370:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008372:	f7ff fba7 	bl	8007ac4 <SFU_IMG_CheckFwVersion>
 8008376:	4603      	mov	r3, r0
 8008378:	4a36      	ldr	r2, [pc, #216]	; (8008454 <SFU_LOADER_VerifyFwHeader+0x168>)
 800837a:	4293      	cmp	r3, r2
 800837c:	d117      	bne.n	80083ae <SFU_LOADER_VerifyFwHeader+0xc2>
    {
#if  defined(SFU_NO_SWAP)
      /*
       * Check length : Let's make sure the Firmware image can be written in the destination slot.
       */
      if (p_x_fw_raw_header->FwSize > (SLOT_SIZE(m_uDwlSlot) - SFU_IMG_IMAGE_OFFSET))
 800837e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008380:	689a      	ldr	r2, [r3, #8]
 8008382:	4b2f      	ldr	r3, [pc, #188]	; (8008440 <SFU_LOADER_VerifyFwHeader+0x154>)
 8008384:	681b      	ldr	r3, [r3, #0]
 8008386:	492f      	ldr	r1, [pc, #188]	; (8008444 <SFU_LOADER_VerifyFwHeader+0x158>)
 8008388:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800838c:	4b2c      	ldr	r3, [pc, #176]	; (8008440 <SFU_LOADER_VerifyFwHeader+0x154>)
 800838e:	681b      	ldr	r3, [r3, #0]
 8008390:	482d      	ldr	r0, [pc, #180]	; (8008448 <SFU_LOADER_VerifyFwHeader+0x15c>)
 8008392:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8008396:	1acb      	subs	r3, r1, r3
 8008398:	f2a3 13ff 	subw	r3, r3, #511	; 0x1ff
 800839c:	429a      	cmp	r2, r3
 800839e:	d903      	bls.n	80083a8 <SFU_LOADER_VerifyFwHeader+0xbc>
      if ((p_x_fw_raw_header->PartialFwSize + (p_x_fw_raw_header->PartialFwOffset % SLOT_SIZE(SLOT_SWAP))) >
          (SLOT_SIZE(m_uDwlSlot) - SFU_IMG_IMAGE_OFFSET))
#endif /* SFU_NO_SWAP */
      {
        /* The firmware cannot be written in dwl slot */
        m_LoaderStatus = SFU_LOADER_ERR_FW_LENGTH;
 80083a0:	4b2d      	ldr	r3, [pc, #180]	; (8008458 <SFU_LOADER_VerifyFwHeader+0x16c>)
 80083a2:	2203      	movs	r2, #3
 80083a4:	701a      	strb	r2, [r3, #0]
 80083a6:	e00d      	b.n	80083c4 <SFU_LOADER_VerifyFwHeader+0xd8>
      }
      else
      {
        /* Installation authorized */
        e_ret_status = SFU_SUCCESS;
 80083a8:	4b2a      	ldr	r3, [pc, #168]	; (8008454 <SFU_LOADER_VerifyFwHeader+0x168>)
 80083aa:	62fb      	str	r3, [r7, #44]	; 0x2c
 80083ac:	e00a      	b.n	80083c4 <SFU_LOADER_VerifyFwHeader+0xd8>
    }
    else
    {
      /* The installation is forbidden */
      TRACE("\r\n          Anti-rollback: candidate version(%d) rejected | current version(%d) , min.version(%d) !",
            p_x_fw_raw_header->FwVersion, cur_ver, SFU_FW_VERSION_START_NUM);
 80083ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083b0:	88db      	ldrh	r3, [r3, #6]
      TRACE("\r\n          Anti-rollback: candidate version(%d) rejected | current version(%d) , min.version(%d) !",
 80083b2:	4619      	mov	r1, r3
 80083b4:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 80083b6:	2301      	movs	r3, #1
 80083b8:	4828      	ldr	r0, [pc, #160]	; (800845c <SFU_LOADER_VerifyFwHeader+0x170>)
 80083ba:	f001 fda3 	bl	8009f04 <iprintf>
      m_LoaderStatus = SFU_LOADER_ERR_FW_VERSION;
 80083be:	4b26      	ldr	r3, [pc, #152]	; (8008458 <SFU_LOADER_VerifyFwHeader+0x16c>)
 80083c0:	2204      	movs	r2, #4
 80083c2:	701a      	strb	r2, [r3, #0]
    /*
     * Control of version and length is done twice to avoid basic hardware attack
     * This more important for the 1 image configuration as the installation is done during the download procedure
     * For the 2 images configuration anti-rollback will be checked again during installation process
     */
    verif_ver = SFU_IMG_GetActiveFwVersion(active_slot);
 80083c4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80083c6:	f7ff fb45 	bl	8007a54 <SFU_IMG_GetActiveFwVersion>
 80083ca:	4603      	mov	r3, r0
 80083cc:	843b      	strh	r3, [r7, #32]
    if (SFU_IMG_CheckFwVersion(active_slot, verif_ver, p_x_fw_raw_header->FwVersion) == SFU_SUCCESS)
 80083ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083d0:	88da      	ldrh	r2, [r3, #6]
 80083d2:	8c3b      	ldrh	r3, [r7, #32]
 80083d4:	4619      	mov	r1, r3
 80083d6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80083d8:	f7ff fb74 	bl	8007ac4 <SFU_IMG_CheckFwVersion>
 80083dc:	4603      	mov	r3, r0
 80083de:	4a1d      	ldr	r2, [pc, #116]	; (8008454 <SFU_LOADER_VerifyFwHeader+0x168>)
 80083e0:	4293      	cmp	r3, r2
 80083e2:	d117      	bne.n	8008414 <SFU_LOADER_VerifyFwHeader+0x128>
    {
#if  defined(SFU_NO_SWAP)
      /*
       * Check length : Let's make sure the Firmware image can be written in the destination slot.
       */
      if (p_x_fw_raw_header->FwSize > (SLOT_SIZE(m_uDwlSlot) - SFU_IMG_IMAGE_OFFSET))
 80083e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083e6:	689a      	ldr	r2, [r3, #8]
 80083e8:	4b15      	ldr	r3, [pc, #84]	; (8008440 <SFU_LOADER_VerifyFwHeader+0x154>)
 80083ea:	681b      	ldr	r3, [r3, #0]
 80083ec:	4915      	ldr	r1, [pc, #84]	; (8008444 <SFU_LOADER_VerifyFwHeader+0x158>)
 80083ee:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 80083f2:	4b13      	ldr	r3, [pc, #76]	; (8008440 <SFU_LOADER_VerifyFwHeader+0x154>)
 80083f4:	681b      	ldr	r3, [r3, #0]
 80083f6:	4814      	ldr	r0, [pc, #80]	; (8008448 <SFU_LOADER_VerifyFwHeader+0x15c>)
 80083f8:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80083fc:	1acb      	subs	r3, r1, r3
 80083fe:	f2a3 13ff 	subw	r3, r3, #511	; 0x1ff
 8008402:	429a      	cmp	r2, r3
 8008404:	d903      	bls.n	800840e <SFU_LOADER_VerifyFwHeader+0x122>
      if ((p_x_fw_raw_header->PartialFwSize + (p_x_fw_raw_header->PartialFwOffset % SLOT_SIZE(SLOT_SWAP))) >
          (SLOT_SIZE(m_uDwlSlot) - SFU_IMG_IMAGE_OFFSET))
#endif /* SFU_NO_SWAP */
      {
        /* The firmware cannot be written in dwl slot */
        m_LoaderStatus = SFU_LOADER_ERR_FW_LENGTH;
 8008406:	4b14      	ldr	r3, [pc, #80]	; (8008458 <SFU_LOADER_VerifyFwHeader+0x16c>)
 8008408:	2203      	movs	r2, #3
 800840a:	701a      	strb	r2, [r3, #0]
 800840c:	e011      	b.n	8008432 <SFU_LOADER_VerifyFwHeader+0x146>
      }
      else
      {
        /* Installation authorized */
        e_ret_status = SFU_SUCCESS;
 800840e:	4b11      	ldr	r3, [pc, #68]	; (8008454 <SFU_LOADER_VerifyFwHeader+0x168>)
 8008410:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008412:	e00e      	b.n	8008432 <SFU_LOADER_VerifyFwHeader+0x146>
    }
    else
    {
      /* The installation is forbidden */
      TRACE("\r\n          Anti-rollback: candidate version(%d) rejected | current version(%d) , min.version(%d) !",
            p_x_fw_raw_header->FwVersion, verif_ver, SFU_FW_VERSION_START_NUM);
 8008414:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008416:	88db      	ldrh	r3, [r3, #6]
      TRACE("\r\n          Anti-rollback: candidate version(%d) rejected | current version(%d) , min.version(%d) !",
 8008418:	4619      	mov	r1, r3
 800841a:	8c3a      	ldrh	r2, [r7, #32]
 800841c:	2301      	movs	r3, #1
 800841e:	480f      	ldr	r0, [pc, #60]	; (800845c <SFU_LOADER_VerifyFwHeader+0x170>)
 8008420:	f001 fd70 	bl	8009f04 <iprintf>
      m_LoaderStatus = SFU_LOADER_ERR_FW_VERSION;
 8008424:	4b0c      	ldr	r3, [pc, #48]	; (8008458 <SFU_LOADER_VerifyFwHeader+0x16c>)
 8008426:	2204      	movs	r2, #4
 8008428:	701a      	strb	r2, [r3, #0]
 800842a:	e002      	b.n	8008432 <SFU_LOADER_VerifyFwHeader+0x146>
    }
  }
  else
  {
    /* Header authentication failure */
    m_LoaderStatus = SFU_LOADER_ERR_AUTH_FAILED;
 800842c:	4b0a      	ldr	r3, [pc, #40]	; (8008458 <SFU_LOADER_VerifyFwHeader+0x16c>)
 800842e:	2202      	movs	r2, #2
 8008430:	701a      	strb	r2, [r3, #0]
  }

  return e_ret_status;
 8008432:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8008434:	4618      	mov	r0, r3
 8008436:	3730      	adds	r7, #48	; 0x30
 8008438:	46bd      	mov	sp, r7
 800843a:	bd80      	pop	{r7, pc}
 800843c:	00018799 	.word	0x00018799
 8008440:	200017c4 	.word	0x200017c4
 8008444:	0800b170 	.word	0x0800b170
 8008448:	0800b150 	.word	0x0800b150
 800844c:	200017cc 	.word	0x200017cc
 8008450:	200017c8 	.word	0x200017c8
 8008454:	00122f11 	.word	0x00122f11
 8008458:	200017c0 	.word	0x200017c0
 800845c:	0800b1b0 	.word	0x0800b1b0

08008460 <SFU_LOADER_Init>:
}
 8008460:	4800      	ldr	r0, [pc, #0]	; (8008464 <SFU_LOADER_Init+0x4>)
 8008462:	4770      	bx	lr
 8008464:	00122f11 	.word	0x00122f11

08008468 <SFU_LOADER_DeInit>:
 8008468:	4800      	ldr	r0, [pc, #0]	; (800846c <SFU_LOADER_DeInit+0x4>)
 800846a:	4770      	bx	lr
 800846c:	00122f11 	.word	0x00122f11

08008470 <SFU_LOADER_DownloadNewUserFw>:
{
 8008470:	e92d 4f73 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, sl, fp, lr}
  SFU_COM_YMODEM_StatusTypeDef e_com_status = SFU_COM_YMODEM_ERROR;
 8008474:	f04f 0b01 	mov.w	fp, #1
{
 8008478:	4688      	mov	r8, r1
 800847a:	4615      	mov	r5, r2
  SFU_COM_YMODEM_StatusTypeDef e_com_status = SFU_COM_YMODEM_ERROR;
 800847c:	f88d b007 	strb.w	fp, [sp, #7]
  if ((peSFU_LOADER_Status == NULL) || (pSize == NULL) || (pDwlSlot == NULL))
 8008480:	4606      	mov	r6, r0
 8008482:	b920      	cbnz	r0, 800848e <SFU_LOADER_DownloadNewUserFw+0x1e>
    return SFU_ERROR;
 8008484:	f641 70e1 	movw	r0, #8161	; 0x1fe1
}
 8008488:	b002      	add	sp, #8
 800848a:	e8bd 8f70 	ldmia.w	sp!, {r4, r5, r6, r8, r9, sl, fp, pc}
  if ((peSFU_LOADER_Status == NULL) || (pSize == NULL) || (pDwlSlot == NULL))
 800848e:	2a00      	cmp	r2, #0
 8008490:	d0f8      	beq.n	8008484 <SFU_LOADER_DownloadNewUserFw+0x14>
 8008492:	2900      	cmp	r1, #0
 8008494:	d0f6      	beq.n	8008484 <SFU_LOADER_DownloadNewUserFw+0x14>
  (void) SFU_LL_SECU_IWDG_Refresh();
 8008496:	f000 fc31 	bl	8008cfc <SFU_LL_SECU_IWDG_Refresh>
  TRACE("\r\n\t  File> Transfer> YMODEM> Send ");
 800849a:	4816      	ldr	r0, [pc, #88]	; (80084f4 <SFU_LOADER_DownloadNewUserFw+0x84>)
  m_uDwlSlot = SLOT_DWL_1;
 800849c:	f8df a068 	ldr.w	sl, [pc, #104]	; 8008508 <SFU_LOADER_DownloadNewUserFw+0x98>
  m_LoaderStatus = SFU_LOADER_ERR_COM;
 80084a0:	f8df 9068 	ldr.w	r9, [pc, #104]	; 800850c <SFU_LOADER_DownloadNewUserFw+0x9c>
  TRACE("\r\n\t  File> Transfer> YMODEM> Send ");
 80084a4:	f001 fd2e 	bl	8009f04 <iprintf>
  m_uDwlAreaStart = 0U;
 80084a8:	4a13      	ldr	r2, [pc, #76]	; (80084f8 <SFU_LOADER_DownloadNewUserFw+0x88>)
  m_uDwlAreaAddress = 0U;
 80084aa:	4b14      	ldr	r3, [pc, #80]	; (80084fc <SFU_LOADER_DownloadNewUserFw+0x8c>)
  m_LoaderStatus = SFU_LOADER_ERR_COM;
 80084ac:	f889 b000 	strb.w	fp, [r9]
  m_uDwlAreaAddress = 0U;
 80084b0:	2400      	movs	r4, #0
  m_uDwlAreaStart = 0U;
 80084b2:	6014      	str	r4, [r2, #0]
  m_uDwlAreaSize = 0U;
 80084b4:	4a12      	ldr	r2, [pc, #72]	; (8008500 <SFU_LOADER_DownloadNewUserFw+0x90>)
  m_uDwlAreaAddress = 0U;
 80084b6:	601c      	str	r4, [r3, #0]
  m_uNbrBlocksYmodem = 0U;
 80084b8:	e9c3 4401 	strd	r4, r4, [r3, #4]
  m_uPacketsReceived = 0U;
 80084bc:	60dc      	str	r4, [r3, #12]
  if (SFU_COM_YMODEM_Receive(&e_com_status, pSize) == SFU_SUCCESS)
 80084be:	4629      	mov	r1, r5
  m_uDwlSlot = SLOT_DWL_1;
 80084c0:	2304      	movs	r3, #4
  if (SFU_COM_YMODEM_Receive(&e_com_status, pSize) == SFU_SUCCESS)
 80084c2:	f10d 0007 	add.w	r0, sp, #7
  m_uDwlSlot = SLOT_DWL_1;
 80084c6:	f8ca 3000 	str.w	r3, [sl]
  m_uDwlAreaSize = 0U;
 80084ca:	6014      	str	r4, [r2, #0]
  if (SFU_COM_YMODEM_Receive(&e_com_status, pSize) == SFU_SUCCESS)
 80084cc:	f7fe fd3e 	bl	8006f4c <SFU_COM_YMODEM_Receive>
 80084d0:	4b0c      	ldr	r3, [pc, #48]	; (8008504 <SFU_LOADER_DownloadNewUserFw+0x94>)
 80084d2:	4298      	cmp	r0, r3
 80084d4:	d103      	bne.n	80084de <SFU_LOADER_DownloadNewUserFw+0x6e>
    if (*pSize > 0U)
 80084d6:	682b      	ldr	r3, [r5, #0]
 80084d8:	b10b      	cbz	r3, 80084de <SFU_LOADER_DownloadNewUserFw+0x6e>
      m_LoaderStatus = SFU_LOADER_OK;
 80084da:	f889 4000 	strb.w	r4, [r9]
  *pDwlSlot = m_uDwlSlot;
 80084de:	f8da 3000 	ldr.w	r3, [sl]
 80084e2:	f8c8 3000 	str.w	r3, [r8]
  *peSFU_LOADER_Status = m_LoaderStatus;
 80084e6:	f899 3000 	ldrb.w	r3, [r9]
 80084ea:	7033      	strb	r3, [r6, #0]
  if (m_LoaderStatus == SFU_LOADER_OK)
 80084ec:	2b00      	cmp	r3, #0
 80084ee:	d1c9      	bne.n	8008484 <SFU_LOADER_DownloadNewUserFw+0x14>
    e_ret_status = SFU_SUCCESS;
 80084f0:	4804      	ldr	r0, [pc, #16]	; (8008504 <SFU_LOADER_DownloadNewUserFw+0x94>)
 80084f2:	e7c9      	b.n	8008488 <SFU_LOADER_DownloadNewUserFw+0x18>
 80084f4:	0800b214 	.word	0x0800b214
 80084f8:	200017cc 	.word	0x200017cc
 80084fc:	200017d0 	.word	0x200017d0
 8008500:	200017c8 	.word	0x200017c8
 8008504:	00122f11 	.word	0x00122f11
 8008508:	200017c4 	.word	0x200017c4
 800850c:	200017c0 	.word	0x200017c0

08008510 <SFU_COM_YMODEM_HeaderPktRxCpltCallback>:
{
 8008510:	b508      	push	{r3, lr}
  m_uPacketsReceived = 0U;
 8008512:	4b07      	ldr	r3, [pc, #28]	; (8008530 <SFU_COM_YMODEM_HeaderPktRxCpltCallback+0x20>)
  m_uFileSizeYmodem = uFileSize;
 8008514:	6058      	str	r0, [r3, #4]
  m_uNbrBlocksYmodem = (m_uFileSizeYmodem + (SFU_COM_YMODEM_PACKET_1K_SIZE - 1U)) / SFU_COM_YMODEM_PACKET_1K_SIZE;
 8008516:	f200 30ff 	addw	r0, r0, #1023	; 0x3ff
 800851a:	0a80      	lsrs	r0, r0, #10
  m_uPacketsReceived = 0U;
 800851c:	2200      	movs	r2, #0
  m_uNbrBlocksYmodem = (m_uFileSizeYmodem + (SFU_COM_YMODEM_PACKET_1K_SIZE - 1U)) / SFU_COM_YMODEM_PACKET_1K_SIZE;
 800851e:	6098      	str	r0, [r3, #8]
  HAL_Delay(1000U);
 8008520:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
  m_uPacketsReceived = 0U;
 8008524:	60da      	str	r2, [r3, #12]
  HAL_Delay(1000U);
 8008526:	f000 fd09 	bl	8008f3c <HAL_Delay>
}
 800852a:	4802      	ldr	r0, [pc, #8]	; (8008534 <SFU_COM_YMODEM_HeaderPktRxCpltCallback+0x24>)
 800852c:	bd08      	pop	{r3, pc}
 800852e:	bf00      	nop
 8008530:	200017d0 	.word	0x200017d0
 8008534:	00122f11 	.word	0x00122f11

08008538 <SFU_COM_YMODEM_DataPktRxCpltCallback>:
{
 8008538:	e92d 4177 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r8, lr}
 800853c:	460e      	mov	r6, r1
  if (p_data == NULL)
 800853e:	4680      	mov	r8, r0
 8008540:	2800      	cmp	r0, #0
 8008542:	d057      	beq.n	80085f4 <SFU_COM_YMODEM_DataPktRxCpltCallback+0xbc>
  m_uPacketsReceived++;
 8008544:	4c36      	ldr	r4, [pc, #216]	; (8008620 <SFU_COM_YMODEM_DataPktRxCpltCallback+0xe8>)
 8008546:	68e3      	ldr	r3, [r4, #12]
  if (m_uPacketsReceived == m_uNbrBlocksYmodem)
 8008548:	68a2      	ldr	r2, [r4, #8]
  m_uPacketsReceived++;
 800854a:	3301      	adds	r3, #1
  if (m_uPacketsReceived == m_uNbrBlocksYmodem)
 800854c:	4293      	cmp	r3, r2
  m_uPacketsReceived++;
 800854e:	60e3      	str	r3, [r4, #12]
  if (m_uPacketsReceived == m_uNbrBlocksYmodem)
 8008550:	d106      	bne.n	8008560 <SFU_COM_YMODEM_DataPktRxCpltCallback+0x28>
    if (0U == (m_uFileSizeYmodem % SFU_COM_YMODEM_PACKET_1K_SIZE))
 8008552:	6866      	ldr	r6, [r4, #4]
 8008554:	f3c6 0609 	ubfx	r6, r6, #0, #10
      rx_size = SFU_COM_YMODEM_PACKET_1K_SIZE;
 8008558:	2e00      	cmp	r6, #0
 800855a:	bf08      	it	eq
 800855c:	f44f 6680 	moveq.w	r6, #1024	; 0x400
  if (m_uPacketsReceived == 1U)
 8008560:	2b01      	cmp	r3, #1
 8008562:	d13b      	bne.n	80085dc <SFU_COM_YMODEM_DataPktRxCpltCallback+0xa4>
    (void) memcpy(fw_header, p_data, SE_FW_HEADER_TOT_LEN);
 8008564:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8008568:	4641      	mov	r1, r8
 800856a:	482e      	ldr	r0, [pc, #184]	; (8008624 <SFU_COM_YMODEM_DataPktRxCpltCallback+0xec>)
 800856c:	f001 fcb4 	bl	8009ed8 <memcpy>
    e_ret_status = SFU_LOADER_VerifyFwHeader(p_data);
 8008570:	4640      	mov	r0, r8
 8008572:	f7ff febb 	bl	80082ec <SFU_LOADER_VerifyFwHeader>
    if (e_ret_status == SFU_SUCCESS)
 8008576:	4b2c      	ldr	r3, [pc, #176]	; (8008628 <SFU_COM_YMODEM_DataPktRxCpltCallback+0xf0>)
 8008578:	4298      	cmp	r0, r3
    e_ret_status = SFU_LOADER_VerifyFwHeader(p_data);
 800857a:	4605      	mov	r5, r0
    if (e_ret_status == SFU_SUCCESS)
 800857c:	d11c      	bne.n	80085b8 <SFU_COM_YMODEM_DataPktRxCpltCallback+0x80>
      m_uDwlAreaAddress = m_uDwlAreaStart;
 800857e:	4b2b      	ldr	r3, [pc, #172]	; (800862c <SFU_COM_YMODEM_DataPktRxCpltCallback+0xf4>)
      if (SFU_LL_FLASH_Erase_Size(&x_flash_info, (uint8_t *) m_uDwlAreaAddress, SLOT_SIZE(m_uDwlSlot)) !=
 8008580:	482b      	ldr	r0, [pc, #172]	; (8008630 <SFU_COM_YMODEM_DataPktRxCpltCallback+0xf8>)
      m_uDwlAreaAddress = m_uDwlAreaStart;
 8008582:	6819      	ldr	r1, [r3, #0]
      m_uDwlImgSize = ((SE_FwRawHeaderTypeDef *)(uint32_t)fw_header)->FwSize + SFU_IMG_IMAGE_OFFSET;
 8008584:	69a3      	ldr	r3, [r4, #24]
      m_uDwlAreaAddress = m_uDwlAreaStart;
 8008586:	6021      	str	r1, [r4, #0]
      m_uDwlImgSize = ((SE_FwRawHeaderTypeDef *)(uint32_t)fw_header)->FwSize + SFU_IMG_IMAGE_OFFSET;
 8008588:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800858c:	f8c4 3150 	str.w	r3, [r4, #336]	; 0x150
      if (SFU_LL_FLASH_Erase_Size(&x_flash_info, (uint8_t *) m_uDwlAreaAddress, SLOT_SIZE(m_uDwlSlot)) !=
 8008590:	4b28      	ldr	r3, [pc, #160]	; (8008634 <SFU_COM_YMODEM_DataPktRxCpltCallback+0xfc>)
 8008592:	681a      	ldr	r2, [r3, #0]
 8008594:	4b28      	ldr	r3, [pc, #160]	; (8008638 <SFU_COM_YMODEM_DataPktRxCpltCallback+0x100>)
 8008596:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800859a:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
 800859e:	3301      	adds	r3, #1
 80085a0:	1a9a      	subs	r2, r3, r2
 80085a2:	f10d 0007 	add.w	r0, sp, #7
 80085a6:	f000 f9fb 	bl	80089a0 <SFU_LL_FLASH_Erase_Size>
 80085aa:	42a8      	cmp	r0, r5
 80085ac:	d016      	beq.n	80085dc <SFU_COM_YMODEM_DataPktRxCpltCallback+0xa4>
        m_LoaderStatus = SFU_LOADER_ERR_FLASH;
 80085ae:	4b23      	ldr	r3, [pc, #140]	; (800863c <SFU_COM_YMODEM_DataPktRxCpltCallback+0x104>)
 80085b0:	2205      	movs	r2, #5
      m_LoaderStatus = SFU_LOADER_ERR_FW_LENGTH;
 80085b2:	701a      	strb	r2, [r3, #0]
      e_ret_status = SFU_ERROR;
 80085b4:	f641 75e1 	movw	r5, #8161	; 0x1fe1
  if (m_uPacketsReceived == m_uNbrBlocksYmodem)
 80085b8:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
 80085bc:	429a      	cmp	r2, r3
    m_uPacketsReceived = 0U;
 80085be:	bf04      	itt	eq
 80085c0:	2300      	moveq	r3, #0
 80085c2:	60e3      	streq	r3, [r4, #12]
  if (e_ret_status == SFU_ERROR)
 80085c4:	f641 73e1 	movw	r3, #8161	; 0x1fe1
 80085c8:	429d      	cmp	r5, r3
 80085ca:	d103      	bne.n	80085d4 <SFU_COM_YMODEM_DataPktRxCpltCallback+0x9c>
    m_uFileSizeYmodem = 0U;
 80085cc:	2300      	movs	r3, #0
    m_uNbrBlocksYmodem = 0U;
 80085ce:	e9c4 3302 	strd	r3, r3, [r4, #8]
    m_uFileSizeYmodem = 0U;
 80085d2:	6063      	str	r3, [r4, #4]
}
 80085d4:	4628      	mov	r0, r5
 80085d6:	b003      	add	sp, #12
 80085d8:	e8bd 8170 	ldmia.w	sp!, {r4, r5, r6, r8, pc}
    if ((m_uDwlAreaAddress + rx_size) > (m_uDwlAreaStart + m_uDwlImgSize))
 80085dc:	4b13      	ldr	r3, [pc, #76]	; (800862c <SFU_COM_YMODEM_DataPktRxCpltCallback+0xf4>)
 80085de:	6821      	ldr	r1, [r4, #0]
 80085e0:	681b      	ldr	r3, [r3, #0]
 80085e2:	f8d4 2150 	ldr.w	r2, [r4, #336]	; 0x150
 80085e6:	1988      	adds	r0, r1, r6
 80085e8:	441a      	add	r2, r3
 80085ea:	4290      	cmp	r0, r2
 80085ec:	d905      	bls.n	80085fa <SFU_COM_YMODEM_DataPktRxCpltCallback+0xc2>
      m_LoaderStatus = SFU_LOADER_ERR_FW_LENGTH;
 80085ee:	4b13      	ldr	r3, [pc, #76]	; (800863c <SFU_COM_YMODEM_DataPktRxCpltCallback+0x104>)
 80085f0:	2203      	movs	r2, #3
 80085f2:	e7de      	b.n	80085b2 <SFU_COM_YMODEM_DataPktRxCpltCallback+0x7a>
    return SFU_ERROR;
 80085f4:	f641 75e1 	movw	r5, #8161	; 0x1fe1
 80085f8:	e7ec      	b.n	80085d4 <SFU_COM_YMODEM_DataPktRxCpltCallback+0x9c>
    if ((m_uDwlAreaAddress + rx_size) > (m_uDwlAreaStart + m_uDwlAreaSize))
 80085fa:	4a11      	ldr	r2, [pc, #68]	; (8008640 <SFU_COM_YMODEM_DataPktRxCpltCallback+0x108>)
 80085fc:	6812      	ldr	r2, [r2, #0]
 80085fe:	4413      	add	r3, r2
 8008600:	4298      	cmp	r0, r3
 8008602:	d8f4      	bhi.n	80085ee <SFU_COM_YMODEM_DataPktRxCpltCallback+0xb6>
    if (SFU_LL_FLASH_Write(&x_flash_info, (uint8_t *)m_uDwlAreaAddress, p_data, rx_size) == SFU_SUCCESS)
 8008604:	4633      	mov	r3, r6
 8008606:	4642      	mov	r2, r8
 8008608:	f10d 0007 	add.w	r0, sp, #7
 800860c:	f000 f9cf 	bl	80089ae <SFU_LL_FLASH_Write>
 8008610:	4b05      	ldr	r3, [pc, #20]	; (8008628 <SFU_COM_YMODEM_DataPktRxCpltCallback+0xf0>)
 8008612:	4298      	cmp	r0, r3
 8008614:	4605      	mov	r5, r0
 8008616:	d1ca      	bne.n	80085ae <SFU_COM_YMODEM_DataPktRxCpltCallback+0x76>
      m_uDwlAreaAddress += (rx_size);
 8008618:	6821      	ldr	r1, [r4, #0]
 800861a:	4431      	add	r1, r6
 800861c:	6021      	str	r1, [r4, #0]
 800861e:	e7cb      	b.n	80085b8 <SFU_COM_YMODEM_DataPktRxCpltCallback+0x80>
 8008620:	200017d0 	.word	0x200017d0
 8008624:	200017e0 	.word	0x200017e0
 8008628:	00122f11 	.word	0x00122f11
 800862c:	200017cc 	.word	0x200017cc
 8008630:	0800b150 	.word	0x0800b150
 8008634:	200017c4 	.word	0x200017c4
 8008638:	0800b170 	.word	0x0800b170
 800863c:	200017c0 	.word	0x200017c0
 8008640:	200017c8 	.word	0x200017c8

08008644 <SFU_MPU_SVC_Handler>:
  *             The first argument is the identifier of the requested operation.
  * @retval void
  */
void SFU_MPU_SVC_Handler(uint32_t *args)
{
  switch (args[0])
 8008644:	6803      	ldr	r3, [r0, #0]
 8008646:	2b06      	cmp	r3, #6
{
 8008648:	b510      	push	{r4, lr}
 800864a:	4604      	mov	r4, r0
  switch (args[0])
 800864c:	d807      	bhi.n	800865e <SFU_MPU_SVC_Handler+0x1a>
 800864e:	2b02      	cmp	r3, #2
 8008650:	d829      	bhi.n	80086a6 <SFU_MPU_SVC_Handler+0x62>
 8008652:	2b01      	cmp	r3, #1
 8008654:	d009      	beq.n	800866a <SFU_MPU_SVC_Handler+0x26>
    default:
      /* Force a reset */
      HAL_NVIC_SystemReset();
      break;
  }
}
 8008656:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_NVIC_SystemReset();
 800865a:	f000 bcdd 	b.w	8009018 <HAL_NVIC_SystemReset>
  switch (args[0])
 800865e:	2b07      	cmp	r3, #7
 8008660:	d1f9      	bne.n	8008656 <SFU_MPU_SVC_Handler+0x12>
}
 8008662:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_SuspendTick();
 8008666:	f000 bc7d 	b.w	8008f64 <HAL_SuspendTick>
  __ASM volatile ("MRS %0, control" : "=r" (result) );
 800866a:	f3ef 8314 	mrs	r3, CONTROL
      __set_CONTROL(__get_CONTROL() & ~0x3U); /* clear process stack & unprivileged bit */
 800866e:	f023 0303 	bic.w	r3, r3, #3
  __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
 8008672:	f383 8814 	msr	CONTROL, r3
      HAL_SuspendTick();
 8008676:	f000 fc75 	bl	8008f64 <HAL_SuspendTick>
    SCB->CPACR &= ~((3UL << 10*2)|(3UL << 11*2));  /* reset CP10 and CP11 Full Access */
 800867a:	4a0b      	ldr	r2, [pc, #44]	; (80086a8 <SFU_MPU_SVC_Handler+0x64>)
      launch_application(args[1], (uint32_t)jump_to_function);
 800867c:	490b      	ldr	r1, [pc, #44]	; (80086ac <SFU_MPU_SVC_Handler+0x68>)
    SCB->CPACR &= ~((3UL << 10*2)|(3UL << 11*2));  /* reset CP10 and CP11 Full Access */
 800867e:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8008682:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8008686:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    FPU->FPCCR &= ~FPU_FPCCR_LSPEN_Msk; /* Disable automatic lazy state preservation for floating-point context */
 800868a:	4b09      	ldr	r3, [pc, #36]	; (80086b0 <SFU_MPU_SVC_Handler+0x6c>)
 800868c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800868e:	f022 4280 	bic.w	r2, r2, #1073741824	; 0x40000000
 8008692:	635a      	str	r2, [r3, #52]	; 0x34
    FPU->FPCCR &= ~FPU_FPCCR_LSPACT_Msk; /* Clear the lazy state preservation for floating-point context */
 8008694:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008696:	f022 0201 	bic.w	r2, r2, #1
 800869a:	635a      	str	r2, [r3, #52]	; 0x34
      launch_application(args[1], (uint32_t)jump_to_function);
 800869c:	6860      	ldr	r0, [r4, #4]
}
 800869e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      launch_application(args[1], (uint32_t)jump_to_function);
 80086a2:	f7fd bdd5 	b.w	8006250 <launch_application>
}
 80086a6:	bd10      	pop	{r4, pc}
 80086a8:	e000ed00 	.word	0xe000ed00
 80086ac:	08006248 	.word	0x08006248
 80086b0:	e000ef00 	.word	0xe000ef00

080086b4 <MPU_SVC_Handler>:
  uint8_t code = ((uint8_t *)args[6])[-2];
 80086b4:	6983      	ldr	r3, [r0, #24]
 80086b6:	f813 3c02 	ldrb.w	r3, [r3, #-2]
  switch (code)
 80086ba:	b11b      	cbz	r3, 80086c4 <MPU_SVC_Handler+0x10>
 80086bc:	2b01      	cmp	r3, #1
 80086be:	d003      	beq.n	80086c8 <MPU_SVC_Handler+0x14>
      HAL_NVIC_SystemReset();
 80086c0:	f000 bcaa 	b.w	8009018 <HAL_NVIC_SystemReset>
      SE_SVC_Handler(args);
 80086c4:	f7fd bcd8 	b.w	8006078 <SE_SVC_Handler>
      SFU_MPU_SVC_Handler(args);
 80086c8:	f7ff bfbc 	b.w	8008644 <SFU_MPU_SVC_Handler>

080086cc <SFU_MPU_SysCall>:
  * @param syscall The identifier of the operation to be called (see @ref SFU_MPU_PrivilegedOpId)
  * @param arguments arguments of the privileged operation
  * @retval void
  */
void SFU_MPU_SysCall(uint32_t syscall, ...)
{
 80086cc:	b40f      	push	{r0, r1, r2, r3}
  /*
    * You cannot directly change to privileged mode from unprivileged mode without going through an exception, for
    * example an SVC.
    * Handled by @ref MPU_SVC_Handler() and finally @ref SFU_MPU_SVC_Handler()
    */
  __ASM volatile("SVC #1");   /* 1 is the hard-coded value to indicate a SB_SFU syscall */
 80086ce:	df01      	svc	1
}
 80086d0:	b004      	add	sp, #16
 80086d2:	4770      	bx	lr

080086d4 <SFU_MPU_IsUnprivileged>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80086d4:	f3ef 8305 	mrs	r3, IPSR
  * @param void
  * @retval 0 if we are in privileged mode, 1 if we are in non-privileged mode
  */
uint32_t SFU_MPU_IsUnprivileged(void)
{
  return ((__get_IPSR() == 0U) && ((__get_CONTROL() & 1U) == 1U));
 80086d8:	b923      	cbnz	r3, 80086e4 <SFU_MPU_IsUnprivileged+0x10>
  __ASM volatile ("MRS %0, control" : "=r" (result) );
 80086da:	f3ef 8014 	mrs	r0, CONTROL
 80086de:	f000 0001 	and.w	r0, r0, #1
 80086e2:	4770      	bx	lr
 80086e4:	2000      	movs	r0, #0
}
 80086e6:	4770      	bx	lr

080086e8 <SFU_MPU_EnterUnprivilegedMode>:
  __ASM volatile ("MRS %0, msp" : "=r" (result) );
 80086e8:	f3ef 8308 	mrs	r3, MSP
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
 80086ec:	f383 8809 	msr	PSP, r3
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 80086f0:	4b05      	ldr	r3, [pc, #20]	; (8008708 <SFU_MPU_EnterUnprivilegedMode+0x20>)
 80086f2:	f383 8808 	msr	MSP, r3
  __ASM volatile ("MRS %0, control" : "=r" (result) );
 80086f6:	f3ef 8314 	mrs	r3, CONTROL
  */
void SFU_MPU_EnterUnprivilegedMode(void)
{
  __set_PSP(__get_MSP()); /* set up Process Stack Pointer to current stack pointer */
  __set_MSP(SE_REGION_RAM_STACK_TOP); /* change main stack to point on privileged stack */
  __set_CONTROL(__get_CONTROL() | 3U); /* bit 0 = 1: unpriviledged      bit 1=1: stack=PSP */
 80086fa:	f043 0303 	orr.w	r3, r3, #3
  __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
 80086fe:	f383 8814 	msr	CONTROL, r3
  __ASM volatile ("isb 0xF":::"memory");
 8008702:	f3bf 8f6f 	isb	sy
  __ISB();
}
 8008706:	4770      	bx	lr
 8008708:	20000400 	.word	0x20000400

0800870c <SFU_IMG_InstallAtNextReset>:
  }
  return SFU_SUCCESS;
#else
  return SFU_SUCCESS;           /* Nothing to do */
#endif /* !SFU_NO_SWAP*/
}
 800870c:	4800      	ldr	r0, [pc, #0]	; (8008710 <SFU_IMG_InstallAtNextReset+0x4>)
 800870e:	4770      	bx	lr
 8008710:	00122f11 	.word	0x00122f11

08008714 <SFU_IMG_GetDownloadAreaInfo>:
  * @param  pArea pointer to area descriptor
  * @retval none
  */
void SFU_IMG_GetDownloadAreaInfo(uint32_t DwlSlot, SFU_FwImageFlashTypeDef *pArea)
{
  pArea->DownloadAddr = SlotStartAdd[DwlSlot];
 8008714:	4b06      	ldr	r3, [pc, #24]	; (8008730 <SFU_IMG_GetDownloadAreaInfo+0x1c>)
 8008716:	f853 2020 	ldr.w	r2, [r3, r0, lsl #2]
#if  !defined(SFU_NO_SWAP)
  pArea->MaxSizeInBytes = (uint32_t)SLOT_SIZE(DwlSlot) - SFU_IMG_GetTrailerSize(DwlSlot);
#else
  pArea->MaxSizeInBytes = (uint32_t)SLOT_SIZE(DwlSlot);
 800871a:	4b06      	ldr	r3, [pc, #24]	; (8008734 <SFU_IMG_GetDownloadAreaInfo+0x20>)
  pArea->DownloadAddr = SlotStartAdd[DwlSlot];
 800871c:	604a      	str	r2, [r1, #4]
  pArea->MaxSizeInBytes = (uint32_t)SLOT_SIZE(DwlSlot);
 800871e:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8008722:	3301      	adds	r3, #1
 8008724:	1a9b      	subs	r3, r3, r2
 8008726:	600b      	str	r3, [r1, #0]
#endif /* !(SFU_NO_SWAP) */
  pArea->ImageOffsetInBytes = SFU_IMG_IMAGE_OFFSET;
 8008728:	f44f 7300 	mov.w	r3, #512	; 0x200
 800872c:	608b      	str	r3, [r1, #8]
}
 800872e:	4770      	bx	lr
 8008730:	0800b150 	.word	0x0800b150
 8008734:	0800b170 	.word	0x0800b170

08008738 <SFU_LL_DeInit>:

  /* ADD SRC CODE HERE
       ...
  */
  return e_ret_status;
}
 8008738:	f641 70e1 	movw	r0, #8161	; 0x1fe1
 800873c:	4770      	bx	lr
	...

08008740 <SFU_LL_CRC_Config>:
  * @param  eCRCConfg: SFU_CRC_ConfigTypeDef.
  *         This parameter can be a value of @ref SFU_CRC_ConfigTypeDef.
  * @retval SFU_ErrorStatus SFU_SUCCESS if successful, SFU_ERROR otherwise.
  */
SFU_ErrorStatus SFU_LL_CRC_Config(SFU_CRC_ConfigTypeDef eCRCConfg)
{
 8008740:	b508      	push	{r3, lr}

  /* Check the parameters */
  assert_param(IS_SFU_CRC_CONF(eCRCConfg));

  /* Switch to the selected configuration */
  CrcHandle.Instance = CRC;
 8008742:	4806      	ldr	r0, [pc, #24]	; (800875c <SFU_LL_CRC_Config+0x1c>)
 8008744:	4b06      	ldr	r3, [pc, #24]	; (8008760 <SFU_LL_CRC_Config+0x20>)
 8008746:	6003      	str	r3, [r0, #0]


  /* Proceed to CRC Init (Correct Parameters) */
  if (e_ret_status == SFU_SUCCESS)
  {
    if (HAL_CRC_Init(&CrcHandle) != HAL_OK)
 8008748:	f000 fc8d 	bl	8009066 <HAL_CRC_Init>
      e_ret_status = SFU_ERROR;
    }
  }

  return e_ret_status;
}
 800874c:	4a05      	ldr	r2, [pc, #20]	; (8008764 <SFU_LL_CRC_Config+0x24>)
 800874e:	f641 73e1 	movw	r3, #8161	; 0x1fe1
 8008752:	2800      	cmp	r0, #0
 8008754:	bf0c      	ite	eq
 8008756:	4610      	moveq	r0, r2
 8008758:	4618      	movne	r0, r3
 800875a:	bd08      	pop	{r3, pc}
 800875c:	20001924 	.word	0x20001924
 8008760:	40023000 	.word	0x40023000
 8008764:	00122f11 	.word	0x00122f11

08008768 <SFU_LL_CRC_Init>:
{
 8008768:	b082      	sub	sp, #8
  __HAL_RCC_CRC_CLK_ENABLE();
 800876a:	2300      	movs	r3, #0
 800876c:	9301      	str	r3, [sp, #4]
 800876e:	4b07      	ldr	r3, [pc, #28]	; (800878c <SFU_LL_CRC_Init+0x24>)
 8008770:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008772:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8008776:	631a      	str	r2, [r3, #48]	; 0x30
 8008778:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800877a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800877e:	9301      	str	r3, [sp, #4]
 8008780:	9b01      	ldr	r3, [sp, #4]
  e_ret_status = SFU_LL_CRC_Config(SFU_CRC_CONFIG_DEFAULT);
 8008782:	2001      	movs	r0, #1
}
 8008784:	b002      	add	sp, #8
  e_ret_status = SFU_LL_CRC_Config(SFU_CRC_CONFIG_DEFAULT);
 8008786:	f7ff bfdb 	b.w	8008740 <SFU_LL_CRC_Config>
 800878a:	bf00      	nop
 800878c:	40023800 	.word	0x40023800

08008790 <SFU_LL_Init>:
  e_ret_status = SFU_LL_CRC_Init();
 8008790:	f7ff bfea 	b.w	8008768 <SFU_LL_CRC_Init>

08008794 <SFU_LL_CRC_Calculate>:
  * @param  pBuffer: pointer to data buffer.
  * @param  BufferLength: buffer length in bytes.
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
uint32_t SFU_LL_CRC_Calculate(uint32_t pBuffer[], uint32_t BufferLength)
{
 8008794:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008796:	1e43      	subs	r3, r0, #1
  /* F4 and L1 HAL can only calculate a 32 bits CRC, we need a 16 bits CRC
     so define specials functions for this platform                       */
  return ((uint32_t) SFU_LL_CRCSW_Calculate((uint8_t *) pBuffer, (uint16_t) BufferLength));
 8008798:	b289      	uxth	r1, r1
static uint16_t SFU_LL_CRCSW_Calculate(const uint8_t *pdata, uint16_t size)
{
  uint16_t crc;
  uint8_t i;

  for (crc = 0; size > 0; size--, pdata++)
 800879a:	2000      	movs	r0, #0
    out ^= 0x1021;
 800879c:	f241 0521 	movw	r5, #4129	; 0x1021
  for (crc = 0; size > 0; size--, pdata++)
 80087a0:	b961      	cbnz	r1, 80087bc <SFU_LL_CRC_Calculate+0x28>
 80087a2:	2310      	movs	r3, #16
    out ^= 0x1021;
 80087a4:	f241 0221 	movw	r2, #4129	; 0x1021
  uint16_t xor = crc_in >> 15;
 80087a8:	0bc1      	lsrs	r1, r0, #15
  uint16_t out = crc_in << 1;
 80087aa:	0040      	lsls	r0, r0, #1
 80087ac:	b280      	uxth	r0, r0
  if (xor)
 80087ae:	b101      	cbz	r1, 80087b2 <SFU_LL_CRC_Calculate+0x1e>
    out ^= 0x1021;
 80087b0:	4050      	eors	r0, r2
    for (i = 0x80; i; i >>= 1)
    {
      crc = SFU_LL_CRCSW_Update(crc, *pdata & i);
    }
  }
  for (i = 0; i < 16; i++)
 80087b2:	3b01      	subs	r3, #1
 80087b4:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
 80087b8:	d1f6      	bne.n	80087a8 <SFU_LL_CRC_Calculate+0x14>
}
 80087ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
      crc = SFU_LL_CRCSW_Update(crc, *pdata & i);
 80087bc:	f813 6f01 	ldrb.w	r6, [r3, #1]!
 80087c0:	2208      	movs	r2, #8
    for (i = 0x80; i; i >>= 1)
 80087c2:	2480      	movs	r4, #128	; 0x80
  uint16_t xor = crc_in >> 15;
 80087c4:	0bc7      	lsrs	r7, r0, #15
  uint16_t out = crc_in << 1;
 80087c6:	0040      	lsls	r0, r0, #1
 80087c8:	b280      	uxth	r0, r0
  if (incr)
 80087ca:	4226      	tst	r6, r4
    out++;
 80087cc:	bf1c      	itt	ne
 80087ce:	3001      	addne	r0, #1
 80087d0:	b280      	uxthne	r0, r0
  if (xor)
 80087d2:	b107      	cbz	r7, 80087d6 <SFU_LL_CRC_Calculate+0x42>
    out ^= 0x1021;
 80087d4:	4068      	eors	r0, r5
    for (i = 0x80; i; i >>= 1)
 80087d6:	3a01      	subs	r2, #1
 80087d8:	ea4f 0454 	mov.w	r4, r4, lsr #1
 80087dc:	d1f2      	bne.n	80087c4 <SFU_LL_CRC_Calculate+0x30>
  for (crc = 0; size > 0; size--, pdata++)
 80087de:	3901      	subs	r1, #1
 80087e0:	b289      	uxth	r1, r1
 80087e2:	e7dd      	b.n	80087a0 <SFU_LL_CRC_Calculate+0xc>

080087e4 <SFU_LL_UART_Init>:
  UartHandle.Instance = SFU_UART;
 80087e4:	480c      	ldr	r0, [pc, #48]	; (8008818 <SFU_LL_UART_Init+0x34>)
  UartHandle.Init.BaudRate = 115200U;
 80087e6:	4a0d      	ldr	r2, [pc, #52]	; (800881c <SFU_LL_UART_Init+0x38>)
{
 80087e8:	b508      	push	{r3, lr}
  UartHandle.Init.BaudRate = 115200U;
 80087ea:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 80087ee:	e9c0 2302 	strd	r2, r3, [r0, #8]
  UartHandle.Init.WordLength = UART_WORDLENGTH_8B;
 80087f2:	2300      	movs	r3, #0
  UartHandle.Init.StopBits = UART_STOPBITS_1;
 80087f4:	e9c0 3304 	strd	r3, r3, [r0, #16]
  UartHandle.Init.Parity = UART_PARITY_NONE;
 80087f8:	6183      	str	r3, [r0, #24]
  UartHandle.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80087fa:	6203      	str	r3, [r0, #32]
  UartHandle.Init.Mode = UART_MODE_RX | UART_MODE_TX;
 80087fc:	230c      	movs	r3, #12
 80087fe:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&UartHandle) == HAL_OK)
 8008800:	3008      	adds	r0, #8
 8008802:	f001 fa4f 	bl	8009ca4 <HAL_UART_Init>
}
 8008806:	4b06      	ldr	r3, [pc, #24]	; (8008820 <SFU_LL_UART_Init+0x3c>)
 8008808:	f641 72e1 	movw	r2, #8161	; 0x1fe1
 800880c:	2800      	cmp	r0, #0
 800880e:	bf14      	ite	ne
 8008810:	4610      	movne	r0, r2
 8008812:	4618      	moveq	r0, r3
 8008814:	bd08      	pop	{r3, pc}
 8008816:	bf00      	nop
 8008818:	20001924 	.word	0x20001924
 800881c:	40011000 	.word	0x40011000
 8008820:	00122f11 	.word	0x00122f11

08008824 <SFU_LL_UART_DeInit>:
}
 8008824:	4800      	ldr	r0, [pc, #0]	; (8008828 <SFU_LL_UART_DeInit+0x4>)
 8008826:	4770      	bx	lr
 8008828:	00122f11 	.word	0x00122f11

0800882c <SFU_LL_UART_Transmit>:
{
 800882c:	b508      	push	{r3, lr}
 800882e:	4613      	mov	r3, r2
  if (pData == NULL)
 8008830:	b910      	cbnz	r0, 8008838 <SFU_LL_UART_Transmit+0xc>
    return SFU_ERROR;
 8008832:	f641 70e1 	movw	r0, #8161	; 0x1fe1
}
 8008836:	bd08      	pop	{r3, pc}
  if (HAL_UART_Transmit(&UartHandle, (uint8_t *)pData, DataLength, Timeout) == HAL_OK)
 8008838:	460a      	mov	r2, r1
 800883a:	4601      	mov	r1, r0
 800883c:	4803      	ldr	r0, [pc, #12]	; (800884c <SFU_LL_UART_Transmit+0x20>)
 800883e:	f001 fa5f 	bl	8009d00 <HAL_UART_Transmit>
 8008842:	2800      	cmp	r0, #0
 8008844:	d1f5      	bne.n	8008832 <SFU_LL_UART_Transmit+0x6>
    e_ret_status = SFU_SUCCESS;
 8008846:	4802      	ldr	r0, [pc, #8]	; (8008850 <SFU_LL_UART_Transmit+0x24>)
 8008848:	e7f5      	b.n	8008836 <SFU_LL_UART_Transmit+0xa>
 800884a:	bf00      	nop
 800884c:	2000192c 	.word	0x2000192c
 8008850:	00122f11 	.word	0x00122f11

08008854 <SFU_LL_UART_Receive>:
{
 8008854:	b508      	push	{r3, lr}
 8008856:	4613      	mov	r3, r2
  if (pData == NULL)
 8008858:	b910      	cbnz	r0, 8008860 <SFU_LL_UART_Receive+0xc>
    return SFU_ERROR;
 800885a:	f641 70e1 	movw	r0, #8161	; 0x1fe1
}
 800885e:	bd08      	pop	{r3, pc}
  if (HAL_UART_Receive(&UartHandle, (uint8_t *)pData, DataLength, Timeout) == HAL_OK)
 8008860:	460a      	mov	r2, r1
 8008862:	4601      	mov	r1, r0
 8008864:	4803      	ldr	r0, [pc, #12]	; (8008874 <SFU_LL_UART_Receive+0x20>)
 8008866:	f001 faa0 	bl	8009daa <HAL_UART_Receive>
 800886a:	2800      	cmp	r0, #0
 800886c:	d1f5      	bne.n	800885a <SFU_LL_UART_Receive+0x6>
    e_ret_status = SFU_SUCCESS;
 800886e:	4802      	ldr	r0, [pc, #8]	; (8008878 <SFU_LL_UART_Receive+0x24>)
 8008870:	e7f5      	b.n	800885e <SFU_LL_UART_Receive+0xa>
 8008872:	bf00      	nop
 8008874:	2000192c 	.word	0x2000192c
 8008878:	00122f11 	.word	0x00122f11

0800887c <SFU_LL_UART_Flush>:
  __HAL_UART_FLUSH_DRREGISTER(&UartHandle);
 800887c:	4b02      	ldr	r3, [pc, #8]	; (8008888 <SFU_LL_UART_Flush+0xc>)
}
 800887e:	4803      	ldr	r0, [pc, #12]	; (800888c <SFU_LL_UART_Flush+0x10>)
  __HAL_UART_FLUSH_DRREGISTER(&UartHandle);
 8008880:	689b      	ldr	r3, [r3, #8]
 8008882:	685b      	ldr	r3, [r3, #4]
}
 8008884:	4770      	bx	lr
 8008886:	bf00      	nop
 8008888:	20001924 	.word	0x20001924
 800888c:	00122f11 	.word	0x00122f11

08008890 <SFU_LL_UART_MspInit>:
{
 8008890:	b5f0      	push	{r4, r5, r6, r7, lr}
  if (huart->Instance == SFU_UART)
 8008892:	6802      	ldr	r2, [r0, #0]
 8008894:	4b1f      	ldr	r3, [pc, #124]	; (8008914 <SFU_LL_UART_MspInit+0x84>)
 8008896:	429a      	cmp	r2, r3
{
 8008898:	b089      	sub	sp, #36	; 0x24
  if (huart->Instance == SFU_UART)
 800889a:	d139      	bne.n	8008910 <SFU_LL_UART_MspInit+0x80>
    SFU_UART_CLK_ENABLE();
 800889c:	f503 3394 	add.w	r3, r3, #75776	; 0x12800
 80088a0:	2400      	movs	r4, #0
 80088a2:	9400      	str	r4, [sp, #0]
 80088a4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    HAL_GPIO_Init(SFU_UART_TX_GPIO_PORT, &GPIO_InitStruct);
 80088a6:	481c      	ldr	r0, [pc, #112]	; (8008918 <SFU_LL_UART_MspInit+0x88>)
    SFU_UART_CLK_ENABLE();
 80088a8:	f042 0210 	orr.w	r2, r2, #16
 80088ac:	645a      	str	r2, [r3, #68]	; 0x44
 80088ae:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80088b0:	f002 0210 	and.w	r2, r2, #16
 80088b4:	9200      	str	r2, [sp, #0]
 80088b6:	9a00      	ldr	r2, [sp, #0]
    SFU_UART_TX_GPIO_CLK_ENABLE();
 80088b8:	9401      	str	r4, [sp, #4]
 80088ba:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80088bc:	f042 0201 	orr.w	r2, r2, #1
 80088c0:	631a      	str	r2, [r3, #48]	; 0x30
 80088c2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80088c4:	f002 0201 	and.w	r2, r2, #1
 80088c8:	9201      	str	r2, [sp, #4]
 80088ca:	9a01      	ldr	r2, [sp, #4]
    SFU_UART_RX_GPIO_CLK_ENABLE();
 80088cc:	9402      	str	r4, [sp, #8]
 80088ce:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80088d0:	f042 0201 	orr.w	r2, r2, #1
 80088d4:	631a      	str	r2, [r3, #48]	; 0x30
 80088d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80088d8:	9405      	str	r4, [sp, #20]
    SFU_UART_RX_GPIO_CLK_ENABLE();
 80088da:	f003 0301 	and.w	r3, r3, #1
 80088de:	9302      	str	r3, [sp, #8]
 80088e0:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80088e2:	2702      	movs	r7, #2
 80088e4:	f44f 7300 	mov.w	r3, #512	; 0x200
    GPIO_InitStruct.Alternate = SFU_UART_TX_AF;
 80088e8:	2603      	movs	r6, #3
 80088ea:	2507      	movs	r5, #7
    HAL_GPIO_Init(SFU_UART_TX_GPIO_PORT, &GPIO_InitStruct);
 80088ec:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80088ee:	e9cd 3703 	strd	r3, r7, [sp, #12]
    GPIO_InitStruct.Alternate = SFU_UART_TX_AF;
 80088f2:	e9cd 6506 	strd	r6, r5, [sp, #24]
    HAL_GPIO_Init(SFU_UART_TX_GPIO_PORT, &GPIO_InitStruct);
 80088f6:	f000 fdbb 	bl	8009470 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = SFU_UART_RX_PIN;
 80088fa:	f44f 6380 	mov.w	r3, #1024	; 0x400
    HAL_GPIO_Init(SFU_UART_RX_GPIO_PORT, &GPIO_InitStruct);
 80088fe:	4806      	ldr	r0, [pc, #24]	; (8008918 <SFU_LL_UART_MspInit+0x88>)
    GPIO_InitStruct.Alternate = SFU_UART_RX_AF;
 8008900:	9507      	str	r5, [sp, #28]
    HAL_GPIO_Init(SFU_UART_RX_GPIO_PORT, &GPIO_InitStruct);
 8008902:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008904:	e9cd 3703 	strd	r3, r7, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008908:	e9cd 4605 	strd	r4, r6, [sp, #20]
    HAL_GPIO_Init(SFU_UART_RX_GPIO_PORT, &GPIO_InitStruct);
 800890c:	f000 fdb0 	bl	8009470 <HAL_GPIO_Init>
}
 8008910:	b009      	add	sp, #36	; 0x24
 8008912:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008914:	40011000 	.word	0x40011000
 8008918:	40020000 	.word	0x40020000

0800891c <SFU_LL_BufferCheck_in_se_ram>:
  * @param pBuff: Secure Engine protected function ID.
  * @param length: length of buffer in bytes
  * @retval SE_ErrorStatus SE_SUCCESS for buffer in se ram, SE_ERROR otherwise.
  */
SFU_ErrorStatus SFU_LL_BufferCheck_in_se_ram(const void *pBuff, uint32_t length)
{
 800891c:	4602      	mov	r2, r0
  SFU_ErrorStatus e_ret_status = SFU_ERROR;
  uint32_t addr_start = (uint32_t)pBuff;
  uint32_t addr_end = addr_start + length - 1U;

  /* Check if length is positive with no overflow and included in the correct range */
  if ((length != 0U) && (!((0xFFFFFFFFUL - addr_start) < length))
 800891e:	b179      	cbz	r1, 8008940 <SFU_LL_BufferCheck_in_se_ram+0x24>
 8008920:	43c3      	mvns	r3, r0
 8008922:	428b      	cmp	r3, r1
 8008924:	d30c      	bcc.n	8008940 <SFU_LL_BufferCheck_in_se_ram+0x24>
      && ((addr_end  <= SE_REGION_RAM_END) && (addr_start >= SE_REGION_RAM_START)))
 8008926:	4b08      	ldr	r3, [pc, #32]	; (8008948 <SFU_LL_BufferCheck_in_se_ram+0x2c>)
  uint32_t addr_end = addr_start + length - 1U;
 8008928:	3901      	subs	r1, #1
 800892a:	4401      	add	r1, r0
      && ((addr_end  <= SE_REGION_RAM_END) && (addr_start >= SE_REGION_RAM_START)))
 800892c:	4299      	cmp	r1, r3
 800892e:	d807      	bhi.n	8008940 <SFU_LL_BufferCheck_in_se_ram+0x24>
  {
    e_ret_status = SFU_SUCCESS;
 8008930:	4906      	ldr	r1, [pc, #24]	; (800894c <SFU_LL_BufferCheck_in_se_ram+0x30>)
 8008932:	4807      	ldr	r0, [pc, #28]	; (8008950 <SFU_LL_BufferCheck_in_se_ram+0x34>)
 8008934:	f641 73e1 	movw	r3, #8161	; 0x1fe1
 8008938:	428a      	cmp	r2, r1
 800893a:	bf38      	it	cc
 800893c:	4618      	movcc	r0, r3
 800893e:	4770      	bx	lr
  }
  else
  {
    e_ret_status = SFU_ERROR;
 8008940:	f641 70e1 	movw	r0, #8161	; 0x1fe1
  }
  return e_ret_status;
}
 8008944:	4770      	bx	lr
 8008946:	bf00      	nop
 8008948:	20000fff 	.word	0x20000fff
 800894c:	20000000 	.word	0x20000000
 8008950:	00122f11 	.word	0x00122f11

08008954 <SFU_LL_Buffer_in_ram>:
  SFU_ErrorStatus ret = SFU_ERROR;
  uint32_t addr_start = (uint32_t)pBuff;
  uint32_t addr_end = addr_start + Length - 1U;

  /* Check if length is positive with no overflow and included in the correct range */
    if ((Length != 0U) && (!((0xFFFFFFFFUL - addr_start) < Length))
 8008954:	b179      	cbz	r1, 8008976 <SFU_LL_Buffer_in_ram+0x22>
 8008956:	43c3      	mvns	r3, r0
 8008958:	428b      	cmp	r3, r1
 800895a:	d30c      	bcc.n	8008976 <SFU_LL_Buffer_in_ram+0x22>
        && (addr_start >= SRAM1_BASE) && (addr_end < 0x2004FFFFU))
 800895c:	f1b0 5f00 	cmp.w	r0, #536870912	; 0x20000000
 8008960:	d309      	bcc.n	8008976 <SFU_LL_Buffer_in_ram+0x22>
      {
        ret = SFU_SUCCESS;
 8008962:	4a06      	ldr	r2, [pc, #24]	; (800897c <SFU_LL_Buffer_in_ram+0x28>)
 8008964:	4b06      	ldr	r3, [pc, #24]	; (8008980 <SFU_LL_Buffer_in_ram+0x2c>)
  uint32_t addr_end = addr_start + Length - 1U;
 8008966:	3901      	subs	r1, #1
 8008968:	4401      	add	r1, r0
        ret = SFU_SUCCESS;
 800896a:	f641 70e1 	movw	r0, #8161	; 0x1fe1
 800896e:	4291      	cmp	r1, r2
 8008970:	bf38      	it	cc
 8008972:	4618      	movcc	r0, r3
 8008974:	4770      	bx	lr
  SFU_ErrorStatus ret = SFU_ERROR;
 8008976:	f641 70e1 	movw	r0, #8161	; 0x1fe1
      }
  return ret;
}
 800897a:	4770      	bx	lr
 800897c:	2004ffff 	.word	0x2004ffff
 8008980:	00122f11 	.word	0x00122f11

08008984 <SFU_LL_FLASH_Init>:
  * @brief  Initialize internal and external flash interface (OSPI/QSPI)
  * @param  none
  * @retval SFU_ErrorStatus SFU_SUCCESS if successful, SFU_ERROR otherwise.
  */
SFU_ErrorStatus SFU_LL_FLASH_Init(void)
{
 8008984:	b508      	push	{r3, lr}
  SFU_ErrorStatus e_ret_status = SFU_SUCCESS;

  e_ret_status = SFU_LL_FLASH_INT_Init();
 8008986:	f000 f867 	bl	8008a58 <SFU_LL_FLASH_INT_Init>
  if (e_ret_status == SFU_SUCCESS)
 800898a:	4b04      	ldr	r3, [pc, #16]	; (800899c <SFU_LL_FLASH_Init+0x18>)
 800898c:	4298      	cmp	r0, r3
 800898e:	d103      	bne.n	8008998 <SFU_LL_FLASH_Init+0x14>
  {
    e_ret_status = SFU_LL_FLASH_EXT_Init();
  }
  return e_ret_status;
}
 8008990:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    e_ret_status = SFU_LL_FLASH_EXT_Init();
 8008994:	f000 b836 	b.w	8008a04 <SFU_LL_FLASH_EXT_Init>
}
 8008998:	bd08      	pop	{r3, pc}
 800899a:	bf00      	nop
 800899c:	00122f11 	.word	0x00122f11

080089a0 <SFU_LL_FLASH_Erase_Size>:
  */
SFU_ErrorStatus SFU_LL_FLASH_Erase_Size(SFU_FLASH_StatusTypeDef *pFlashStatus, uint8_t *pStart, uint32_t Length)
{

  /* Check Flash start address */
  if ((uint32_t) pStart < EXTERNAL_FLASH_ADDRESS)
 80089a0:	f1b1 4f10 	cmp.w	r1, #2415919104	; 0x90000000
 80089a4:	d201      	bcs.n	80089aa <SFU_LL_FLASH_Erase_Size+0xa>
  {
    return SFU_LL_FLASH_INT_Erase_Size(pFlashStatus, pStart, Length);
 80089a6:	f000 b907 	b.w	8008bb8 <SFU_LL_FLASH_INT_Erase_Size>
  }
  else
  {
    return SFU_LL_FLASH_EXT_Erase_Size(pFlashStatus, pStart, Length);
 80089aa:	f000 b82f 	b.w	8008a0c <SFU_LL_FLASH_EXT_Erase_Size>

080089ae <SFU_LL_FLASH_Write>:
  */
SFU_ErrorStatus SFU_LL_FLASH_Write(SFU_FLASH_StatusTypeDef *pFlashStatus, uint8_t  *pDestination,
                                   const uint8_t *pSource, uint32_t Length)
{
  /* Check Flash destination address */
  if ((uint32_t) pDestination < EXTERNAL_FLASH_ADDRESS)
 80089ae:	f1b1 4f10 	cmp.w	r1, #2415919104	; 0x90000000
 80089b2:	d201      	bcs.n	80089b8 <SFU_LL_FLASH_Write+0xa>
  {
    return SFU_LL_FLASH_INT_Write(pFlashStatus, pDestination, pSource, Length);
 80089b4:	f000 b854 	b.w	8008a60 <SFU_LL_FLASH_INT_Write>
  }
  else
  {
    return SFU_LL_FLASH_EXT_Write(pFlashStatus, pDestination, pSource, Length);
 80089b8:	f000 b82b 	b.w	8008a12 <SFU_LL_FLASH_EXT_Write>

080089bc <SFU_LL_FLASH_Read>:
  * @retval SFU_ErrorStatus SFU_SUCCESS if successful, SFU_ERROR otherwise.
  */
SFU_ErrorStatus SFU_LL_FLASH_Read(uint8_t *pDestination, const uint8_t *pSource, uint32_t Length)
{
  /* Check Flash source address */
  if ((uint32_t) pSource < EXTERNAL_FLASH_ADDRESS)
 80089bc:	f1b1 4f10 	cmp.w	r1, #2415919104	; 0x90000000
 80089c0:	d201      	bcs.n	80089c6 <SFU_LL_FLASH_Read+0xa>
  {
    return SFU_LL_FLASH_INT_Read(pDestination, pSource, Length);
 80089c2:	f000 b8b5 	b.w	8008b30 <SFU_LL_FLASH_INT_Read>
  }
  else
  {
    return SFU_LL_FLASH_EXT_Read(pDestination, pSource, Length);
 80089c6:	f000 b827 	b.w	8008a18 <SFU_LL_FLASH_EXT_Read>

080089ca <SFU_LL_FLASH_Compare>:
  * @retval SFU_ErrorStatus SFU_SUCCESS if successful, SFU_ERROR otherwise.
  */
SFU_ErrorStatus SFU_LL_FLASH_Compare(const uint8_t *pFlash, const uint32_t Pattern1, const uint32_t Pattern2, uint32_t Length)
{
  /* Check Flash source address */
  if ((uint32_t) pFlash < EXTERNAL_FLASH_ADDRESS)
 80089ca:	f1b0 4f10 	cmp.w	r0, #2415919104	; 0x90000000
 80089ce:	d201      	bcs.n	80089d4 <SFU_LL_FLASH_Compare+0xa>
  {
    return SFU_LL_FLASH_INT_Compare(pFlash, Pattern1, Pattern2, Length);
 80089d0:	f000 b8d2 	b.w	8008b78 <SFU_LL_FLASH_INT_Compare>
  }
  else
  {
    return SFU_LL_FLASH_EXT_Compare(pFlash, Pattern1, Pattern2, Length);
 80089d4:	f000 b823 	b.w	8008a1e <SFU_LL_FLASH_EXT_Compare>

080089d8 <SFU_LL_FLASH_Config_Exe>:
   * Internal flash : nothing to do
   * External flash : configure memory mapped mode
   */

  /* Check Flash address */
  if (SlotStartAdd[SlotNumber] < EXTERNAL_FLASH_ADDRESS)
 80089d8:	4b04      	ldr	r3, [pc, #16]	; (80089ec <SFU_LL_FLASH_Config_Exe+0x14>)
 80089da:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 80089de:	f1b3 4f10 	cmp.w	r3, #2415919104	; 0x90000000
 80089e2:	d301      	bcc.n	80089e8 <SFU_LL_FLASH_Config_Exe+0x10>
  {
    return SFU_SUCCESS;
  }
  else
  {
    return SFU_LL_FLASH_EXT_Config_Exe(SlotNumber);
 80089e4:	f000 b81e 	b.w	8008a24 <SFU_LL_FLASH_EXT_Config_Exe>
  }
}
 80089e8:	4801      	ldr	r0, [pc, #4]	; (80089f0 <SFU_LL_FLASH_Config_Exe+0x18>)
 80089ea:	4770      	bx	lr
 80089ec:	0800b150 	.word	0x0800b150
 80089f0:	00122f11 	.word	0x00122f11

080089f4 <SFU_LL_FLASH_GetSector>:
  * @retval The sector of a given address
  */
uint32_t SFU_LL_FLASH_GetSector(uint32_t Addr)
{
  /* Check Flash address */
  if (Addr < EXTERNAL_FLASH_ADDRESS)
 80089f4:	f1b0 4f10 	cmp.w	r0, #2415919104	; 0x90000000
 80089f8:	d201      	bcs.n	80089fe <SFU_LL_FLASH_GetSector+0xa>
  {
    return SFU_LL_FLASH_INT_GetSector(Addr);
 80089fa:	f000 b8cf 	b.w	8008b9c <SFU_LL_FLASH_INT_GetSector>
  }
  else
  {
    return INVALID_SECTOR;                       /* Sector number is not used in SBSFU application for external flash */
  }
}
 80089fe:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008a02:	4770      	bx	lr

08008a04 <SFU_LL_FLASH_EXT_Init>:
       systematically during startup phase */

SFU_ErrorStatus SFU_LL_FLASH_EXT_Init(void)
{
  return SFU_SUCCESS;
}
 8008a04:	4800      	ldr	r0, [pc, #0]	; (8008a08 <SFU_LL_FLASH_EXT_Init+0x4>)
 8008a06:	4770      	bx	lr
 8008a08:	00122f11 	.word	0x00122f11

08008a0c <SFU_LL_FLASH_EXT_Erase_Size>:
{
  UNUSED(pFlashStatus);
  UNUSED(pStart);
  UNUSED(Length);
  return SFU_ERROR;
}
 8008a0c:	f641 70e1 	movw	r0, #8161	; 0x1fe1
 8008a10:	4770      	bx	lr

08008a12 <SFU_LL_FLASH_EXT_Write>:
  UNUSED(pFlashStatus);
  UNUSED(pDestination);
  UNUSED(pSource);
  UNUSED(Length);
  return SFU_ERROR;
}
 8008a12:	f641 70e1 	movw	r0, #8161	; 0x1fe1
 8008a16:	4770      	bx	lr

08008a18 <SFU_LL_FLASH_EXT_Read>:
 8008a18:	f641 70e1 	movw	r0, #8161	; 0x1fe1
 8008a1c:	4770      	bx	lr

08008a1e <SFU_LL_FLASH_EXT_Compare>:
  UNUSED(pFlash);
  UNUSED(Pattern1);
  UNUSED(Pattern2);
  UNUSED(Length);
  return SFU_ERROR;
}
 8008a1e:	f641 70e1 	movw	r0, #8161	; 0x1fe1
 8008a22:	4770      	bx	lr

08008a24 <SFU_LL_FLASH_EXT_Config_Exe>:
SFU_ErrorStatus SFU_LL_FLASH_EXT_Config_Exe(uint32_t SlotNumber)
{
  UNUSED(SlotNumber);
  return SFU_SUCCESS;
}
 8008a24:	4800      	ldr	r0, [pc, #0]	; (8008a28 <SFU_LL_FLASH_EXT_Config_Exe+0x4>)
 8008a26:	4770      	bx	lr
 8008a28:	00122f11 	.word	0x00122f11

08008a2c <SFU_LL_FLASH_INT_Clear_Error>:
  * @brief  Clear error flags raised during previous operation
  * @param  None.
  * @retval SFU_ErrorStatus SFU_SUCCESS if successful, SFU_ERROR otherwise.
  */
static SFU_ErrorStatus SFU_LL_FLASH_INT_Clear_Error(void)
{
 8008a2c:	b508      	push	{r3, lr}
  SFU_ErrorStatus e_ret_status = SFU_ERROR;

  /* Unlock the Program memory */
  if (HAL_FLASH_Unlock() == HAL_OK)
 8008a2e:	f000 fbab 	bl	8009188 <HAL_FLASH_Unlock>
 8008a32:	b110      	cbz	r0, 8008a3a <SFU_LL_FLASH_INT_Clear_Error+0xe>
  SFU_ErrorStatus e_ret_status = SFU_ERROR;
 8008a34:	f641 70e1 	movw	r0, #8161	; 0x1fe1
    }
  }

  return e_ret_status;

}
 8008a38:	bd08      	pop	{r3, pc}
    __HAL_FLASH_CLEAR_FLAG(FLASH_SR_WRPERR | FLASH_SR_PGAERR | FLASH_SR_PGPERR | FLASH_SR_PGSERR | FLASH_SR_RDERR);
 8008a3a:	4b05      	ldr	r3, [pc, #20]	; (8008a50 <SFU_LL_FLASH_INT_Clear_Error+0x24>)
 8008a3c:	f44f 72f8 	mov.w	r2, #496	; 0x1f0
 8008a40:	60da      	str	r2, [r3, #12]
    if (HAL_FLASH_Lock() == HAL_OK)
 8008a42:	f000 fbb3 	bl	80091ac <HAL_FLASH_Lock>
 8008a46:	2800      	cmp	r0, #0
 8008a48:	d1f4      	bne.n	8008a34 <SFU_LL_FLASH_INT_Clear_Error+0x8>
      e_ret_status = SFU_SUCCESS;
 8008a4a:	4802      	ldr	r0, [pc, #8]	; (8008a54 <SFU_LL_FLASH_INT_Clear_Error+0x28>)
  return e_ret_status;
 8008a4c:	e7f4      	b.n	8008a38 <SFU_LL_FLASH_INT_Clear_Error+0xc>
 8008a4e:	bf00      	nop
 8008a50:	40023c00 	.word	0x40023c00
 8008a54:	00122f11 	.word	0x00122f11

08008a58 <SFU_LL_FLASH_INT_Init>:
}
 8008a58:	4800      	ldr	r0, [pc, #0]	; (8008a5c <SFU_LL_FLASH_INT_Init+0x4>)
 8008a5a:	4770      	bx	lr
 8008a5c:	00122f11 	.word	0x00122f11

08008a60 <SFU_LL_FLASH_INT_Write>:
{
 8008a60:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008a64:	460c      	mov	r4, r1
 8008a66:	4616      	mov	r6, r2
 8008a68:	461f      	mov	r7, r3
  uint32_t destination = (uint32_t)pDestination;
 8008a6a:	4688      	mov	r8, r1
  if ((pFlashStatus == NULL) || (pSource == NULL))
 8008a6c:	4605      	mov	r5, r0
 8008a6e:	2800      	cmp	r0, #0
 8008a70:	d033      	beq.n	8008ada <SFU_LL_FLASH_INT_Write+0x7a>
 8008a72:	b392      	cbz	r2, 8008ada <SFU_LL_FLASH_INT_Write+0x7a>
    if ((destination >= SlotHeaderAdd[SLOT_ACTIVE_1 + i]) &&
 8008a74:	482b      	ldr	r0, [pc, #172]	; (8008b24 <SFU_LL_FLASH_INT_Write+0xc4>)
 8008a76:	6840      	ldr	r0, [r0, #4]
 8008a78:	4288      	cmp	r0, r1
 8008a7a:	d816      	bhi.n	8008aaa <SFU_LL_FLASH_INT_Write+0x4a>
        ((destination + Length) <= (SlotHeaderAdd[SLOT_ACTIVE_1 + i] + SFU_IMG_IMAGE_OFFSET)))
 8008a7c:	441c      	add	r4, r3
 8008a7e:	f500 7000 	add.w	r0, r0, #512	; 0x200
    if ((destination >= SlotHeaderAdd[SLOT_ACTIVE_1 + i]) &&
 8008a82:	4284      	cmp	r4, r0
 8008a84:	d811      	bhi.n	8008aaa <SFU_LL_FLASH_INT_Write+0x4a>
  if ((inside_header == 1U) && (Length != 0U))
 8008a86:	b183      	cbz	r3, 8008aaa <SFU_LL_FLASH_INT_Write+0x4a>
    SE_ErrorStatus se_ret_status = SE_SFU_IMG_Write(&se_status, (uint8_t *)destination, pSource, Length);
 8008a88:	a801      	add	r0, sp, #4
 8008a8a:	f7fd f8f3 	bl	8005c74 <SE_SFU_IMG_Write>
    if (se_ret_status == SE_SUCCESS)
 8008a8e:	4b26      	ldr	r3, [pc, #152]	; (8008b28 <SFU_LL_FLASH_INT_Write+0xc8>)
      *pFlashStatus = SFU_FLASH_ERROR;
 8008a90:	4c26      	ldr	r4, [pc, #152]	; (8008b2c <SFU_LL_FLASH_INT_Write+0xcc>)
 8008a92:	4298      	cmp	r0, r3
 8008a94:	f641 70e1 	movw	r0, #8161	; 0x1fe1
 8008a98:	bf0e      	itee	eq
 8008a9a:	2305      	moveq	r3, #5
 8008a9c:	2300      	movne	r3, #0
 8008a9e:	4604      	movne	r4, r0
        *pFlashStatus = SFU_FLASH_ERR_HAL;
 8008aa0:	702b      	strb	r3, [r5, #0]
}
 8008aa2:	4620      	mov	r0, r4
 8008aa4:	b003      	add	sp, #12
 8008aa6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    *pFlashStatus = SFU_FLASH_ERROR;
 8008aaa:	2300      	movs	r3, #0
 8008aac:	702b      	strb	r3, [r5, #0]
    e_ret_status = SFU_LL_FLASH_INT_Clear_Error();
 8008aae:	f7ff ffbd 	bl	8008a2c <SFU_LL_FLASH_INT_Clear_Error>
    if (e_ret_status == SFU_SUCCESS)
 8008ab2:	4b1e      	ldr	r3, [pc, #120]	; (8008b2c <SFU_LL_FLASH_INT_Write+0xcc>)
 8008ab4:	4298      	cmp	r0, r3
    e_ret_status = SFU_LL_FLASH_INT_Clear_Error();
 8008ab6:	4604      	mov	r4, r0
    if (e_ret_status == SFU_SUCCESS)
 8008ab8:	d1f3      	bne.n	8008aa2 <SFU_LL_FLASH_INT_Write+0x42>
      if (HAL_FLASH_Unlock() != HAL_OK)
 8008aba:	f000 fb65 	bl	8009188 <HAL_FLASH_Unlock>
 8008abe:	4681      	mov	r9, r0
 8008ac0:	b970      	cbnz	r0, 8008ae0 <SFU_LL_FLASH_INT_Write+0x80>
 8008ac2:	4437      	add	r7, r6
        for (i = 0U; (i < Length) && (e_ret_status == SFU_SUCCESS); i += sizeof(SFU_LL_FLASH_write_t))
 8008ac4:	46a2      	mov	sl, r4
            *pFlashStatus = SFU_FLASH_ERR_WRITING;
 8008ac6:	f04f 0b03 	mov.w	fp, #3
        for (i = 0U; (i < Length) && (e_ret_status == SFU_SUCCESS); i += sizeof(SFU_LL_FLASH_write_t))
 8008aca:	42be      	cmp	r6, r7
 8008acc:	d113      	bne.n	8008af6 <SFU_LL_FLASH_INT_Write+0x96>
        if (HAL_FLASH_Lock() != HAL_OK)
 8008ace:	f000 fb6d 	bl	80091ac <HAL_FLASH_Lock>
 8008ad2:	2800      	cmp	r0, #0
 8008ad4:	d0e5      	beq.n	8008aa2 <SFU_LL_FLASH_INT_Write+0x42>
          *pFlashStatus = SFU_FLASH_ERR_HAL;
 8008ad6:	2301      	movs	r3, #1
 8008ad8:	702b      	strb	r3, [r5, #0]
    return SFU_ERROR;
 8008ada:	f641 74e1 	movw	r4, #8161	; 0x1fe1
 8008ade:	e7e0      	b.n	8008aa2 <SFU_LL_FLASH_INT_Write+0x42>
        *pFlashStatus = SFU_FLASH_ERR_HAL;
 8008ae0:	2301      	movs	r3, #1
 8008ae2:	e7dd      	b.n	8008aa0 <SFU_LL_FLASH_INT_Write+0x40>
              *pFlashStatus = SFU_FLASH_SUCCESS;
 8008ae4:	2305      	movs	r3, #5
              destination = destination + sizeof(SFU_LL_FLASH_write_t);
 8008ae6:	f108 0801 	add.w	r8, r8, #1
              *pFlashStatus = SFU_FLASH_SUCCESS;
 8008aea:	702b      	strb	r3, [r5, #0]
        for (i = 0U; (i < Length) && (e_ret_status == SFU_SUCCESS); i += sizeof(SFU_LL_FLASH_write_t))
 8008aec:	3601      	adds	r6, #1
 8008aee:	e7ec      	b.n	8008aca <SFU_LL_FLASH_INT_Write+0x6a>
            *pFlashStatus = SFU_FLASH_ERR_WRITING;
 8008af0:	f885 b000 	strb.w	fp, [r5]
 8008af4:	e012      	b.n	8008b1c <SFU_LL_FLASH_INT_Write+0xbc>
        for (i = 0U; (i < Length) && (e_ret_status == SFU_SUCCESS); i += sizeof(SFU_LL_FLASH_write_t))
 8008af6:	4554      	cmp	r4, sl
 8008af8:	d1e9      	bne.n	8008ace <SFU_LL_FLASH_INT_Write+0x6e>
          *pFlashStatus = SFU_FLASH_ERROR;
 8008afa:	f885 9000 	strb.w	r9, [r5]
          if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_BYTE, destination, *((uint8_t *)(source + i))) == HAL_OK)
 8008afe:	2300      	movs	r3, #0
 8008b00:	7832      	ldrb	r2, [r6, #0]
 8008b02:	4641      	mov	r1, r8
 8008b04:	4618      	mov	r0, r3
 8008b06:	f000 fb9f 	bl	8009248 <HAL_FLASH_Program>
 8008b0a:	2800      	cmp	r0, #0
 8008b0c:	d1f0      	bne.n	8008af0 <SFU_LL_FLASH_INT_Write+0x90>
            if (*(uint8_t *)destination != *(uint8_t *)(source + i))
 8008b0e:	f898 2000 	ldrb.w	r2, [r8]
 8008b12:	7833      	ldrb	r3, [r6, #0]
 8008b14:	429a      	cmp	r2, r3
 8008b16:	d0e5      	beq.n	8008ae4 <SFU_LL_FLASH_INT_Write+0x84>
              *pFlashStatus = SFU_FLASH_ERR_WRITINGCTRL;
 8008b18:	2304      	movs	r3, #4
 8008b1a:	702b      	strb	r3, [r5, #0]
            e_ret_status = SFU_ERROR;
 8008b1c:	f641 74e1 	movw	r4, #8161	; 0x1fe1
 8008b20:	e7e4      	b.n	8008aec <SFU_LL_FLASH_INT_Write+0x8c>
 8008b22:	bf00      	nop
 8008b24:	0800b190 	.word	0x0800b190
 8008b28:	0012310f 	.word	0x0012310f
 8008b2c:	00122f11 	.word	0x00122f11

08008b30 <SFU_LL_FLASH_INT_Read>:
    if ((source >= SlotHeaderAdd[SLOT_ACTIVE_1 + i]) &&
 8008b30:	4b0e      	ldr	r3, [pc, #56]	; (8008b6c <SFU_LL_FLASH_INT_Read+0x3c>)
 8008b32:	685b      	ldr	r3, [r3, #4]
 8008b34:	428b      	cmp	r3, r1
{
 8008b36:	b513      	push	{r0, r1, r4, lr}
    if ((source >= SlotHeaderAdd[SLOT_ACTIVE_1 + i]) &&
 8008b38:	d814      	bhi.n	8008b64 <SFU_LL_FLASH_INT_Read+0x34>
        ((source + Length) <= (SlotHeaderAdd[SLOT_ACTIVE_1 + i] + SFU_IMG_IMAGE_OFFSET)))
 8008b3a:	188c      	adds	r4, r1, r2
 8008b3c:	f503 7300 	add.w	r3, r3, #512	; 0x200
    if ((source >= SlotHeaderAdd[SLOT_ACTIVE_1 + i]) &&
 8008b40:	429c      	cmp	r4, r3
 8008b42:	d80f      	bhi.n	8008b64 <SFU_LL_FLASH_INT_Read+0x34>
    se_ret_status = SE_SFU_IMG_Read(&se_status, pDestination, (uint8_t *)source, Length);
 8008b44:	4613      	mov	r3, r2
 8008b46:	460a      	mov	r2, r1
 8008b48:	4601      	mov	r1, r0
 8008b4a:	a801      	add	r0, sp, #4
 8008b4c:	f7fd f85a 	bl	8005c04 <SE_SFU_IMG_Read>
  SFU_ErrorStatus e_ret_status = SFU_ERROR;
 8008b50:	4907      	ldr	r1, [pc, #28]	; (8008b70 <SFU_LL_FLASH_INT_Read+0x40>)
 8008b52:	4b08      	ldr	r3, [pc, #32]	; (8008b74 <SFU_LL_FLASH_INT_Read+0x44>)
 8008b54:	f641 72e1 	movw	r2, #8161	; 0x1fe1
 8008b58:	4288      	cmp	r0, r1
 8008b5a:	bf18      	it	ne
 8008b5c:	4613      	movne	r3, r2
}
 8008b5e:	4618      	mov	r0, r3
 8008b60:	b002      	add	sp, #8
 8008b62:	bd10      	pop	{r4, pc}
    (void) memcpy(pDestination, (uint8_t *)source, Length);
 8008b64:	f001 f9b8 	bl	8009ed8 <memcpy>
    e_ret_status = SFU_SUCCESS;
 8008b68:	4b02      	ldr	r3, [pc, #8]	; (8008b74 <SFU_LL_FLASH_INT_Read+0x44>)
 8008b6a:	e7f8      	b.n	8008b5e <SFU_LL_FLASH_INT_Read+0x2e>
 8008b6c:	0800b190 	.word	0x0800b190
 8008b70:	0012310f 	.word	0x0012310f
 8008b74:	00122f11 	.word	0x00122f11

08008b78 <SFU_LL_FLASH_INT_Compare>:
{
 8008b78:	b530      	push	{r4, r5, lr}
  for ( i = 0U; i < Length; i += 4U)
 8008b7a:	2400      	movs	r4, #0
 8008b7c:	429c      	cmp	r4, r3
 8008b7e:	d301      	bcc.n	8008b84 <SFU_LL_FLASH_INT_Compare+0xc>
  return SFU_SUCCESS;
 8008b80:	4805      	ldr	r0, [pc, #20]	; (8008b98 <SFU_LL_FLASH_INT_Compare+0x20>)
}
 8008b82:	bd30      	pop	{r4, r5, pc}
    if ((*(uint32_t *)(flash + i) != Pattern1) &&  (*(uint32_t *)(flash + i) != Pattern2))
 8008b84:	5905      	ldr	r5, [r0, r4]
 8008b86:	428d      	cmp	r5, r1
 8008b88:	d001      	beq.n	8008b8e <SFU_LL_FLASH_INT_Compare+0x16>
 8008b8a:	4295      	cmp	r5, r2
 8008b8c:	d101      	bne.n	8008b92 <SFU_LL_FLASH_INT_Compare+0x1a>
  for ( i = 0U; i < Length; i += 4U)
 8008b8e:	3404      	adds	r4, #4
 8008b90:	e7f4      	b.n	8008b7c <SFU_LL_FLASH_INT_Compare+0x4>
      return SFU_ERROR;
 8008b92:	f641 70e1 	movw	r0, #8161	; 0x1fe1
 8008b96:	e7f4      	b.n	8008b82 <SFU_LL_FLASH_INT_Compare+0xa>
 8008b98:	00122f11 	.word	0x00122f11

08008b9c <SFU_LL_FLASH_INT_GetSector>:
{
 8008b9c:	b510      	push	{r4, lr}
  while (Add >= FlashSectorsAddress[sector + 1U])
 8008b9e:	4c05      	ldr	r4, [pc, #20]	; (8008bb4 <SFU_LL_FLASH_INT_GetSector+0x18>)
{
 8008ba0:	4602      	mov	r2, r0
  uint32_t sector = 0U;
 8008ba2:	2300      	movs	r3, #0
  while (Add >= FlashSectorsAddress[sector + 1U])
 8008ba4:	4618      	mov	r0, r3
 8008ba6:	3301      	adds	r3, #1
 8008ba8:	f854 1023 	ldr.w	r1, [r4, r3, lsl #2]
 8008bac:	4291      	cmp	r1, r2
 8008bae:	d9f9      	bls.n	8008ba4 <SFU_LL_FLASH_INT_GetSector+0x8>
}
 8008bb0:	bd10      	pop	{r4, pc}
 8008bb2:	bf00      	nop
 8008bb4:	20001008 	.word	0x20001008

08008bb8 <SFU_LL_FLASH_INT_Erase_Size>:
{
 8008bb8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008bbc:	b087      	sub	sp, #28
  uint32_t sector_error = 0U;
 8008bbe:	2300      	movs	r3, #0
{
 8008bc0:	4689      	mov	r9, r1
 8008bc2:	4614      	mov	r4, r2
  uint32_t sector_error = 0U;
 8008bc4:	9300      	str	r3, [sp, #0]
  if (pFlashStatus == NULL)
 8008bc6:	4606      	mov	r6, r0
 8008bc8:	b3a8      	cbz	r0, 8008c36 <SFU_LL_FLASH_INT_Erase_Size+0x7e>
  *pFlashStatus = SFU_FLASH_SUCCESS;
 8008bca:	2305      	movs	r3, #5
 8008bcc:	7003      	strb	r3, [r0, #0]
  e_ret_status = SFU_LL_FLASH_INT_Clear_Error();
 8008bce:	f7ff ff2d 	bl	8008a2c <SFU_LL_FLASH_INT_Clear_Error>
  if (e_ret_status == SFU_SUCCESS)
 8008bd2:	4b1d      	ldr	r3, [pc, #116]	; (8008c48 <SFU_LL_FLASH_INT_Erase_Size+0x90>)
 8008bd4:	4298      	cmp	r0, r3
  e_ret_status = SFU_LL_FLASH_INT_Clear_Error();
 8008bd6:	4605      	mov	r5, r0
  if (e_ret_status == SFU_SUCCESS)
 8008bd8:	d132      	bne.n	8008c40 <SFU_LL_FLASH_INT_Erase_Size+0x88>
    if (HAL_FLASH_Unlock() == HAL_OK)
 8008bda:	f000 fad5 	bl	8009188 <HAL_FLASH_Unlock>
 8008bde:	4680      	mov	r8, r0
 8008be0:	bb60      	cbnz	r0, 8008c3c <SFU_LL_FLASH_INT_Erase_Size+0x84>
      first_sector = SFU_LL_FLASH_INT_GetSector(start);
 8008be2:	4648      	mov	r0, r9
 8008be4:	f7ff ffda 	bl	8008b9c <SFU_LL_FLASH_INT_GetSector>
 8008be8:	4607      	mov	r7, r0
      nb_sectors = SFU_LL_FLASH_INT_GetSector(start + length - 1U) - first_sector + 1U;
 8008bea:	1e60      	subs	r0, r4, #1
 8008bec:	4448      	add	r0, r9
 8008bee:	f7ff ffd5 	bl	8008b9c <SFU_LL_FLASH_INT_GetSector>
      p_erase_init.TypeErase     = FLASH_TYPEERASE_SECTORS;
 8008bf2:	f8cd 8004 	str.w	r8, [sp, #4]
      nb_sectors = SFU_LL_FLASH_INT_GetSector(start + length - 1U) - first_sector + 1U;
 8008bf6:	1c44      	adds	r4, r0, #1
      p_erase_init.VoltageRange  = FLASH_VOLTAGE_RANGE_3;
 8008bf8:	f04f 0802 	mov.w	r8, #2
      nb_sectors = SFU_LL_FLASH_INT_GetSector(start + length - 1U) - first_sector + 1U;
 8008bfc:	1be4      	subs	r4, r4, r7
      p_erase_init.VoltageRange  = FLASH_VOLTAGE_RANGE_3;
 8008bfe:	f8cd 8014 	str.w	r8, [sp, #20]
        chunk_nb_sectors = (nb_sectors >= NB_PAGE_SECTOR_PER_ERASE) ? NB_PAGE_SECTOR_PER_ERASE : nb_sectors;
 8008c02:	2c02      	cmp	r4, #2
 8008c04:	4623      	mov	r3, r4
        if (HAL_FLASHEx_Erase(&p_erase_init, &sector_error) != HAL_OK)
 8008c06:	4669      	mov	r1, sp
        chunk_nb_sectors = (nb_sectors >= NB_PAGE_SECTOR_PER_ERASE) ? NB_PAGE_SECTOR_PER_ERASE : nb_sectors;
 8008c08:	bf28      	it	cs
 8008c0a:	2302      	movcs	r3, #2
        if (HAL_FLASHEx_Erase(&p_erase_init, &sector_error) != HAL_OK)
 8008c0c:	a801      	add	r0, sp, #4
        p_erase_init.NbSectors = chunk_nb_sectors;
 8008c0e:	e9cd 7303 	strd	r7, r3, [sp, #12]
        nb_sectors -= chunk_nb_sectors;
 8008c12:	1ae4      	subs	r4, r4, r3
        first_sector += chunk_nb_sectors;
 8008c14:	441f      	add	r7, r3
        if (HAL_FLASHEx_Erase(&p_erase_init, &sector_error) != HAL_OK)
 8008c16:	f000 fbdb 	bl	80093d0 <HAL_FLASHEx_Erase>
 8008c1a:	b118      	cbz	r0, 8008c24 <SFU_LL_FLASH_INT_Erase_Size+0x6c>
          *pFlashStatus = SFU_FLASH_ERR_ERASE;
 8008c1c:	f886 8000 	strb.w	r8, [r6]
          e_ret_status = SFU_ERROR;
 8008c20:	f641 75e1 	movw	r5, #8161	; 0x1fe1
        SFU_LL_SECU_IWDG_Refresh(); /* calling this function which checks the compiler switch */
 8008c24:	f000 f86a 	bl	8008cfc <SFU_LL_SECU_IWDG_Refresh>
      } while (nb_sectors > 0U);
 8008c28:	2c00      	cmp	r4, #0
 8008c2a:	d1ea      	bne.n	8008c02 <SFU_LL_FLASH_INT_Erase_Size+0x4a>
      if (HAL_FLASH_Lock() != HAL_OK)
 8008c2c:	f000 fabe 	bl	80091ac <HAL_FLASH_Lock>
 8008c30:	b130      	cbz	r0, 8008c40 <SFU_LL_FLASH_INT_Erase_Size+0x88>
        *pFlashStatus = SFU_FLASH_ERR_HAL;
 8008c32:	2301      	movs	r3, #1
 8008c34:	7033      	strb	r3, [r6, #0]
    return SFU_ERROR;
 8008c36:	f641 75e1 	movw	r5, #8161	; 0x1fe1
 8008c3a:	e001      	b.n	8008c40 <SFU_LL_FLASH_INT_Erase_Size+0x88>
      *pFlashStatus = SFU_FLASH_ERR_HAL;
 8008c3c:	2301      	movs	r3, #1
 8008c3e:	7033      	strb	r3, [r6, #0]
}
 8008c40:	4628      	mov	r0, r5
 8008c42:	b007      	add	sp, #28
 8008c44:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008c48:	00122f11 	.word	0x00122f11

08008c4c <NMI_Handler>:
  * @param  None.
  * @retval None.
  */
void NMI_Handler(void)
{
  while (1 == 1)
 8008c4c:	e7fe      	b.n	8008c4c <NMI_Handler>

08008c4e <HardFault_Handler>:
  * @param  None.
  * @retval None.
  */
void HardFault_Handler(void)
{
  SFU_EXCPT_IrqExceptionHandler(SFU_EXCPT_HARD_FAULT);
 8008c4e:	2002      	movs	r0, #2
 8008c50:	f7fe bb80 	b.w	8007354 <SFU_EXCPT_IrqExceptionHandler>

08008c54 <SFU_LL_SECU_CheckApplyStaticProtections>:
  *         flash sections in order to maximize the security level for the specific MCU.
  * @retval uint32_t CRC (returned value is the combination of all the applied protections.
  *         If different from SFU_STD_PROTECTION_ALL, 1 or more protections cannot be applied)
  */
SFU_ErrorStatus SFU_LL_SECU_CheckApplyStaticProtections(void)
{
 8008c54:	b510      	push	{r4, lr}
 8008c56:	b088      	sub	sp, #32
  FLASH_OBProgramInitTypeDef flash_option_bytes;
  SFU_BoolTypeDef is_protection_to_be_applied = SFU_FALSE;
  SFU_ErrorStatus e_ret_status = SFU_SUCCESS;

  /* Unlock the Flash to enable the flash control register access *************/
  (void) HAL_FLASH_Unlock();
 8008c58:	f000 fa96 	bl	8009188 <HAL_FLASH_Unlock>


  /* Unlock the Options Bytes *************************************************/
  (void) HAL_FLASH_OB_Unlock();
 8008c5c:	4c11      	ldr	r4, [pc, #68]	; (8008ca4 <SFU_LL_SECU_CheckApplyStaticProtections+0x50>)
 8008c5e:	f000 faaf 	bl	80091c0 <HAL_FLASH_OB_Unlock>

  (void) HAL_FLASHEx_OBGetConfig(&flash_option_bytes);
 8008c62:	a801      	add	r0, sp, #4
 8008c64:	f000 fb48 	bl	80092f8 <HAL_FLASHEx_OBGetConfig>

  /* Check/Apply RDP_Level 1. This is the minimum protection allowed */
  /* if RDP_Level 2 is already applied it's not possible to modify the OptionBytes anymore */
  if (flash_option_bytes.RDPLevel == OB_RDP_LEVEL_2)
 8008c68:	9b05      	ldr	r3, [sp, #20]

  e_ret_status = SFU_SUCCESS;
  if (e_ret_status == SFU_SUCCESS)
  {
    /* Execution stopped if flow control failed */
    FLOW_CONTROL_STEP(uFlowProtectValue, FLOW_STEP_UBE, FLOW_CTRL_UBE);
 8008c6a:	6822      	ldr	r2, [r4, #0]
  if (flash_option_bytes.RDPLevel == OB_RDP_LEVEL_2)
 8008c6c:	2bcc      	cmp	r3, #204	; 0xcc
 8008c6e:	f246 7387 	movw	r3, #26503	; 0x6787
    FLOW_CONTROL_STEP(uFlowProtectValue, FLOW_STEP_UBE, FLOW_CTRL_UBE);
 8008c72:	ea83 0302 	eor.w	r3, r3, r2
 8008c76:	6023      	str	r3, [r4, #0]
 8008c78:	f245 7376 	movw	r3, #22390	; 0x5776
  if (flash_option_bytes.RDPLevel == OB_RDP_LEVEL_2)
 8008c7c:	d106      	bne.n	8008c8c <SFU_LL_SECU_CheckApplyStaticProtections+0x38>
    FLOW_CONTROL_STEP(uFlowProtectValue, FLOW_STEP_UBE, FLOW_CTRL_UBE);
 8008c7e:	429a      	cmp	r2, r3
 8008c80:	d008      	beq.n	8008c94 <SFU_LL_SECU_CheckApplyStaticProtections+0x40>
 8008c82:	f7fe fb8b 	bl	800739c <SFU_EXCPT_Security_Error>
    FLOW_CONTROL_STEP(uFlowProtectValue, FLOW_STEP_RDP, FLOW_CTRL_RDP);
 8008c86:	6822      	ldr	r2, [r4, #0]
 8008c88:	f243 03f1 	movw	r3, #12529	; 0x30f1
 8008c8c:	429a      	cmp	r2, r3
 8008c8e:	d001      	beq.n	8008c94 <SFU_LL_SECU_CheckApplyStaticProtections+0x40>
 8008c90:	f7fe fb84 	bl	800739c <SFU_EXCPT_Security_Error>
  (void) HAL_FLASH_OB_Lock();
 8008c94:	f000 faa6 	bl	80091e4 <HAL_FLASH_OB_Lock>
  (void) HAL_FLASH_Lock();
 8008c98:	f000 fa88 	bl	80091ac <HAL_FLASH_Lock>
}
 8008c9c:	4802      	ldr	r0, [pc, #8]	; (8008ca8 <SFU_LL_SECU_CheckApplyStaticProtections+0x54>)
 8008c9e:	b008      	add	sp, #32
 8008ca0:	bd10      	pop	{r4, pc}
 8008ca2:	bf00      	nop
 8008ca4:	20001000 	.word	0x20001000
 8008ca8:	00122f11 	.word	0x00122f11

08008cac <SFU_LL_SECU_CheckApplyRuntimeProtections>:
}
 8008cac:	4800      	ldr	r0, [pc, #0]	; (8008cb0 <SFU_LL_SECU_CheckApplyRuntimeProtections+0x4>)
 8008cae:	4770      	bx	lr
 8008cb0:	00122f11 	.word	0x00122f11

08008cb4 <SFU_LL_SECU_GetResetSources>:
  if ((__HAL_RCC_GET_FLAG(RCC_FLAG_IWDGRST) != RESET) ||
 8008cb4:	4b0c      	ldr	r3, [pc, #48]	; (8008ce8 <SFU_LL_SECU_GetResetSources+0x34>)
 8008cb6:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8008cb8:	0092      	lsls	r2, r2, #2
 8008cba:	d402      	bmi.n	8008cc2 <SFU_LL_SECU_GetResetSources+0xe>
      (__HAL_RCC_GET_FLAG(RCC_FLAG_WWDGRST) != RESET))
 8008cbc:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  if ((__HAL_RCC_GET_FLAG(RCC_FLAG_IWDGRST) != RESET) ||
 8008cbe:	0051      	lsls	r1, r2, #1
 8008cc0:	d502      	bpl.n	8008cc8 <SFU_LL_SECU_GetResetSources+0x14>
    *peResetpSourceId = SFU_RESET_WDG_RESET;
 8008cc2:	2301      	movs	r3, #1
    *peResetpSourceId = SFU_RESET_UNKNOWN;
 8008cc4:	7003      	strb	r3, [r0, #0]
}
 8008cc6:	4770      	bx	lr
  else if (__HAL_RCC_GET_FLAG(RCC_FLAG_LPWRRST) != RESET)
 8008cc8:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8008cca:	2a00      	cmp	r2, #0
 8008ccc:	da01      	bge.n	8008cd2 <SFU_LL_SECU_GetResetSources+0x1e>
    *peResetpSourceId = SFU_RESET_LOW_POWER;
 8008cce:	2302      	movs	r3, #2
 8008cd0:	e7f8      	b.n	8008cc4 <SFU_LL_SECU_GetResetSources+0x10>
  else if (__HAL_RCC_GET_FLAG(RCC_FLAG_SFTRST) != RESET)
 8008cd2:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8008cd4:	00d2      	lsls	r2, r2, #3
 8008cd6:	d501      	bpl.n	8008cdc <SFU_LL_SECU_GetResetSources+0x28>
    *peResetpSourceId = SFU_RESET_SW_RESET;
 8008cd8:	2305      	movs	r3, #5
 8008cda:	e7f3      	b.n	8008cc4 <SFU_LL_SECU_GetResetSources+0x10>
  else if (__HAL_RCC_GET_FLAG(RCC_FLAG_PINRST) != RESET)
 8008cdc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008cde:	f013 6380 	ands.w	r3, r3, #67108864	; 0x4000000
    *peResetpSourceId = SFU_RESET_HW_RESET;
 8008ce2:	bf18      	it	ne
 8008ce4:	2303      	movne	r3, #3
 8008ce6:	e7ed      	b.n	8008cc4 <SFU_LL_SECU_GetResetSources+0x10>
 8008ce8:	40023800 	.word	0x40023800

08008cec <SFU_LL_SECU_ClearResetSources>:
  __HAL_RCC_CLEAR_RESET_FLAGS();
 8008cec:	4a02      	ldr	r2, [pc, #8]	; (8008cf8 <SFU_LL_SECU_ClearResetSources+0xc>)
 8008cee:	6f53      	ldr	r3, [r2, #116]	; 0x74
 8008cf0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008cf4:	6753      	str	r3, [r2, #116]	; 0x74
}
 8008cf6:	4770      	bx	lr
 8008cf8:	40023800 	.word	0x40023800

08008cfc <SFU_LL_SECU_IWDG_Refresh>:
}
 8008cfc:	4800      	ldr	r0, [pc, #0]	; (8008d00 <SFU_LL_SECU_IWDG_Refresh+0x4>)
 8008cfe:	4770      	bx	lr
 8008d00:	00122f11 	.word	0x00122f11

08008d04 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack       /* set stack pointer */
 8008d04:	f8df d034 	ldr.w	sp, [pc, #52]	; 8008d3c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */
  movs  r1, #0
 8008d08:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8008d0a:	e003      	b.n	8008d14 <LoopCopyDataInit>

08008d0c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8008d0c:	4b0c      	ldr	r3, [pc, #48]	; (8008d40 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8008d0e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8008d10:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8008d12:	3104      	adds	r1, #4

08008d14 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr  r0, =_sdata
 8008d14:	480b      	ldr	r0, [pc, #44]	; (8008d44 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8008d16:	4b0c      	ldr	r3, [pc, #48]	; (8008d48 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8008d18:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8008d1a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8008d1c:	d3f6      	bcc.n	8008d0c <CopyDataInit>
  ldr  r2, =_sbss
 8008d1e:	4a0b      	ldr	r2, [pc, #44]	; (8008d4c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8008d20:	e002      	b.n	8008d28 <LoopFillZerobss>

08008d22 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs  r3, #0
 8008d22:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8008d24:	f842 3b04 	str.w	r3, [r2], #4

08008d28 <LoopFillZerobss>:

LoopFillZerobss:
  ldr  r3, = _ebss
 8008d28:	4b09      	ldr	r3, [pc, #36]	; (8008d50 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8008d2a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8008d2c:	d3f9      	bcc.n	8008d22 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8008d2e:	f000 f8ad 	bl	8008e8c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8008d32:	f001 f89d 	bl	8009e70 <__libc_init_array>
/* Call the application entry point.*/
  bl  main
 8008d36:	f7fd fc75 	bl	8006624 <main>
  bx  lr
 8008d3a:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8008d3c:	2000c000 	.word	0x2000c000
  ldr  r3, =_sidata
 8008d40:	0800c040 	.word	0x0800c040
  ldr  r0, =_sdata
 8008d44:	20001000 	.word	0x20001000
  ldr  r3, =_edata
 8008d48:	200010d8 	.word	0x200010d8
  ldr  r2, =_sbss
 8008d4c:	200010d8 	.word	0x200010d8
  ldr  r3, = _ebss
 8008d50:	200019a4 	.word	0x200019a4

08008d54 <ADC_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8008d54:	e7fe      	b.n	8008d54 <ADC_IRQHandler>
	...

08008d58 <BSP_LED_Init>:
  *          This parameter can be one of the following values:
  *            @arg  LED3
  *            @arg  LED4
  */
void BSP_LED_Init(Led_TypeDef Led)
{
 8008d58:	b500      	push	{lr}
 8008d5a:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef  gpio_init_structure;
  
  LEDx_GPIO_CLK_ENABLE(Led);
 8008d5c:	b9e0      	cbnz	r0, 8008d98 <BSP_LED_Init+0x40>
 8008d5e:	4b16      	ldr	r3, [pc, #88]	; (8008db8 <BSP_LED_Init+0x60>)
 8008d60:	9001      	str	r0, [sp, #4]
 8008d62:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008d64:	f042 0204 	orr.w	r2, r2, #4
 8008d68:	631a      	str	r2, [r3, #48]	; 0x30
 8008d6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008d6c:	f003 0304 	and.w	r3, r3, #4
 8008d70:	9301      	str	r3, [sp, #4]
 8008d72:	9b01      	ldr	r3, [sp, #4]
  /* Configure the GPIO_LED pin */
  gpio_init_structure.Pin   = GPIO_PIN[Led];
 8008d74:	4b11      	ldr	r3, [pc, #68]	; (8008dbc <BSP_LED_Init+0x64>)
 8008d76:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8008d7a:	9303      	str	r3, [sp, #12]
  gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 8008d7c:	2301      	movs	r3, #1
  gpio_init_structure.Pull  = GPIO_PULLUP;
 8008d7e:	e9cd 3304 	strd	r3, r3, [sp, #16]
  gpio_init_structure.Speed = GPIO_SPEED_HIGH;
 8008d82:	2303      	movs	r3, #3
 8008d84:	9306      	str	r3, [sp, #24]
  
  HAL_GPIO_Init(GPIO_PORT[Led], &gpio_init_structure);
 8008d86:	4b0e      	ldr	r3, [pc, #56]	; (8008dc0 <BSP_LED_Init+0x68>)
 8008d88:	a903      	add	r1, sp, #12
 8008d8a:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 8008d8e:	f000 fb6f 	bl	8009470 <HAL_GPIO_Init>
}
 8008d92:	b009      	add	sp, #36	; 0x24
 8008d94:	f85d fb04 	ldr.w	pc, [sp], #4
  LEDx_GPIO_CLK_ENABLE(Led);
 8008d98:	2801      	cmp	r0, #1
 8008d9a:	d1eb      	bne.n	8008d74 <BSP_LED_Init+0x1c>
 8008d9c:	2300      	movs	r3, #0
 8008d9e:	9302      	str	r3, [sp, #8]
 8008da0:	4b05      	ldr	r3, [pc, #20]	; (8008db8 <BSP_LED_Init+0x60>)
 8008da2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008da4:	f042 0210 	orr.w	r2, r2, #16
 8008da8:	631a      	str	r2, [r3, #48]	; 0x30
 8008daa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008dac:	f003 0310 	and.w	r3, r3, #16
 8008db0:	9302      	str	r3, [sp, #8]
 8008db2:	9b02      	ldr	r3, [sp, #8]
 8008db4:	e7de      	b.n	8008d74 <BSP_LED_Init+0x1c>
 8008db6:	bf00      	nop
 8008db8:	40023800 	.word	0x40023800
 8008dbc:	0800b238 	.word	0x0800b238
 8008dc0:	2000104c 	.word	0x2000104c

08008dc4 <BSP_LED_Off>:
  *            @arg  LED3
  *            @arg  LED4
  */
void BSP_LED_Off(Led_TypeDef Led)
{
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_RESET);
 8008dc4:	4b04      	ldr	r3, [pc, #16]	; (8008dd8 <BSP_LED_Off+0x14>)
 8008dc6:	f833 1020 	ldrh.w	r1, [r3, r0, lsl #2]
 8008dca:	4b04      	ldr	r3, [pc, #16]	; (8008ddc <BSP_LED_Off+0x18>)
 8008dcc:	2200      	movs	r2, #0
 8008dce:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 8008dd2:	f000 bc27 	b.w	8009624 <HAL_GPIO_WritePin>
 8008dd6:	bf00      	nop
 8008dd8:	0800b238 	.word	0x0800b238
 8008ddc:	2000104c 	.word	0x2000104c

08008de0 <BSP_LED_Toggle>:
  *            @arg  LED3
  *            @arg  LED4
  */
void BSP_LED_Toggle(Led_TypeDef Led)
{
  HAL_GPIO_TogglePin(GPIO_PORT[Led], GPIO_PIN[Led]);
 8008de0:	4b03      	ldr	r3, [pc, #12]	; (8008df0 <BSP_LED_Toggle+0x10>)
 8008de2:	f833 1020 	ldrh.w	r1, [r3, r0, lsl #2]
 8008de6:	4b03      	ldr	r3, [pc, #12]	; (8008df4 <BSP_LED_Toggle+0x14>)
 8008de8:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 8008dec:	f000 bc1f 	b.w	800962e <HAL_GPIO_TogglePin>
 8008df0:	0800b238 	.word	0x0800b238
 8008df4:	2000104c 	.word	0x2000104c

08008df8 <BSP_PB_Init>:
  *            @arg  BUTTON_MODE_GPIO: Button will be used as simple IO
  *            @arg  BUTTON_MODE_EXTI: Button will be connected to EXTI line 
  *                                    with interrupt generation capability  
  */
void BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 8008df8:	b530      	push	{r4, r5, lr}
 8008dfa:	b087      	sub	sp, #28
  GPIO_InitTypeDef gpio_init_structure;
  
  /* Enable the BUTTON clock */
  WAKEUP_BUTTON_GPIO_CLK_ENABLE();
 8008dfc:	4b1a      	ldr	r3, [pc, #104]	; (8008e68 <BSP_PB_Init+0x70>)
 8008dfe:	2500      	movs	r5, #0
 8008e00:	9500      	str	r5, [sp, #0]
 8008e02:	6b1c      	ldr	r4, [r3, #48]	; 0x30
 8008e04:	f044 0401 	orr.w	r4, r4, #1
 8008e08:	631c      	str	r4, [r3, #48]	; 0x30
 8008e0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008e0c:	f003 0301 	and.w	r3, r3, #1
 8008e10:	9300      	str	r3, [sp, #0]
 8008e12:	9b00      	ldr	r3, [sp, #0]
  
  if(ButtonMode == BUTTON_MODE_GPIO)
 8008e14:	b971      	cbnz	r1, 8008e34 <BSP_PB_Init+0x3c>
  {
    /* Configure Button pin as input */
    gpio_init_structure.Pin = BUTTON_PIN[Button];
 8008e16:	2301      	movs	r3, #1
    gpio_init_structure.Mode = GPIO_MODE_INPUT;
 8008e18:	e9cd 3101 	strd	r3, r1, [sp, #4]
    gpio_init_structure.Pull = GPIO_PULLDOWN;
 8008e1c:	2302      	movs	r3, #2
    gpio_init_structure.Speed = GPIO_SPEED_FAST;
 8008e1e:	e9cd 3303 	strd	r3, r3, [sp, #12]
    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 8008e22:	4b12      	ldr	r3, [pc, #72]	; (8008e6c <BSP_PB_Init+0x74>)
 8008e24:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8008e28:	a901      	add	r1, sp, #4
 8008e2a:	6880      	ldr	r0, [r0, #8]
 8008e2c:	f000 fb20 	bl	8009470 <HAL_GPIO_Init>
    
    /* Enable and set Button EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority((IRQn_Type)(BUTTON_IRQn[Button]), 0x0F, 0x00);
    HAL_NVIC_EnableIRQ((IRQn_Type)(BUTTON_IRQn[Button]));
  }
}
 8008e30:	b007      	add	sp, #28
 8008e32:	bd30      	pop	{r4, r5, pc}
  if(ButtonMode == BUTTON_MODE_EXTI)
 8008e34:	2901      	cmp	r1, #1
 8008e36:	d1fb      	bne.n	8008e30 <BSP_PB_Init+0x38>
    gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008e38:	2202      	movs	r2, #2
 8008e3a:	2303      	movs	r3, #3
 8008e3c:	e9cd 2303 	strd	r2, r3, [sp, #12]
    gpio_init_structure.Mode = GPIO_MODE_IT_RISING;
 8008e40:	4b0b      	ldr	r3, [pc, #44]	; (8008e70 <BSP_PB_Init+0x78>)
 8008e42:	9302      	str	r3, [sp, #8]
    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 8008e44:	4b09      	ldr	r3, [pc, #36]	; (8008e6c <BSP_PB_Init+0x74>)
    gpio_init_structure.Pin = BUTTON_PIN[Button];
 8008e46:	9101      	str	r1, [sp, #4]
    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 8008e48:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8008e4c:	a901      	add	r1, sp, #4
 8008e4e:	6880      	ldr	r0, [r0, #8]
 8008e50:	f000 fb0e 	bl	8009470 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority((IRQn_Type)(BUTTON_IRQn[Button]), 0x0F, 0x00);
 8008e54:	462a      	mov	r2, r5
 8008e56:	210f      	movs	r1, #15
 8008e58:	2006      	movs	r0, #6
 8008e5a:	f000 f89d 	bl	8008f98 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((IRQn_Type)(BUTTON_IRQn[Button]));
 8008e5e:	2006      	movs	r0, #6
 8008e60:	f000 f8cc 	bl	8008ffc <HAL_NVIC_EnableIRQ>
}
 8008e64:	e7e4      	b.n	8008e30 <BSP_PB_Init+0x38>
 8008e66:	bf00      	nop
 8008e68:	40023800 	.word	0x40023800
 8008e6c:	2000104c 	.word	0x2000104c
 8008e70:	10110000 	.word	0x10110000

08008e74 <BSP_PB_GetState>:
  *          This parameter can be one of the following values:
  *            @arg  BUTTON_WAKEUP: Wakeup Push Button 
  * @retval The Button GPIO pin value (GPIO_PIN_RESET = button pressed)
  */
uint32_t BSP_PB_GetState(Button_TypeDef Button)
{
 8008e74:	b508      	push	{r3, lr}
  return HAL_GPIO_ReadPin(BUTTON_PORT[Button], BUTTON_PIN[Button]);
 8008e76:	4b04      	ldr	r3, [pc, #16]	; (8008e88 <BSP_PB_GetState+0x14>)
 8008e78:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8008e7c:	2101      	movs	r1, #1
 8008e7e:	6880      	ldr	r0, [r0, #8]
 8008e80:	f000 fbca 	bl	8009618 <HAL_GPIO_ReadPin>
}
 8008e84:	bd08      	pop	{r3, pc}
 8008e86:	bf00      	nop
 8008e88:	2000104c 	.word	0x2000104c

08008e8c <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8008e8c:	4a03      	ldr	r2, [pc, #12]	; (8008e9c <SystemInit+0x10>)
 8008e8e:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8008e92:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8008e96:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8008e9a:	4770      	bx	lr
 8008e9c:	e000ed00 	.word	0xe000ed00

08008ea0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8008ea0:	b570      	push	{r4, r5, r6, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8008ea2:	4a0e      	ldr	r2, [pc, #56]	; (8008edc <HAL_InitTick+0x3c>)
 8008ea4:	4e0e      	ldr	r6, [pc, #56]	; (8008ee0 <HAL_InitTick+0x40>)
{
 8008ea6:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8008ea8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8008eac:	7830      	ldrb	r0, [r6, #0]
 8008eae:	fbb3 f3f0 	udiv	r3, r3, r0
 8008eb2:	6810      	ldr	r0, [r2, #0]
 8008eb4:	fbb0 f0f3 	udiv	r0, r0, r3
 8008eb8:	f000 f8c0 	bl	800903c <HAL_SYSTICK_Config>
 8008ebc:	4604      	mov	r4, r0
 8008ebe:	b950      	cbnz	r0, 8008ed6 <HAL_InitTick+0x36>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8008ec0:	2d0f      	cmp	r5, #15
 8008ec2:	d808      	bhi.n	8008ed6 <HAL_InitTick+0x36>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8008ec4:	4602      	mov	r2, r0
 8008ec6:	4629      	mov	r1, r5
 8008ec8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008ecc:	f000 f864 	bl	8008f98 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8008ed0:	6075      	str	r5, [r6, #4]
 8008ed2:	4620      	mov	r0, r4
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8008ed4:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 8008ed6:	2001      	movs	r0, #1
 8008ed8:	e7fc      	b.n	8008ed4 <HAL_InitTick+0x34>
 8008eda:	bf00      	nop
 8008edc:	20001064 	.word	0x20001064
 8008ee0:	20001068 	.word	0x20001068

08008ee4 <HAL_Init>:
{
 8008ee4:	b508      	push	{r3, lr}
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8008ee6:	4b0b      	ldr	r3, [pc, #44]	; (8008f14 <HAL_Init+0x30>)
 8008ee8:	681a      	ldr	r2, [r3, #0]
 8008eea:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008eee:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8008ef0:	681a      	ldr	r2, [r3, #0]
 8008ef2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8008ef6:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8008ef8:	681a      	ldr	r2, [r3, #0]
 8008efa:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008efe:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8008f00:	2003      	movs	r0, #3
 8008f02:	f000 f837 	bl	8008f74 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8008f06:	200f      	movs	r0, #15
 8008f08:	f7ff ffca 	bl	8008ea0 <HAL_InitTick>
  HAL_MspInit();
 8008f0c:	f7fd fbd8 	bl	80066c0 <HAL_MspInit>
}
 8008f10:	2000      	movs	r0, #0
 8008f12:	bd08      	pop	{r3, pc}
 8008f14:	40023c00 	.word	0x40023c00

08008f18 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8008f18:	4a03      	ldr	r2, [pc, #12]	; (8008f28 <HAL_IncTick+0x10>)
 8008f1a:	4b04      	ldr	r3, [pc, #16]	; (8008f2c <HAL_IncTick+0x14>)
 8008f1c:	6811      	ldr	r1, [r2, #0]
 8008f1e:	781b      	ldrb	r3, [r3, #0]
 8008f20:	440b      	add	r3, r1
 8008f22:	6013      	str	r3, [r2, #0]
}
 8008f24:	4770      	bx	lr
 8008f26:	bf00      	nop
 8008f28:	20001970 	.word	0x20001970
 8008f2c:	20001068 	.word	0x20001068

08008f30 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8008f30:	4b01      	ldr	r3, [pc, #4]	; (8008f38 <HAL_GetTick+0x8>)
 8008f32:	6818      	ldr	r0, [r3, #0]
}
 8008f34:	4770      	bx	lr
 8008f36:	bf00      	nop
 8008f38:	20001970 	.word	0x20001970

08008f3c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8008f3c:	b538      	push	{r3, r4, r5, lr}
 8008f3e:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8008f40:	f7ff fff6 	bl	8008f30 <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8008f44:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 8008f46:	bf1c      	itt	ne
 8008f48:	4b05      	ldrne	r3, [pc, #20]	; (8008f60 <HAL_Delay+0x24>)
 8008f4a:	781b      	ldrbne	r3, [r3, #0]
  uint32_t tickstart = HAL_GetTick();
 8008f4c:	4605      	mov	r5, r0
    wait += (uint32_t)(uwTickFreq);
 8008f4e:	bf18      	it	ne
 8008f50:	18e4      	addne	r4, r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 8008f52:	f7ff ffed 	bl	8008f30 <HAL_GetTick>
 8008f56:	1b43      	subs	r3, r0, r5
 8008f58:	42a3      	cmp	r3, r4
 8008f5a:	d3fa      	bcc.n	8008f52 <HAL_Delay+0x16>
  {
  }
}
 8008f5c:	bd38      	pop	{r3, r4, r5, pc}
 8008f5e:	bf00      	nop
 8008f60:	20001068 	.word	0x20001068

08008f64 <HAL_SuspendTick>:
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
  /* Disable SysTick Interrupt */
  SysTick->CTRL &= ~SysTick_CTRL_TICKINT_Msk;
 8008f64:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
 8008f68:	6913      	ldr	r3, [r2, #16]
 8008f6a:	f023 0302 	bic.w	r3, r3, #2
 8008f6e:	6113      	str	r3, [r2, #16]
}
 8008f70:	4770      	bx	lr
	...

08008f74 <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8008f74:	4907      	ldr	r1, [pc, #28]	; (8008f94 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8008f76:	68ca      	ldr	r2, [r1, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8008f78:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8008f7c:	0203      	lsls	r3, r0, #8
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8008f7e:	0412      	lsls	r2, r2, #16
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8008f80:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8008f84:	0c12      	lsrs	r2, r2, #16
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8008f86:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8008f88:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8008f8c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8008f90:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8008f92:	4770      	bx	lr
 8008f94:	e000ed00 	.word	0xe000ed00

08008f98 <HAL_NVIC_SetPriority>:
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8008f98:	4b16      	ldr	r3, [pc, #88]	; (8008ff4 <HAL_NVIC_SetPriority+0x5c>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8008f9a:	b530      	push	{r4, r5, lr}
 8008f9c:	68dc      	ldr	r4, [r3, #12]
 8008f9e:	f3c4 2402 	ubfx	r4, r4, #8, #3
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8008fa2:	f1c4 0507 	rsb	r5, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8008fa6:	1d23      	adds	r3, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8008fa8:	2d04      	cmp	r5, #4
 8008faa:	bf28      	it	cs
 8008fac:	2504      	movcs	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8008fae:	2b06      	cmp	r3, #6
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8008fb0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8008fb4:	bf8c      	ite	hi
 8008fb6:	3c03      	subhi	r4, #3
 8008fb8:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8008fba:	fa03 f505 	lsl.w	r5, r3, r5
 8008fbe:	ea21 0105 	bic.w	r1, r1, r5
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8008fc2:	40a3      	lsls	r3, r4
 8008fc4:	ea22 0203 	bic.w	r2, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8008fc8:	40a1      	lsls	r1, r4
  if ((int32_t)(IRQn) >= 0)
 8008fca:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8008fcc:	ea41 0302 	orr.w	r3, r1, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008fd0:	bfac      	ite	ge
 8008fd2:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008fd6:	4a08      	ldrlt	r2, [pc, #32]	; (8008ff8 <HAL_NVIC_SetPriority+0x60>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008fd8:	ea4f 1303 	mov.w	r3, r3, lsl #4
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008fdc:	bfb8      	it	lt
 8008fde:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008fe2:	b2db      	uxtb	r3, r3
 8008fe4:	bfaa      	itet	ge
 8008fe6:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008fea:	5413      	strblt	r3, [r2, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008fec:	f880 3300 	strbge.w	r3, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8008ff0:	bd30      	pop	{r4, r5, pc}
 8008ff2:	bf00      	nop
 8008ff4:	e000ed00 	.word	0xe000ed00
 8008ff8:	e000ed14 	.word	0xe000ed14

08008ffc <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8008ffc:	2800      	cmp	r0, #0
 8008ffe:	db08      	blt.n	8009012 <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8009000:	0942      	lsrs	r2, r0, #5
 8009002:	2301      	movs	r3, #1
 8009004:	f000 001f 	and.w	r0, r0, #31
 8009008:	fa03 f000 	lsl.w	r0, r3, r0
 800900c:	4b01      	ldr	r3, [pc, #4]	; (8009014 <HAL_NVIC_EnableIRQ+0x18>)
 800900e:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8009012:	4770      	bx	lr
 8009014:	e000e100 	.word	0xe000e100

08009018 <HAL_NVIC_SystemReset>:
  __ASM volatile ("dsb 0xF":::"memory");
 8009018:	f3bf 8f4f 	dsb	sy
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 800901c:	4905      	ldr	r1, [pc, #20]	; (8009034 <HAL_NVIC_SystemReset+0x1c>)
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 800901e:	4b06      	ldr	r3, [pc, #24]	; (8009038 <HAL_NVIC_SystemReset+0x20>)
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8009020:	68ca      	ldr	r2, [r1, #12]
 8009022:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8009026:	4313      	orrs	r3, r2
 8009028:	60cb      	str	r3, [r1, #12]
 800902a:	f3bf 8f4f 	dsb	sy
    __NOP();
 800902e:	bf00      	nop
  for(;;)                                                           /* wait until reset */
 8009030:	e7fd      	b.n	800902e <HAL_NVIC_SystemReset+0x16>
 8009032:	bf00      	nop
 8009034:	e000ed00 	.word	0xe000ed00
 8009038:	05fa0004 	.word	0x05fa0004

0800903c <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800903c:	3801      	subs	r0, #1
 800903e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8009042:	d20b      	bcs.n	800905c <HAL_SYSTICK_Config+0x20>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8009044:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009048:	4a05      	ldr	r2, [pc, #20]	; (8009060 <HAL_SYSTICK_Config+0x24>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800904a:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800904c:	21f0      	movs	r1, #240	; 0xf0
 800904e:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8009052:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8009054:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8009056:	6198      	str	r0, [r3, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8009058:	611a      	str	r2, [r3, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800905a:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 800905c:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 800905e:	4770      	bx	lr
 8009060:	e000ed00 	.word	0xe000ed00

08009064 <HAL_CRC_MspInit>:
  UNUSED(hcrc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_CRC_MspInit can be implemented in the user file
   */
}
 8009064:	4770      	bx	lr

08009066 <HAL_CRC_Init>:
{
 8009066:	b510      	push	{r4, lr}
  if (hcrc == NULL)
 8009068:	4604      	mov	r4, r0
 800906a:	b150      	cbz	r0, 8009082 <HAL_CRC_Init+0x1c>
  if (hcrc->State == HAL_CRC_STATE_RESET)
 800906c:	7943      	ldrb	r3, [r0, #5]
 800906e:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8009072:	b913      	cbnz	r3, 800907a <HAL_CRC_Init+0x14>
    hcrc->Lock = HAL_UNLOCKED;
 8009074:	7102      	strb	r2, [r0, #4]
    HAL_CRC_MspInit(hcrc);
 8009076:	f7ff fff5 	bl	8009064 <HAL_CRC_MspInit>
  hcrc->State = HAL_CRC_STATE_READY;
 800907a:	2301      	movs	r3, #1
 800907c:	7163      	strb	r3, [r4, #5]
  return HAL_OK;
 800907e:	2000      	movs	r0, #0
}
 8009080:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8009082:	2001      	movs	r0, #1
 8009084:	e7fc      	b.n	8009080 <HAL_CRC_Init+0x1a>
	...

08009088 <FLASH_Program_DoubleWord>:
{
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8009088:	4909      	ldr	r1, [pc, #36]	; (80090b0 <FLASH_Program_DoubleWord+0x28>)
{
 800908a:	b510      	push	{r4, lr}
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800908c:	690c      	ldr	r4, [r1, #16]
 800908e:	f424 7440 	bic.w	r4, r4, #768	; 0x300
 8009092:	610c      	str	r4, [r1, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 8009094:	690c      	ldr	r4, [r1, #16]
 8009096:	f444 7440 	orr.w	r4, r4, #768	; 0x300
 800909a:	610c      	str	r4, [r1, #16]
  FLASH->CR |= FLASH_CR_PG;
 800909c:	690c      	ldr	r4, [r1, #16]
 800909e:	f044 0401 	orr.w	r4, r4, #1
 80090a2:	610c      	str	r4, [r1, #16]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 80090a4:	6002      	str	r2, [r0, #0]
  __ASM volatile ("isb 0xF":::"memory");
 80090a6:	f3bf 8f6f 	isb	sy
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 80090aa:	6043      	str	r3, [r0, #4]
}
 80090ac:	bd10      	pop	{r4, pc}
 80090ae:	bf00      	nop
 80090b0:	40023c00 	.word	0x40023c00

080090b4 <FLASH_Program_Word>:
{
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80090b4:	4b07      	ldr	r3, [pc, #28]	; (80090d4 <FLASH_Program_Word+0x20>)
 80090b6:	691a      	ldr	r2, [r3, #16]
 80090b8:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80090bc:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 80090be:	691a      	ldr	r2, [r3, #16]
 80090c0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80090c4:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_CR_PG;
 80090c6:	691a      	ldr	r2, [r3, #16]
 80090c8:	f042 0201 	orr.w	r2, r2, #1
 80090cc:	611a      	str	r2, [r3, #16]

  *(__IO uint32_t*)Address = Data;
 80090ce:	6001      	str	r1, [r0, #0]
}
 80090d0:	4770      	bx	lr
 80090d2:	bf00      	nop
 80090d4:	40023c00 	.word	0x40023c00

080090d8 <FLASH_Program_HalfWord>:
{
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80090d8:	4b07      	ldr	r3, [pc, #28]	; (80090f8 <FLASH_Program_HalfWord+0x20>)
 80090da:	691a      	ldr	r2, [r3, #16]
 80090dc:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80090e0:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 80090e2:	691a      	ldr	r2, [r3, #16]
 80090e4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80090e8:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_CR_PG;
 80090ea:	691a      	ldr	r2, [r3, #16]
 80090ec:	f042 0201 	orr.w	r2, r2, #1
 80090f0:	611a      	str	r2, [r3, #16]

  *(__IO uint16_t*)Address = Data;
 80090f2:	8001      	strh	r1, [r0, #0]
}
 80090f4:	4770      	bx	lr
 80090f6:	bf00      	nop
 80090f8:	40023c00 	.word	0x40023c00

080090fc <FLASH_SetErrorCode>:
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 80090fc:	4b20      	ldr	r3, [pc, #128]	; (8009180 <FLASH_SetErrorCode+0x84>)
 80090fe:	68da      	ldr	r2, [r3, #12]
 8009100:	06d0      	lsls	r0, r2, #27
 8009102:	d506      	bpl.n	8009112 <FLASH_SetErrorCode+0x16>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8009104:	491f      	ldr	r1, [pc, #124]	; (8009184 <FLASH_SetErrorCode+0x88>)
 8009106:	69ca      	ldr	r2, [r1, #28]
 8009108:	f042 0210 	orr.w	r2, r2, #16
 800910c:	61ca      	str	r2, [r1, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 800910e:	2210      	movs	r2, #16
 8009110:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 8009112:	68da      	ldr	r2, [r3, #12]
 8009114:	0691      	lsls	r1, r2, #26
 8009116:	d506      	bpl.n	8009126 <FLASH_SetErrorCode+0x2a>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 8009118:	491a      	ldr	r1, [pc, #104]	; (8009184 <FLASH_SetErrorCode+0x88>)
 800911a:	69ca      	ldr	r2, [r1, #28]
 800911c:	f042 0208 	orr.w	r2, r2, #8
 8009120:	61ca      	str	r2, [r1, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 8009122:	2220      	movs	r2, #32
 8009124:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 8009126:	4b16      	ldr	r3, [pc, #88]	; (8009180 <FLASH_SetErrorCode+0x84>)
 8009128:	68da      	ldr	r2, [r3, #12]
 800912a:	0652      	lsls	r2, r2, #25
 800912c:	d506      	bpl.n	800913c <FLASH_SetErrorCode+0x40>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 800912e:	4915      	ldr	r1, [pc, #84]	; (8009184 <FLASH_SetErrorCode+0x88>)
 8009130:	69ca      	ldr	r2, [r1, #28]
 8009132:	f042 0204 	orr.w	r2, r2, #4
 8009136:	61ca      	str	r2, [r1, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 8009138:	2240      	movs	r2, #64	; 0x40
 800913a:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 800913c:	68da      	ldr	r2, [r3, #12]
 800913e:	0610      	lsls	r0, r2, #24
 8009140:	d506      	bpl.n	8009150 <FLASH_SetErrorCode+0x54>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 8009142:	4910      	ldr	r1, [pc, #64]	; (8009184 <FLASH_SetErrorCode+0x88>)
 8009144:	69ca      	ldr	r2, [r1, #28]
 8009146:	f042 0202 	orr.w	r2, r2, #2
 800914a:	61ca      	str	r2, [r1, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 800914c:	2280      	movs	r2, #128	; 0x80
 800914e:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR) 
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR) != RESET)
 8009150:	4b0b      	ldr	r3, [pc, #44]	; (8009180 <FLASH_SetErrorCode+0x84>)
 8009152:	68da      	ldr	r2, [r3, #12]
 8009154:	05d1      	lsls	r1, r2, #23
 8009156:	d507      	bpl.n	8009168 <FLASH_SetErrorCode+0x6c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 8009158:	490a      	ldr	r1, [pc, #40]	; (8009184 <FLASH_SetErrorCode+0x88>)
 800915a:	69ca      	ldr	r2, [r1, #28]
 800915c:	f042 0201 	orr.w	r2, r2, #1
 8009160:	61ca      	str	r2, [r1, #28]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
 8009162:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009166:	60da      	str	r2, [r3, #12]
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 8009168:	68da      	ldr	r2, [r3, #12]
 800916a:	0792      	lsls	r2, r2, #30
 800916c:	d506      	bpl.n	800917c <FLASH_SetErrorCode+0x80>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 800916e:	4905      	ldr	r1, [pc, #20]	; (8009184 <FLASH_SetErrorCode+0x88>)
 8009170:	69ca      	ldr	r2, [r1, #28]
 8009172:	f042 0220 	orr.w	r2, r2, #32
 8009176:	61ca      	str	r2, [r1, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 8009178:	2202      	movs	r2, #2
 800917a:	60da      	str	r2, [r3, #12]
  }
}
 800917c:	4770      	bx	lr
 800917e:	bf00      	nop
 8009180:	40023c00 	.word	0x40023c00
 8009184:	20001974 	.word	0x20001974

08009188 <HAL_FLASH_Unlock>:
  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8009188:	4b06      	ldr	r3, [pc, #24]	; (80091a4 <HAL_FLASH_Unlock+0x1c>)
 800918a:	691a      	ldr	r2, [r3, #16]
 800918c:	2a00      	cmp	r2, #0
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 800918e:	bfbf      	itttt	lt
 8009190:	4a05      	ldrlt	r2, [pc, #20]	; (80091a8 <HAL_FLASH_Unlock+0x20>)
 8009192:	605a      	strlt	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8009194:	f102 3288 	addlt.w	r2, r2, #2290649224	; 0x88888888
 8009198:	605a      	strlt	r2, [r3, #4]
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800919a:	bfba      	itte	lt
 800919c:	6918      	ldrlt	r0, [r3, #16]
  HAL_StatusTypeDef status = HAL_OK;
 800919e:	0fc0      	lsrlt	r0, r0, #31
 80091a0:	2000      	movge	r0, #0
}
 80091a2:	4770      	bx	lr
 80091a4:	40023c00 	.word	0x40023c00
 80091a8:	45670123 	.word	0x45670123

080091ac <HAL_FLASH_Lock>:
  FLASH->CR |= FLASH_CR_LOCK;
 80091ac:	4a03      	ldr	r2, [pc, #12]	; (80091bc <HAL_FLASH_Lock+0x10>)
 80091ae:	6913      	ldr	r3, [r2, #16]
 80091b0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80091b4:	6113      	str	r3, [r2, #16]
}
 80091b6:	2000      	movs	r0, #0
 80091b8:	4770      	bx	lr
 80091ba:	bf00      	nop
 80091bc:	40023c00 	.word	0x40023c00

080091c0 <HAL_FLASH_OB_Unlock>:
  if((FLASH->OPTCR & FLASH_OPTCR_OPTLOCK) != RESET)
 80091c0:	4b06      	ldr	r3, [pc, #24]	; (80091dc <HAL_FLASH_OB_Unlock+0x1c>)
 80091c2:	695a      	ldr	r2, [r3, #20]
 80091c4:	07d2      	lsls	r2, r2, #31
    FLASH->OPTKEYR = FLASH_OPT_KEY1;
 80091c6:	bf41      	itttt	mi
 80091c8:	4a05      	ldrmi	r2, [pc, #20]	; (80091e0 <HAL_FLASH_OB_Unlock+0x20>)
 80091ca:	609a      	strmi	r2, [r3, #8]
    FLASH->OPTKEYR = FLASH_OPT_KEY2;
 80091cc:	f102 3244 	addmi.w	r2, r2, #1145324612	; 0x44444444
  return HAL_OK;  
 80091d0:	2000      	movmi	r0, #0
    FLASH->OPTKEYR = FLASH_OPT_KEY2;
 80091d2:	bf4c      	ite	mi
 80091d4:	609a      	strmi	r2, [r3, #8]
    return HAL_ERROR;
 80091d6:	2001      	movpl	r0, #1
}
 80091d8:	4770      	bx	lr
 80091da:	bf00      	nop
 80091dc:	40023c00 	.word	0x40023c00
 80091e0:	08192a3b 	.word	0x08192a3b

080091e4 <HAL_FLASH_OB_Lock>:
  FLASH->OPTCR |= FLASH_OPTCR_OPTLOCK;
 80091e4:	4a03      	ldr	r2, [pc, #12]	; (80091f4 <HAL_FLASH_OB_Lock+0x10>)
 80091e6:	6953      	ldr	r3, [r2, #20]
 80091e8:	f043 0301 	orr.w	r3, r3, #1
 80091ec:	6153      	str	r3, [r2, #20]
}
 80091ee:	2000      	movs	r0, #0
 80091f0:	4770      	bx	lr
 80091f2:	bf00      	nop
 80091f4:	40023c00 	.word	0x40023c00

080091f8 <FLASH_WaitForLastOperation>:
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80091f8:	4b11      	ldr	r3, [pc, #68]	; (8009240 <FLASH_WaitForLastOperation+0x48>)
{ 
 80091fa:	b570      	push	{r4, r5, r6, lr}
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80091fc:	2200      	movs	r2, #0
{ 
 80091fe:	4604      	mov	r4, r0
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8009200:	61da      	str	r2, [r3, #28]
  tickstart = HAL_GetTick();
 8009202:	f7ff fe95 	bl	8008f30 <HAL_GetTick>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8009206:	4d0f      	ldr	r5, [pc, #60]	; (8009244 <FLASH_WaitForLastOperation+0x4c>)
  tickstart = HAL_GetTick();
 8009208:	4606      	mov	r6, r0
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 800920a:	68eb      	ldr	r3, [r5, #12]
 800920c:	03da      	lsls	r2, r3, #15
 800920e:	d40c      	bmi.n	800922a <FLASH_WaitForLastOperation+0x32>
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 8009210:	68eb      	ldr	r3, [r5, #12]
 8009212:	07db      	lsls	r3, r3, #31
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8009214:	bf44      	itt	mi
 8009216:	2301      	movmi	r3, #1
 8009218:	60eb      	strmi	r3, [r5, #12]
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 800921a:	68e8      	ldr	r0, [r5, #12]
 800921c:	f410 70f9 	ands.w	r0, r0, #498	; 0x1f2
 8009220:	d007      	beq.n	8009232 <FLASH_WaitForLastOperation+0x3a>
    FLASH_SetErrorCode();
 8009222:	f7ff ff6b 	bl	80090fc <FLASH_SetErrorCode>
    return HAL_ERROR;
 8009226:	2001      	movs	r0, #1
 8009228:	e003      	b.n	8009232 <FLASH_WaitForLastOperation+0x3a>
    if(Timeout != HAL_MAX_DELAY)
 800922a:	1c61      	adds	r1, r4, #1
 800922c:	d0ed      	beq.n	800920a <FLASH_WaitForLastOperation+0x12>
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 800922e:	b90c      	cbnz	r4, 8009234 <FLASH_WaitForLastOperation+0x3c>
        return HAL_TIMEOUT;
 8009230:	2003      	movs	r0, #3
}  
 8009232:	bd70      	pop	{r4, r5, r6, pc}
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 8009234:	f7ff fe7c 	bl	8008f30 <HAL_GetTick>
 8009238:	1b80      	subs	r0, r0, r6
 800923a:	42a0      	cmp	r0, r4
 800923c:	d9e5      	bls.n	800920a <FLASH_WaitForLastOperation+0x12>
 800923e:	e7f7      	b.n	8009230 <FLASH_WaitForLastOperation+0x38>
 8009240:	20001974 	.word	0x20001974
 8009244:	40023c00 	.word	0x40023c00

08009248 <HAL_FLASH_Program>:
{
 8009248:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  __HAL_LOCK(&pFlash);
 800924a:	4e20      	ldr	r6, [pc, #128]	; (80092cc <HAL_FLASH_Program+0x84>)
{
 800924c:	9301      	str	r3, [sp, #4]
 800924e:	4614      	mov	r4, r2
  __HAL_LOCK(&pFlash);
 8009250:	7e32      	ldrb	r2, [r6, #24]
 8009252:	2a01      	cmp	r2, #1
{
 8009254:	4607      	mov	r7, r0
 8009256:	460d      	mov	r5, r1
  __HAL_LOCK(&pFlash);
 8009258:	d035      	beq.n	80092c6 <HAL_FLASH_Program+0x7e>
 800925a:	2201      	movs	r2, #1
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800925c:	f24c 3050 	movw	r0, #50000	; 0xc350
  __HAL_LOCK(&pFlash);
 8009260:	7632      	strb	r2, [r6, #24]
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8009262:	f7ff ffc9 	bl	80091f8 <FLASH_WaitForLastOperation>
  if(status == HAL_OK)
 8009266:	b9b8      	cbnz	r0, 8009298 <HAL_FLASH_Program+0x50>
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 8009268:	9b01      	ldr	r3, [sp, #4]
 800926a:	b9cf      	cbnz	r7, 80092a0 <HAL_FLASH_Program+0x58>
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800926c:	4b18      	ldr	r3, [pc, #96]	; (80092d0 <HAL_FLASH_Program+0x88>)
 800926e:	691a      	ldr	r2, [r3, #16]
 8009270:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8009274:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 8009276:	691a      	ldr	r2, [r3, #16]
 8009278:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_CR_PG;
 800927a:	691a      	ldr	r2, [r3, #16]
      FLASH_Program_Byte(Address, (uint8_t) Data);
 800927c:	b2e4      	uxtb	r4, r4
  FLASH->CR |= FLASH_CR_PG;
 800927e:	f042 0201 	orr.w	r2, r2, #1
 8009282:	611a      	str	r2, [r3, #16]
  *(__IO uint8_t*)Address = Data;
 8009284:	702c      	strb	r4, [r5, #0]
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8009286:	f24c 3050 	movw	r0, #50000	; 0xc350
 800928a:	f7ff ffb5 	bl	80091f8 <FLASH_WaitForLastOperation>
    FLASH->CR &= (~FLASH_CR_PG);  
 800928e:	4a10      	ldr	r2, [pc, #64]	; (80092d0 <HAL_FLASH_Program+0x88>)
 8009290:	6913      	ldr	r3, [r2, #16]
 8009292:	f023 0301 	bic.w	r3, r3, #1
 8009296:	6113      	str	r3, [r2, #16]
  __HAL_UNLOCK(&pFlash);
 8009298:	2300      	movs	r3, #0
 800929a:	7633      	strb	r3, [r6, #24]
}
 800929c:	b003      	add	sp, #12
 800929e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 80092a0:	2f01      	cmp	r7, #1
 80092a2:	d104      	bne.n	80092ae <HAL_FLASH_Program+0x66>
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 80092a4:	b2a1      	uxth	r1, r4
 80092a6:	4628      	mov	r0, r5
 80092a8:	f7ff ff16 	bl	80090d8 <FLASH_Program_HalfWord>
 80092ac:	e7eb      	b.n	8009286 <HAL_FLASH_Program+0x3e>
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 80092ae:	2f02      	cmp	r7, #2
 80092b0:	d104      	bne.n	80092bc <HAL_FLASH_Program+0x74>
      FLASH_Program_Word(Address, (uint32_t) Data);
 80092b2:	4621      	mov	r1, r4
 80092b4:	4628      	mov	r0, r5
 80092b6:	f7ff fefd 	bl	80090b4 <FLASH_Program_Word>
 80092ba:	e7e4      	b.n	8009286 <HAL_FLASH_Program+0x3e>
      FLASH_Program_DoubleWord(Address, Data);
 80092bc:	4622      	mov	r2, r4
 80092be:	4628      	mov	r0, r5
 80092c0:	f7ff fee2 	bl	8009088 <FLASH_Program_DoubleWord>
 80092c4:	e7df      	b.n	8009286 <HAL_FLASH_Program+0x3e>
  __HAL_LOCK(&pFlash);
 80092c6:	2002      	movs	r0, #2
 80092c8:	e7e8      	b.n	800929c <HAL_FLASH_Program+0x54>
 80092ca:	bf00      	nop
 80092cc:	20001974 	.word	0x20001974
 80092d0:	40023c00 	.word	0x40023c00

080092d4 <FLASH_MassErase.constprop.0>:
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));
  
  /* If the previous operation is completed, proceed to erase all sectors */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80092d4:	4b07      	ldr	r3, [pc, #28]	; (80092f4 <FLASH_MassErase.constprop.0+0x20>)
 80092d6:	6919      	ldr	r1, [r3, #16]
 80092d8:	f421 7140 	bic.w	r1, r1, #768	; 0x300
 80092dc:	6119      	str	r1, [r3, #16]
  FLASH->CR |= FLASH_CR_MER;
 80092de:	6919      	ldr	r1, [r3, #16]
 80092e0:	f041 0104 	orr.w	r1, r1, #4
 80092e4:	6119      	str	r1, [r3, #16]
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange <<8U);
 80092e6:	691a      	ldr	r2, [r3, #16]
 80092e8:	ea42 2000 	orr.w	r0, r2, r0, lsl #8
 80092ec:	f440 3080 	orr.w	r0, r0, #65536	; 0x10000
 80092f0:	6118      	str	r0, [r3, #16]
}
 80092f2:	4770      	bx	lr
 80092f4:	40023c00 	.word	0x40023c00

080092f8 <HAL_FLASHEx_OBGetConfig>:
  pOBInit->OptionType = OPTIONBYTE_WRP | OPTIONBYTE_RDP | OPTIONBYTE_USER | OPTIONBYTE_BOR;
 80092f8:	230f      	movs	r3, #15
 80092fa:	6003      	str	r3, [r0, #0]
  * @retval uint16_t FLASH Write Protection Option Bytes value
  */
static uint16_t FLASH_OB_GetWRP(void)
{
  /* Return the FLASH write protection Register value */
  return (*(__IO uint16_t *)(OPTCR_BYTE2_ADDRESS));
 80092fc:	4b0a      	ldr	r3, [pc, #40]	; (8009328 <HAL_FLASHEx_OBGetConfig+0x30>)
 80092fe:	8ada      	ldrh	r2, [r3, #22]
 8009300:	b292      	uxth	r2, r2
  pOBInit->WRPSector = (uint32_t)FLASH_OB_GetWRP();
 8009302:	6082      	str	r2, [r0, #8]
  */
static uint8_t FLASH_OB_GetRDP(void)
{
  uint8_t readstatus = OB_RDP_LEVEL_0;

  if((*(__IO uint8_t*)(OPTCR_BYTE1_ADDRESS) == (uint8_t)OB_RDP_LEVEL_2))
 8009304:	7d59      	ldrb	r1, [r3, #21]
 8009306:	29cc      	cmp	r1, #204	; 0xcc
 8009308:	b2ca      	uxtb	r2, r1
 800930a:	d003      	beq.n	8009314 <HAL_FLASHEx_OBGetConfig+0x1c>
  {
    readstatus = OB_RDP_LEVEL_2;
  }
  else if((*(__IO uint8_t*)(OPTCR_BYTE1_ADDRESS) == (uint8_t)OB_RDP_LEVEL_0))
 800930c:	7d5a      	ldrb	r2, [r3, #21]
  {
    readstatus = OB_RDP_LEVEL_0;
  }
  else 
  {
    readstatus = OB_RDP_LEVEL_1;
 800930e:	2aaa      	cmp	r2, #170	; 0xaa
 8009310:	bf18      	it	ne
 8009312:	2255      	movne	r2, #85	; 0x55
  pOBInit->RDPLevel = (uint32_t)FLASH_OB_GetRDP();
 8009314:	6102      	str	r2, [r0, #16]
  return ((uint8_t)(FLASH->OPTCR & 0xE0));
 8009316:	695a      	ldr	r2, [r3, #20]
 8009318:	f022 021f 	bic.w	r2, r2, #31
  pOBInit->USERConfig = (uint8_t)FLASH_OB_GetUser();
 800931c:	7602      	strb	r2, [r0, #24]
  *           - OB_BOR_OFF   : Supply voltage ranges from 1.62 to 2.1 V  
  */
static uint8_t FLASH_OB_GetBOR(void)
{
  /* Return the FLASH BOR level */
  return (uint8_t)(*(__IO uint8_t *)(OPTCR_BYTE0_ADDRESS) & (uint8_t)0x0C);
 800931e:	7d1b      	ldrb	r3, [r3, #20]
  pOBInit->BORLevel = (uint32_t)FLASH_OB_GetBOR();
 8009320:	f003 030c 	and.w	r3, r3, #12
 8009324:	6143      	str	r3, [r0, #20]
}
 8009326:	4770      	bx	lr
 8009328:	40023c00 	.word	0x40023c00

0800932c <FLASH_Erase_Sector>:
  if(VoltageRange == FLASH_VOLTAGE_RANGE_1)
 800932c:	b139      	cbz	r1, 800933e <FLASH_Erase_Sector+0x12>
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_2)
 800932e:	2901      	cmp	r1, #1
 8009330:	d01c      	beq.n	800936c <FLASH_Erase_Sector+0x40>
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 8009332:	2902      	cmp	r1, #2
 8009334:	bf0c      	ite	eq
 8009336:	f44f 7100 	moveq.w	r1, #512	; 0x200
 800933a:	f44f 7140 	movne.w	r1, #768	; 0x300
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800933e:	4b0d      	ldr	r3, [pc, #52]	; (8009374 <FLASH_Erase_Sector+0x48>)
 8009340:	691a      	ldr	r2, [r3, #16]
 8009342:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8009346:	611a      	str	r2, [r3, #16]
  FLASH->CR |= tmp_psize;
 8009348:	691a      	ldr	r2, [r3, #16]
 800934a:	4311      	orrs	r1, r2
 800934c:	6119      	str	r1, [r3, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 800934e:	691a      	ldr	r2, [r3, #16]
 8009350:	f022 0278 	bic.w	r2, r2, #120	; 0x78
 8009354:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 8009356:	691a      	ldr	r2, [r3, #16]
 8009358:	ea42 00c0 	orr.w	r0, r2, r0, lsl #3
 800935c:	f040 0002 	orr.w	r0, r0, #2
 8009360:	6118      	str	r0, [r3, #16]
  FLASH->CR |= FLASH_CR_STRT;
 8009362:	691a      	ldr	r2, [r3, #16]
 8009364:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8009368:	611a      	str	r2, [r3, #16]
}
 800936a:	4770      	bx	lr
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 800936c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8009370:	e7e5      	b.n	800933e <FLASH_Erase_Sector+0x12>
 8009372:	bf00      	nop
 8009374:	40023c00 	.word	0x40023c00

08009378 <FLASH_FlushCaches>:
  * @retval None
  */
void FLASH_FlushCaches(void)
{
  /* Flush instruction cache  */
  if(READ_BIT(FLASH->ACR, FLASH_ACR_ICEN)!= RESET)
 8009378:	4b14      	ldr	r3, [pc, #80]	; (80093cc <FLASH_FlushCaches+0x54>)
 800937a:	681a      	ldr	r2, [r3, #0]
 800937c:	0591      	lsls	r1, r2, #22
 800937e:	d50f      	bpl.n	80093a0 <FLASH_FlushCaches+0x28>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8009380:	681a      	ldr	r2, [r3, #0]
 8009382:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8009386:	601a      	str	r2, [r3, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8009388:	681a      	ldr	r2, [r3, #0]
 800938a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800938e:	601a      	str	r2, [r3, #0]
 8009390:	681a      	ldr	r2, [r3, #0]
 8009392:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8009396:	601a      	str	r2, [r3, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8009398:	681a      	ldr	r2, [r3, #0]
 800939a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800939e:	601a      	str	r2, [r3, #0]
  }
  
  /* Flush data cache */
  if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 80093a0:	4b0a      	ldr	r3, [pc, #40]	; (80093cc <FLASH_FlushCaches+0x54>)
 80093a2:	681a      	ldr	r2, [r3, #0]
 80093a4:	0552      	lsls	r2, r2, #21
 80093a6:	d50f      	bpl.n	80093c8 <FLASH_FlushCaches+0x50>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 80093a8:	681a      	ldr	r2, [r3, #0]
 80093aa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80093ae:	601a      	str	r2, [r3, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 80093b0:	681a      	ldr	r2, [r3, #0]
 80093b2:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80093b6:	601a      	str	r2, [r3, #0]
 80093b8:	681a      	ldr	r2, [r3, #0]
 80093ba:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80093be:	601a      	str	r2, [r3, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 80093c0:	681a      	ldr	r2, [r3, #0]
 80093c2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80093c6:	601a      	str	r2, [r3, #0]
  }
}
 80093c8:	4770      	bx	lr
 80093ca:	bf00      	nop
 80093cc:	40023c00 	.word	0x40023c00

080093d0 <HAL_FLASHEx_Erase>:
{
 80093d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  __HAL_LOCK(&pFlash);
 80093d4:	f8df 8094 	ldr.w	r8, [pc, #148]	; 800946c <HAL_FLASHEx_Erase+0x9c>
 80093d8:	f898 3018 	ldrb.w	r3, [r8, #24]
 80093dc:	2b01      	cmp	r3, #1
{
 80093de:	4605      	mov	r5, r0
 80093e0:	460f      	mov	r7, r1
  __HAL_LOCK(&pFlash);
 80093e2:	d03f      	beq.n	8009464 <HAL_FLASHEx_Erase+0x94>
 80093e4:	2301      	movs	r3, #1
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80093e6:	f24c 3050 	movw	r0, #50000	; 0xc350
  __HAL_LOCK(&pFlash);
 80093ea:	f888 3018 	strb.w	r3, [r8, #24]
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80093ee:	f7ff ff03 	bl	80091f8 <FLASH_WaitForLastOperation>
  if(status == HAL_OK)
 80093f2:	4604      	mov	r4, r0
 80093f4:	b9a0      	cbnz	r0, 8009420 <HAL_FLASHEx_Erase+0x50>
    *SectorError = 0xFFFFFFFFU;
 80093f6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80093fa:	603b      	str	r3, [r7, #0]
    if(pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 80093fc:	682b      	ldr	r3, [r5, #0]
 80093fe:	2b01      	cmp	r3, #1
 8009400:	d114      	bne.n	800942c <HAL_FLASHEx_Erase+0x5c>
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 8009402:	7c28      	ldrb	r0, [r5, #16]
 8009404:	f7ff ff66 	bl	80092d4 <FLASH_MassErase.constprop.0>
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8009408:	f24c 3050 	movw	r0, #50000	; 0xc350
 800940c:	f7ff fef4 	bl	80091f8 <FLASH_WaitForLastOperation>
      FLASH->CR &= (~FLASH_MER_BIT);
 8009410:	4a15      	ldr	r2, [pc, #84]	; (8009468 <HAL_FLASHEx_Erase+0x98>)
 8009412:	6913      	ldr	r3, [r2, #16]
 8009414:	f023 0304 	bic.w	r3, r3, #4
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8009418:	4604      	mov	r4, r0
      FLASH->CR &= (~FLASH_MER_BIT);
 800941a:	6113      	str	r3, [r2, #16]
    FLASH_FlushCaches();    
 800941c:	f7ff ffac 	bl	8009378 <FLASH_FlushCaches>
  __HAL_UNLOCK(&pFlash);
 8009420:	2300      	movs	r3, #0
 8009422:	f888 3018 	strb.w	r3, [r8, #24]
}
 8009426:	4620      	mov	r0, r4
 8009428:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 800942c:	68ae      	ldr	r6, [r5, #8]
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 800942e:	f8df 9038 	ldr.w	r9, [pc, #56]	; 8009468 <HAL_FLASHEx_Erase+0x98>
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8009432:	e9d5 2302 	ldrd	r2, r3, [r5, #8]
 8009436:	4413      	add	r3, r2
 8009438:	42b3      	cmp	r3, r6
 800943a:	d9ef      	bls.n	800941c <HAL_FLASHEx_Erase+0x4c>
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 800943c:	7c29      	ldrb	r1, [r5, #16]
 800943e:	4630      	mov	r0, r6
 8009440:	f7ff ff74 	bl	800932c <FLASH_Erase_Sector>
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8009444:	f24c 3050 	movw	r0, #50000	; 0xc350
 8009448:	f7ff fed6 	bl	80091f8 <FLASH_WaitForLastOperation>
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 800944c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8009450:	f023 037a 	bic.w	r3, r3, #122	; 0x7a
 8009454:	f8c9 3010 	str.w	r3, [r9, #16]
        if(status != HAL_OK) 
 8009458:	b110      	cbz	r0, 8009460 <HAL_FLASHEx_Erase+0x90>
          *SectorError = index;
 800945a:	603e      	str	r6, [r7, #0]
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800945c:	4604      	mov	r4, r0
          break;
 800945e:	e7dd      	b.n	800941c <HAL_FLASHEx_Erase+0x4c>
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8009460:	3601      	adds	r6, #1
 8009462:	e7e6      	b.n	8009432 <HAL_FLASHEx_Erase+0x62>
  __HAL_LOCK(&pFlash);
 8009464:	2402      	movs	r4, #2
 8009466:	e7de      	b.n	8009426 <HAL_FLASHEx_Erase+0x56>
 8009468:	40023c00 	.word	0x40023c00
 800946c:	20001974 	.word	0x20001974

08009470 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8009470:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8009474:	f8df 919c 	ldr.w	r9, [pc, #412]	; 8009614 <HAL_GPIO_Init+0x1a4>
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8009478:	4a64      	ldr	r2, [pc, #400]	; (800960c <HAL_GPIO_Init+0x19c>)
  for(position = 0U; position < GPIO_NUMBER; position++)
 800947a:	2300      	movs	r3, #0
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800947c:	680d      	ldr	r5, [r1, #0]
    ioposition = 0x01U << position;
 800947e:	2401      	movs	r4, #1
 8009480:	409c      	lsls	r4, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8009482:	ea04 0c05 	and.w	ip, r4, r5
    if(iocurrent == ioposition)
 8009486:	43ac      	bics	r4, r5
 8009488:	f040 80ac 	bne.w	80095e4 <HAL_GPIO_Init+0x174>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800948c:	684d      	ldr	r5, [r1, #4]
 800948e:	f005 0403 	and.w	r4, r5, #3
 8009492:	ea4f 0843 	mov.w	r8, r3, lsl #1
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8009496:	2603      	movs	r6, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8009498:	1e67      	subs	r7, r4, #1
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800949a:	fa06 f608 	lsl.w	r6, r6, r8
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800949e:	2f01      	cmp	r7, #1
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80094a0:	ea6f 0606 	mvn.w	r6, r6
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80094a4:	d834      	bhi.n	8009510 <HAL_GPIO_Init+0xa0>
        temp = GPIOx->OSPEEDR; 
 80094a6:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80094a8:	ea07 0e06 	and.w	lr, r7, r6
        temp |= (GPIO_Init->Speed << (position * 2U));
 80094ac:	68cf      	ldr	r7, [r1, #12]
 80094ae:	fa07 f708 	lsl.w	r7, r7, r8
 80094b2:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OSPEEDR = temp;
 80094b6:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 80094b8:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80094ba:	ea27 0e0c 	bic.w	lr, r7, ip
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80094be:	f3c5 1700 	ubfx	r7, r5, #4, #1
 80094c2:	409f      	lsls	r7, r3
 80094c4:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OTYPER = temp;
 80094c8:	6047      	str	r7, [r0, #4]
        temp = GPIOx->PUPDR;
 80094ca:	68c7      	ldr	r7, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80094cc:	ea07 0e06 	and.w	lr, r7, r6
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80094d0:	688f      	ldr	r7, [r1, #8]
 80094d2:	fa07 f708 	lsl.w	r7, r7, r8
 80094d6:	ea47 070e 	orr.w	r7, r7, lr
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80094da:	2c02      	cmp	r4, #2
        GPIOx->PUPDR = temp;
 80094dc:	60c7      	str	r7, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80094de:	d119      	bne.n	8009514 <HAL_GPIO_Init+0xa4>
        temp = GPIOx->AFR[position >> 3U];
 80094e0:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
 80094e4:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80094e8:	f003 0b07 	and.w	fp, r3, #7
        temp = GPIOx->AFR[position >> 3U];
 80094ec:	f8da 7020 	ldr.w	r7, [sl, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80094f0:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 80094f4:	f04f 0e0f 	mov.w	lr, #15
 80094f8:	fa0e fe0b 	lsl.w	lr, lr, fp
 80094fc:	ea27 0e0e 	bic.w	lr, r7, lr
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8009500:	690f      	ldr	r7, [r1, #16]
 8009502:	fa07 f70b 	lsl.w	r7, r7, fp
 8009506:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->AFR[position >> 3U] = temp;
 800950a:	f8ca 7020 	str.w	r7, [sl, #32]
 800950e:	e001      	b.n	8009514 <HAL_GPIO_Init+0xa4>
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8009510:	2c03      	cmp	r4, #3
 8009512:	d1da      	bne.n	80094ca <HAL_GPIO_Init+0x5a>
      temp = GPIOx->MODER;
 8009514:	6807      	ldr	r7, [r0, #0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8009516:	fa04 f408 	lsl.w	r4, r4, r8
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800951a:	403e      	ands	r6, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800951c:	4326      	orrs	r6, r4
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800951e:	00ec      	lsls	r4, r5, #3
      GPIOx->MODER = temp;
 8009520:	6006      	str	r6, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8009522:	d55f      	bpl.n	80095e4 <HAL_GPIO_Init+0x174>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8009524:	f04f 0a00 	mov.w	sl, #0
 8009528:	f8cd a004 	str.w	sl, [sp, #4]
 800952c:	f8d9 6044 	ldr.w	r6, [r9, #68]	; 0x44
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8009530:	4c37      	ldr	r4, [pc, #220]	; (8009610 <HAL_GPIO_Init+0x1a0>)
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8009532:	f446 4680 	orr.w	r6, r6, #16384	; 0x4000
 8009536:	f8c9 6044 	str.w	r6, [r9, #68]	; 0x44
 800953a:	f8d9 6044 	ldr.w	r6, [r9, #68]	; 0x44
 800953e:	f406 4680 	and.w	r6, r6, #16384	; 0x4000
 8009542:	9601      	str	r6, [sp, #4]
 8009544:	9e01      	ldr	r6, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 8009546:	f023 0603 	bic.w	r6, r3, #3
 800954a:	f106 4680 	add.w	r6, r6, #1073741824	; 0x40000000
 800954e:	f506 369c 	add.w	r6, r6, #79872	; 0x13800
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8009552:	f003 0e03 	and.w	lr, r3, #3
        temp = SYSCFG->EXTICR[position >> 2U];
 8009556:	f8d6 8008 	ldr.w	r8, [r6, #8]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800955a:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 800955e:	270f      	movs	r7, #15
 8009560:	fa07 f70e 	lsl.w	r7, r7, lr
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8009564:	42a0      	cmp	r0, r4
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8009566:	ea28 0707 	bic.w	r7, r8, r7
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800956a:	d042      	beq.n	80095f2 <HAL_GPIO_Init+0x182>
 800956c:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8009570:	42a0      	cmp	r0, r4
 8009572:	d040      	beq.n	80095f6 <HAL_GPIO_Init+0x186>
 8009574:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8009578:	42a0      	cmp	r0, r4
 800957a:	d03e      	beq.n	80095fa <HAL_GPIO_Init+0x18a>
 800957c:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8009580:	42a0      	cmp	r0, r4
 8009582:	d03c      	beq.n	80095fe <HAL_GPIO_Init+0x18e>
 8009584:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8009588:	42a0      	cmp	r0, r4
 800958a:	d03a      	beq.n	8009602 <HAL_GPIO_Init+0x192>
 800958c:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8009590:	42a0      	cmp	r0, r4
 8009592:	d038      	beq.n	8009606 <HAL_GPIO_Init+0x196>
 8009594:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8009598:	42a0      	cmp	r0, r4
 800959a:	bf0c      	ite	eq
 800959c:	2406      	moveq	r4, #6
 800959e:	2407      	movne	r4, #7
 80095a0:	fa04 f40e 	lsl.w	r4, r4, lr
 80095a4:	433c      	orrs	r4, r7
        SYSCFG->EXTICR[position >> 2U] = temp;
 80095a6:	60b4      	str	r4, [r6, #8]
        temp = EXTI->IMR;
 80095a8:	6814      	ldr	r4, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 80095aa:	ea6f 060c 	mvn.w	r6, ip
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80095ae:	03ef      	lsls	r7, r5, #15
        temp &= ~((uint32_t)iocurrent);
 80095b0:	bf54      	ite	pl
 80095b2:	4034      	andpl	r4, r6
        {
          temp |= iocurrent;
 80095b4:	ea4c 0404 	orrmi.w	r4, ip, r4
        }
        EXTI->IMR = temp;
 80095b8:	6014      	str	r4, [r2, #0]

        temp = EXTI->EMR;
 80095ba:	6854      	ldr	r4, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80095bc:	03af      	lsls	r7, r5, #14
        temp &= ~((uint32_t)iocurrent);
 80095be:	bf54      	ite	pl
 80095c0:	4034      	andpl	r4, r6
        {
          temp |= iocurrent;
 80095c2:	ea4c 0404 	orrmi.w	r4, ip, r4
        }
        EXTI->EMR = temp;
 80095c6:	6054      	str	r4, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80095c8:	6894      	ldr	r4, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80095ca:	02ef      	lsls	r7, r5, #11
        temp &= ~((uint32_t)iocurrent);
 80095cc:	bf54      	ite	pl
 80095ce:	4034      	andpl	r4, r6
        {
          temp |= iocurrent;
 80095d0:	ea4c 0404 	orrmi.w	r4, ip, r4
        }
        EXTI->RTSR = temp;
 80095d4:	6094      	str	r4, [r2, #8]

        temp = EXTI->FTSR;
 80095d6:	68d4      	ldr	r4, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80095d8:	02ad      	lsls	r5, r5, #10
        temp &= ~((uint32_t)iocurrent);
 80095da:	bf54      	ite	pl
 80095dc:	4034      	andpl	r4, r6
        {
          temp |= iocurrent;
 80095de:	ea4c 0404 	orrmi.w	r4, ip, r4
        }
        EXTI->FTSR = temp;
 80095e2:	60d4      	str	r4, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80095e4:	3301      	adds	r3, #1
 80095e6:	2b10      	cmp	r3, #16
 80095e8:	f47f af48 	bne.w	800947c <HAL_GPIO_Init+0xc>
      }
    }
  }
}
 80095ec:	b003      	add	sp, #12
 80095ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80095f2:	4654      	mov	r4, sl
 80095f4:	e7d4      	b.n	80095a0 <HAL_GPIO_Init+0x130>
 80095f6:	2401      	movs	r4, #1
 80095f8:	e7d2      	b.n	80095a0 <HAL_GPIO_Init+0x130>
 80095fa:	2402      	movs	r4, #2
 80095fc:	e7d0      	b.n	80095a0 <HAL_GPIO_Init+0x130>
 80095fe:	2403      	movs	r4, #3
 8009600:	e7ce      	b.n	80095a0 <HAL_GPIO_Init+0x130>
 8009602:	2404      	movs	r4, #4
 8009604:	e7cc      	b.n	80095a0 <HAL_GPIO_Init+0x130>
 8009606:	2405      	movs	r4, #5
 8009608:	e7ca      	b.n	80095a0 <HAL_GPIO_Init+0x130>
 800960a:	bf00      	nop
 800960c:	40013c00 	.word	0x40013c00
 8009610:	40020000 	.word	0x40020000
 8009614:	40023800 	.word	0x40023800

08009618 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8009618:	6903      	ldr	r3, [r0, #16]
 800961a:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 800961c:	bf14      	ite	ne
 800961e:	2001      	movne	r0, #1
 8009620:	2000      	moveq	r0, #0
 8009622:	4770      	bx	lr

08009624 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8009624:	b10a      	cbz	r2, 800962a <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8009626:	6181      	str	r1, [r0, #24]
  }
}
 8009628:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800962a:	0409      	lsls	r1, r1, #16
 800962c:	e7fb      	b.n	8009626 <HAL_GPIO_WritePin+0x2>

0800962e <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 800962e:	6943      	ldr	r3, [r0, #20]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8009630:	ea01 0203 	and.w	r2, r1, r3
 8009634:	ea21 0103 	bic.w	r1, r1, r3
 8009638:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800963c:	6181      	str	r1, [r0, #24]
}
 800963e:	4770      	bx	lr

08009640 <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8009640:	4913      	ldr	r1, [pc, #76]	; (8009690 <HAL_RCC_GetSysClockFreq+0x50>)
{
 8009642:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8009644:	688b      	ldr	r3, [r1, #8]
 8009646:	f003 030c 	and.w	r3, r3, #12
 800964a:	2b04      	cmp	r3, #4
 800964c:	d01c      	beq.n	8009688 <HAL_RCC_GetSysClockFreq+0x48>
 800964e:	2b08      	cmp	r3, #8
 8009650:	d11c      	bne.n	800968c <HAL_RCC_GetSysClockFreq+0x4c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8009652:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8009654:	684b      	ldr	r3, [r1, #4]
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8009656:	6849      	ldr	r1, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8009658:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800965c:	bf14      	ite	ne
 800965e:	480d      	ldrne	r0, [pc, #52]	; (8009694 <HAL_RCC_GetSysClockFreq+0x54>)
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8009660:	480d      	ldreq	r0, [pc, #52]	; (8009698 <HAL_RCC_GetSysClockFreq+0x58>)
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8009662:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8009666:	bf18      	it	ne
 8009668:	2300      	movne	r3, #0
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800966a:	f002 023f 	and.w	r2, r2, #63	; 0x3f
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800966e:	fba1 0100 	umull	r0, r1, r1, r0
 8009672:	f7fc fe55 	bl	8006320 <__aeabi_uldivmod>
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8009676:	4b06      	ldr	r3, [pc, #24]	; (8009690 <HAL_RCC_GetSysClockFreq+0x50>)
 8009678:	685b      	ldr	r3, [r3, #4]
 800967a:	f3c3 4301 	ubfx	r3, r3, #16, #2
 800967e:	3301      	adds	r3, #1
 8009680:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco/pllp;
 8009682:	fbb0 f0f3 	udiv	r0, r0, r3
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8009686:	bd08      	pop	{r3, pc}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8009688:	4802      	ldr	r0, [pc, #8]	; (8009694 <HAL_RCC_GetSysClockFreq+0x54>)
 800968a:	e7fc      	b.n	8009686 <HAL_RCC_GetSysClockFreq+0x46>
      sysclockfreq = HSI_VALUE;
 800968c:	4802      	ldr	r0, [pc, #8]	; (8009698 <HAL_RCC_GetSysClockFreq+0x58>)
  return sysclockfreq;
 800968e:	e7fa      	b.n	8009686 <HAL_RCC_GetSysClockFreq+0x46>
 8009690:	40023800 	.word	0x40023800
 8009694:	007a1200 	.word	0x007a1200
 8009698:	00f42400 	.word	0x00f42400

0800969c <HAL_RCC_ClockConfig>:
{
 800969c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80096a0:	460d      	mov	r5, r1
  if(RCC_ClkInitStruct == NULL)
 80096a2:	4604      	mov	r4, r0
 80096a4:	b910      	cbnz	r0, 80096ac <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 80096a6:	2001      	movs	r0, #1
}
 80096a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80096ac:	4b44      	ldr	r3, [pc, #272]	; (80097c0 <HAL_RCC_ClockConfig+0x124>)
 80096ae:	681a      	ldr	r2, [r3, #0]
 80096b0:	f002 0207 	and.w	r2, r2, #7
 80096b4:	428a      	cmp	r2, r1
 80096b6:	d328      	bcc.n	800970a <HAL_RCC_ClockConfig+0x6e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80096b8:	6822      	ldr	r2, [r4, #0]
 80096ba:	0797      	lsls	r7, r2, #30
 80096bc:	d42d      	bmi.n	800971a <HAL_RCC_ClockConfig+0x7e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80096be:	07d0      	lsls	r0, r2, #31
 80096c0:	d441      	bmi.n	8009746 <HAL_RCC_ClockConfig+0xaa>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80096c2:	4b3f      	ldr	r3, [pc, #252]	; (80097c0 <HAL_RCC_ClockConfig+0x124>)
 80096c4:	681a      	ldr	r2, [r3, #0]
 80096c6:	f002 0207 	and.w	r2, r2, #7
 80096ca:	42aa      	cmp	r2, r5
 80096cc:	d866      	bhi.n	800979c <HAL_RCC_ClockConfig+0x100>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80096ce:	6822      	ldr	r2, [r4, #0]
 80096d0:	0751      	lsls	r1, r2, #29
 80096d2:	d46c      	bmi.n	80097ae <HAL_RCC_ClockConfig+0x112>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80096d4:	0713      	lsls	r3, r2, #28
 80096d6:	d507      	bpl.n	80096e8 <HAL_RCC_ClockConfig+0x4c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80096d8:	4a3a      	ldr	r2, [pc, #232]	; (80097c4 <HAL_RCC_ClockConfig+0x128>)
 80096da:	6921      	ldr	r1, [r4, #16]
 80096dc:	6893      	ldr	r3, [r2, #8]
 80096de:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 80096e2:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80096e6:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80096e8:	f7ff ffaa 	bl	8009640 <HAL_RCC_GetSysClockFreq>
 80096ec:	4b35      	ldr	r3, [pc, #212]	; (80097c4 <HAL_RCC_ClockConfig+0x128>)
 80096ee:	4a36      	ldr	r2, [pc, #216]	; (80097c8 <HAL_RCC_ClockConfig+0x12c>)
 80096f0:	689b      	ldr	r3, [r3, #8]
 80096f2:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80096f6:	5cd3      	ldrb	r3, [r2, r3]
 80096f8:	40d8      	lsrs	r0, r3
 80096fa:	4b34      	ldr	r3, [pc, #208]	; (80097cc <HAL_RCC_ClockConfig+0x130>)
 80096fc:	6018      	str	r0, [r3, #0]
  HAL_InitTick (uwTickPrio);
 80096fe:	4b34      	ldr	r3, [pc, #208]	; (80097d0 <HAL_RCC_ClockConfig+0x134>)
 8009700:	6818      	ldr	r0, [r3, #0]
 8009702:	f7ff fbcd 	bl	8008ea0 <HAL_InitTick>
  return HAL_OK;
 8009706:	2000      	movs	r0, #0
 8009708:	e7ce      	b.n	80096a8 <HAL_RCC_ClockConfig+0xc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800970a:	b2ca      	uxtb	r2, r1
 800970c:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800970e:	681b      	ldr	r3, [r3, #0]
 8009710:	f003 0307 	and.w	r3, r3, #7
 8009714:	428b      	cmp	r3, r1
 8009716:	d1c6      	bne.n	80096a6 <HAL_RCC_ClockConfig+0xa>
 8009718:	e7ce      	b.n	80096b8 <HAL_RCC_ClockConfig+0x1c>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800971a:	4b2a      	ldr	r3, [pc, #168]	; (80097c4 <HAL_RCC_ClockConfig+0x128>)
 800971c:	f012 0f04 	tst.w	r2, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8009720:	bf1e      	ittt	ne
 8009722:	6899      	ldrne	r1, [r3, #8]
 8009724:	f441 51e0 	orrne.w	r1, r1, #7168	; 0x1c00
 8009728:	6099      	strne	r1, [r3, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800972a:	0716      	lsls	r6, r2, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800972c:	bf42      	ittt	mi
 800972e:	6899      	ldrmi	r1, [r3, #8]
 8009730:	f441 4160 	orrmi.w	r1, r1, #57344	; 0xe000
 8009734:	6099      	strmi	r1, [r3, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009736:	4923      	ldr	r1, [pc, #140]	; (80097c4 <HAL_RCC_ClockConfig+0x128>)
 8009738:	68a0      	ldr	r0, [r4, #8]
 800973a:	688b      	ldr	r3, [r1, #8]
 800973c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009740:	4303      	orrs	r3, r0
 8009742:	608b      	str	r3, [r1, #8]
 8009744:	e7bb      	b.n	80096be <HAL_RCC_ClockConfig+0x22>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8009746:	6862      	ldr	r2, [r4, #4]
 8009748:	4b1e      	ldr	r3, [pc, #120]	; (80097c4 <HAL_RCC_ClockConfig+0x128>)
 800974a:	2a01      	cmp	r2, #1
 800974c:	d11c      	bne.n	8009788 <HAL_RCC_ClockConfig+0xec>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800974e:	681b      	ldr	r3, [r3, #0]
 8009750:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009754:	d0a7      	beq.n	80096a6 <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8009756:	4e1b      	ldr	r6, [pc, #108]	; (80097c4 <HAL_RCC_ClockConfig+0x128>)
 8009758:	68b3      	ldr	r3, [r6, #8]
 800975a:	f023 0303 	bic.w	r3, r3, #3
 800975e:	4313      	orrs	r3, r2
 8009760:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 8009762:	f7ff fbe5 	bl	8008f30 <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009766:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 800976a:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800976c:	68b3      	ldr	r3, [r6, #8]
 800976e:	6862      	ldr	r2, [r4, #4]
 8009770:	f003 030c 	and.w	r3, r3, #12
 8009774:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8009778:	d0a3      	beq.n	80096c2 <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800977a:	f7ff fbd9 	bl	8008f30 <HAL_GetTick>
 800977e:	1bc0      	subs	r0, r0, r7
 8009780:	4540      	cmp	r0, r8
 8009782:	d9f3      	bls.n	800976c <HAL_RCC_ClockConfig+0xd0>
        return HAL_TIMEOUT;
 8009784:	2003      	movs	r0, #3
 8009786:	e78f      	b.n	80096a8 <HAL_RCC_ClockConfig+0xc>
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8009788:	1e91      	subs	r1, r2, #2
 800978a:	2901      	cmp	r1, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800978c:	681b      	ldr	r3, [r3, #0]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800978e:	d802      	bhi.n	8009796 <HAL_RCC_ClockConfig+0xfa>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009790:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8009794:	e7de      	b.n	8009754 <HAL_RCC_ClockConfig+0xb8>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009796:	f013 0f02 	tst.w	r3, #2
 800979a:	e7db      	b.n	8009754 <HAL_RCC_ClockConfig+0xb8>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800979c:	b2ea      	uxtb	r2, r5
 800979e:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80097a0:	681b      	ldr	r3, [r3, #0]
 80097a2:	f003 0307 	and.w	r3, r3, #7
 80097a6:	42ab      	cmp	r3, r5
 80097a8:	f47f af7d 	bne.w	80096a6 <HAL_RCC_ClockConfig+0xa>
 80097ac:	e78f      	b.n	80096ce <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80097ae:	4905      	ldr	r1, [pc, #20]	; (80097c4 <HAL_RCC_ClockConfig+0x128>)
 80097b0:	68e0      	ldr	r0, [r4, #12]
 80097b2:	688b      	ldr	r3, [r1, #8]
 80097b4:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 80097b8:	4303      	orrs	r3, r0
 80097ba:	608b      	str	r3, [r1, #8]
 80097bc:	e78a      	b.n	80096d4 <HAL_RCC_ClockConfig+0x38>
 80097be:	bf00      	nop
 80097c0:	40023c00 	.word	0x40023c00
 80097c4:	40023800 	.word	0x40023800
 80097c8:	0800b24c 	.word	0x0800b24c
 80097cc:	20001064 	.word	0x20001064
 80097d0:	2000106c 	.word	0x2000106c

080097d4 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80097d4:	4b04      	ldr	r3, [pc, #16]	; (80097e8 <HAL_RCC_GetPCLK1Freq+0x14>)
 80097d6:	4a05      	ldr	r2, [pc, #20]	; (80097ec <HAL_RCC_GetPCLK1Freq+0x18>)
 80097d8:	689b      	ldr	r3, [r3, #8]
 80097da:	f3c3 2382 	ubfx	r3, r3, #10, #3
 80097de:	5cd3      	ldrb	r3, [r2, r3]
 80097e0:	4a03      	ldr	r2, [pc, #12]	; (80097f0 <HAL_RCC_GetPCLK1Freq+0x1c>)
 80097e2:	6810      	ldr	r0, [r2, #0]
}
 80097e4:	40d8      	lsrs	r0, r3
 80097e6:	4770      	bx	lr
 80097e8:	40023800 	.word	0x40023800
 80097ec:	0800b25c 	.word	0x0800b25c
 80097f0:	20001064 	.word	0x20001064

080097f4 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80097f4:	4b04      	ldr	r3, [pc, #16]	; (8009808 <HAL_RCC_GetPCLK2Freq+0x14>)
 80097f6:	4a05      	ldr	r2, [pc, #20]	; (800980c <HAL_RCC_GetPCLK2Freq+0x18>)
 80097f8:	689b      	ldr	r3, [r3, #8]
 80097fa:	f3c3 3342 	ubfx	r3, r3, #13, #3
 80097fe:	5cd3      	ldrb	r3, [r2, r3]
 8009800:	4a03      	ldr	r2, [pc, #12]	; (8009810 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8009802:	6810      	ldr	r0, [r2, #0]
}
 8009804:	40d8      	lsrs	r0, r3
 8009806:	4770      	bx	lr
 8009808:	40023800 	.word	0x40023800
 800980c:	0800b25c 	.word	0x0800b25c
 8009810:	20001064 	.word	0x20001064

08009814 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8009814:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8009818:	4604      	mov	r4, r0
 800981a:	b340      	cbz	r0, 800986e <HAL_RCC_OscConfig+0x5a>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800981c:	6803      	ldr	r3, [r0, #0]
 800981e:	07dd      	lsls	r5, r3, #31
 8009820:	d410      	bmi.n	8009844 <HAL_RCC_OscConfig+0x30>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8009822:	6823      	ldr	r3, [r4, #0]
 8009824:	0798      	lsls	r0, r3, #30
 8009826:	d45e      	bmi.n	80098e6 <HAL_RCC_OscConfig+0xd2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8009828:	6823      	ldr	r3, [r4, #0]
 800982a:	071a      	lsls	r2, r3, #28
 800982c:	f100 80a0 	bmi.w	8009970 <HAL_RCC_OscConfig+0x15c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8009830:	6823      	ldr	r3, [r4, #0]
 8009832:	075b      	lsls	r3, r3, #29
 8009834:	f100 80c0 	bmi.w	80099b8 <HAL_RCC_OscConfig+0x1a4>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8009838:	69a0      	ldr	r0, [r4, #24]
 800983a:	2800      	cmp	r0, #0
 800983c:	f040 8128 	bne.w	8009a90 <HAL_RCC_OscConfig+0x27c>
          return HAL_ERROR;
        }
      }
    }
  }
  return HAL_OK;
 8009840:	2000      	movs	r0, #0
 8009842:	e02b      	b.n	800989c <HAL_RCC_OscConfig+0x88>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8009844:	4b8f      	ldr	r3, [pc, #572]	; (8009a84 <HAL_RCC_OscConfig+0x270>)
 8009846:	689a      	ldr	r2, [r3, #8]
 8009848:	f002 020c 	and.w	r2, r2, #12
 800984c:	2a04      	cmp	r2, #4
 800984e:	d007      	beq.n	8009860 <HAL_RCC_OscConfig+0x4c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8009850:	689a      	ldr	r2, [r3, #8]
 8009852:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8009856:	2a08      	cmp	r2, #8
 8009858:	d10b      	bne.n	8009872 <HAL_RCC_OscConfig+0x5e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800985a:	685a      	ldr	r2, [r3, #4]
 800985c:	0251      	lsls	r1, r2, #9
 800985e:	d508      	bpl.n	8009872 <HAL_RCC_OscConfig+0x5e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009860:	4b88      	ldr	r3, [pc, #544]	; (8009a84 <HAL_RCC_OscConfig+0x270>)
 8009862:	681b      	ldr	r3, [r3, #0]
 8009864:	039a      	lsls	r2, r3, #14
 8009866:	d5dc      	bpl.n	8009822 <HAL_RCC_OscConfig+0xe>
 8009868:	6863      	ldr	r3, [r4, #4]
 800986a:	2b00      	cmp	r3, #0
 800986c:	d1d9      	bne.n	8009822 <HAL_RCC_OscConfig+0xe>
          return HAL_ERROR;
 800986e:	2001      	movs	r0, #1
 8009870:	e014      	b.n	800989c <HAL_RCC_OscConfig+0x88>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8009872:	6862      	ldr	r2, [r4, #4]
 8009874:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 8009878:	d113      	bne.n	80098a2 <HAL_RCC_OscConfig+0x8e>
 800987a:	681a      	ldr	r2, [r3, #0]
 800987c:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8009880:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8009882:	f7ff fb55 	bl	8008f30 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8009886:	4e7f      	ldr	r6, [pc, #508]	; (8009a84 <HAL_RCC_OscConfig+0x270>)
        tickstart = HAL_GetTick();
 8009888:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800988a:	6833      	ldr	r3, [r6, #0]
 800988c:	039b      	lsls	r3, r3, #14
 800988e:	d4c8      	bmi.n	8009822 <HAL_RCC_OscConfig+0xe>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8009890:	f7ff fb4e 	bl	8008f30 <HAL_GetTick>
 8009894:	1b40      	subs	r0, r0, r5
 8009896:	2864      	cmp	r0, #100	; 0x64
 8009898:	d9f7      	bls.n	800988a <HAL_RCC_OscConfig+0x76>
            return HAL_TIMEOUT;
 800989a:	2003      	movs	r0, #3
}
 800989c:	b002      	add	sp, #8
 800989e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80098a2:	4d78      	ldr	r5, [pc, #480]	; (8009a84 <HAL_RCC_OscConfig+0x270>)
 80098a4:	f5b2 2fa0 	cmp.w	r2, #327680	; 0x50000
 80098a8:	682b      	ldr	r3, [r5, #0]
 80098aa:	d107      	bne.n	80098bc <HAL_RCC_OscConfig+0xa8>
 80098ac:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80098b0:	602b      	str	r3, [r5, #0]
 80098b2:	682b      	ldr	r3, [r5, #0]
 80098b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80098b8:	602b      	str	r3, [r5, #0]
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80098ba:	e7e2      	b.n	8009882 <HAL_RCC_OscConfig+0x6e>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80098bc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80098c0:	602b      	str	r3, [r5, #0]
 80098c2:	682b      	ldr	r3, [r5, #0]
 80098c4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80098c8:	602b      	str	r3, [r5, #0]
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80098ca:	2a00      	cmp	r2, #0
 80098cc:	d1d9      	bne.n	8009882 <HAL_RCC_OscConfig+0x6e>
        tickstart = HAL_GetTick();
 80098ce:	f7ff fb2f 	bl	8008f30 <HAL_GetTick>
 80098d2:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80098d4:	682b      	ldr	r3, [r5, #0]
 80098d6:	039f      	lsls	r7, r3, #14
 80098d8:	d5a3      	bpl.n	8009822 <HAL_RCC_OscConfig+0xe>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80098da:	f7ff fb29 	bl	8008f30 <HAL_GetTick>
 80098de:	1b80      	subs	r0, r0, r6
 80098e0:	2864      	cmp	r0, #100	; 0x64
 80098e2:	d9f7      	bls.n	80098d4 <HAL_RCC_OscConfig+0xc0>
 80098e4:	e7d9      	b.n	800989a <HAL_RCC_OscConfig+0x86>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80098e6:	4b67      	ldr	r3, [pc, #412]	; (8009a84 <HAL_RCC_OscConfig+0x270>)
 80098e8:	689a      	ldr	r2, [r3, #8]
 80098ea:	f012 0f0c 	tst.w	r2, #12
 80098ee:	d007      	beq.n	8009900 <HAL_RCC_OscConfig+0xec>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80098f0:	689a      	ldr	r2, [r3, #8]
 80098f2:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80098f6:	2a08      	cmp	r2, #8
 80098f8:	d111      	bne.n	800991e <HAL_RCC_OscConfig+0x10a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80098fa:	685b      	ldr	r3, [r3, #4]
 80098fc:	025e      	lsls	r6, r3, #9
 80098fe:	d40e      	bmi.n	800991e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8009900:	4a60      	ldr	r2, [pc, #384]	; (8009a84 <HAL_RCC_OscConfig+0x270>)
 8009902:	6813      	ldr	r3, [r2, #0]
 8009904:	079d      	lsls	r5, r3, #30
 8009906:	d502      	bpl.n	800990e <HAL_RCC_OscConfig+0xfa>
 8009908:	68e3      	ldr	r3, [r4, #12]
 800990a:	2b01      	cmp	r3, #1
 800990c:	d1af      	bne.n	800986e <HAL_RCC_OscConfig+0x5a>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800990e:	6813      	ldr	r3, [r2, #0]
 8009910:	6921      	ldr	r1, [r4, #16]
 8009912:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8009916:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 800991a:	6013      	str	r3, [r2, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800991c:	e784      	b.n	8009828 <HAL_RCC_OscConfig+0x14>
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800991e:	68e2      	ldr	r2, [r4, #12]
 8009920:	4b59      	ldr	r3, [pc, #356]	; (8009a88 <HAL_RCC_OscConfig+0x274>)
 8009922:	b1b2      	cbz	r2, 8009952 <HAL_RCC_OscConfig+0x13e>
        __HAL_RCC_HSI_ENABLE();
 8009924:	2201      	movs	r2, #1
 8009926:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8009928:	f7ff fb02 	bl	8008f30 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800992c:	4d55      	ldr	r5, [pc, #340]	; (8009a84 <HAL_RCC_OscConfig+0x270>)
        tickstart = HAL_GetTick();
 800992e:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009930:	682b      	ldr	r3, [r5, #0]
 8009932:	0798      	lsls	r0, r3, #30
 8009934:	d507      	bpl.n	8009946 <HAL_RCC_OscConfig+0x132>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009936:	682b      	ldr	r3, [r5, #0]
 8009938:	6922      	ldr	r2, [r4, #16]
 800993a:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800993e:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8009942:	602b      	str	r3, [r5, #0]
 8009944:	e770      	b.n	8009828 <HAL_RCC_OscConfig+0x14>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8009946:	f7ff faf3 	bl	8008f30 <HAL_GetTick>
 800994a:	1b80      	subs	r0, r0, r6
 800994c:	2802      	cmp	r0, #2
 800994e:	d9ef      	bls.n	8009930 <HAL_RCC_OscConfig+0x11c>
 8009950:	e7a3      	b.n	800989a <HAL_RCC_OscConfig+0x86>
        __HAL_RCC_HSI_DISABLE();
 8009952:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8009954:	f7ff faec 	bl	8008f30 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8009958:	4e4a      	ldr	r6, [pc, #296]	; (8009a84 <HAL_RCC_OscConfig+0x270>)
        tickstart = HAL_GetTick();
 800995a:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800995c:	6833      	ldr	r3, [r6, #0]
 800995e:	0799      	lsls	r1, r3, #30
 8009960:	f57f af62 	bpl.w	8009828 <HAL_RCC_OscConfig+0x14>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8009964:	f7ff fae4 	bl	8008f30 <HAL_GetTick>
 8009968:	1b40      	subs	r0, r0, r5
 800996a:	2802      	cmp	r0, #2
 800996c:	d9f6      	bls.n	800995c <HAL_RCC_OscConfig+0x148>
 800996e:	e794      	b.n	800989a <HAL_RCC_OscConfig+0x86>
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8009970:	6962      	ldr	r2, [r4, #20]
 8009972:	4b45      	ldr	r3, [pc, #276]	; (8009a88 <HAL_RCC_OscConfig+0x274>)
 8009974:	b182      	cbz	r2, 8009998 <HAL_RCC_OscConfig+0x184>
      __HAL_RCC_LSI_ENABLE();
 8009976:	2201      	movs	r2, #1
 8009978:	f8c3 2e80 	str.w	r2, [r3, #3712]	; 0xe80
      tickstart = HAL_GetTick();
 800997c:	f7ff fad8 	bl	8008f30 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8009980:	4e40      	ldr	r6, [pc, #256]	; (8009a84 <HAL_RCC_OscConfig+0x270>)
      tickstart = HAL_GetTick();
 8009982:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8009984:	6f73      	ldr	r3, [r6, #116]	; 0x74
 8009986:	079f      	lsls	r7, r3, #30
 8009988:	f53f af52 	bmi.w	8009830 <HAL_RCC_OscConfig+0x1c>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800998c:	f7ff fad0 	bl	8008f30 <HAL_GetTick>
 8009990:	1b40      	subs	r0, r0, r5
 8009992:	2802      	cmp	r0, #2
 8009994:	d9f6      	bls.n	8009984 <HAL_RCC_OscConfig+0x170>
 8009996:	e780      	b.n	800989a <HAL_RCC_OscConfig+0x86>
      __HAL_RCC_LSI_DISABLE();
 8009998:	f8c3 2e80 	str.w	r2, [r3, #3712]	; 0xe80
      tickstart = HAL_GetTick();
 800999c:	f7ff fac8 	bl	8008f30 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80099a0:	4e38      	ldr	r6, [pc, #224]	; (8009a84 <HAL_RCC_OscConfig+0x270>)
      tickstart = HAL_GetTick();
 80099a2:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80099a4:	6f73      	ldr	r3, [r6, #116]	; 0x74
 80099a6:	0798      	lsls	r0, r3, #30
 80099a8:	f57f af42 	bpl.w	8009830 <HAL_RCC_OscConfig+0x1c>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80099ac:	f7ff fac0 	bl	8008f30 <HAL_GetTick>
 80099b0:	1b40      	subs	r0, r0, r5
 80099b2:	2802      	cmp	r0, #2
 80099b4:	d9f6      	bls.n	80099a4 <HAL_RCC_OscConfig+0x190>
 80099b6:	e770      	b.n	800989a <HAL_RCC_OscConfig+0x86>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80099b8:	4b32      	ldr	r3, [pc, #200]	; (8009a84 <HAL_RCC_OscConfig+0x270>)
 80099ba:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80099bc:	f012 5280 	ands.w	r2, r2, #268435456	; 0x10000000
 80099c0:	d128      	bne.n	8009a14 <HAL_RCC_OscConfig+0x200>
      __HAL_RCC_PWR_CLK_ENABLE();
 80099c2:	9201      	str	r2, [sp, #4]
 80099c4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80099c6:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80099ca:	641a      	str	r2, [r3, #64]	; 0x40
 80099cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80099ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80099d2:	9301      	str	r3, [sp, #4]
 80099d4:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 80099d6:	2701      	movs	r7, #1
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80099d8:	4d2c      	ldr	r5, [pc, #176]	; (8009a8c <HAL_RCC_OscConfig+0x278>)
 80099da:	682b      	ldr	r3, [r5, #0]
 80099dc:	05d9      	lsls	r1, r3, #23
 80099de:	d51b      	bpl.n	8009a18 <HAL_RCC_OscConfig+0x204>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80099e0:	68a3      	ldr	r3, [r4, #8]
 80099e2:	4d28      	ldr	r5, [pc, #160]	; (8009a84 <HAL_RCC_OscConfig+0x270>)
 80099e4:	2b01      	cmp	r3, #1
 80099e6:	d127      	bne.n	8009a38 <HAL_RCC_OscConfig+0x224>
 80099e8:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80099ea:	f043 0301 	orr.w	r3, r3, #1
 80099ee:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
 80099f0:	f7ff fa9e 	bl	8008f30 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80099f4:	4e23      	ldr	r6, [pc, #140]	; (8009a84 <HAL_RCC_OscConfig+0x270>)
      tickstart = HAL_GetTick();
 80099f6:	4605      	mov	r5, r0
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80099f8:	f241 3888 	movw	r8, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80099fc:	6f33      	ldr	r3, [r6, #112]	; 0x70
 80099fe:	079b      	lsls	r3, r3, #30
 8009a00:	d539      	bpl.n	8009a76 <HAL_RCC_OscConfig+0x262>
    if(pwrclkchanged == SET)
 8009a02:	2f00      	cmp	r7, #0
 8009a04:	f43f af18 	beq.w	8009838 <HAL_RCC_OscConfig+0x24>
      __HAL_RCC_PWR_CLK_DISABLE();
 8009a08:	4a1e      	ldr	r2, [pc, #120]	; (8009a84 <HAL_RCC_OscConfig+0x270>)
 8009a0a:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8009a0c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009a10:	6413      	str	r3, [r2, #64]	; 0x40
 8009a12:	e711      	b.n	8009838 <HAL_RCC_OscConfig+0x24>
    FlagStatus       pwrclkchanged = RESET;
 8009a14:	2700      	movs	r7, #0
 8009a16:	e7df      	b.n	80099d8 <HAL_RCC_OscConfig+0x1c4>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8009a18:	682b      	ldr	r3, [r5, #0]
 8009a1a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009a1e:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8009a20:	f7ff fa86 	bl	8008f30 <HAL_GetTick>
 8009a24:	4606      	mov	r6, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009a26:	682b      	ldr	r3, [r5, #0]
 8009a28:	05da      	lsls	r2, r3, #23
 8009a2a:	d4d9      	bmi.n	80099e0 <HAL_RCC_OscConfig+0x1cc>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009a2c:	f7ff fa80 	bl	8008f30 <HAL_GetTick>
 8009a30:	1b80      	subs	r0, r0, r6
 8009a32:	2802      	cmp	r0, #2
 8009a34:	d9f7      	bls.n	8009a26 <HAL_RCC_OscConfig+0x212>
 8009a36:	e730      	b.n	800989a <HAL_RCC_OscConfig+0x86>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8009a38:	2b05      	cmp	r3, #5
 8009a3a:	d104      	bne.n	8009a46 <HAL_RCC_OscConfig+0x232>
 8009a3c:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8009a3e:	f043 0304 	orr.w	r3, r3, #4
 8009a42:	672b      	str	r3, [r5, #112]	; 0x70
 8009a44:	e7d0      	b.n	80099e8 <HAL_RCC_OscConfig+0x1d4>
 8009a46:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8009a48:	f022 0201 	bic.w	r2, r2, #1
 8009a4c:	672a      	str	r2, [r5, #112]	; 0x70
 8009a4e:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8009a50:	f022 0204 	bic.w	r2, r2, #4
 8009a54:	672a      	str	r2, [r5, #112]	; 0x70
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8009a56:	2b00      	cmp	r3, #0
 8009a58:	d1ca      	bne.n	80099f0 <HAL_RCC_OscConfig+0x1dc>
      tickstart = HAL_GetTick();
 8009a5a:	f7ff fa69 	bl	8008f30 <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8009a5e:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8009a62:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8009a64:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8009a66:	0798      	lsls	r0, r3, #30
 8009a68:	d5cb      	bpl.n	8009a02 <HAL_RCC_OscConfig+0x1ee>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8009a6a:	f7ff fa61 	bl	8008f30 <HAL_GetTick>
 8009a6e:	1b80      	subs	r0, r0, r6
 8009a70:	4540      	cmp	r0, r8
 8009a72:	d9f7      	bls.n	8009a64 <HAL_RCC_OscConfig+0x250>
 8009a74:	e711      	b.n	800989a <HAL_RCC_OscConfig+0x86>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8009a76:	f7ff fa5b 	bl	8008f30 <HAL_GetTick>
 8009a7a:	1b40      	subs	r0, r0, r5
 8009a7c:	4540      	cmp	r0, r8
 8009a7e:	d9bd      	bls.n	80099fc <HAL_RCC_OscConfig+0x1e8>
 8009a80:	e70b      	b.n	800989a <HAL_RCC_OscConfig+0x86>
 8009a82:	bf00      	nop
 8009a84:	40023800 	.word	0x40023800
 8009a88:	42470000 	.word	0x42470000
 8009a8c:	40007000 	.word	0x40007000
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8009a90:	4d3b      	ldr	r5, [pc, #236]	; (8009b80 <HAL_RCC_OscConfig+0x36c>)
 8009a92:	68ab      	ldr	r3, [r5, #8]
 8009a94:	f003 030c 	and.w	r3, r3, #12
 8009a98:	2b08      	cmp	r3, #8
 8009a9a:	d040      	beq.n	8009b1e <HAL_RCC_OscConfig+0x30a>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8009a9c:	4b39      	ldr	r3, [pc, #228]	; (8009b84 <HAL_RCC_OscConfig+0x370>)
 8009a9e:	2200      	movs	r2, #0
 8009aa0:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 8009aa2:	661a      	str	r2, [r3, #96]	; 0x60
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8009aa4:	d12e      	bne.n	8009b04 <HAL_RCC_OscConfig+0x2f0>
        tickstart = HAL_GetTick();
 8009aa6:	f7ff fa43 	bl	8008f30 <HAL_GetTick>
 8009aaa:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009aac:	682b      	ldr	r3, [r5, #0]
 8009aae:	0199      	lsls	r1, r3, #6
 8009ab0:	d422      	bmi.n	8009af8 <HAL_RCC_OscConfig+0x2e4>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8009ab2:	e9d4 3207 	ldrd	r3, r2, [r4, #28]
 8009ab6:	4313      	orrs	r3, r2
 8009ab8:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8009aba:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8009abe:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8009ac0:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8009ac4:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8009ac6:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
 8009aca:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8009acc:	0852      	lsrs	r2, r2, #1
 8009ace:	3a01      	subs	r2, #1
 8009ad0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009ad4:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8009ad6:	4b2b      	ldr	r3, [pc, #172]	; (8009b84 <HAL_RCC_OscConfig+0x370>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009ad8:	4d29      	ldr	r5, [pc, #164]	; (8009b80 <HAL_RCC_OscConfig+0x36c>)
        __HAL_RCC_PLL_ENABLE();
 8009ada:	2201      	movs	r2, #1
 8009adc:	661a      	str	r2, [r3, #96]	; 0x60
        tickstart = HAL_GetTick();
 8009ade:	f7ff fa27 	bl	8008f30 <HAL_GetTick>
 8009ae2:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009ae4:	682b      	ldr	r3, [r5, #0]
 8009ae6:	019a      	lsls	r2, r3, #6
 8009ae8:	f53f aeaa 	bmi.w	8009840 <HAL_RCC_OscConfig+0x2c>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009aec:	f7ff fa20 	bl	8008f30 <HAL_GetTick>
 8009af0:	1b00      	subs	r0, r0, r4
 8009af2:	2802      	cmp	r0, #2
 8009af4:	d9f6      	bls.n	8009ae4 <HAL_RCC_OscConfig+0x2d0>
 8009af6:	e6d0      	b.n	800989a <HAL_RCC_OscConfig+0x86>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009af8:	f7ff fa1a 	bl	8008f30 <HAL_GetTick>
 8009afc:	1b80      	subs	r0, r0, r6
 8009afe:	2802      	cmp	r0, #2
 8009b00:	d9d4      	bls.n	8009aac <HAL_RCC_OscConfig+0x298>
 8009b02:	e6ca      	b.n	800989a <HAL_RCC_OscConfig+0x86>
        tickstart = HAL_GetTick();
 8009b04:	f7ff fa14 	bl	8008f30 <HAL_GetTick>
 8009b08:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009b0a:	682b      	ldr	r3, [r5, #0]
 8009b0c:	019b      	lsls	r3, r3, #6
 8009b0e:	f57f ae97 	bpl.w	8009840 <HAL_RCC_OscConfig+0x2c>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009b12:	f7ff fa0d 	bl	8008f30 <HAL_GetTick>
 8009b16:	1b00      	subs	r0, r0, r4
 8009b18:	2802      	cmp	r0, #2
 8009b1a:	d9f6      	bls.n	8009b0a <HAL_RCC_OscConfig+0x2f6>
 8009b1c:	e6bd      	b.n	800989a <HAL_RCC_OscConfig+0x86>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8009b1e:	2801      	cmp	r0, #1
 8009b20:	f43f aebc 	beq.w	800989c <HAL_RCC_OscConfig+0x88>
        pll_config = RCC->PLLCFGR;
 8009b24:	686b      	ldr	r3, [r5, #4]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8009b26:	69e2      	ldr	r2, [r4, #28]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009b28:	f403 0180 	and.w	r1, r3, #4194304	; 0x400000
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8009b2c:	4291      	cmp	r1, r2
 8009b2e:	f47f ae9e 	bne.w	800986e <HAL_RCC_OscConfig+0x5a>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009b32:	6a21      	ldr	r1, [r4, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8009b34:	f003 023f 	and.w	r2, r3, #63	; 0x3f
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009b38:	428a      	cmp	r2, r1
 8009b3a:	f47f ae98 	bne.w	800986e <HAL_RCC_OscConfig+0x5a>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8009b3e:	6a61      	ldr	r1, [r4, #36]	; 0x24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8009b40:	f647 72c0 	movw	r2, #32704	; 0x7fc0
 8009b44:	401a      	ands	r2, r3
 8009b46:	ebb2 1f81 	cmp.w	r2, r1, lsl #6
 8009b4a:	f47f ae90 	bne.w	800986e <HAL_RCC_OscConfig+0x5a>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8009b4e:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8009b50:	0852      	lsrs	r2, r2, #1
 8009b52:	f403 3140 	and.w	r1, r3, #196608	; 0x30000
 8009b56:	3a01      	subs	r2, #1
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8009b58:	ebb1 4f02 	cmp.w	r1, r2, lsl #16
 8009b5c:	f47f ae87 	bne.w	800986e <HAL_RCC_OscConfig+0x5a>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8009b60:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8009b62:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8009b66:	ebb2 6f01 	cmp.w	r2, r1, lsl #24
 8009b6a:	f47f ae80 	bne.w	800986e <HAL_RCC_OscConfig+0x5a>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8009b6e:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8009b70:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8009b74:	ebb3 7f02 	cmp.w	r3, r2, lsl #28
 8009b78:	f43f ae62 	beq.w	8009840 <HAL_RCC_OscConfig+0x2c>
 8009b7c:	e677      	b.n	800986e <HAL_RCC_OscConfig+0x5a>
 8009b7e:	bf00      	nop
 8009b80:	40023800 	.word	0x40023800
 8009b84:	42470000 	.word	0x42470000

08009b88 <UART_SetConfig>:
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009b88:	6803      	ldr	r3, [r0, #0]
 8009b8a:	68c1      	ldr	r1, [r0, #12]
 8009b8c:	691a      	ldr	r2, [r3, #16]
 8009b8e:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8009b92:	430a      	orrs	r2, r1
{
 8009b94:	b570      	push	{r4, r5, r6, lr}
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009b96:	611a      	str	r2, [r3, #16]
{
 8009b98:	4605      	mov	r5, r0
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8009b9a:	6882      	ldr	r2, [r0, #8]
 8009b9c:	6900      	ldr	r0, [r0, #16]
  MODIFY_REG(huart->Instance->CR1,
 8009b9e:	68d9      	ldr	r1, [r3, #12]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8009ba0:	4302      	orrs	r2, r0
 8009ba2:	6968      	ldr	r0, [r5, #20]
 8009ba4:	4302      	orrs	r2, r0
 8009ba6:	69e8      	ldr	r0, [r5, #28]
  MODIFY_REG(huart->Instance->CR1,
 8009ba8:	f421 4116 	bic.w	r1, r1, #38400	; 0x9600
 8009bac:	f021 010c 	bic.w	r1, r1, #12
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8009bb0:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1,
 8009bb2:	430a      	orrs	r2, r1
 8009bb4:	60da      	str	r2, [r3, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8009bb6:	695a      	ldr	r2, [r3, #20]
 8009bb8:	69a9      	ldr	r1, [r5, #24]
 8009bba:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8009bbe:	430a      	orrs	r2, r1
 8009bc0:	615a      	str	r2, [r3, #20]


#if defined(USART6) && defined(UART9) && defined(UART10)
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
 8009bc2:	4a23      	ldr	r2, [pc, #140]	; (8009c50 <UART_SetConfig+0xc8>)
 8009bc4:	4293      	cmp	r3, r2
 8009bc6:	d00b      	beq.n	8009be0 <UART_SetConfig+0x58>
 8009bc8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8009bcc:	4293      	cmp	r3, r2
 8009bce:	d007      	beq.n	8009be0 <UART_SetConfig+0x58>
 8009bd0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8009bd4:	4293      	cmp	r3, r2
 8009bd6:	d003      	beq.n	8009be0 <UART_SetConfig+0x58>
 8009bd8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8009bdc:	4293      	cmp	r3, r2
 8009bde:	d123      	bne.n	8009c28 <UART_SetConfig+0xa0>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8009be0:	f7ff fe08 	bl	80097f4 <HAL_RCC_GetPCLK2Freq>
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009be4:	69eb      	ldr	r3, [r5, #28]
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8009be6:	2119      	movs	r1, #25
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009be8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8009bec:	e9d5 4600 	ldrd	r4, r6, [r5]
 8009bf0:	fba0 0101 	umull	r0, r1, r0, r1
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009bf4:	d11b      	bne.n	8009c2e <UART_SetConfig+0xa6>
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8009bf6:	19b2      	adds	r2, r6, r6
 8009bf8:	f04f 0300 	mov.w	r3, #0
 8009bfc:	415b      	adcs	r3, r3
 8009bfe:	f7fc fb8f 	bl	8006320 <__aeabi_uldivmod>
 8009c02:	2164      	movs	r1, #100	; 0x64
 8009c04:	fbb0 f5f1 	udiv	r5, r0, r1
 8009c08:	fb01 0315 	mls	r3, r1, r5, r0
 8009c0c:	00db      	lsls	r3, r3, #3
 8009c0e:	3332      	adds	r3, #50	; 0x32
 8009c10:	fbb3 f3f1 	udiv	r3, r3, r1
 8009c14:	f003 0207 	and.w	r2, r3, #7
 8009c18:	005b      	lsls	r3, r3, #1
 8009c1a:	eb02 1205 	add.w	r2, r2, r5, lsl #4
 8009c1e:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8009c22:	4413      	add	r3, r2
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8009c24:	60a3      	str	r3, [r4, #8]
  }
}
 8009c26:	bd70      	pop	{r4, r5, r6, pc}
      pclk = HAL_RCC_GetPCLK1Freq();
 8009c28:	f7ff fdd4 	bl	80097d4 <HAL_RCC_GetPCLK1Freq>
 8009c2c:	e7da      	b.n	8009be4 <UART_SetConfig+0x5c>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8009c2e:	00b2      	lsls	r2, r6, #2
 8009c30:	0fb3      	lsrs	r3, r6, #30
 8009c32:	f7fc fb75 	bl	8006320 <__aeabi_uldivmod>
 8009c36:	2264      	movs	r2, #100	; 0x64
 8009c38:	fbb0 f1f2 	udiv	r1, r0, r2
 8009c3c:	fb02 0311 	mls	r3, r2, r1, r0
 8009c40:	011b      	lsls	r3, r3, #4
 8009c42:	3332      	adds	r3, #50	; 0x32
 8009c44:	fbb3 f3f2 	udiv	r3, r3, r2
 8009c48:	eb03 1301 	add.w	r3, r3, r1, lsl #4
 8009c4c:	e7ea      	b.n	8009c24 <UART_SetConfig+0x9c>
 8009c4e:	bf00      	nop
 8009c50:	40011000 	.word	0x40011000

08009c54 <UART_WaitOnFlagUntilTimeout.constprop.0>:
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
 8009c54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009c56:	4604      	mov	r4, r0
 8009c58:	460e      	mov	r6, r1
 8009c5a:	4617      	mov	r7, r2
 8009c5c:	461d      	mov	r5, r3
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009c5e:	6822      	ldr	r2, [r4, #0]
 8009c60:	6813      	ldr	r3, [r2, #0]
 8009c62:	ea36 0303 	bics.w	r3, r6, r3
 8009c66:	d101      	bne.n	8009c6c <UART_WaitOnFlagUntilTimeout.constprop.0+0x18>
  return HAL_OK;
 8009c68:	2000      	movs	r0, #0
 8009c6a:	e014      	b.n	8009c96 <UART_WaitOnFlagUntilTimeout.constprop.0+0x42>
    if (Timeout != HAL_MAX_DELAY)
 8009c6c:	1c6b      	adds	r3, r5, #1
 8009c6e:	d0f7      	beq.n	8009c60 <UART_WaitOnFlagUntilTimeout.constprop.0+0xc>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8009c70:	b995      	cbnz	r5, 8009c98 <UART_WaitOnFlagUntilTimeout.constprop.0+0x44>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8009c72:	6823      	ldr	r3, [r4, #0]
 8009c74:	68da      	ldr	r2, [r3, #12]
 8009c76:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8009c7a:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009c7c:	695a      	ldr	r2, [r3, #20]
 8009c7e:	f022 0201 	bic.w	r2, r2, #1
 8009c82:	615a      	str	r2, [r3, #20]
        huart->gState  = HAL_UART_STATE_READY;
 8009c84:	2320      	movs	r3, #32
 8009c86:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8009c8a:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        __HAL_UNLOCK(huart);
 8009c8e:	2300      	movs	r3, #0
 8009c90:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
 8009c94:	2003      	movs	r0, #3
}
 8009c96:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8009c98:	f7ff f94a 	bl	8008f30 <HAL_GetTick>
 8009c9c:	1bc0      	subs	r0, r0, r7
 8009c9e:	4285      	cmp	r5, r0
 8009ca0:	d2dd      	bcs.n	8009c5e <UART_WaitOnFlagUntilTimeout.constprop.0+0xa>
 8009ca2:	e7e6      	b.n	8009c72 <UART_WaitOnFlagUntilTimeout.constprop.0+0x1e>

08009ca4 <HAL_UART_Init>:
{
 8009ca4:	b510      	push	{r4, lr}
  if (huart == NULL)
 8009ca6:	4604      	mov	r4, r0
 8009ca8:	b340      	cbz	r0, 8009cfc <HAL_UART_Init+0x58>
  if (huart->gState == HAL_UART_STATE_RESET)
 8009caa:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8009cae:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8009cb2:	b91b      	cbnz	r3, 8009cbc <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 8009cb4:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_UART_MspInit(huart);
 8009cb8:	f7fc fd36 	bl	8006728 <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 8009cbc:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8009cbe:	2324      	movs	r3, #36	; 0x24
 8009cc0:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UART_DISABLE(huart);
 8009cc4:	68d3      	ldr	r3, [r2, #12]
 8009cc6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009cca:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 8009ccc:	4620      	mov	r0, r4
 8009cce:	f7ff ff5b 	bl	8009b88 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009cd2:	6823      	ldr	r3, [r4, #0]
 8009cd4:	691a      	ldr	r2, [r3, #16]
 8009cd6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8009cda:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009cdc:	695a      	ldr	r2, [r3, #20]
 8009cde:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8009ce2:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 8009ce4:	68da      	ldr	r2, [r3, #12]
 8009ce6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8009cea:	60da      	str	r2, [r3, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009cec:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 8009cee:	2320      	movs	r3, #32
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009cf0:	6420      	str	r0, [r4, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8009cf2:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8009cf6:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
}
 8009cfa:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8009cfc:	2001      	movs	r0, #1
 8009cfe:	e7fc      	b.n	8009cfa <HAL_UART_Init+0x56>

08009d00 <HAL_UART_Transmit>:
{
 8009d00:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009d02:	4617      	mov	r7, r2
  if (huart->gState == HAL_UART_STATE_READY)
 8009d04:	f890 203d 	ldrb.w	r2, [r0, #61]	; 0x3d
{
 8009d08:	9300      	str	r3, [sp, #0]
  if (huart->gState == HAL_UART_STATE_READY)
 8009d0a:	2a20      	cmp	r2, #32
{
 8009d0c:	4604      	mov	r4, r0
 8009d0e:	460e      	mov	r6, r1
  if (huart->gState == HAL_UART_STATE_READY)
 8009d10:	d149      	bne.n	8009da6 <HAL_UART_Transmit+0xa6>
    if ((pData == NULL) || (Size == 0U))
 8009d12:	2900      	cmp	r1, #0
 8009d14:	d045      	beq.n	8009da2 <HAL_UART_Transmit+0xa2>
 8009d16:	2f00      	cmp	r7, #0
 8009d18:	d043      	beq.n	8009da2 <HAL_UART_Transmit+0xa2>
    __HAL_LOCK(huart);
 8009d1a:	f890 203c 	ldrb.w	r2, [r0, #60]	; 0x3c
 8009d1e:	2a01      	cmp	r2, #1
 8009d20:	d041      	beq.n	8009da6 <HAL_UART_Transmit+0xa6>
 8009d22:	2201      	movs	r2, #1
 8009d24:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009d28:	2500      	movs	r5, #0
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8009d2a:	2221      	movs	r2, #33	; 0x21
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009d2c:	6405      	str	r5, [r0, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8009d2e:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
    tickstart = HAL_GetTick();
 8009d32:	f7ff f8fd 	bl	8008f30 <HAL_GetTick>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009d36:	68a1      	ldr	r1, [r4, #8]
 8009d38:	9b00      	ldr	r3, [sp, #0]
    huart->TxXferSize = Size;
 8009d3a:	84a7      	strh	r7, [r4, #36]	; 0x24
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009d3c:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
    tickstart = HAL_GetTick();
 8009d40:	4602      	mov	r2, r0
    huart->TxXferCount = Size;
 8009d42:	84e7      	strh	r7, [r4, #38]	; 0x26
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009d44:	d103      	bne.n	8009d4e <HAL_UART_Transmit+0x4e>
 8009d46:	6921      	ldr	r1, [r4, #16]
 8009d48:	b909      	cbnz	r1, 8009d4e <HAL_UART_Transmit+0x4e>
 8009d4a:	4635      	mov	r5, r6
      pdata8bits  = NULL;
 8009d4c:	460e      	mov	r6, r1
    __HAL_UNLOCK(huart);
 8009d4e:	2100      	movs	r1, #0
 8009d50:	f884 103c 	strb.w	r1, [r4, #60]	; 0x3c
    while (huart->TxXferCount > 0U)
 8009d54:	8ce1      	ldrh	r1, [r4, #38]	; 0x26
 8009d56:	b289      	uxth	r1, r1
 8009d58:	b941      	cbnz	r1, 8009d6c <HAL_UART_Transmit+0x6c>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8009d5a:	2140      	movs	r1, #64	; 0x40
 8009d5c:	4620      	mov	r0, r4
 8009d5e:	f7ff ff79 	bl	8009c54 <UART_WaitOnFlagUntilTimeout.constprop.0>
 8009d62:	b960      	cbnz	r0, 8009d7e <HAL_UART_Transmit+0x7e>
    huart->gState = HAL_UART_STATE_READY;
 8009d64:	2320      	movs	r3, #32
 8009d66:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    return HAL_OK;
 8009d6a:	e009      	b.n	8009d80 <HAL_UART_Transmit+0x80>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8009d6c:	2180      	movs	r1, #128	; 0x80
 8009d6e:	4620      	mov	r0, r4
 8009d70:	e9cd 2300 	strd	r2, r3, [sp]
 8009d74:	f7ff ff6e 	bl	8009c54 <UART_WaitOnFlagUntilTimeout.constprop.0>
 8009d78:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009d7c:	b110      	cbz	r0, 8009d84 <HAL_UART_Transmit+0x84>
        return HAL_TIMEOUT;
 8009d7e:	2003      	movs	r0, #3
}
 8009d80:	b003      	add	sp, #12
 8009d82:	bdf0      	pop	{r4, r5, r6, r7, pc}
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8009d84:	6820      	ldr	r0, [r4, #0]
      if (pdata8bits == NULL)
 8009d86:	b94e      	cbnz	r6, 8009d9c <HAL_UART_Transmit+0x9c>
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8009d88:	f835 1b02 	ldrh.w	r1, [r5], #2
 8009d8c:	f3c1 0108 	ubfx	r1, r1, #0, #9
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8009d90:	6041      	str	r1, [r0, #4]
      huart->TxXferCount--;
 8009d92:	8ce1      	ldrh	r1, [r4, #38]	; 0x26
 8009d94:	3901      	subs	r1, #1
 8009d96:	b289      	uxth	r1, r1
 8009d98:	84e1      	strh	r1, [r4, #38]	; 0x26
 8009d9a:	e7db      	b.n	8009d54 <HAL_UART_Transmit+0x54>
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8009d9c:	f816 1b01 	ldrb.w	r1, [r6], #1
 8009da0:	e7f6      	b.n	8009d90 <HAL_UART_Transmit+0x90>
      return  HAL_ERROR;
 8009da2:	2001      	movs	r0, #1
 8009da4:	e7ec      	b.n	8009d80 <HAL_UART_Transmit+0x80>
    return HAL_BUSY;
 8009da6:	2002      	movs	r0, #2
 8009da8:	e7ea      	b.n	8009d80 <HAL_UART_Transmit+0x80>

08009daa <HAL_UART_Receive>:
{
 8009daa:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009dae:	4699      	mov	r9, r3
  if (huart->RxState == HAL_UART_STATE_READY)
 8009db0:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
 8009db4:	2b20      	cmp	r3, #32
{
 8009db6:	4604      	mov	r4, r0
 8009db8:	460f      	mov	r7, r1
 8009dba:	4615      	mov	r5, r2
  if (huart->RxState == HAL_UART_STATE_READY)
 8009dbc:	d14d      	bne.n	8009e5a <HAL_UART_Receive+0xb0>
    if ((pData == NULL) || (Size == 0U))
 8009dbe:	2900      	cmp	r1, #0
 8009dc0:	d049      	beq.n	8009e56 <HAL_UART_Receive+0xac>
 8009dc2:	2a00      	cmp	r2, #0
 8009dc4:	d047      	beq.n	8009e56 <HAL_UART_Receive+0xac>
    __HAL_LOCK(huart);
 8009dc6:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8009dca:	2b01      	cmp	r3, #1
 8009dcc:	d045      	beq.n	8009e5a <HAL_UART_Receive+0xb0>
 8009dce:	2301      	movs	r3, #1
 8009dd0:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009dd4:	2600      	movs	r6, #0
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8009dd6:	2322      	movs	r3, #34	; 0x22
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009dd8:	6406      	str	r6, [r0, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8009dda:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009dde:	6306      	str	r6, [r0, #48]	; 0x30
    tickstart = HAL_GetTick();
 8009de0:	f7ff f8a6 	bl	8008f30 <HAL_GetTick>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009de4:	68a3      	ldr	r3, [r4, #8]
    huart->RxXferSize = Size;
 8009de6:	85a5      	strh	r5, [r4, #44]	; 0x2c
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009de8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
    tickstart = HAL_GetTick();
 8009dec:	4680      	mov	r8, r0
    huart->RxXferCount = Size;
 8009dee:	85e5      	strh	r5, [r4, #46]	; 0x2e
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009df0:	d103      	bne.n	8009dfa <HAL_UART_Receive+0x50>
 8009df2:	6923      	ldr	r3, [r4, #16]
 8009df4:	b90b      	cbnz	r3, 8009dfa <HAL_UART_Receive+0x50>
 8009df6:	463e      	mov	r6, r7
      pdata8bits  = NULL;
 8009df8:	461f      	mov	r7, r3
    __HAL_UNLOCK(huart);
 8009dfa:	2300      	movs	r3, #0
 8009dfc:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    while (huart->RxXferCount > 0U)
 8009e00:	8de5      	ldrh	r5, [r4, #46]	; 0x2e
 8009e02:	b2a8      	uxth	r0, r5
 8009e04:	b920      	cbnz	r0, 8009e10 <HAL_UART_Receive+0x66>
    huart->RxState = HAL_UART_STATE_READY;
 8009e06:	2320      	movs	r3, #32
 8009e08:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
}
 8009e0c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8009e10:	464b      	mov	r3, r9
 8009e12:	4642      	mov	r2, r8
 8009e14:	2120      	movs	r1, #32
 8009e16:	4620      	mov	r0, r4
 8009e18:	f7ff ff1c 	bl	8009c54 <UART_WaitOnFlagUntilTimeout.constprop.0>
 8009e1c:	b9f8      	cbnz	r0, 8009e5e <HAL_UART_Receive+0xb4>
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8009e1e:	6823      	ldr	r3, [r4, #0]
      if (pdata8bits == NULL)
 8009e20:	b94f      	cbnz	r7, 8009e36 <HAL_UART_Receive+0x8c>
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8009e22:	685b      	ldr	r3, [r3, #4]
 8009e24:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009e28:	f826 3b02 	strh.w	r3, [r6], #2
      huart->RxXferCount--;
 8009e2c:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
 8009e2e:	3b01      	subs	r3, #1
 8009e30:	b29b      	uxth	r3, r3
 8009e32:	85e3      	strh	r3, [r4, #46]	; 0x2e
 8009e34:	e7e4      	b.n	8009e00 <HAL_UART_Receive+0x56>
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8009e36:	68a2      	ldr	r2, [r4, #8]
 8009e38:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 8009e3c:	d002      	beq.n	8009e44 <HAL_UART_Receive+0x9a>
 8009e3e:	b932      	cbnz	r2, 8009e4e <HAL_UART_Receive+0xa4>
 8009e40:	6922      	ldr	r2, [r4, #16]
 8009e42:	b922      	cbnz	r2, 8009e4e <HAL_UART_Receive+0xa4>
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8009e44:	6859      	ldr	r1, [r3, #4]
 8009e46:	b2c9      	uxtb	r1, r1
 8009e48:	f807 1b01 	strb.w	r1, [r7], #1
        pdata8bits++;
 8009e4c:	e7ee      	b.n	8009e2c <HAL_UART_Receive+0x82>
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8009e4e:	6859      	ldr	r1, [r3, #4]
 8009e50:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 8009e54:	e7f8      	b.n	8009e48 <HAL_UART_Receive+0x9e>
      return  HAL_ERROR;
 8009e56:	2001      	movs	r0, #1
 8009e58:	e7d8      	b.n	8009e0c <HAL_UART_Receive+0x62>
    return HAL_BUSY;
 8009e5a:	2002      	movs	r0, #2
 8009e5c:	e7d6      	b.n	8009e0c <HAL_UART_Receive+0x62>
        return HAL_TIMEOUT;
 8009e5e:	2003      	movs	r0, #3
 8009e60:	e7d4      	b.n	8009e0c <HAL_UART_Receive+0x62>
	...

08009e64 <__errno>:
 8009e64:	4b01      	ldr	r3, [pc, #4]	; (8009e6c <__errno+0x8>)
 8009e66:	6818      	ldr	r0, [r3, #0]
 8009e68:	4770      	bx	lr
 8009e6a:	bf00      	nop
 8009e6c:	20001070 	.word	0x20001070

08009e70 <__libc_init_array>:
 8009e70:	b570      	push	{r4, r5, r6, lr}
 8009e72:	4d0d      	ldr	r5, [pc, #52]	; (8009ea8 <__libc_init_array+0x38>)
 8009e74:	4c0d      	ldr	r4, [pc, #52]	; (8009eac <__libc_init_array+0x3c>)
 8009e76:	1b64      	subs	r4, r4, r5
 8009e78:	10a4      	asrs	r4, r4, #2
 8009e7a:	2600      	movs	r6, #0
 8009e7c:	42a6      	cmp	r6, r4
 8009e7e:	d109      	bne.n	8009e94 <__libc_init_array+0x24>
 8009e80:	4d0b      	ldr	r5, [pc, #44]	; (8009eb0 <__libc_init_array+0x40>)
 8009e82:	4c0c      	ldr	r4, [pc, #48]	; (8009eb4 <__libc_init_array+0x44>)
 8009e84:	f001 f910 	bl	800b0a8 <_init>
 8009e88:	1b64      	subs	r4, r4, r5
 8009e8a:	10a4      	asrs	r4, r4, #2
 8009e8c:	2600      	movs	r6, #0
 8009e8e:	42a6      	cmp	r6, r4
 8009e90:	d105      	bne.n	8009e9e <__libc_init_array+0x2e>
 8009e92:	bd70      	pop	{r4, r5, r6, pc}
 8009e94:	f855 3b04 	ldr.w	r3, [r5], #4
 8009e98:	4798      	blx	r3
 8009e9a:	3601      	adds	r6, #1
 8009e9c:	e7ee      	b.n	8009e7c <__libc_init_array+0xc>
 8009e9e:	f855 3b04 	ldr.w	r3, [r5], #4
 8009ea2:	4798      	blx	r3
 8009ea4:	3601      	adds	r6, #1
 8009ea6:	e7f2      	b.n	8009e8e <__libc_init_array+0x1e>
 8009ea8:	0800c030 	.word	0x0800c030
 8009eac:	0800c030 	.word	0x0800c030
 8009eb0:	0800c030 	.word	0x0800c030
 8009eb4:	0800c034 	.word	0x0800c034

08009eb8 <memcmp>:
 8009eb8:	b510      	push	{r4, lr}
 8009eba:	3901      	subs	r1, #1
 8009ebc:	4402      	add	r2, r0
 8009ebe:	4290      	cmp	r0, r2
 8009ec0:	d101      	bne.n	8009ec6 <memcmp+0xe>
 8009ec2:	2000      	movs	r0, #0
 8009ec4:	e005      	b.n	8009ed2 <memcmp+0x1a>
 8009ec6:	7803      	ldrb	r3, [r0, #0]
 8009ec8:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8009ecc:	42a3      	cmp	r3, r4
 8009ece:	d001      	beq.n	8009ed4 <memcmp+0x1c>
 8009ed0:	1b18      	subs	r0, r3, r4
 8009ed2:	bd10      	pop	{r4, pc}
 8009ed4:	3001      	adds	r0, #1
 8009ed6:	e7f2      	b.n	8009ebe <memcmp+0x6>

08009ed8 <memcpy>:
 8009ed8:	440a      	add	r2, r1
 8009eda:	4291      	cmp	r1, r2
 8009edc:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8009ee0:	d100      	bne.n	8009ee4 <memcpy+0xc>
 8009ee2:	4770      	bx	lr
 8009ee4:	b510      	push	{r4, lr}
 8009ee6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009eea:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009eee:	4291      	cmp	r1, r2
 8009ef0:	d1f9      	bne.n	8009ee6 <memcpy+0xe>
 8009ef2:	bd10      	pop	{r4, pc}

08009ef4 <memset>:
 8009ef4:	4402      	add	r2, r0
 8009ef6:	4603      	mov	r3, r0
 8009ef8:	4293      	cmp	r3, r2
 8009efa:	d100      	bne.n	8009efe <memset+0xa>
 8009efc:	4770      	bx	lr
 8009efe:	f803 1b01 	strb.w	r1, [r3], #1
 8009f02:	e7f9      	b.n	8009ef8 <memset+0x4>

08009f04 <iprintf>:
 8009f04:	b40f      	push	{r0, r1, r2, r3}
 8009f06:	4b0a      	ldr	r3, [pc, #40]	; (8009f30 <iprintf+0x2c>)
 8009f08:	b513      	push	{r0, r1, r4, lr}
 8009f0a:	681c      	ldr	r4, [r3, #0]
 8009f0c:	b124      	cbz	r4, 8009f18 <iprintf+0x14>
 8009f0e:	69a3      	ldr	r3, [r4, #24]
 8009f10:	b913      	cbnz	r3, 8009f18 <iprintf+0x14>
 8009f12:	4620      	mov	r0, r4
 8009f14:	f000 fb24 	bl	800a560 <__sinit>
 8009f18:	ab05      	add	r3, sp, #20
 8009f1a:	9a04      	ldr	r2, [sp, #16]
 8009f1c:	68a1      	ldr	r1, [r4, #8]
 8009f1e:	9301      	str	r3, [sp, #4]
 8009f20:	4620      	mov	r0, r4
 8009f22:	f000 fd35 	bl	800a990 <_vfiprintf_r>
 8009f26:	b002      	add	sp, #8
 8009f28:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009f2c:	b004      	add	sp, #16
 8009f2e:	4770      	bx	lr
 8009f30:	20001070 	.word	0x20001070

08009f34 <_puts_r>:
 8009f34:	b570      	push	{r4, r5, r6, lr}
 8009f36:	460e      	mov	r6, r1
 8009f38:	4605      	mov	r5, r0
 8009f3a:	b118      	cbz	r0, 8009f44 <_puts_r+0x10>
 8009f3c:	6983      	ldr	r3, [r0, #24]
 8009f3e:	b90b      	cbnz	r3, 8009f44 <_puts_r+0x10>
 8009f40:	f000 fb0e 	bl	800a560 <__sinit>
 8009f44:	69ab      	ldr	r3, [r5, #24]
 8009f46:	68ac      	ldr	r4, [r5, #8]
 8009f48:	b913      	cbnz	r3, 8009f50 <_puts_r+0x1c>
 8009f4a:	4628      	mov	r0, r5
 8009f4c:	f000 fb08 	bl	800a560 <__sinit>
 8009f50:	4b2c      	ldr	r3, [pc, #176]	; (800a004 <_puts_r+0xd0>)
 8009f52:	429c      	cmp	r4, r3
 8009f54:	d120      	bne.n	8009f98 <_puts_r+0x64>
 8009f56:	686c      	ldr	r4, [r5, #4]
 8009f58:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009f5a:	07db      	lsls	r3, r3, #31
 8009f5c:	d405      	bmi.n	8009f6a <_puts_r+0x36>
 8009f5e:	89a3      	ldrh	r3, [r4, #12]
 8009f60:	0598      	lsls	r0, r3, #22
 8009f62:	d402      	bmi.n	8009f6a <_puts_r+0x36>
 8009f64:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009f66:	f000 fb99 	bl	800a69c <__retarget_lock_acquire_recursive>
 8009f6a:	89a3      	ldrh	r3, [r4, #12]
 8009f6c:	0719      	lsls	r1, r3, #28
 8009f6e:	d51d      	bpl.n	8009fac <_puts_r+0x78>
 8009f70:	6923      	ldr	r3, [r4, #16]
 8009f72:	b1db      	cbz	r3, 8009fac <_puts_r+0x78>
 8009f74:	3e01      	subs	r6, #1
 8009f76:	68a3      	ldr	r3, [r4, #8]
 8009f78:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8009f7c:	3b01      	subs	r3, #1
 8009f7e:	60a3      	str	r3, [r4, #8]
 8009f80:	bb39      	cbnz	r1, 8009fd2 <_puts_r+0x9e>
 8009f82:	2b00      	cmp	r3, #0
 8009f84:	da38      	bge.n	8009ff8 <_puts_r+0xc4>
 8009f86:	4622      	mov	r2, r4
 8009f88:	210a      	movs	r1, #10
 8009f8a:	4628      	mov	r0, r5
 8009f8c:	f000 f90e 	bl	800a1ac <__swbuf_r>
 8009f90:	3001      	adds	r0, #1
 8009f92:	d011      	beq.n	8009fb8 <_puts_r+0x84>
 8009f94:	250a      	movs	r5, #10
 8009f96:	e011      	b.n	8009fbc <_puts_r+0x88>
 8009f98:	4b1b      	ldr	r3, [pc, #108]	; (800a008 <_puts_r+0xd4>)
 8009f9a:	429c      	cmp	r4, r3
 8009f9c:	d101      	bne.n	8009fa2 <_puts_r+0x6e>
 8009f9e:	68ac      	ldr	r4, [r5, #8]
 8009fa0:	e7da      	b.n	8009f58 <_puts_r+0x24>
 8009fa2:	4b1a      	ldr	r3, [pc, #104]	; (800a00c <_puts_r+0xd8>)
 8009fa4:	429c      	cmp	r4, r3
 8009fa6:	bf08      	it	eq
 8009fa8:	68ec      	ldreq	r4, [r5, #12]
 8009faa:	e7d5      	b.n	8009f58 <_puts_r+0x24>
 8009fac:	4621      	mov	r1, r4
 8009fae:	4628      	mov	r0, r5
 8009fb0:	f000 f94e 	bl	800a250 <__swsetup_r>
 8009fb4:	2800      	cmp	r0, #0
 8009fb6:	d0dd      	beq.n	8009f74 <_puts_r+0x40>
 8009fb8:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8009fbc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009fbe:	07da      	lsls	r2, r3, #31
 8009fc0:	d405      	bmi.n	8009fce <_puts_r+0x9a>
 8009fc2:	89a3      	ldrh	r3, [r4, #12]
 8009fc4:	059b      	lsls	r3, r3, #22
 8009fc6:	d402      	bmi.n	8009fce <_puts_r+0x9a>
 8009fc8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009fca:	f000 fb68 	bl	800a69e <__retarget_lock_release_recursive>
 8009fce:	4628      	mov	r0, r5
 8009fd0:	bd70      	pop	{r4, r5, r6, pc}
 8009fd2:	2b00      	cmp	r3, #0
 8009fd4:	da04      	bge.n	8009fe0 <_puts_r+0xac>
 8009fd6:	69a2      	ldr	r2, [r4, #24]
 8009fd8:	429a      	cmp	r2, r3
 8009fda:	dc06      	bgt.n	8009fea <_puts_r+0xb6>
 8009fdc:	290a      	cmp	r1, #10
 8009fde:	d004      	beq.n	8009fea <_puts_r+0xb6>
 8009fe0:	6823      	ldr	r3, [r4, #0]
 8009fe2:	1c5a      	adds	r2, r3, #1
 8009fe4:	6022      	str	r2, [r4, #0]
 8009fe6:	7019      	strb	r1, [r3, #0]
 8009fe8:	e7c5      	b.n	8009f76 <_puts_r+0x42>
 8009fea:	4622      	mov	r2, r4
 8009fec:	4628      	mov	r0, r5
 8009fee:	f000 f8dd 	bl	800a1ac <__swbuf_r>
 8009ff2:	3001      	adds	r0, #1
 8009ff4:	d1bf      	bne.n	8009f76 <_puts_r+0x42>
 8009ff6:	e7df      	b.n	8009fb8 <_puts_r+0x84>
 8009ff8:	6823      	ldr	r3, [r4, #0]
 8009ffa:	250a      	movs	r5, #10
 8009ffc:	1c5a      	adds	r2, r3, #1
 8009ffe:	6022      	str	r2, [r4, #0]
 800a000:	701d      	strb	r5, [r3, #0]
 800a002:	e7db      	b.n	8009fbc <_puts_r+0x88>
 800a004:	0800bfb4 	.word	0x0800bfb4
 800a008:	0800bfd4 	.word	0x0800bfd4
 800a00c:	0800bf94 	.word	0x0800bf94

0800a010 <puts>:
 800a010:	4b02      	ldr	r3, [pc, #8]	; (800a01c <puts+0xc>)
 800a012:	4601      	mov	r1, r0
 800a014:	6818      	ldr	r0, [r3, #0]
 800a016:	f7ff bf8d 	b.w	8009f34 <_puts_r>
 800a01a:	bf00      	nop
 800a01c:	20001070 	.word	0x20001070

0800a020 <setvbuf>:
 800a020:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800a024:	461d      	mov	r5, r3
 800a026:	4b5d      	ldr	r3, [pc, #372]	; (800a19c <setvbuf+0x17c>)
 800a028:	681f      	ldr	r7, [r3, #0]
 800a02a:	4604      	mov	r4, r0
 800a02c:	460e      	mov	r6, r1
 800a02e:	4690      	mov	r8, r2
 800a030:	b127      	cbz	r7, 800a03c <setvbuf+0x1c>
 800a032:	69bb      	ldr	r3, [r7, #24]
 800a034:	b913      	cbnz	r3, 800a03c <setvbuf+0x1c>
 800a036:	4638      	mov	r0, r7
 800a038:	f000 fa92 	bl	800a560 <__sinit>
 800a03c:	4b58      	ldr	r3, [pc, #352]	; (800a1a0 <setvbuf+0x180>)
 800a03e:	429c      	cmp	r4, r3
 800a040:	d167      	bne.n	800a112 <setvbuf+0xf2>
 800a042:	687c      	ldr	r4, [r7, #4]
 800a044:	f1b8 0f02 	cmp.w	r8, #2
 800a048:	d006      	beq.n	800a058 <setvbuf+0x38>
 800a04a:	f1b8 0f01 	cmp.w	r8, #1
 800a04e:	f200 809f 	bhi.w	800a190 <setvbuf+0x170>
 800a052:	2d00      	cmp	r5, #0
 800a054:	f2c0 809c 	blt.w	800a190 <setvbuf+0x170>
 800a058:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a05a:	07db      	lsls	r3, r3, #31
 800a05c:	d405      	bmi.n	800a06a <setvbuf+0x4a>
 800a05e:	89a3      	ldrh	r3, [r4, #12]
 800a060:	0598      	lsls	r0, r3, #22
 800a062:	d402      	bmi.n	800a06a <setvbuf+0x4a>
 800a064:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a066:	f000 fb19 	bl	800a69c <__retarget_lock_acquire_recursive>
 800a06a:	4621      	mov	r1, r4
 800a06c:	4638      	mov	r0, r7
 800a06e:	f000 f9e3 	bl	800a438 <_fflush_r>
 800a072:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a074:	b141      	cbz	r1, 800a088 <setvbuf+0x68>
 800a076:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a07a:	4299      	cmp	r1, r3
 800a07c:	d002      	beq.n	800a084 <setvbuf+0x64>
 800a07e:	4638      	mov	r0, r7
 800a080:	f000 fb7c 	bl	800a77c <_free_r>
 800a084:	2300      	movs	r3, #0
 800a086:	6363      	str	r3, [r4, #52]	; 0x34
 800a088:	2300      	movs	r3, #0
 800a08a:	61a3      	str	r3, [r4, #24]
 800a08c:	6063      	str	r3, [r4, #4]
 800a08e:	89a3      	ldrh	r3, [r4, #12]
 800a090:	0619      	lsls	r1, r3, #24
 800a092:	d503      	bpl.n	800a09c <setvbuf+0x7c>
 800a094:	6921      	ldr	r1, [r4, #16]
 800a096:	4638      	mov	r0, r7
 800a098:	f000 fb70 	bl	800a77c <_free_r>
 800a09c:	89a3      	ldrh	r3, [r4, #12]
 800a09e:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 800a0a2:	f023 0303 	bic.w	r3, r3, #3
 800a0a6:	f1b8 0f02 	cmp.w	r8, #2
 800a0aa:	81a3      	strh	r3, [r4, #12]
 800a0ac:	d06c      	beq.n	800a188 <setvbuf+0x168>
 800a0ae:	ab01      	add	r3, sp, #4
 800a0b0:	466a      	mov	r2, sp
 800a0b2:	4621      	mov	r1, r4
 800a0b4:	4638      	mov	r0, r7
 800a0b6:	f000 faf3 	bl	800a6a0 <__swhatbuf_r>
 800a0ba:	89a3      	ldrh	r3, [r4, #12]
 800a0bc:	4318      	orrs	r0, r3
 800a0be:	81a0      	strh	r0, [r4, #12]
 800a0c0:	2d00      	cmp	r5, #0
 800a0c2:	d130      	bne.n	800a126 <setvbuf+0x106>
 800a0c4:	9d00      	ldr	r5, [sp, #0]
 800a0c6:	4628      	mov	r0, r5
 800a0c8:	f000 fb50 	bl	800a76c <malloc>
 800a0cc:	4606      	mov	r6, r0
 800a0ce:	2800      	cmp	r0, #0
 800a0d0:	d155      	bne.n	800a17e <setvbuf+0x15e>
 800a0d2:	f8dd 9000 	ldr.w	r9, [sp]
 800a0d6:	45a9      	cmp	r9, r5
 800a0d8:	d14a      	bne.n	800a170 <setvbuf+0x150>
 800a0da:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 800a0de:	2200      	movs	r2, #0
 800a0e0:	60a2      	str	r2, [r4, #8]
 800a0e2:	f104 0247 	add.w	r2, r4, #71	; 0x47
 800a0e6:	6022      	str	r2, [r4, #0]
 800a0e8:	6122      	str	r2, [r4, #16]
 800a0ea:	2201      	movs	r2, #1
 800a0ec:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a0f0:	6162      	str	r2, [r4, #20]
 800a0f2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800a0f4:	f043 0302 	orr.w	r3, r3, #2
 800a0f8:	07d2      	lsls	r2, r2, #31
 800a0fa:	81a3      	strh	r3, [r4, #12]
 800a0fc:	d405      	bmi.n	800a10a <setvbuf+0xea>
 800a0fe:	f413 7f00 	tst.w	r3, #512	; 0x200
 800a102:	d102      	bne.n	800a10a <setvbuf+0xea>
 800a104:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a106:	f000 faca 	bl	800a69e <__retarget_lock_release_recursive>
 800a10a:	4628      	mov	r0, r5
 800a10c:	b003      	add	sp, #12
 800a10e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a112:	4b24      	ldr	r3, [pc, #144]	; (800a1a4 <setvbuf+0x184>)
 800a114:	429c      	cmp	r4, r3
 800a116:	d101      	bne.n	800a11c <setvbuf+0xfc>
 800a118:	68bc      	ldr	r4, [r7, #8]
 800a11a:	e793      	b.n	800a044 <setvbuf+0x24>
 800a11c:	4b22      	ldr	r3, [pc, #136]	; (800a1a8 <setvbuf+0x188>)
 800a11e:	429c      	cmp	r4, r3
 800a120:	bf08      	it	eq
 800a122:	68fc      	ldreq	r4, [r7, #12]
 800a124:	e78e      	b.n	800a044 <setvbuf+0x24>
 800a126:	2e00      	cmp	r6, #0
 800a128:	d0cd      	beq.n	800a0c6 <setvbuf+0xa6>
 800a12a:	69bb      	ldr	r3, [r7, #24]
 800a12c:	b913      	cbnz	r3, 800a134 <setvbuf+0x114>
 800a12e:	4638      	mov	r0, r7
 800a130:	f000 fa16 	bl	800a560 <__sinit>
 800a134:	f1b8 0f01 	cmp.w	r8, #1
 800a138:	bf08      	it	eq
 800a13a:	89a3      	ldrheq	r3, [r4, #12]
 800a13c:	6026      	str	r6, [r4, #0]
 800a13e:	bf04      	itt	eq
 800a140:	f043 0301 	orreq.w	r3, r3, #1
 800a144:	81a3      	strheq	r3, [r4, #12]
 800a146:	89a2      	ldrh	r2, [r4, #12]
 800a148:	f012 0308 	ands.w	r3, r2, #8
 800a14c:	e9c4 6504 	strd	r6, r5, [r4, #16]
 800a150:	d01c      	beq.n	800a18c <setvbuf+0x16c>
 800a152:	07d3      	lsls	r3, r2, #31
 800a154:	bf41      	itttt	mi
 800a156:	2300      	movmi	r3, #0
 800a158:	426d      	negmi	r5, r5
 800a15a:	60a3      	strmi	r3, [r4, #8]
 800a15c:	61a5      	strmi	r5, [r4, #24]
 800a15e:	bf58      	it	pl
 800a160:	60a5      	strpl	r5, [r4, #8]
 800a162:	6e65      	ldr	r5, [r4, #100]	; 0x64
 800a164:	f015 0501 	ands.w	r5, r5, #1
 800a168:	d115      	bne.n	800a196 <setvbuf+0x176>
 800a16a:	f412 7f00 	tst.w	r2, #512	; 0x200
 800a16e:	e7c8      	b.n	800a102 <setvbuf+0xe2>
 800a170:	4648      	mov	r0, r9
 800a172:	f000 fafb 	bl	800a76c <malloc>
 800a176:	4606      	mov	r6, r0
 800a178:	2800      	cmp	r0, #0
 800a17a:	d0ae      	beq.n	800a0da <setvbuf+0xba>
 800a17c:	464d      	mov	r5, r9
 800a17e:	89a3      	ldrh	r3, [r4, #12]
 800a180:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a184:	81a3      	strh	r3, [r4, #12]
 800a186:	e7d0      	b.n	800a12a <setvbuf+0x10a>
 800a188:	2500      	movs	r5, #0
 800a18a:	e7a8      	b.n	800a0de <setvbuf+0xbe>
 800a18c:	60a3      	str	r3, [r4, #8]
 800a18e:	e7e8      	b.n	800a162 <setvbuf+0x142>
 800a190:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 800a194:	e7b9      	b.n	800a10a <setvbuf+0xea>
 800a196:	2500      	movs	r5, #0
 800a198:	e7b7      	b.n	800a10a <setvbuf+0xea>
 800a19a:	bf00      	nop
 800a19c:	20001070 	.word	0x20001070
 800a1a0:	0800bfb4 	.word	0x0800bfb4
 800a1a4:	0800bfd4 	.word	0x0800bfd4
 800a1a8:	0800bf94 	.word	0x0800bf94

0800a1ac <__swbuf_r>:
 800a1ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a1ae:	460e      	mov	r6, r1
 800a1b0:	4614      	mov	r4, r2
 800a1b2:	4605      	mov	r5, r0
 800a1b4:	b118      	cbz	r0, 800a1be <__swbuf_r+0x12>
 800a1b6:	6983      	ldr	r3, [r0, #24]
 800a1b8:	b90b      	cbnz	r3, 800a1be <__swbuf_r+0x12>
 800a1ba:	f000 f9d1 	bl	800a560 <__sinit>
 800a1be:	4b21      	ldr	r3, [pc, #132]	; (800a244 <__swbuf_r+0x98>)
 800a1c0:	429c      	cmp	r4, r3
 800a1c2:	d12b      	bne.n	800a21c <__swbuf_r+0x70>
 800a1c4:	686c      	ldr	r4, [r5, #4]
 800a1c6:	69a3      	ldr	r3, [r4, #24]
 800a1c8:	60a3      	str	r3, [r4, #8]
 800a1ca:	89a3      	ldrh	r3, [r4, #12]
 800a1cc:	071a      	lsls	r2, r3, #28
 800a1ce:	d52f      	bpl.n	800a230 <__swbuf_r+0x84>
 800a1d0:	6923      	ldr	r3, [r4, #16]
 800a1d2:	b36b      	cbz	r3, 800a230 <__swbuf_r+0x84>
 800a1d4:	6923      	ldr	r3, [r4, #16]
 800a1d6:	6820      	ldr	r0, [r4, #0]
 800a1d8:	1ac0      	subs	r0, r0, r3
 800a1da:	6963      	ldr	r3, [r4, #20]
 800a1dc:	b2f6      	uxtb	r6, r6
 800a1de:	4283      	cmp	r3, r0
 800a1e0:	4637      	mov	r7, r6
 800a1e2:	dc04      	bgt.n	800a1ee <__swbuf_r+0x42>
 800a1e4:	4621      	mov	r1, r4
 800a1e6:	4628      	mov	r0, r5
 800a1e8:	f000 f926 	bl	800a438 <_fflush_r>
 800a1ec:	bb30      	cbnz	r0, 800a23c <__swbuf_r+0x90>
 800a1ee:	68a3      	ldr	r3, [r4, #8]
 800a1f0:	3b01      	subs	r3, #1
 800a1f2:	60a3      	str	r3, [r4, #8]
 800a1f4:	6823      	ldr	r3, [r4, #0]
 800a1f6:	1c5a      	adds	r2, r3, #1
 800a1f8:	6022      	str	r2, [r4, #0]
 800a1fa:	701e      	strb	r6, [r3, #0]
 800a1fc:	6963      	ldr	r3, [r4, #20]
 800a1fe:	3001      	adds	r0, #1
 800a200:	4283      	cmp	r3, r0
 800a202:	d004      	beq.n	800a20e <__swbuf_r+0x62>
 800a204:	89a3      	ldrh	r3, [r4, #12]
 800a206:	07db      	lsls	r3, r3, #31
 800a208:	d506      	bpl.n	800a218 <__swbuf_r+0x6c>
 800a20a:	2e0a      	cmp	r6, #10
 800a20c:	d104      	bne.n	800a218 <__swbuf_r+0x6c>
 800a20e:	4621      	mov	r1, r4
 800a210:	4628      	mov	r0, r5
 800a212:	f000 f911 	bl	800a438 <_fflush_r>
 800a216:	b988      	cbnz	r0, 800a23c <__swbuf_r+0x90>
 800a218:	4638      	mov	r0, r7
 800a21a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a21c:	4b0a      	ldr	r3, [pc, #40]	; (800a248 <__swbuf_r+0x9c>)
 800a21e:	429c      	cmp	r4, r3
 800a220:	d101      	bne.n	800a226 <__swbuf_r+0x7a>
 800a222:	68ac      	ldr	r4, [r5, #8]
 800a224:	e7cf      	b.n	800a1c6 <__swbuf_r+0x1a>
 800a226:	4b09      	ldr	r3, [pc, #36]	; (800a24c <__swbuf_r+0xa0>)
 800a228:	429c      	cmp	r4, r3
 800a22a:	bf08      	it	eq
 800a22c:	68ec      	ldreq	r4, [r5, #12]
 800a22e:	e7ca      	b.n	800a1c6 <__swbuf_r+0x1a>
 800a230:	4621      	mov	r1, r4
 800a232:	4628      	mov	r0, r5
 800a234:	f000 f80c 	bl	800a250 <__swsetup_r>
 800a238:	2800      	cmp	r0, #0
 800a23a:	d0cb      	beq.n	800a1d4 <__swbuf_r+0x28>
 800a23c:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800a240:	e7ea      	b.n	800a218 <__swbuf_r+0x6c>
 800a242:	bf00      	nop
 800a244:	0800bfb4 	.word	0x0800bfb4
 800a248:	0800bfd4 	.word	0x0800bfd4
 800a24c:	0800bf94 	.word	0x0800bf94

0800a250 <__swsetup_r>:
 800a250:	4b32      	ldr	r3, [pc, #200]	; (800a31c <__swsetup_r+0xcc>)
 800a252:	b570      	push	{r4, r5, r6, lr}
 800a254:	681d      	ldr	r5, [r3, #0]
 800a256:	4606      	mov	r6, r0
 800a258:	460c      	mov	r4, r1
 800a25a:	b125      	cbz	r5, 800a266 <__swsetup_r+0x16>
 800a25c:	69ab      	ldr	r3, [r5, #24]
 800a25e:	b913      	cbnz	r3, 800a266 <__swsetup_r+0x16>
 800a260:	4628      	mov	r0, r5
 800a262:	f000 f97d 	bl	800a560 <__sinit>
 800a266:	4b2e      	ldr	r3, [pc, #184]	; (800a320 <__swsetup_r+0xd0>)
 800a268:	429c      	cmp	r4, r3
 800a26a:	d10f      	bne.n	800a28c <__swsetup_r+0x3c>
 800a26c:	686c      	ldr	r4, [r5, #4]
 800a26e:	89a3      	ldrh	r3, [r4, #12]
 800a270:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a274:	0719      	lsls	r1, r3, #28
 800a276:	d42c      	bmi.n	800a2d2 <__swsetup_r+0x82>
 800a278:	06dd      	lsls	r5, r3, #27
 800a27a:	d411      	bmi.n	800a2a0 <__swsetup_r+0x50>
 800a27c:	2309      	movs	r3, #9
 800a27e:	6033      	str	r3, [r6, #0]
 800a280:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800a284:	81a3      	strh	r3, [r4, #12]
 800a286:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a28a:	e03e      	b.n	800a30a <__swsetup_r+0xba>
 800a28c:	4b25      	ldr	r3, [pc, #148]	; (800a324 <__swsetup_r+0xd4>)
 800a28e:	429c      	cmp	r4, r3
 800a290:	d101      	bne.n	800a296 <__swsetup_r+0x46>
 800a292:	68ac      	ldr	r4, [r5, #8]
 800a294:	e7eb      	b.n	800a26e <__swsetup_r+0x1e>
 800a296:	4b24      	ldr	r3, [pc, #144]	; (800a328 <__swsetup_r+0xd8>)
 800a298:	429c      	cmp	r4, r3
 800a29a:	bf08      	it	eq
 800a29c:	68ec      	ldreq	r4, [r5, #12]
 800a29e:	e7e6      	b.n	800a26e <__swsetup_r+0x1e>
 800a2a0:	0758      	lsls	r0, r3, #29
 800a2a2:	d512      	bpl.n	800a2ca <__swsetup_r+0x7a>
 800a2a4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a2a6:	b141      	cbz	r1, 800a2ba <__swsetup_r+0x6a>
 800a2a8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a2ac:	4299      	cmp	r1, r3
 800a2ae:	d002      	beq.n	800a2b6 <__swsetup_r+0x66>
 800a2b0:	4630      	mov	r0, r6
 800a2b2:	f000 fa63 	bl	800a77c <_free_r>
 800a2b6:	2300      	movs	r3, #0
 800a2b8:	6363      	str	r3, [r4, #52]	; 0x34
 800a2ba:	89a3      	ldrh	r3, [r4, #12]
 800a2bc:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800a2c0:	81a3      	strh	r3, [r4, #12]
 800a2c2:	2300      	movs	r3, #0
 800a2c4:	6063      	str	r3, [r4, #4]
 800a2c6:	6923      	ldr	r3, [r4, #16]
 800a2c8:	6023      	str	r3, [r4, #0]
 800a2ca:	89a3      	ldrh	r3, [r4, #12]
 800a2cc:	f043 0308 	orr.w	r3, r3, #8
 800a2d0:	81a3      	strh	r3, [r4, #12]
 800a2d2:	6923      	ldr	r3, [r4, #16]
 800a2d4:	b94b      	cbnz	r3, 800a2ea <__swsetup_r+0x9a>
 800a2d6:	89a3      	ldrh	r3, [r4, #12]
 800a2d8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800a2dc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a2e0:	d003      	beq.n	800a2ea <__swsetup_r+0x9a>
 800a2e2:	4621      	mov	r1, r4
 800a2e4:	4630      	mov	r0, r6
 800a2e6:	f000 fa01 	bl	800a6ec <__smakebuf_r>
 800a2ea:	89a0      	ldrh	r0, [r4, #12]
 800a2ec:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a2f0:	f010 0301 	ands.w	r3, r0, #1
 800a2f4:	d00a      	beq.n	800a30c <__swsetup_r+0xbc>
 800a2f6:	2300      	movs	r3, #0
 800a2f8:	60a3      	str	r3, [r4, #8]
 800a2fa:	6963      	ldr	r3, [r4, #20]
 800a2fc:	425b      	negs	r3, r3
 800a2fe:	61a3      	str	r3, [r4, #24]
 800a300:	6923      	ldr	r3, [r4, #16]
 800a302:	b943      	cbnz	r3, 800a316 <__swsetup_r+0xc6>
 800a304:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800a308:	d1ba      	bne.n	800a280 <__swsetup_r+0x30>
 800a30a:	bd70      	pop	{r4, r5, r6, pc}
 800a30c:	0781      	lsls	r1, r0, #30
 800a30e:	bf58      	it	pl
 800a310:	6963      	ldrpl	r3, [r4, #20]
 800a312:	60a3      	str	r3, [r4, #8]
 800a314:	e7f4      	b.n	800a300 <__swsetup_r+0xb0>
 800a316:	2000      	movs	r0, #0
 800a318:	e7f7      	b.n	800a30a <__swsetup_r+0xba>
 800a31a:	bf00      	nop
 800a31c:	20001070 	.word	0x20001070
 800a320:	0800bfb4 	.word	0x0800bfb4
 800a324:	0800bfd4 	.word	0x0800bfd4
 800a328:	0800bf94 	.word	0x0800bf94

0800a32c <__sflush_r>:
 800a32c:	898a      	ldrh	r2, [r1, #12]
 800a32e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a332:	4605      	mov	r5, r0
 800a334:	0710      	lsls	r0, r2, #28
 800a336:	460c      	mov	r4, r1
 800a338:	d458      	bmi.n	800a3ec <__sflush_r+0xc0>
 800a33a:	684b      	ldr	r3, [r1, #4]
 800a33c:	2b00      	cmp	r3, #0
 800a33e:	dc05      	bgt.n	800a34c <__sflush_r+0x20>
 800a340:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800a342:	2b00      	cmp	r3, #0
 800a344:	dc02      	bgt.n	800a34c <__sflush_r+0x20>
 800a346:	2000      	movs	r0, #0
 800a348:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a34c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a34e:	2e00      	cmp	r6, #0
 800a350:	d0f9      	beq.n	800a346 <__sflush_r+0x1a>
 800a352:	2300      	movs	r3, #0
 800a354:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800a358:	682f      	ldr	r7, [r5, #0]
 800a35a:	602b      	str	r3, [r5, #0]
 800a35c:	d032      	beq.n	800a3c4 <__sflush_r+0x98>
 800a35e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800a360:	89a3      	ldrh	r3, [r4, #12]
 800a362:	075a      	lsls	r2, r3, #29
 800a364:	d505      	bpl.n	800a372 <__sflush_r+0x46>
 800a366:	6863      	ldr	r3, [r4, #4]
 800a368:	1ac0      	subs	r0, r0, r3
 800a36a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a36c:	b10b      	cbz	r3, 800a372 <__sflush_r+0x46>
 800a36e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a370:	1ac0      	subs	r0, r0, r3
 800a372:	2300      	movs	r3, #0
 800a374:	4602      	mov	r2, r0
 800a376:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a378:	6a21      	ldr	r1, [r4, #32]
 800a37a:	4628      	mov	r0, r5
 800a37c:	47b0      	blx	r6
 800a37e:	1c43      	adds	r3, r0, #1
 800a380:	89a3      	ldrh	r3, [r4, #12]
 800a382:	d106      	bne.n	800a392 <__sflush_r+0x66>
 800a384:	6829      	ldr	r1, [r5, #0]
 800a386:	291d      	cmp	r1, #29
 800a388:	d82c      	bhi.n	800a3e4 <__sflush_r+0xb8>
 800a38a:	4a2a      	ldr	r2, [pc, #168]	; (800a434 <__sflush_r+0x108>)
 800a38c:	40ca      	lsrs	r2, r1
 800a38e:	07d6      	lsls	r6, r2, #31
 800a390:	d528      	bpl.n	800a3e4 <__sflush_r+0xb8>
 800a392:	2200      	movs	r2, #0
 800a394:	6062      	str	r2, [r4, #4]
 800a396:	04d9      	lsls	r1, r3, #19
 800a398:	6922      	ldr	r2, [r4, #16]
 800a39a:	6022      	str	r2, [r4, #0]
 800a39c:	d504      	bpl.n	800a3a8 <__sflush_r+0x7c>
 800a39e:	1c42      	adds	r2, r0, #1
 800a3a0:	d101      	bne.n	800a3a6 <__sflush_r+0x7a>
 800a3a2:	682b      	ldr	r3, [r5, #0]
 800a3a4:	b903      	cbnz	r3, 800a3a8 <__sflush_r+0x7c>
 800a3a6:	6560      	str	r0, [r4, #84]	; 0x54
 800a3a8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a3aa:	602f      	str	r7, [r5, #0]
 800a3ac:	2900      	cmp	r1, #0
 800a3ae:	d0ca      	beq.n	800a346 <__sflush_r+0x1a>
 800a3b0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a3b4:	4299      	cmp	r1, r3
 800a3b6:	d002      	beq.n	800a3be <__sflush_r+0x92>
 800a3b8:	4628      	mov	r0, r5
 800a3ba:	f000 f9df 	bl	800a77c <_free_r>
 800a3be:	2000      	movs	r0, #0
 800a3c0:	6360      	str	r0, [r4, #52]	; 0x34
 800a3c2:	e7c1      	b.n	800a348 <__sflush_r+0x1c>
 800a3c4:	6a21      	ldr	r1, [r4, #32]
 800a3c6:	2301      	movs	r3, #1
 800a3c8:	4628      	mov	r0, r5
 800a3ca:	47b0      	blx	r6
 800a3cc:	1c41      	adds	r1, r0, #1
 800a3ce:	d1c7      	bne.n	800a360 <__sflush_r+0x34>
 800a3d0:	682b      	ldr	r3, [r5, #0]
 800a3d2:	2b00      	cmp	r3, #0
 800a3d4:	d0c4      	beq.n	800a360 <__sflush_r+0x34>
 800a3d6:	2b1d      	cmp	r3, #29
 800a3d8:	d001      	beq.n	800a3de <__sflush_r+0xb2>
 800a3da:	2b16      	cmp	r3, #22
 800a3dc:	d101      	bne.n	800a3e2 <__sflush_r+0xb6>
 800a3de:	602f      	str	r7, [r5, #0]
 800a3e0:	e7b1      	b.n	800a346 <__sflush_r+0x1a>
 800a3e2:	89a3      	ldrh	r3, [r4, #12]
 800a3e4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a3e8:	81a3      	strh	r3, [r4, #12]
 800a3ea:	e7ad      	b.n	800a348 <__sflush_r+0x1c>
 800a3ec:	690f      	ldr	r7, [r1, #16]
 800a3ee:	2f00      	cmp	r7, #0
 800a3f0:	d0a9      	beq.n	800a346 <__sflush_r+0x1a>
 800a3f2:	0793      	lsls	r3, r2, #30
 800a3f4:	680e      	ldr	r6, [r1, #0]
 800a3f6:	bf08      	it	eq
 800a3f8:	694b      	ldreq	r3, [r1, #20]
 800a3fa:	600f      	str	r7, [r1, #0]
 800a3fc:	bf18      	it	ne
 800a3fe:	2300      	movne	r3, #0
 800a400:	eba6 0807 	sub.w	r8, r6, r7
 800a404:	608b      	str	r3, [r1, #8]
 800a406:	f1b8 0f00 	cmp.w	r8, #0
 800a40a:	dd9c      	ble.n	800a346 <__sflush_r+0x1a>
 800a40c:	6a21      	ldr	r1, [r4, #32]
 800a40e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800a410:	4643      	mov	r3, r8
 800a412:	463a      	mov	r2, r7
 800a414:	4628      	mov	r0, r5
 800a416:	47b0      	blx	r6
 800a418:	2800      	cmp	r0, #0
 800a41a:	dc06      	bgt.n	800a42a <__sflush_r+0xfe>
 800a41c:	89a3      	ldrh	r3, [r4, #12]
 800a41e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a422:	81a3      	strh	r3, [r4, #12]
 800a424:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a428:	e78e      	b.n	800a348 <__sflush_r+0x1c>
 800a42a:	4407      	add	r7, r0
 800a42c:	eba8 0800 	sub.w	r8, r8, r0
 800a430:	e7e9      	b.n	800a406 <__sflush_r+0xda>
 800a432:	bf00      	nop
 800a434:	20400001 	.word	0x20400001

0800a438 <_fflush_r>:
 800a438:	b538      	push	{r3, r4, r5, lr}
 800a43a:	690b      	ldr	r3, [r1, #16]
 800a43c:	4605      	mov	r5, r0
 800a43e:	460c      	mov	r4, r1
 800a440:	b913      	cbnz	r3, 800a448 <_fflush_r+0x10>
 800a442:	2500      	movs	r5, #0
 800a444:	4628      	mov	r0, r5
 800a446:	bd38      	pop	{r3, r4, r5, pc}
 800a448:	b118      	cbz	r0, 800a452 <_fflush_r+0x1a>
 800a44a:	6983      	ldr	r3, [r0, #24]
 800a44c:	b90b      	cbnz	r3, 800a452 <_fflush_r+0x1a>
 800a44e:	f000 f887 	bl	800a560 <__sinit>
 800a452:	4b14      	ldr	r3, [pc, #80]	; (800a4a4 <_fflush_r+0x6c>)
 800a454:	429c      	cmp	r4, r3
 800a456:	d11b      	bne.n	800a490 <_fflush_r+0x58>
 800a458:	686c      	ldr	r4, [r5, #4]
 800a45a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a45e:	2b00      	cmp	r3, #0
 800a460:	d0ef      	beq.n	800a442 <_fflush_r+0xa>
 800a462:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800a464:	07d0      	lsls	r0, r2, #31
 800a466:	d404      	bmi.n	800a472 <_fflush_r+0x3a>
 800a468:	0599      	lsls	r1, r3, #22
 800a46a:	d402      	bmi.n	800a472 <_fflush_r+0x3a>
 800a46c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a46e:	f000 f915 	bl	800a69c <__retarget_lock_acquire_recursive>
 800a472:	4628      	mov	r0, r5
 800a474:	4621      	mov	r1, r4
 800a476:	f7ff ff59 	bl	800a32c <__sflush_r>
 800a47a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a47c:	07da      	lsls	r2, r3, #31
 800a47e:	4605      	mov	r5, r0
 800a480:	d4e0      	bmi.n	800a444 <_fflush_r+0xc>
 800a482:	89a3      	ldrh	r3, [r4, #12]
 800a484:	059b      	lsls	r3, r3, #22
 800a486:	d4dd      	bmi.n	800a444 <_fflush_r+0xc>
 800a488:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a48a:	f000 f908 	bl	800a69e <__retarget_lock_release_recursive>
 800a48e:	e7d9      	b.n	800a444 <_fflush_r+0xc>
 800a490:	4b05      	ldr	r3, [pc, #20]	; (800a4a8 <_fflush_r+0x70>)
 800a492:	429c      	cmp	r4, r3
 800a494:	d101      	bne.n	800a49a <_fflush_r+0x62>
 800a496:	68ac      	ldr	r4, [r5, #8]
 800a498:	e7df      	b.n	800a45a <_fflush_r+0x22>
 800a49a:	4b04      	ldr	r3, [pc, #16]	; (800a4ac <_fflush_r+0x74>)
 800a49c:	429c      	cmp	r4, r3
 800a49e:	bf08      	it	eq
 800a4a0:	68ec      	ldreq	r4, [r5, #12]
 800a4a2:	e7da      	b.n	800a45a <_fflush_r+0x22>
 800a4a4:	0800bfb4 	.word	0x0800bfb4
 800a4a8:	0800bfd4 	.word	0x0800bfd4
 800a4ac:	0800bf94 	.word	0x0800bf94

0800a4b0 <std>:
 800a4b0:	2300      	movs	r3, #0
 800a4b2:	b510      	push	{r4, lr}
 800a4b4:	4604      	mov	r4, r0
 800a4b6:	e9c0 3300 	strd	r3, r3, [r0]
 800a4ba:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a4be:	6083      	str	r3, [r0, #8]
 800a4c0:	8181      	strh	r1, [r0, #12]
 800a4c2:	6643      	str	r3, [r0, #100]	; 0x64
 800a4c4:	81c2      	strh	r2, [r0, #14]
 800a4c6:	6183      	str	r3, [r0, #24]
 800a4c8:	4619      	mov	r1, r3
 800a4ca:	2208      	movs	r2, #8
 800a4cc:	305c      	adds	r0, #92	; 0x5c
 800a4ce:	f7ff fd11 	bl	8009ef4 <memset>
 800a4d2:	4b05      	ldr	r3, [pc, #20]	; (800a4e8 <std+0x38>)
 800a4d4:	6263      	str	r3, [r4, #36]	; 0x24
 800a4d6:	4b05      	ldr	r3, [pc, #20]	; (800a4ec <std+0x3c>)
 800a4d8:	62a3      	str	r3, [r4, #40]	; 0x28
 800a4da:	4b05      	ldr	r3, [pc, #20]	; (800a4f0 <std+0x40>)
 800a4dc:	62e3      	str	r3, [r4, #44]	; 0x2c
 800a4de:	4b05      	ldr	r3, [pc, #20]	; (800a4f4 <std+0x44>)
 800a4e0:	6224      	str	r4, [r4, #32]
 800a4e2:	6323      	str	r3, [r4, #48]	; 0x30
 800a4e4:	bd10      	pop	{r4, pc}
 800a4e6:	bf00      	nop
 800a4e8:	0800af39 	.word	0x0800af39
 800a4ec:	0800af5b 	.word	0x0800af5b
 800a4f0:	0800af93 	.word	0x0800af93
 800a4f4:	0800afb7 	.word	0x0800afb7

0800a4f8 <_cleanup_r>:
 800a4f8:	4901      	ldr	r1, [pc, #4]	; (800a500 <_cleanup_r+0x8>)
 800a4fa:	f000 b8af 	b.w	800a65c <_fwalk_reent>
 800a4fe:	bf00      	nop
 800a500:	0800a439 	.word	0x0800a439

0800a504 <__sfmoreglue>:
 800a504:	b570      	push	{r4, r5, r6, lr}
 800a506:	2268      	movs	r2, #104	; 0x68
 800a508:	1e4d      	subs	r5, r1, #1
 800a50a:	4355      	muls	r5, r2
 800a50c:	460e      	mov	r6, r1
 800a50e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800a512:	f000 f99f 	bl	800a854 <_malloc_r>
 800a516:	4604      	mov	r4, r0
 800a518:	b140      	cbz	r0, 800a52c <__sfmoreglue+0x28>
 800a51a:	2100      	movs	r1, #0
 800a51c:	e9c0 1600 	strd	r1, r6, [r0]
 800a520:	300c      	adds	r0, #12
 800a522:	60a0      	str	r0, [r4, #8]
 800a524:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800a528:	f7ff fce4 	bl	8009ef4 <memset>
 800a52c:	4620      	mov	r0, r4
 800a52e:	bd70      	pop	{r4, r5, r6, pc}

0800a530 <__sfp_lock_acquire>:
 800a530:	4801      	ldr	r0, [pc, #4]	; (800a538 <__sfp_lock_acquire+0x8>)
 800a532:	f000 b8b3 	b.w	800a69c <__retarget_lock_acquire_recursive>
 800a536:	bf00      	nop
 800a538:	20001996 	.word	0x20001996

0800a53c <__sfp_lock_release>:
 800a53c:	4801      	ldr	r0, [pc, #4]	; (800a544 <__sfp_lock_release+0x8>)
 800a53e:	f000 b8ae 	b.w	800a69e <__retarget_lock_release_recursive>
 800a542:	bf00      	nop
 800a544:	20001996 	.word	0x20001996

0800a548 <__sinit_lock_acquire>:
 800a548:	4801      	ldr	r0, [pc, #4]	; (800a550 <__sinit_lock_acquire+0x8>)
 800a54a:	f000 b8a7 	b.w	800a69c <__retarget_lock_acquire_recursive>
 800a54e:	bf00      	nop
 800a550:	20001997 	.word	0x20001997

0800a554 <__sinit_lock_release>:
 800a554:	4801      	ldr	r0, [pc, #4]	; (800a55c <__sinit_lock_release+0x8>)
 800a556:	f000 b8a2 	b.w	800a69e <__retarget_lock_release_recursive>
 800a55a:	bf00      	nop
 800a55c:	20001997 	.word	0x20001997

0800a560 <__sinit>:
 800a560:	b510      	push	{r4, lr}
 800a562:	4604      	mov	r4, r0
 800a564:	f7ff fff0 	bl	800a548 <__sinit_lock_acquire>
 800a568:	69a3      	ldr	r3, [r4, #24]
 800a56a:	b11b      	cbz	r3, 800a574 <__sinit+0x14>
 800a56c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a570:	f7ff bff0 	b.w	800a554 <__sinit_lock_release>
 800a574:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800a578:	6523      	str	r3, [r4, #80]	; 0x50
 800a57a:	4b13      	ldr	r3, [pc, #76]	; (800a5c8 <__sinit+0x68>)
 800a57c:	4a13      	ldr	r2, [pc, #76]	; (800a5cc <__sinit+0x6c>)
 800a57e:	681b      	ldr	r3, [r3, #0]
 800a580:	62a2      	str	r2, [r4, #40]	; 0x28
 800a582:	42a3      	cmp	r3, r4
 800a584:	bf04      	itt	eq
 800a586:	2301      	moveq	r3, #1
 800a588:	61a3      	streq	r3, [r4, #24]
 800a58a:	4620      	mov	r0, r4
 800a58c:	f000 f820 	bl	800a5d0 <__sfp>
 800a590:	6060      	str	r0, [r4, #4]
 800a592:	4620      	mov	r0, r4
 800a594:	f000 f81c 	bl	800a5d0 <__sfp>
 800a598:	60a0      	str	r0, [r4, #8]
 800a59a:	4620      	mov	r0, r4
 800a59c:	f000 f818 	bl	800a5d0 <__sfp>
 800a5a0:	2200      	movs	r2, #0
 800a5a2:	60e0      	str	r0, [r4, #12]
 800a5a4:	2104      	movs	r1, #4
 800a5a6:	6860      	ldr	r0, [r4, #4]
 800a5a8:	f7ff ff82 	bl	800a4b0 <std>
 800a5ac:	68a0      	ldr	r0, [r4, #8]
 800a5ae:	2201      	movs	r2, #1
 800a5b0:	2109      	movs	r1, #9
 800a5b2:	f7ff ff7d 	bl	800a4b0 <std>
 800a5b6:	68e0      	ldr	r0, [r4, #12]
 800a5b8:	2202      	movs	r2, #2
 800a5ba:	2112      	movs	r1, #18
 800a5bc:	f7ff ff78 	bl	800a4b0 <std>
 800a5c0:	2301      	movs	r3, #1
 800a5c2:	61a3      	str	r3, [r4, #24]
 800a5c4:	e7d2      	b.n	800a56c <__sinit+0xc>
 800a5c6:	bf00      	nop
 800a5c8:	0800bf90 	.word	0x0800bf90
 800a5cc:	0800a4f9 	.word	0x0800a4f9

0800a5d0 <__sfp>:
 800a5d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a5d2:	4607      	mov	r7, r0
 800a5d4:	f7ff ffac 	bl	800a530 <__sfp_lock_acquire>
 800a5d8:	4b1e      	ldr	r3, [pc, #120]	; (800a654 <__sfp+0x84>)
 800a5da:	681e      	ldr	r6, [r3, #0]
 800a5dc:	69b3      	ldr	r3, [r6, #24]
 800a5de:	b913      	cbnz	r3, 800a5e6 <__sfp+0x16>
 800a5e0:	4630      	mov	r0, r6
 800a5e2:	f7ff ffbd 	bl	800a560 <__sinit>
 800a5e6:	3648      	adds	r6, #72	; 0x48
 800a5e8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800a5ec:	3b01      	subs	r3, #1
 800a5ee:	d503      	bpl.n	800a5f8 <__sfp+0x28>
 800a5f0:	6833      	ldr	r3, [r6, #0]
 800a5f2:	b30b      	cbz	r3, 800a638 <__sfp+0x68>
 800a5f4:	6836      	ldr	r6, [r6, #0]
 800a5f6:	e7f7      	b.n	800a5e8 <__sfp+0x18>
 800a5f8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800a5fc:	b9d5      	cbnz	r5, 800a634 <__sfp+0x64>
 800a5fe:	4b16      	ldr	r3, [pc, #88]	; (800a658 <__sfp+0x88>)
 800a600:	60e3      	str	r3, [r4, #12]
 800a602:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800a606:	6665      	str	r5, [r4, #100]	; 0x64
 800a608:	f000 f847 	bl	800a69a <__retarget_lock_init_recursive>
 800a60c:	f7ff ff96 	bl	800a53c <__sfp_lock_release>
 800a610:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800a614:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800a618:	6025      	str	r5, [r4, #0]
 800a61a:	61a5      	str	r5, [r4, #24]
 800a61c:	2208      	movs	r2, #8
 800a61e:	4629      	mov	r1, r5
 800a620:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800a624:	f7ff fc66 	bl	8009ef4 <memset>
 800a628:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800a62c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800a630:	4620      	mov	r0, r4
 800a632:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a634:	3468      	adds	r4, #104	; 0x68
 800a636:	e7d9      	b.n	800a5ec <__sfp+0x1c>
 800a638:	2104      	movs	r1, #4
 800a63a:	4638      	mov	r0, r7
 800a63c:	f7ff ff62 	bl	800a504 <__sfmoreglue>
 800a640:	4604      	mov	r4, r0
 800a642:	6030      	str	r0, [r6, #0]
 800a644:	2800      	cmp	r0, #0
 800a646:	d1d5      	bne.n	800a5f4 <__sfp+0x24>
 800a648:	f7ff ff78 	bl	800a53c <__sfp_lock_release>
 800a64c:	230c      	movs	r3, #12
 800a64e:	603b      	str	r3, [r7, #0]
 800a650:	e7ee      	b.n	800a630 <__sfp+0x60>
 800a652:	bf00      	nop
 800a654:	0800bf90 	.word	0x0800bf90
 800a658:	ffff0001 	.word	0xffff0001

0800a65c <_fwalk_reent>:
 800a65c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a660:	4606      	mov	r6, r0
 800a662:	4688      	mov	r8, r1
 800a664:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800a668:	2700      	movs	r7, #0
 800a66a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a66e:	f1b9 0901 	subs.w	r9, r9, #1
 800a672:	d505      	bpl.n	800a680 <_fwalk_reent+0x24>
 800a674:	6824      	ldr	r4, [r4, #0]
 800a676:	2c00      	cmp	r4, #0
 800a678:	d1f7      	bne.n	800a66a <_fwalk_reent+0xe>
 800a67a:	4638      	mov	r0, r7
 800a67c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a680:	89ab      	ldrh	r3, [r5, #12]
 800a682:	2b01      	cmp	r3, #1
 800a684:	d907      	bls.n	800a696 <_fwalk_reent+0x3a>
 800a686:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a68a:	3301      	adds	r3, #1
 800a68c:	d003      	beq.n	800a696 <_fwalk_reent+0x3a>
 800a68e:	4629      	mov	r1, r5
 800a690:	4630      	mov	r0, r6
 800a692:	47c0      	blx	r8
 800a694:	4307      	orrs	r7, r0
 800a696:	3568      	adds	r5, #104	; 0x68
 800a698:	e7e9      	b.n	800a66e <_fwalk_reent+0x12>

0800a69a <__retarget_lock_init_recursive>:
 800a69a:	4770      	bx	lr

0800a69c <__retarget_lock_acquire_recursive>:
 800a69c:	4770      	bx	lr

0800a69e <__retarget_lock_release_recursive>:
 800a69e:	4770      	bx	lr

0800a6a0 <__swhatbuf_r>:
 800a6a0:	b570      	push	{r4, r5, r6, lr}
 800a6a2:	460e      	mov	r6, r1
 800a6a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a6a8:	2900      	cmp	r1, #0
 800a6aa:	b096      	sub	sp, #88	; 0x58
 800a6ac:	4614      	mov	r4, r2
 800a6ae:	461d      	mov	r5, r3
 800a6b0:	da08      	bge.n	800a6c4 <__swhatbuf_r+0x24>
 800a6b2:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800a6b6:	2200      	movs	r2, #0
 800a6b8:	602a      	str	r2, [r5, #0]
 800a6ba:	061a      	lsls	r2, r3, #24
 800a6bc:	d410      	bmi.n	800a6e0 <__swhatbuf_r+0x40>
 800a6be:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a6c2:	e00e      	b.n	800a6e2 <__swhatbuf_r+0x42>
 800a6c4:	466a      	mov	r2, sp
 800a6c6:	f000 fc9d 	bl	800b004 <_fstat_r>
 800a6ca:	2800      	cmp	r0, #0
 800a6cc:	dbf1      	blt.n	800a6b2 <__swhatbuf_r+0x12>
 800a6ce:	9a01      	ldr	r2, [sp, #4]
 800a6d0:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800a6d4:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800a6d8:	425a      	negs	r2, r3
 800a6da:	415a      	adcs	r2, r3
 800a6dc:	602a      	str	r2, [r5, #0]
 800a6de:	e7ee      	b.n	800a6be <__swhatbuf_r+0x1e>
 800a6e0:	2340      	movs	r3, #64	; 0x40
 800a6e2:	2000      	movs	r0, #0
 800a6e4:	6023      	str	r3, [r4, #0]
 800a6e6:	b016      	add	sp, #88	; 0x58
 800a6e8:	bd70      	pop	{r4, r5, r6, pc}
	...

0800a6ec <__smakebuf_r>:
 800a6ec:	898b      	ldrh	r3, [r1, #12]
 800a6ee:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a6f0:	079d      	lsls	r5, r3, #30
 800a6f2:	4606      	mov	r6, r0
 800a6f4:	460c      	mov	r4, r1
 800a6f6:	d507      	bpl.n	800a708 <__smakebuf_r+0x1c>
 800a6f8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800a6fc:	6023      	str	r3, [r4, #0]
 800a6fe:	6123      	str	r3, [r4, #16]
 800a700:	2301      	movs	r3, #1
 800a702:	6163      	str	r3, [r4, #20]
 800a704:	b002      	add	sp, #8
 800a706:	bd70      	pop	{r4, r5, r6, pc}
 800a708:	ab01      	add	r3, sp, #4
 800a70a:	466a      	mov	r2, sp
 800a70c:	f7ff ffc8 	bl	800a6a0 <__swhatbuf_r>
 800a710:	9900      	ldr	r1, [sp, #0]
 800a712:	4605      	mov	r5, r0
 800a714:	4630      	mov	r0, r6
 800a716:	f000 f89d 	bl	800a854 <_malloc_r>
 800a71a:	b948      	cbnz	r0, 800a730 <__smakebuf_r+0x44>
 800a71c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a720:	059a      	lsls	r2, r3, #22
 800a722:	d4ef      	bmi.n	800a704 <__smakebuf_r+0x18>
 800a724:	f023 0303 	bic.w	r3, r3, #3
 800a728:	f043 0302 	orr.w	r3, r3, #2
 800a72c:	81a3      	strh	r3, [r4, #12]
 800a72e:	e7e3      	b.n	800a6f8 <__smakebuf_r+0xc>
 800a730:	4b0d      	ldr	r3, [pc, #52]	; (800a768 <__smakebuf_r+0x7c>)
 800a732:	62b3      	str	r3, [r6, #40]	; 0x28
 800a734:	89a3      	ldrh	r3, [r4, #12]
 800a736:	6020      	str	r0, [r4, #0]
 800a738:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a73c:	81a3      	strh	r3, [r4, #12]
 800a73e:	9b00      	ldr	r3, [sp, #0]
 800a740:	6163      	str	r3, [r4, #20]
 800a742:	9b01      	ldr	r3, [sp, #4]
 800a744:	6120      	str	r0, [r4, #16]
 800a746:	b15b      	cbz	r3, 800a760 <__smakebuf_r+0x74>
 800a748:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a74c:	4630      	mov	r0, r6
 800a74e:	f000 fc6b 	bl	800b028 <_isatty_r>
 800a752:	b128      	cbz	r0, 800a760 <__smakebuf_r+0x74>
 800a754:	89a3      	ldrh	r3, [r4, #12]
 800a756:	f023 0303 	bic.w	r3, r3, #3
 800a75a:	f043 0301 	orr.w	r3, r3, #1
 800a75e:	81a3      	strh	r3, [r4, #12]
 800a760:	89a0      	ldrh	r0, [r4, #12]
 800a762:	4305      	orrs	r5, r0
 800a764:	81a5      	strh	r5, [r4, #12]
 800a766:	e7cd      	b.n	800a704 <__smakebuf_r+0x18>
 800a768:	0800a4f9 	.word	0x0800a4f9

0800a76c <malloc>:
 800a76c:	4b02      	ldr	r3, [pc, #8]	; (800a778 <malloc+0xc>)
 800a76e:	4601      	mov	r1, r0
 800a770:	6818      	ldr	r0, [r3, #0]
 800a772:	f000 b86f 	b.w	800a854 <_malloc_r>
 800a776:	bf00      	nop
 800a778:	20001070 	.word	0x20001070

0800a77c <_free_r>:
 800a77c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a77e:	2900      	cmp	r1, #0
 800a780:	d044      	beq.n	800a80c <_free_r+0x90>
 800a782:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a786:	9001      	str	r0, [sp, #4]
 800a788:	2b00      	cmp	r3, #0
 800a78a:	f1a1 0404 	sub.w	r4, r1, #4
 800a78e:	bfb8      	it	lt
 800a790:	18e4      	addlt	r4, r4, r3
 800a792:	f000 fc6b 	bl	800b06c <__malloc_lock>
 800a796:	4a1e      	ldr	r2, [pc, #120]	; (800a810 <_free_r+0x94>)
 800a798:	9801      	ldr	r0, [sp, #4]
 800a79a:	6813      	ldr	r3, [r2, #0]
 800a79c:	b933      	cbnz	r3, 800a7ac <_free_r+0x30>
 800a79e:	6063      	str	r3, [r4, #4]
 800a7a0:	6014      	str	r4, [r2, #0]
 800a7a2:	b003      	add	sp, #12
 800a7a4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a7a8:	f000 bc66 	b.w	800b078 <__malloc_unlock>
 800a7ac:	42a3      	cmp	r3, r4
 800a7ae:	d908      	bls.n	800a7c2 <_free_r+0x46>
 800a7b0:	6825      	ldr	r5, [r4, #0]
 800a7b2:	1961      	adds	r1, r4, r5
 800a7b4:	428b      	cmp	r3, r1
 800a7b6:	bf01      	itttt	eq
 800a7b8:	6819      	ldreq	r1, [r3, #0]
 800a7ba:	685b      	ldreq	r3, [r3, #4]
 800a7bc:	1949      	addeq	r1, r1, r5
 800a7be:	6021      	streq	r1, [r4, #0]
 800a7c0:	e7ed      	b.n	800a79e <_free_r+0x22>
 800a7c2:	461a      	mov	r2, r3
 800a7c4:	685b      	ldr	r3, [r3, #4]
 800a7c6:	b10b      	cbz	r3, 800a7cc <_free_r+0x50>
 800a7c8:	42a3      	cmp	r3, r4
 800a7ca:	d9fa      	bls.n	800a7c2 <_free_r+0x46>
 800a7cc:	6811      	ldr	r1, [r2, #0]
 800a7ce:	1855      	adds	r5, r2, r1
 800a7d0:	42a5      	cmp	r5, r4
 800a7d2:	d10b      	bne.n	800a7ec <_free_r+0x70>
 800a7d4:	6824      	ldr	r4, [r4, #0]
 800a7d6:	4421      	add	r1, r4
 800a7d8:	1854      	adds	r4, r2, r1
 800a7da:	42a3      	cmp	r3, r4
 800a7dc:	6011      	str	r1, [r2, #0]
 800a7de:	d1e0      	bne.n	800a7a2 <_free_r+0x26>
 800a7e0:	681c      	ldr	r4, [r3, #0]
 800a7e2:	685b      	ldr	r3, [r3, #4]
 800a7e4:	6053      	str	r3, [r2, #4]
 800a7e6:	4421      	add	r1, r4
 800a7e8:	6011      	str	r1, [r2, #0]
 800a7ea:	e7da      	b.n	800a7a2 <_free_r+0x26>
 800a7ec:	d902      	bls.n	800a7f4 <_free_r+0x78>
 800a7ee:	230c      	movs	r3, #12
 800a7f0:	6003      	str	r3, [r0, #0]
 800a7f2:	e7d6      	b.n	800a7a2 <_free_r+0x26>
 800a7f4:	6825      	ldr	r5, [r4, #0]
 800a7f6:	1961      	adds	r1, r4, r5
 800a7f8:	428b      	cmp	r3, r1
 800a7fa:	bf04      	itt	eq
 800a7fc:	6819      	ldreq	r1, [r3, #0]
 800a7fe:	685b      	ldreq	r3, [r3, #4]
 800a800:	6063      	str	r3, [r4, #4]
 800a802:	bf04      	itt	eq
 800a804:	1949      	addeq	r1, r1, r5
 800a806:	6021      	streq	r1, [r4, #0]
 800a808:	6054      	str	r4, [r2, #4]
 800a80a:	e7ca      	b.n	800a7a2 <_free_r+0x26>
 800a80c:	b003      	add	sp, #12
 800a80e:	bd30      	pop	{r4, r5, pc}
 800a810:	20001998 	.word	0x20001998

0800a814 <sbrk_aligned>:
 800a814:	b570      	push	{r4, r5, r6, lr}
 800a816:	4e0e      	ldr	r6, [pc, #56]	; (800a850 <sbrk_aligned+0x3c>)
 800a818:	460c      	mov	r4, r1
 800a81a:	6831      	ldr	r1, [r6, #0]
 800a81c:	4605      	mov	r5, r0
 800a81e:	b911      	cbnz	r1, 800a826 <sbrk_aligned+0x12>
 800a820:	f000 fb7a 	bl	800af18 <_sbrk_r>
 800a824:	6030      	str	r0, [r6, #0]
 800a826:	4621      	mov	r1, r4
 800a828:	4628      	mov	r0, r5
 800a82a:	f000 fb75 	bl	800af18 <_sbrk_r>
 800a82e:	1c43      	adds	r3, r0, #1
 800a830:	d00a      	beq.n	800a848 <sbrk_aligned+0x34>
 800a832:	1cc4      	adds	r4, r0, #3
 800a834:	f024 0403 	bic.w	r4, r4, #3
 800a838:	42a0      	cmp	r0, r4
 800a83a:	d007      	beq.n	800a84c <sbrk_aligned+0x38>
 800a83c:	1a21      	subs	r1, r4, r0
 800a83e:	4628      	mov	r0, r5
 800a840:	f000 fb6a 	bl	800af18 <_sbrk_r>
 800a844:	3001      	adds	r0, #1
 800a846:	d101      	bne.n	800a84c <sbrk_aligned+0x38>
 800a848:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800a84c:	4620      	mov	r0, r4
 800a84e:	bd70      	pop	{r4, r5, r6, pc}
 800a850:	2000199c 	.word	0x2000199c

0800a854 <_malloc_r>:
 800a854:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a858:	1ccd      	adds	r5, r1, #3
 800a85a:	f025 0503 	bic.w	r5, r5, #3
 800a85e:	3508      	adds	r5, #8
 800a860:	2d0c      	cmp	r5, #12
 800a862:	bf38      	it	cc
 800a864:	250c      	movcc	r5, #12
 800a866:	2d00      	cmp	r5, #0
 800a868:	4607      	mov	r7, r0
 800a86a:	db01      	blt.n	800a870 <_malloc_r+0x1c>
 800a86c:	42a9      	cmp	r1, r5
 800a86e:	d905      	bls.n	800a87c <_malloc_r+0x28>
 800a870:	230c      	movs	r3, #12
 800a872:	603b      	str	r3, [r7, #0]
 800a874:	2600      	movs	r6, #0
 800a876:	4630      	mov	r0, r6
 800a878:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a87c:	4e2e      	ldr	r6, [pc, #184]	; (800a938 <_malloc_r+0xe4>)
 800a87e:	f000 fbf5 	bl	800b06c <__malloc_lock>
 800a882:	6833      	ldr	r3, [r6, #0]
 800a884:	461c      	mov	r4, r3
 800a886:	bb34      	cbnz	r4, 800a8d6 <_malloc_r+0x82>
 800a888:	4629      	mov	r1, r5
 800a88a:	4638      	mov	r0, r7
 800a88c:	f7ff ffc2 	bl	800a814 <sbrk_aligned>
 800a890:	1c43      	adds	r3, r0, #1
 800a892:	4604      	mov	r4, r0
 800a894:	d14d      	bne.n	800a932 <_malloc_r+0xde>
 800a896:	6834      	ldr	r4, [r6, #0]
 800a898:	4626      	mov	r6, r4
 800a89a:	2e00      	cmp	r6, #0
 800a89c:	d140      	bne.n	800a920 <_malloc_r+0xcc>
 800a89e:	6823      	ldr	r3, [r4, #0]
 800a8a0:	4631      	mov	r1, r6
 800a8a2:	4638      	mov	r0, r7
 800a8a4:	eb04 0803 	add.w	r8, r4, r3
 800a8a8:	f000 fb36 	bl	800af18 <_sbrk_r>
 800a8ac:	4580      	cmp	r8, r0
 800a8ae:	d13a      	bne.n	800a926 <_malloc_r+0xd2>
 800a8b0:	6821      	ldr	r1, [r4, #0]
 800a8b2:	3503      	adds	r5, #3
 800a8b4:	1a6d      	subs	r5, r5, r1
 800a8b6:	f025 0503 	bic.w	r5, r5, #3
 800a8ba:	3508      	adds	r5, #8
 800a8bc:	2d0c      	cmp	r5, #12
 800a8be:	bf38      	it	cc
 800a8c0:	250c      	movcc	r5, #12
 800a8c2:	4629      	mov	r1, r5
 800a8c4:	4638      	mov	r0, r7
 800a8c6:	f7ff ffa5 	bl	800a814 <sbrk_aligned>
 800a8ca:	3001      	adds	r0, #1
 800a8cc:	d02b      	beq.n	800a926 <_malloc_r+0xd2>
 800a8ce:	6823      	ldr	r3, [r4, #0]
 800a8d0:	442b      	add	r3, r5
 800a8d2:	6023      	str	r3, [r4, #0]
 800a8d4:	e00e      	b.n	800a8f4 <_malloc_r+0xa0>
 800a8d6:	6822      	ldr	r2, [r4, #0]
 800a8d8:	1b52      	subs	r2, r2, r5
 800a8da:	d41e      	bmi.n	800a91a <_malloc_r+0xc6>
 800a8dc:	2a0b      	cmp	r2, #11
 800a8de:	d916      	bls.n	800a90e <_malloc_r+0xba>
 800a8e0:	1961      	adds	r1, r4, r5
 800a8e2:	42a3      	cmp	r3, r4
 800a8e4:	6025      	str	r5, [r4, #0]
 800a8e6:	bf18      	it	ne
 800a8e8:	6059      	strne	r1, [r3, #4]
 800a8ea:	6863      	ldr	r3, [r4, #4]
 800a8ec:	bf08      	it	eq
 800a8ee:	6031      	streq	r1, [r6, #0]
 800a8f0:	5162      	str	r2, [r4, r5]
 800a8f2:	604b      	str	r3, [r1, #4]
 800a8f4:	4638      	mov	r0, r7
 800a8f6:	f104 060b 	add.w	r6, r4, #11
 800a8fa:	f000 fbbd 	bl	800b078 <__malloc_unlock>
 800a8fe:	f026 0607 	bic.w	r6, r6, #7
 800a902:	1d23      	adds	r3, r4, #4
 800a904:	1af2      	subs	r2, r6, r3
 800a906:	d0b6      	beq.n	800a876 <_malloc_r+0x22>
 800a908:	1b9b      	subs	r3, r3, r6
 800a90a:	50a3      	str	r3, [r4, r2]
 800a90c:	e7b3      	b.n	800a876 <_malloc_r+0x22>
 800a90e:	6862      	ldr	r2, [r4, #4]
 800a910:	42a3      	cmp	r3, r4
 800a912:	bf0c      	ite	eq
 800a914:	6032      	streq	r2, [r6, #0]
 800a916:	605a      	strne	r2, [r3, #4]
 800a918:	e7ec      	b.n	800a8f4 <_malloc_r+0xa0>
 800a91a:	4623      	mov	r3, r4
 800a91c:	6864      	ldr	r4, [r4, #4]
 800a91e:	e7b2      	b.n	800a886 <_malloc_r+0x32>
 800a920:	4634      	mov	r4, r6
 800a922:	6876      	ldr	r6, [r6, #4]
 800a924:	e7b9      	b.n	800a89a <_malloc_r+0x46>
 800a926:	230c      	movs	r3, #12
 800a928:	603b      	str	r3, [r7, #0]
 800a92a:	4638      	mov	r0, r7
 800a92c:	f000 fba4 	bl	800b078 <__malloc_unlock>
 800a930:	e7a1      	b.n	800a876 <_malloc_r+0x22>
 800a932:	6025      	str	r5, [r4, #0]
 800a934:	e7de      	b.n	800a8f4 <_malloc_r+0xa0>
 800a936:	bf00      	nop
 800a938:	20001998 	.word	0x20001998

0800a93c <__sfputc_r>:
 800a93c:	6893      	ldr	r3, [r2, #8]
 800a93e:	3b01      	subs	r3, #1
 800a940:	2b00      	cmp	r3, #0
 800a942:	b410      	push	{r4}
 800a944:	6093      	str	r3, [r2, #8]
 800a946:	da08      	bge.n	800a95a <__sfputc_r+0x1e>
 800a948:	6994      	ldr	r4, [r2, #24]
 800a94a:	42a3      	cmp	r3, r4
 800a94c:	db01      	blt.n	800a952 <__sfputc_r+0x16>
 800a94e:	290a      	cmp	r1, #10
 800a950:	d103      	bne.n	800a95a <__sfputc_r+0x1e>
 800a952:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a956:	f7ff bc29 	b.w	800a1ac <__swbuf_r>
 800a95a:	6813      	ldr	r3, [r2, #0]
 800a95c:	1c58      	adds	r0, r3, #1
 800a95e:	6010      	str	r0, [r2, #0]
 800a960:	7019      	strb	r1, [r3, #0]
 800a962:	4608      	mov	r0, r1
 800a964:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a968:	4770      	bx	lr

0800a96a <__sfputs_r>:
 800a96a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a96c:	4606      	mov	r6, r0
 800a96e:	460f      	mov	r7, r1
 800a970:	4614      	mov	r4, r2
 800a972:	18d5      	adds	r5, r2, r3
 800a974:	42ac      	cmp	r4, r5
 800a976:	d101      	bne.n	800a97c <__sfputs_r+0x12>
 800a978:	2000      	movs	r0, #0
 800a97a:	e007      	b.n	800a98c <__sfputs_r+0x22>
 800a97c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a980:	463a      	mov	r2, r7
 800a982:	4630      	mov	r0, r6
 800a984:	f7ff ffda 	bl	800a93c <__sfputc_r>
 800a988:	1c43      	adds	r3, r0, #1
 800a98a:	d1f3      	bne.n	800a974 <__sfputs_r+0xa>
 800a98c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800a990 <_vfiprintf_r>:
 800a990:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a994:	460d      	mov	r5, r1
 800a996:	b09d      	sub	sp, #116	; 0x74
 800a998:	4614      	mov	r4, r2
 800a99a:	4698      	mov	r8, r3
 800a99c:	4606      	mov	r6, r0
 800a99e:	b118      	cbz	r0, 800a9a8 <_vfiprintf_r+0x18>
 800a9a0:	6983      	ldr	r3, [r0, #24]
 800a9a2:	b90b      	cbnz	r3, 800a9a8 <_vfiprintf_r+0x18>
 800a9a4:	f7ff fddc 	bl	800a560 <__sinit>
 800a9a8:	4b89      	ldr	r3, [pc, #548]	; (800abd0 <_vfiprintf_r+0x240>)
 800a9aa:	429d      	cmp	r5, r3
 800a9ac:	d11b      	bne.n	800a9e6 <_vfiprintf_r+0x56>
 800a9ae:	6875      	ldr	r5, [r6, #4]
 800a9b0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a9b2:	07d9      	lsls	r1, r3, #31
 800a9b4:	d405      	bmi.n	800a9c2 <_vfiprintf_r+0x32>
 800a9b6:	89ab      	ldrh	r3, [r5, #12]
 800a9b8:	059a      	lsls	r2, r3, #22
 800a9ba:	d402      	bmi.n	800a9c2 <_vfiprintf_r+0x32>
 800a9bc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a9be:	f7ff fe6d 	bl	800a69c <__retarget_lock_acquire_recursive>
 800a9c2:	89ab      	ldrh	r3, [r5, #12]
 800a9c4:	071b      	lsls	r3, r3, #28
 800a9c6:	d501      	bpl.n	800a9cc <_vfiprintf_r+0x3c>
 800a9c8:	692b      	ldr	r3, [r5, #16]
 800a9ca:	b9eb      	cbnz	r3, 800aa08 <_vfiprintf_r+0x78>
 800a9cc:	4629      	mov	r1, r5
 800a9ce:	4630      	mov	r0, r6
 800a9d0:	f7ff fc3e 	bl	800a250 <__swsetup_r>
 800a9d4:	b1c0      	cbz	r0, 800aa08 <_vfiprintf_r+0x78>
 800a9d6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a9d8:	07dc      	lsls	r4, r3, #31
 800a9da:	d50e      	bpl.n	800a9fa <_vfiprintf_r+0x6a>
 800a9dc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a9e0:	b01d      	add	sp, #116	; 0x74
 800a9e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a9e6:	4b7b      	ldr	r3, [pc, #492]	; (800abd4 <_vfiprintf_r+0x244>)
 800a9e8:	429d      	cmp	r5, r3
 800a9ea:	d101      	bne.n	800a9f0 <_vfiprintf_r+0x60>
 800a9ec:	68b5      	ldr	r5, [r6, #8]
 800a9ee:	e7df      	b.n	800a9b0 <_vfiprintf_r+0x20>
 800a9f0:	4b79      	ldr	r3, [pc, #484]	; (800abd8 <_vfiprintf_r+0x248>)
 800a9f2:	429d      	cmp	r5, r3
 800a9f4:	bf08      	it	eq
 800a9f6:	68f5      	ldreq	r5, [r6, #12]
 800a9f8:	e7da      	b.n	800a9b0 <_vfiprintf_r+0x20>
 800a9fa:	89ab      	ldrh	r3, [r5, #12]
 800a9fc:	0598      	lsls	r0, r3, #22
 800a9fe:	d4ed      	bmi.n	800a9dc <_vfiprintf_r+0x4c>
 800aa00:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800aa02:	f7ff fe4c 	bl	800a69e <__retarget_lock_release_recursive>
 800aa06:	e7e9      	b.n	800a9dc <_vfiprintf_r+0x4c>
 800aa08:	2300      	movs	r3, #0
 800aa0a:	9309      	str	r3, [sp, #36]	; 0x24
 800aa0c:	2320      	movs	r3, #32
 800aa0e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800aa12:	f8cd 800c 	str.w	r8, [sp, #12]
 800aa16:	2330      	movs	r3, #48	; 0x30
 800aa18:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800abdc <_vfiprintf_r+0x24c>
 800aa1c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800aa20:	f04f 0901 	mov.w	r9, #1
 800aa24:	4623      	mov	r3, r4
 800aa26:	469a      	mov	sl, r3
 800aa28:	f813 2b01 	ldrb.w	r2, [r3], #1
 800aa2c:	b10a      	cbz	r2, 800aa32 <_vfiprintf_r+0xa2>
 800aa2e:	2a25      	cmp	r2, #37	; 0x25
 800aa30:	d1f9      	bne.n	800aa26 <_vfiprintf_r+0x96>
 800aa32:	ebba 0b04 	subs.w	fp, sl, r4
 800aa36:	d00b      	beq.n	800aa50 <_vfiprintf_r+0xc0>
 800aa38:	465b      	mov	r3, fp
 800aa3a:	4622      	mov	r2, r4
 800aa3c:	4629      	mov	r1, r5
 800aa3e:	4630      	mov	r0, r6
 800aa40:	f7ff ff93 	bl	800a96a <__sfputs_r>
 800aa44:	3001      	adds	r0, #1
 800aa46:	f000 80aa 	beq.w	800ab9e <_vfiprintf_r+0x20e>
 800aa4a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800aa4c:	445a      	add	r2, fp
 800aa4e:	9209      	str	r2, [sp, #36]	; 0x24
 800aa50:	f89a 3000 	ldrb.w	r3, [sl]
 800aa54:	2b00      	cmp	r3, #0
 800aa56:	f000 80a2 	beq.w	800ab9e <_vfiprintf_r+0x20e>
 800aa5a:	2300      	movs	r3, #0
 800aa5c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800aa60:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800aa64:	f10a 0a01 	add.w	sl, sl, #1
 800aa68:	9304      	str	r3, [sp, #16]
 800aa6a:	9307      	str	r3, [sp, #28]
 800aa6c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800aa70:	931a      	str	r3, [sp, #104]	; 0x68
 800aa72:	4654      	mov	r4, sl
 800aa74:	2205      	movs	r2, #5
 800aa76:	f814 1b01 	ldrb.w	r1, [r4], #1
 800aa7a:	4858      	ldr	r0, [pc, #352]	; (800abdc <_vfiprintf_r+0x24c>)
 800aa7c:	f7fb fc00 	bl	8006280 <memchr>
 800aa80:	9a04      	ldr	r2, [sp, #16]
 800aa82:	b9d8      	cbnz	r0, 800aabc <_vfiprintf_r+0x12c>
 800aa84:	06d1      	lsls	r1, r2, #27
 800aa86:	bf44      	itt	mi
 800aa88:	2320      	movmi	r3, #32
 800aa8a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800aa8e:	0713      	lsls	r3, r2, #28
 800aa90:	bf44      	itt	mi
 800aa92:	232b      	movmi	r3, #43	; 0x2b
 800aa94:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800aa98:	f89a 3000 	ldrb.w	r3, [sl]
 800aa9c:	2b2a      	cmp	r3, #42	; 0x2a
 800aa9e:	d015      	beq.n	800aacc <_vfiprintf_r+0x13c>
 800aaa0:	9a07      	ldr	r2, [sp, #28]
 800aaa2:	4654      	mov	r4, sl
 800aaa4:	2000      	movs	r0, #0
 800aaa6:	f04f 0c0a 	mov.w	ip, #10
 800aaaa:	4621      	mov	r1, r4
 800aaac:	f811 3b01 	ldrb.w	r3, [r1], #1
 800aab0:	3b30      	subs	r3, #48	; 0x30
 800aab2:	2b09      	cmp	r3, #9
 800aab4:	d94e      	bls.n	800ab54 <_vfiprintf_r+0x1c4>
 800aab6:	b1b0      	cbz	r0, 800aae6 <_vfiprintf_r+0x156>
 800aab8:	9207      	str	r2, [sp, #28]
 800aaba:	e014      	b.n	800aae6 <_vfiprintf_r+0x156>
 800aabc:	eba0 0308 	sub.w	r3, r0, r8
 800aac0:	fa09 f303 	lsl.w	r3, r9, r3
 800aac4:	4313      	orrs	r3, r2
 800aac6:	9304      	str	r3, [sp, #16]
 800aac8:	46a2      	mov	sl, r4
 800aaca:	e7d2      	b.n	800aa72 <_vfiprintf_r+0xe2>
 800aacc:	9b03      	ldr	r3, [sp, #12]
 800aace:	1d19      	adds	r1, r3, #4
 800aad0:	681b      	ldr	r3, [r3, #0]
 800aad2:	9103      	str	r1, [sp, #12]
 800aad4:	2b00      	cmp	r3, #0
 800aad6:	bfbb      	ittet	lt
 800aad8:	425b      	neglt	r3, r3
 800aada:	f042 0202 	orrlt.w	r2, r2, #2
 800aade:	9307      	strge	r3, [sp, #28]
 800aae0:	9307      	strlt	r3, [sp, #28]
 800aae2:	bfb8      	it	lt
 800aae4:	9204      	strlt	r2, [sp, #16]
 800aae6:	7823      	ldrb	r3, [r4, #0]
 800aae8:	2b2e      	cmp	r3, #46	; 0x2e
 800aaea:	d10c      	bne.n	800ab06 <_vfiprintf_r+0x176>
 800aaec:	7863      	ldrb	r3, [r4, #1]
 800aaee:	2b2a      	cmp	r3, #42	; 0x2a
 800aaf0:	d135      	bne.n	800ab5e <_vfiprintf_r+0x1ce>
 800aaf2:	9b03      	ldr	r3, [sp, #12]
 800aaf4:	1d1a      	adds	r2, r3, #4
 800aaf6:	681b      	ldr	r3, [r3, #0]
 800aaf8:	9203      	str	r2, [sp, #12]
 800aafa:	2b00      	cmp	r3, #0
 800aafc:	bfb8      	it	lt
 800aafe:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800ab02:	3402      	adds	r4, #2
 800ab04:	9305      	str	r3, [sp, #20]
 800ab06:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800abec <_vfiprintf_r+0x25c>
 800ab0a:	7821      	ldrb	r1, [r4, #0]
 800ab0c:	2203      	movs	r2, #3
 800ab0e:	4650      	mov	r0, sl
 800ab10:	f7fb fbb6 	bl	8006280 <memchr>
 800ab14:	b140      	cbz	r0, 800ab28 <_vfiprintf_r+0x198>
 800ab16:	2340      	movs	r3, #64	; 0x40
 800ab18:	eba0 000a 	sub.w	r0, r0, sl
 800ab1c:	fa03 f000 	lsl.w	r0, r3, r0
 800ab20:	9b04      	ldr	r3, [sp, #16]
 800ab22:	4303      	orrs	r3, r0
 800ab24:	3401      	adds	r4, #1
 800ab26:	9304      	str	r3, [sp, #16]
 800ab28:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ab2c:	482c      	ldr	r0, [pc, #176]	; (800abe0 <_vfiprintf_r+0x250>)
 800ab2e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ab32:	2206      	movs	r2, #6
 800ab34:	f7fb fba4 	bl	8006280 <memchr>
 800ab38:	2800      	cmp	r0, #0
 800ab3a:	d03f      	beq.n	800abbc <_vfiprintf_r+0x22c>
 800ab3c:	4b29      	ldr	r3, [pc, #164]	; (800abe4 <_vfiprintf_r+0x254>)
 800ab3e:	bb1b      	cbnz	r3, 800ab88 <_vfiprintf_r+0x1f8>
 800ab40:	9b03      	ldr	r3, [sp, #12]
 800ab42:	3307      	adds	r3, #7
 800ab44:	f023 0307 	bic.w	r3, r3, #7
 800ab48:	3308      	adds	r3, #8
 800ab4a:	9303      	str	r3, [sp, #12]
 800ab4c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ab4e:	443b      	add	r3, r7
 800ab50:	9309      	str	r3, [sp, #36]	; 0x24
 800ab52:	e767      	b.n	800aa24 <_vfiprintf_r+0x94>
 800ab54:	fb0c 3202 	mla	r2, ip, r2, r3
 800ab58:	460c      	mov	r4, r1
 800ab5a:	2001      	movs	r0, #1
 800ab5c:	e7a5      	b.n	800aaaa <_vfiprintf_r+0x11a>
 800ab5e:	2300      	movs	r3, #0
 800ab60:	3401      	adds	r4, #1
 800ab62:	9305      	str	r3, [sp, #20]
 800ab64:	4619      	mov	r1, r3
 800ab66:	f04f 0c0a 	mov.w	ip, #10
 800ab6a:	4620      	mov	r0, r4
 800ab6c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ab70:	3a30      	subs	r2, #48	; 0x30
 800ab72:	2a09      	cmp	r2, #9
 800ab74:	d903      	bls.n	800ab7e <_vfiprintf_r+0x1ee>
 800ab76:	2b00      	cmp	r3, #0
 800ab78:	d0c5      	beq.n	800ab06 <_vfiprintf_r+0x176>
 800ab7a:	9105      	str	r1, [sp, #20]
 800ab7c:	e7c3      	b.n	800ab06 <_vfiprintf_r+0x176>
 800ab7e:	fb0c 2101 	mla	r1, ip, r1, r2
 800ab82:	4604      	mov	r4, r0
 800ab84:	2301      	movs	r3, #1
 800ab86:	e7f0      	b.n	800ab6a <_vfiprintf_r+0x1da>
 800ab88:	ab03      	add	r3, sp, #12
 800ab8a:	9300      	str	r3, [sp, #0]
 800ab8c:	462a      	mov	r2, r5
 800ab8e:	4b16      	ldr	r3, [pc, #88]	; (800abe8 <_vfiprintf_r+0x258>)
 800ab90:	a904      	add	r1, sp, #16
 800ab92:	4630      	mov	r0, r6
 800ab94:	f3af 8000 	nop.w
 800ab98:	4607      	mov	r7, r0
 800ab9a:	1c78      	adds	r0, r7, #1
 800ab9c:	d1d6      	bne.n	800ab4c <_vfiprintf_r+0x1bc>
 800ab9e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800aba0:	07d9      	lsls	r1, r3, #31
 800aba2:	d405      	bmi.n	800abb0 <_vfiprintf_r+0x220>
 800aba4:	89ab      	ldrh	r3, [r5, #12]
 800aba6:	059a      	lsls	r2, r3, #22
 800aba8:	d402      	bmi.n	800abb0 <_vfiprintf_r+0x220>
 800abaa:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800abac:	f7ff fd77 	bl	800a69e <__retarget_lock_release_recursive>
 800abb0:	89ab      	ldrh	r3, [r5, #12]
 800abb2:	065b      	lsls	r3, r3, #25
 800abb4:	f53f af12 	bmi.w	800a9dc <_vfiprintf_r+0x4c>
 800abb8:	9809      	ldr	r0, [sp, #36]	; 0x24
 800abba:	e711      	b.n	800a9e0 <_vfiprintf_r+0x50>
 800abbc:	ab03      	add	r3, sp, #12
 800abbe:	9300      	str	r3, [sp, #0]
 800abc0:	462a      	mov	r2, r5
 800abc2:	4b09      	ldr	r3, [pc, #36]	; (800abe8 <_vfiprintf_r+0x258>)
 800abc4:	a904      	add	r1, sp, #16
 800abc6:	4630      	mov	r0, r6
 800abc8:	f000 f880 	bl	800accc <_printf_i>
 800abcc:	e7e4      	b.n	800ab98 <_vfiprintf_r+0x208>
 800abce:	bf00      	nop
 800abd0:	0800bfb4 	.word	0x0800bfb4
 800abd4:	0800bfd4 	.word	0x0800bfd4
 800abd8:	0800bf94 	.word	0x0800bf94
 800abdc:	0800bff4 	.word	0x0800bff4
 800abe0:	0800bffe 	.word	0x0800bffe
 800abe4:	00000000 	.word	0x00000000
 800abe8:	0800a96b 	.word	0x0800a96b
 800abec:	0800bffa 	.word	0x0800bffa

0800abf0 <_printf_common>:
 800abf0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800abf4:	4616      	mov	r6, r2
 800abf6:	4699      	mov	r9, r3
 800abf8:	688a      	ldr	r2, [r1, #8]
 800abfa:	690b      	ldr	r3, [r1, #16]
 800abfc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800ac00:	4293      	cmp	r3, r2
 800ac02:	bfb8      	it	lt
 800ac04:	4613      	movlt	r3, r2
 800ac06:	6033      	str	r3, [r6, #0]
 800ac08:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800ac0c:	4607      	mov	r7, r0
 800ac0e:	460c      	mov	r4, r1
 800ac10:	b10a      	cbz	r2, 800ac16 <_printf_common+0x26>
 800ac12:	3301      	adds	r3, #1
 800ac14:	6033      	str	r3, [r6, #0]
 800ac16:	6823      	ldr	r3, [r4, #0]
 800ac18:	0699      	lsls	r1, r3, #26
 800ac1a:	bf42      	ittt	mi
 800ac1c:	6833      	ldrmi	r3, [r6, #0]
 800ac1e:	3302      	addmi	r3, #2
 800ac20:	6033      	strmi	r3, [r6, #0]
 800ac22:	6825      	ldr	r5, [r4, #0]
 800ac24:	f015 0506 	ands.w	r5, r5, #6
 800ac28:	d106      	bne.n	800ac38 <_printf_common+0x48>
 800ac2a:	f104 0a19 	add.w	sl, r4, #25
 800ac2e:	68e3      	ldr	r3, [r4, #12]
 800ac30:	6832      	ldr	r2, [r6, #0]
 800ac32:	1a9b      	subs	r3, r3, r2
 800ac34:	42ab      	cmp	r3, r5
 800ac36:	dc26      	bgt.n	800ac86 <_printf_common+0x96>
 800ac38:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800ac3c:	1e13      	subs	r3, r2, #0
 800ac3e:	6822      	ldr	r2, [r4, #0]
 800ac40:	bf18      	it	ne
 800ac42:	2301      	movne	r3, #1
 800ac44:	0692      	lsls	r2, r2, #26
 800ac46:	d42b      	bmi.n	800aca0 <_printf_common+0xb0>
 800ac48:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800ac4c:	4649      	mov	r1, r9
 800ac4e:	4638      	mov	r0, r7
 800ac50:	47c0      	blx	r8
 800ac52:	3001      	adds	r0, #1
 800ac54:	d01e      	beq.n	800ac94 <_printf_common+0xa4>
 800ac56:	6823      	ldr	r3, [r4, #0]
 800ac58:	68e5      	ldr	r5, [r4, #12]
 800ac5a:	6832      	ldr	r2, [r6, #0]
 800ac5c:	f003 0306 	and.w	r3, r3, #6
 800ac60:	2b04      	cmp	r3, #4
 800ac62:	bf08      	it	eq
 800ac64:	1aad      	subeq	r5, r5, r2
 800ac66:	68a3      	ldr	r3, [r4, #8]
 800ac68:	6922      	ldr	r2, [r4, #16]
 800ac6a:	bf0c      	ite	eq
 800ac6c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800ac70:	2500      	movne	r5, #0
 800ac72:	4293      	cmp	r3, r2
 800ac74:	bfc4      	itt	gt
 800ac76:	1a9b      	subgt	r3, r3, r2
 800ac78:	18ed      	addgt	r5, r5, r3
 800ac7a:	2600      	movs	r6, #0
 800ac7c:	341a      	adds	r4, #26
 800ac7e:	42b5      	cmp	r5, r6
 800ac80:	d11a      	bne.n	800acb8 <_printf_common+0xc8>
 800ac82:	2000      	movs	r0, #0
 800ac84:	e008      	b.n	800ac98 <_printf_common+0xa8>
 800ac86:	2301      	movs	r3, #1
 800ac88:	4652      	mov	r2, sl
 800ac8a:	4649      	mov	r1, r9
 800ac8c:	4638      	mov	r0, r7
 800ac8e:	47c0      	blx	r8
 800ac90:	3001      	adds	r0, #1
 800ac92:	d103      	bne.n	800ac9c <_printf_common+0xac>
 800ac94:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ac98:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ac9c:	3501      	adds	r5, #1
 800ac9e:	e7c6      	b.n	800ac2e <_printf_common+0x3e>
 800aca0:	18e1      	adds	r1, r4, r3
 800aca2:	1c5a      	adds	r2, r3, #1
 800aca4:	2030      	movs	r0, #48	; 0x30
 800aca6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800acaa:	4422      	add	r2, r4
 800acac:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800acb0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800acb4:	3302      	adds	r3, #2
 800acb6:	e7c7      	b.n	800ac48 <_printf_common+0x58>
 800acb8:	2301      	movs	r3, #1
 800acba:	4622      	mov	r2, r4
 800acbc:	4649      	mov	r1, r9
 800acbe:	4638      	mov	r0, r7
 800acc0:	47c0      	blx	r8
 800acc2:	3001      	adds	r0, #1
 800acc4:	d0e6      	beq.n	800ac94 <_printf_common+0xa4>
 800acc6:	3601      	adds	r6, #1
 800acc8:	e7d9      	b.n	800ac7e <_printf_common+0x8e>
	...

0800accc <_printf_i>:
 800accc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800acd0:	7e0f      	ldrb	r7, [r1, #24]
 800acd2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800acd4:	2f78      	cmp	r7, #120	; 0x78
 800acd6:	4691      	mov	r9, r2
 800acd8:	4680      	mov	r8, r0
 800acda:	460c      	mov	r4, r1
 800acdc:	469a      	mov	sl, r3
 800acde:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800ace2:	d807      	bhi.n	800acf4 <_printf_i+0x28>
 800ace4:	2f62      	cmp	r7, #98	; 0x62
 800ace6:	d80a      	bhi.n	800acfe <_printf_i+0x32>
 800ace8:	2f00      	cmp	r7, #0
 800acea:	f000 80d8 	beq.w	800ae9e <_printf_i+0x1d2>
 800acee:	2f58      	cmp	r7, #88	; 0x58
 800acf0:	f000 80a3 	beq.w	800ae3a <_printf_i+0x16e>
 800acf4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800acf8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800acfc:	e03a      	b.n	800ad74 <_printf_i+0xa8>
 800acfe:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800ad02:	2b15      	cmp	r3, #21
 800ad04:	d8f6      	bhi.n	800acf4 <_printf_i+0x28>
 800ad06:	a101      	add	r1, pc, #4	; (adr r1, 800ad0c <_printf_i+0x40>)
 800ad08:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800ad0c:	0800ad65 	.word	0x0800ad65
 800ad10:	0800ad79 	.word	0x0800ad79
 800ad14:	0800acf5 	.word	0x0800acf5
 800ad18:	0800acf5 	.word	0x0800acf5
 800ad1c:	0800acf5 	.word	0x0800acf5
 800ad20:	0800acf5 	.word	0x0800acf5
 800ad24:	0800ad79 	.word	0x0800ad79
 800ad28:	0800acf5 	.word	0x0800acf5
 800ad2c:	0800acf5 	.word	0x0800acf5
 800ad30:	0800acf5 	.word	0x0800acf5
 800ad34:	0800acf5 	.word	0x0800acf5
 800ad38:	0800ae85 	.word	0x0800ae85
 800ad3c:	0800ada9 	.word	0x0800ada9
 800ad40:	0800ae67 	.word	0x0800ae67
 800ad44:	0800acf5 	.word	0x0800acf5
 800ad48:	0800acf5 	.word	0x0800acf5
 800ad4c:	0800aea7 	.word	0x0800aea7
 800ad50:	0800acf5 	.word	0x0800acf5
 800ad54:	0800ada9 	.word	0x0800ada9
 800ad58:	0800acf5 	.word	0x0800acf5
 800ad5c:	0800acf5 	.word	0x0800acf5
 800ad60:	0800ae6f 	.word	0x0800ae6f
 800ad64:	682b      	ldr	r3, [r5, #0]
 800ad66:	1d1a      	adds	r2, r3, #4
 800ad68:	681b      	ldr	r3, [r3, #0]
 800ad6a:	602a      	str	r2, [r5, #0]
 800ad6c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ad70:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800ad74:	2301      	movs	r3, #1
 800ad76:	e0a3      	b.n	800aec0 <_printf_i+0x1f4>
 800ad78:	6820      	ldr	r0, [r4, #0]
 800ad7a:	6829      	ldr	r1, [r5, #0]
 800ad7c:	0606      	lsls	r6, r0, #24
 800ad7e:	f101 0304 	add.w	r3, r1, #4
 800ad82:	d50a      	bpl.n	800ad9a <_printf_i+0xce>
 800ad84:	680e      	ldr	r6, [r1, #0]
 800ad86:	602b      	str	r3, [r5, #0]
 800ad88:	2e00      	cmp	r6, #0
 800ad8a:	da03      	bge.n	800ad94 <_printf_i+0xc8>
 800ad8c:	232d      	movs	r3, #45	; 0x2d
 800ad8e:	4276      	negs	r6, r6
 800ad90:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ad94:	485e      	ldr	r0, [pc, #376]	; (800af10 <_printf_i+0x244>)
 800ad96:	230a      	movs	r3, #10
 800ad98:	e019      	b.n	800adce <_printf_i+0x102>
 800ad9a:	680e      	ldr	r6, [r1, #0]
 800ad9c:	602b      	str	r3, [r5, #0]
 800ad9e:	f010 0f40 	tst.w	r0, #64	; 0x40
 800ada2:	bf18      	it	ne
 800ada4:	b236      	sxthne	r6, r6
 800ada6:	e7ef      	b.n	800ad88 <_printf_i+0xbc>
 800ada8:	682b      	ldr	r3, [r5, #0]
 800adaa:	6820      	ldr	r0, [r4, #0]
 800adac:	1d19      	adds	r1, r3, #4
 800adae:	6029      	str	r1, [r5, #0]
 800adb0:	0601      	lsls	r1, r0, #24
 800adb2:	d501      	bpl.n	800adb8 <_printf_i+0xec>
 800adb4:	681e      	ldr	r6, [r3, #0]
 800adb6:	e002      	b.n	800adbe <_printf_i+0xf2>
 800adb8:	0646      	lsls	r6, r0, #25
 800adba:	d5fb      	bpl.n	800adb4 <_printf_i+0xe8>
 800adbc:	881e      	ldrh	r6, [r3, #0]
 800adbe:	4854      	ldr	r0, [pc, #336]	; (800af10 <_printf_i+0x244>)
 800adc0:	2f6f      	cmp	r7, #111	; 0x6f
 800adc2:	bf0c      	ite	eq
 800adc4:	2308      	moveq	r3, #8
 800adc6:	230a      	movne	r3, #10
 800adc8:	2100      	movs	r1, #0
 800adca:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800adce:	6865      	ldr	r5, [r4, #4]
 800add0:	60a5      	str	r5, [r4, #8]
 800add2:	2d00      	cmp	r5, #0
 800add4:	bfa2      	ittt	ge
 800add6:	6821      	ldrge	r1, [r4, #0]
 800add8:	f021 0104 	bicge.w	r1, r1, #4
 800addc:	6021      	strge	r1, [r4, #0]
 800adde:	b90e      	cbnz	r6, 800ade4 <_printf_i+0x118>
 800ade0:	2d00      	cmp	r5, #0
 800ade2:	d04d      	beq.n	800ae80 <_printf_i+0x1b4>
 800ade4:	4615      	mov	r5, r2
 800ade6:	fbb6 f1f3 	udiv	r1, r6, r3
 800adea:	fb03 6711 	mls	r7, r3, r1, r6
 800adee:	5dc7      	ldrb	r7, [r0, r7]
 800adf0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800adf4:	4637      	mov	r7, r6
 800adf6:	42bb      	cmp	r3, r7
 800adf8:	460e      	mov	r6, r1
 800adfa:	d9f4      	bls.n	800ade6 <_printf_i+0x11a>
 800adfc:	2b08      	cmp	r3, #8
 800adfe:	d10b      	bne.n	800ae18 <_printf_i+0x14c>
 800ae00:	6823      	ldr	r3, [r4, #0]
 800ae02:	07de      	lsls	r6, r3, #31
 800ae04:	d508      	bpl.n	800ae18 <_printf_i+0x14c>
 800ae06:	6923      	ldr	r3, [r4, #16]
 800ae08:	6861      	ldr	r1, [r4, #4]
 800ae0a:	4299      	cmp	r1, r3
 800ae0c:	bfde      	ittt	le
 800ae0e:	2330      	movle	r3, #48	; 0x30
 800ae10:	f805 3c01 	strble.w	r3, [r5, #-1]
 800ae14:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800ae18:	1b52      	subs	r2, r2, r5
 800ae1a:	6122      	str	r2, [r4, #16]
 800ae1c:	f8cd a000 	str.w	sl, [sp]
 800ae20:	464b      	mov	r3, r9
 800ae22:	aa03      	add	r2, sp, #12
 800ae24:	4621      	mov	r1, r4
 800ae26:	4640      	mov	r0, r8
 800ae28:	f7ff fee2 	bl	800abf0 <_printf_common>
 800ae2c:	3001      	adds	r0, #1
 800ae2e:	d14c      	bne.n	800aeca <_printf_i+0x1fe>
 800ae30:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ae34:	b004      	add	sp, #16
 800ae36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ae3a:	4835      	ldr	r0, [pc, #212]	; (800af10 <_printf_i+0x244>)
 800ae3c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800ae40:	6829      	ldr	r1, [r5, #0]
 800ae42:	6823      	ldr	r3, [r4, #0]
 800ae44:	f851 6b04 	ldr.w	r6, [r1], #4
 800ae48:	6029      	str	r1, [r5, #0]
 800ae4a:	061d      	lsls	r5, r3, #24
 800ae4c:	d514      	bpl.n	800ae78 <_printf_i+0x1ac>
 800ae4e:	07df      	lsls	r7, r3, #31
 800ae50:	bf44      	itt	mi
 800ae52:	f043 0320 	orrmi.w	r3, r3, #32
 800ae56:	6023      	strmi	r3, [r4, #0]
 800ae58:	b91e      	cbnz	r6, 800ae62 <_printf_i+0x196>
 800ae5a:	6823      	ldr	r3, [r4, #0]
 800ae5c:	f023 0320 	bic.w	r3, r3, #32
 800ae60:	6023      	str	r3, [r4, #0]
 800ae62:	2310      	movs	r3, #16
 800ae64:	e7b0      	b.n	800adc8 <_printf_i+0xfc>
 800ae66:	6823      	ldr	r3, [r4, #0]
 800ae68:	f043 0320 	orr.w	r3, r3, #32
 800ae6c:	6023      	str	r3, [r4, #0]
 800ae6e:	2378      	movs	r3, #120	; 0x78
 800ae70:	4828      	ldr	r0, [pc, #160]	; (800af14 <_printf_i+0x248>)
 800ae72:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800ae76:	e7e3      	b.n	800ae40 <_printf_i+0x174>
 800ae78:	0659      	lsls	r1, r3, #25
 800ae7a:	bf48      	it	mi
 800ae7c:	b2b6      	uxthmi	r6, r6
 800ae7e:	e7e6      	b.n	800ae4e <_printf_i+0x182>
 800ae80:	4615      	mov	r5, r2
 800ae82:	e7bb      	b.n	800adfc <_printf_i+0x130>
 800ae84:	682b      	ldr	r3, [r5, #0]
 800ae86:	6826      	ldr	r6, [r4, #0]
 800ae88:	6961      	ldr	r1, [r4, #20]
 800ae8a:	1d18      	adds	r0, r3, #4
 800ae8c:	6028      	str	r0, [r5, #0]
 800ae8e:	0635      	lsls	r5, r6, #24
 800ae90:	681b      	ldr	r3, [r3, #0]
 800ae92:	d501      	bpl.n	800ae98 <_printf_i+0x1cc>
 800ae94:	6019      	str	r1, [r3, #0]
 800ae96:	e002      	b.n	800ae9e <_printf_i+0x1d2>
 800ae98:	0670      	lsls	r0, r6, #25
 800ae9a:	d5fb      	bpl.n	800ae94 <_printf_i+0x1c8>
 800ae9c:	8019      	strh	r1, [r3, #0]
 800ae9e:	2300      	movs	r3, #0
 800aea0:	6123      	str	r3, [r4, #16]
 800aea2:	4615      	mov	r5, r2
 800aea4:	e7ba      	b.n	800ae1c <_printf_i+0x150>
 800aea6:	682b      	ldr	r3, [r5, #0]
 800aea8:	1d1a      	adds	r2, r3, #4
 800aeaa:	602a      	str	r2, [r5, #0]
 800aeac:	681d      	ldr	r5, [r3, #0]
 800aeae:	6862      	ldr	r2, [r4, #4]
 800aeb0:	2100      	movs	r1, #0
 800aeb2:	4628      	mov	r0, r5
 800aeb4:	f7fb f9e4 	bl	8006280 <memchr>
 800aeb8:	b108      	cbz	r0, 800aebe <_printf_i+0x1f2>
 800aeba:	1b40      	subs	r0, r0, r5
 800aebc:	6060      	str	r0, [r4, #4]
 800aebe:	6863      	ldr	r3, [r4, #4]
 800aec0:	6123      	str	r3, [r4, #16]
 800aec2:	2300      	movs	r3, #0
 800aec4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800aec8:	e7a8      	b.n	800ae1c <_printf_i+0x150>
 800aeca:	6923      	ldr	r3, [r4, #16]
 800aecc:	462a      	mov	r2, r5
 800aece:	4649      	mov	r1, r9
 800aed0:	4640      	mov	r0, r8
 800aed2:	47d0      	blx	sl
 800aed4:	3001      	adds	r0, #1
 800aed6:	d0ab      	beq.n	800ae30 <_printf_i+0x164>
 800aed8:	6823      	ldr	r3, [r4, #0]
 800aeda:	079b      	lsls	r3, r3, #30
 800aedc:	d413      	bmi.n	800af06 <_printf_i+0x23a>
 800aede:	68e0      	ldr	r0, [r4, #12]
 800aee0:	9b03      	ldr	r3, [sp, #12]
 800aee2:	4298      	cmp	r0, r3
 800aee4:	bfb8      	it	lt
 800aee6:	4618      	movlt	r0, r3
 800aee8:	e7a4      	b.n	800ae34 <_printf_i+0x168>
 800aeea:	2301      	movs	r3, #1
 800aeec:	4632      	mov	r2, r6
 800aeee:	4649      	mov	r1, r9
 800aef0:	4640      	mov	r0, r8
 800aef2:	47d0      	blx	sl
 800aef4:	3001      	adds	r0, #1
 800aef6:	d09b      	beq.n	800ae30 <_printf_i+0x164>
 800aef8:	3501      	adds	r5, #1
 800aefa:	68e3      	ldr	r3, [r4, #12]
 800aefc:	9903      	ldr	r1, [sp, #12]
 800aefe:	1a5b      	subs	r3, r3, r1
 800af00:	42ab      	cmp	r3, r5
 800af02:	dcf2      	bgt.n	800aeea <_printf_i+0x21e>
 800af04:	e7eb      	b.n	800aede <_printf_i+0x212>
 800af06:	2500      	movs	r5, #0
 800af08:	f104 0619 	add.w	r6, r4, #25
 800af0c:	e7f5      	b.n	800aefa <_printf_i+0x22e>
 800af0e:	bf00      	nop
 800af10:	0800c005 	.word	0x0800c005
 800af14:	0800c016 	.word	0x0800c016

0800af18 <_sbrk_r>:
 800af18:	b538      	push	{r3, r4, r5, lr}
 800af1a:	4d06      	ldr	r5, [pc, #24]	; (800af34 <_sbrk_r+0x1c>)
 800af1c:	2300      	movs	r3, #0
 800af1e:	4604      	mov	r4, r0
 800af20:	4608      	mov	r0, r1
 800af22:	602b      	str	r3, [r5, #0]
 800af24:	f7fb fc24 	bl	8006770 <_sbrk>
 800af28:	1c43      	adds	r3, r0, #1
 800af2a:	d102      	bne.n	800af32 <_sbrk_r+0x1a>
 800af2c:	682b      	ldr	r3, [r5, #0]
 800af2e:	b103      	cbz	r3, 800af32 <_sbrk_r+0x1a>
 800af30:	6023      	str	r3, [r4, #0]
 800af32:	bd38      	pop	{r3, r4, r5, pc}
 800af34:	200019a0 	.word	0x200019a0

0800af38 <__sread>:
 800af38:	b510      	push	{r4, lr}
 800af3a:	460c      	mov	r4, r1
 800af3c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800af40:	f000 f8a0 	bl	800b084 <_read_r>
 800af44:	2800      	cmp	r0, #0
 800af46:	bfab      	itete	ge
 800af48:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800af4a:	89a3      	ldrhlt	r3, [r4, #12]
 800af4c:	181b      	addge	r3, r3, r0
 800af4e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800af52:	bfac      	ite	ge
 800af54:	6563      	strge	r3, [r4, #84]	; 0x54
 800af56:	81a3      	strhlt	r3, [r4, #12]
 800af58:	bd10      	pop	{r4, pc}

0800af5a <__swrite>:
 800af5a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800af5e:	461f      	mov	r7, r3
 800af60:	898b      	ldrh	r3, [r1, #12]
 800af62:	05db      	lsls	r3, r3, #23
 800af64:	4605      	mov	r5, r0
 800af66:	460c      	mov	r4, r1
 800af68:	4616      	mov	r6, r2
 800af6a:	d505      	bpl.n	800af78 <__swrite+0x1e>
 800af6c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800af70:	2302      	movs	r3, #2
 800af72:	2200      	movs	r2, #0
 800af74:	f000 f868 	bl	800b048 <_lseek_r>
 800af78:	89a3      	ldrh	r3, [r4, #12]
 800af7a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800af7e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800af82:	81a3      	strh	r3, [r4, #12]
 800af84:	4632      	mov	r2, r6
 800af86:	463b      	mov	r3, r7
 800af88:	4628      	mov	r0, r5
 800af8a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800af8e:	f000 b817 	b.w	800afc0 <_write_r>

0800af92 <__sseek>:
 800af92:	b510      	push	{r4, lr}
 800af94:	460c      	mov	r4, r1
 800af96:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800af9a:	f000 f855 	bl	800b048 <_lseek_r>
 800af9e:	1c43      	adds	r3, r0, #1
 800afa0:	89a3      	ldrh	r3, [r4, #12]
 800afa2:	bf15      	itete	ne
 800afa4:	6560      	strne	r0, [r4, #84]	; 0x54
 800afa6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800afaa:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800afae:	81a3      	strheq	r3, [r4, #12]
 800afb0:	bf18      	it	ne
 800afb2:	81a3      	strhne	r3, [r4, #12]
 800afb4:	bd10      	pop	{r4, pc}

0800afb6 <__sclose>:
 800afb6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800afba:	f000 b813 	b.w	800afe4 <_close_r>
	...

0800afc0 <_write_r>:
 800afc0:	b538      	push	{r3, r4, r5, lr}
 800afc2:	4d07      	ldr	r5, [pc, #28]	; (800afe0 <_write_r+0x20>)
 800afc4:	4604      	mov	r4, r0
 800afc6:	4608      	mov	r0, r1
 800afc8:	4611      	mov	r1, r2
 800afca:	2200      	movs	r2, #0
 800afcc:	602a      	str	r2, [r5, #0]
 800afce:	461a      	mov	r2, r3
 800afd0:	f7fb fbc0 	bl	8006754 <_write>
 800afd4:	1c43      	adds	r3, r0, #1
 800afd6:	d102      	bne.n	800afde <_write_r+0x1e>
 800afd8:	682b      	ldr	r3, [r5, #0]
 800afda:	b103      	cbz	r3, 800afde <_write_r+0x1e>
 800afdc:	6023      	str	r3, [r4, #0]
 800afde:	bd38      	pop	{r3, r4, r5, pc}
 800afe0:	200019a0 	.word	0x200019a0

0800afe4 <_close_r>:
 800afe4:	b538      	push	{r3, r4, r5, lr}
 800afe6:	4d06      	ldr	r5, [pc, #24]	; (800b000 <_close_r+0x1c>)
 800afe8:	2300      	movs	r3, #0
 800afea:	4604      	mov	r4, r0
 800afec:	4608      	mov	r0, r1
 800afee:	602b      	str	r3, [r5, #0]
 800aff0:	f7fb fbd8 	bl	80067a4 <_close>
 800aff4:	1c43      	adds	r3, r0, #1
 800aff6:	d102      	bne.n	800affe <_close_r+0x1a>
 800aff8:	682b      	ldr	r3, [r5, #0]
 800affa:	b103      	cbz	r3, 800affe <_close_r+0x1a>
 800affc:	6023      	str	r3, [r4, #0]
 800affe:	bd38      	pop	{r3, r4, r5, pc}
 800b000:	200019a0 	.word	0x200019a0

0800b004 <_fstat_r>:
 800b004:	b538      	push	{r3, r4, r5, lr}
 800b006:	4d07      	ldr	r5, [pc, #28]	; (800b024 <_fstat_r+0x20>)
 800b008:	2300      	movs	r3, #0
 800b00a:	4604      	mov	r4, r0
 800b00c:	4608      	mov	r0, r1
 800b00e:	4611      	mov	r1, r2
 800b010:	602b      	str	r3, [r5, #0]
 800b012:	f7fb fbca 	bl	80067aa <_fstat>
 800b016:	1c43      	adds	r3, r0, #1
 800b018:	d102      	bne.n	800b020 <_fstat_r+0x1c>
 800b01a:	682b      	ldr	r3, [r5, #0]
 800b01c:	b103      	cbz	r3, 800b020 <_fstat_r+0x1c>
 800b01e:	6023      	str	r3, [r4, #0]
 800b020:	bd38      	pop	{r3, r4, r5, pc}
 800b022:	bf00      	nop
 800b024:	200019a0 	.word	0x200019a0

0800b028 <_isatty_r>:
 800b028:	b538      	push	{r3, r4, r5, lr}
 800b02a:	4d06      	ldr	r5, [pc, #24]	; (800b044 <_isatty_r+0x1c>)
 800b02c:	2300      	movs	r3, #0
 800b02e:	4604      	mov	r4, r0
 800b030:	4608      	mov	r0, r1
 800b032:	602b      	str	r3, [r5, #0]
 800b034:	f7fb fbbe 	bl	80067b4 <_isatty>
 800b038:	1c43      	adds	r3, r0, #1
 800b03a:	d102      	bne.n	800b042 <_isatty_r+0x1a>
 800b03c:	682b      	ldr	r3, [r5, #0]
 800b03e:	b103      	cbz	r3, 800b042 <_isatty_r+0x1a>
 800b040:	6023      	str	r3, [r4, #0]
 800b042:	bd38      	pop	{r3, r4, r5, pc}
 800b044:	200019a0 	.word	0x200019a0

0800b048 <_lseek_r>:
 800b048:	b538      	push	{r3, r4, r5, lr}
 800b04a:	4d07      	ldr	r5, [pc, #28]	; (800b068 <_lseek_r+0x20>)
 800b04c:	4604      	mov	r4, r0
 800b04e:	4608      	mov	r0, r1
 800b050:	4611      	mov	r1, r2
 800b052:	2200      	movs	r2, #0
 800b054:	602a      	str	r2, [r5, #0]
 800b056:	461a      	mov	r2, r3
 800b058:	f7fb fbae 	bl	80067b8 <_lseek>
 800b05c:	1c43      	adds	r3, r0, #1
 800b05e:	d102      	bne.n	800b066 <_lseek_r+0x1e>
 800b060:	682b      	ldr	r3, [r5, #0]
 800b062:	b103      	cbz	r3, 800b066 <_lseek_r+0x1e>
 800b064:	6023      	str	r3, [r4, #0]
 800b066:	bd38      	pop	{r3, r4, r5, pc}
 800b068:	200019a0 	.word	0x200019a0

0800b06c <__malloc_lock>:
 800b06c:	4801      	ldr	r0, [pc, #4]	; (800b074 <__malloc_lock+0x8>)
 800b06e:	f7ff bb15 	b.w	800a69c <__retarget_lock_acquire_recursive>
 800b072:	bf00      	nop
 800b074:	20001995 	.word	0x20001995

0800b078 <__malloc_unlock>:
 800b078:	4801      	ldr	r0, [pc, #4]	; (800b080 <__malloc_unlock+0x8>)
 800b07a:	f7ff bb10 	b.w	800a69e <__retarget_lock_release_recursive>
 800b07e:	bf00      	nop
 800b080:	20001995 	.word	0x20001995

0800b084 <_read_r>:
 800b084:	b538      	push	{r3, r4, r5, lr}
 800b086:	4d07      	ldr	r5, [pc, #28]	; (800b0a4 <_read_r+0x20>)
 800b088:	4604      	mov	r4, r0
 800b08a:	4608      	mov	r0, r1
 800b08c:	4611      	mov	r1, r2
 800b08e:	2200      	movs	r2, #0
 800b090:	602a      	str	r2, [r5, #0]
 800b092:	461a      	mov	r2, r3
 800b094:	f7fb fb50 	bl	8006738 <_read>
 800b098:	1c43      	adds	r3, r0, #1
 800b09a:	d102      	bne.n	800b0a2 <_read_r+0x1e>
 800b09c:	682b      	ldr	r3, [r5, #0]
 800b09e:	b103      	cbz	r3, 800b0a2 <_read_r+0x1e>
 800b0a0:	6023      	str	r3, [r4, #0]
 800b0a2:	bd38      	pop	{r3, r4, r5, pc}
 800b0a4:	200019a0 	.word	0x200019a0

0800b0a8 <_init>:
 800b0a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b0aa:	bf00      	nop
 800b0ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b0ae:	bc08      	pop	{r3}
 800b0b0:	469e      	mov	lr, r3
 800b0b2:	4770      	bx	lr

0800b0b4 <_fini>:
 800b0b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b0b6:	bf00      	nop
 800b0b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b0ba:	bc08      	pop	{r3}
 800b0bc:	469e      	mov	lr, r3
 800b0be:	4770      	bx	lr
