
SECoreBin.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .SE_CallGate_Code 000000cc  08000200  08000200  00000200  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .SE_Key_Data  000000cc  08000400  08000400  00000400  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .SE_Startup_Code 00000010  08000500  08000500  00000500  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .text         00003de0  08000600  08000600  00000600  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  4 .isr_vector   00000020  080043e0  080043e0  000043e0  2**0
                  ALLOC
  5 .rodata       00000898  08004400  08004400  00004400  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .ARM.extab    00000000  08004c98  08004c98  00010408  2**0
                  CONTENTS
  7 .ARM          00000000  08004c98  08004c98  00010408  2**0
                  CONTENTS
  8 .preinit_array 00000000  08004c98  08004c98  00010408  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .init_array   00000008  08004c98  08004c98  00004c98  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .fini_array   00000008  08004ca0  08004ca0  00004ca0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .data         00000008  20000400  08004ca8  00010400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 12 .bss          00000a30  20000408  08004cb0  00010408  2**2
                  ALLOC
 13 .ARM.attributes 0000002e  00000000  00000000  00010408  2**0
                  CONTENTS, READONLY
 14 .debug_info   00005978  00000000  00000000  00010436  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 0000179e  00000000  00000000  00015dae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000360  00000000  00000000  0001754c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 00000400  00000000  00000000  000178ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00020de9  00000000  00000000  00017cac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00009c41  00000000  00000000  00038a95  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000c1473  00000000  00000000  000426d6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      000000d2  00000000  00000000  00103b49  2**0
                  CONTENTS, READONLY
 22 .debug_frame  00000830  00000000  00000000  00103c1c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_loc    00002ac5  00000000  00000000  0010444c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .SE_CallGate_Code:

08000200 <SE_CallGate-0x4>:
 8000200:	00000000 	andeq	r0, r0, r0

08000204 <SE_CallGate>:
  * @param eID: Secure Engine protected function ID.
  * @param peSE_Status: Secure Engine Status.
  * @retval SE_ErrorStatus SE_SUCCESS if successful, SE_ERROR otherwise.
  */
SE_ErrorStatus SE_CallGate(SE_FunctionIDTypeDef eID, SE_StatusTypeDef *const peSE_Status, uint32_t PrimaskParam, ...)
{
 8000204:	b40c      	push	{r2, r3}
 8000206:	b580      	push	{r7, lr}
 8000208:	b086      	sub	sp, #24
 800020a:	af00      	add	r7, sp, #0
 800020c:	6078      	str	r0, [r7, #4]
 800020e:	6039      	str	r1, [r7, #0]
  LR = get_LR();
#elif defined(__ARMCC_VERSION)
  __asm volatile("MOV %0, LR\n" : "=r"(LR));
#elif defined(__GNUC__)
  register unsigned lr asm("lr");
  LR = lr;
 8000210:	4673      	mov	r3, lr
 8000212:	60fb      	str	r3, [r7, #12]
   * instead of return(SE_ERROR) to avoid any attempt of attack by modifying
   * the call stack (LR) in order to execute code inside secure enclave
   */

  /* Check the Callgate was called only from SE Interface */
  IS_CALLER_SE_IF();
 8000214:	68fb      	ldr	r3, [r7, #12]
 8000216:	4a29      	ldr	r2, [pc, #164]	; (80002bc <SE_CallGate+0xb8>)
 8000218:	4293      	cmp	r3, r2
 800021a:	d201      	bcs.n	8000220 <SE_CallGate+0x1c>
 800021c:	f000 fee4 	bl	8000fe8 <__NVIC_SystemReset>
 8000220:	68fb      	ldr	r3, [r7, #12]
 8000222:	4a27      	ldr	r2, [pc, #156]	; (80002c0 <SE_CallGate+0xbc>)
 8000224:	4293      	cmp	r3, r2
 8000226:	d901      	bls.n	800022c <SE_CallGate+0x28>
 8000228:	f000 fede 	bl	8000fe8 <__NVIC_SystemReset>

  /* Check the pointers allocation */
  if (SE_LL_Buffer_in_ram(peSE_Status, sizeof(*peSE_Status)) != SE_SUCCESS)
 800022c:	2104      	movs	r1, #4
 800022e:	6838      	ldr	r0, [r7, #0]
 8000230:	f000 fcba 	bl	8000ba8 <SE_LL_Buffer_in_ram>
 8000234:	4603      	mov	r3, r0
 8000236:	4a23      	ldr	r2, [pc, #140]	; (80002c4 <SE_CallGate+0xc0>)
 8000238:	4293      	cmp	r3, r2
 800023a:	d001      	beq.n	8000240 <SE_CallGate+0x3c>
  {
    NVIC_SystemReset();
 800023c:	f000 fed4 	bl	8000fe8 <__NVIC_SystemReset>
  }
  if (SE_LL_Buffer_part_of_SE_ram(peSE_Status, sizeof(*peSE_Status)) == SE_SUCCESS)
 8000240:	2104      	movs	r1, #4
 8000242:	6838      	ldr	r0, [r7, #0]
 8000244:	f000 fcde 	bl	8000c04 <SE_LL_Buffer_part_of_SE_ram>
 8000248:	4603      	mov	r3, r0
 800024a:	4a1e      	ldr	r2, [pc, #120]	; (80002c4 <SE_CallGate+0xc0>)
 800024c:	4293      	cmp	r3, r2
 800024e:	d101      	bne.n	8000254 <SE_CallGate+0x50>
  {
    NVIC_SystemReset();
 8000250:	f000 feca 	bl	8000fe8 <__NVIC_SystemReset>
  }

  /* Double Check to avoid basic fault injection : the Callgate was called only from SE Interface */
  IS_CALLER_SE_IF();
 8000254:	68fb      	ldr	r3, [r7, #12]
 8000256:	4a19      	ldr	r2, [pc, #100]	; (80002bc <SE_CallGate+0xb8>)
 8000258:	4293      	cmp	r3, r2
 800025a:	d201      	bcs.n	8000260 <SE_CallGate+0x5c>
 800025c:	f000 fec4 	bl	8000fe8 <__NVIC_SystemReset>
 8000260:	68fb      	ldr	r3, [r7, #12]
 8000262:	4a17      	ldr	r2, [pc, #92]	; (80002c0 <SE_CallGate+0xbc>)
 8000264:	4293      	cmp	r3, r2
 8000266:	d901      	bls.n	800026c <SE_CallGate+0x68>
 8000268:	f000 febe 	bl	8000fe8 <__NVIC_SystemReset>

  /* Double Check to avoid basic fault injection : Check the pointers allocation */
  if (SE_LL_Buffer_in_ram(peSE_Status, sizeof(*peSE_Status)) != SE_SUCCESS)
 800026c:	2104      	movs	r1, #4
 800026e:	6838      	ldr	r0, [r7, #0]
 8000270:	f000 fc9a 	bl	8000ba8 <SE_LL_Buffer_in_ram>
 8000274:	4603      	mov	r3, r0
 8000276:	4a13      	ldr	r2, [pc, #76]	; (80002c4 <SE_CallGate+0xc0>)
 8000278:	4293      	cmp	r3, r2
 800027a:	d001      	beq.n	8000280 <SE_CallGate+0x7c>
  {
    NVIC_SystemReset();
 800027c:	f000 feb4 	bl	8000fe8 <__NVIC_SystemReset>
  }
  if (SE_LL_Buffer_part_of_SE_ram(peSE_Status, sizeof(*peSE_Status)) == SE_SUCCESS)
 8000280:	2104      	movs	r1, #4
 8000282:	6838      	ldr	r0, [r7, #0]
 8000284:	f000 fcbe 	bl	8000c04 <SE_LL_Buffer_part_of_SE_ram>
 8000288:	4603      	mov	r3, r0
 800028a:	4a0e      	ldr	r2, [pc, #56]	; (80002c4 <SE_CallGate+0xc0>)
 800028c:	4293      	cmp	r3, r2
 800028e:	d101      	bne.n	8000294 <SE_CallGate+0x90>
  {
    NVIC_SystemReset();
 8000290:	f000 feaa 	bl	8000fe8 <__NVIC_SystemReset>
#if defined(CKS_ENABLED)
  PrevIpccC1RxIrqState = NVIC_GetEnableIRQ(IPCC_C1_RX_IRQn);
  PrevIpccC1TxIrqState = NVIC_GetEnableIRQ(IPCC_C1_TX_IRQn);
#endif /* CKS_ENABLED */

  *peSE_Status =  SE_OK;
 8000294:	683b      	ldr	r3, [r7, #0]
 8000296:	4a0c      	ldr	r2, [pc, #48]	; (80002c8 <SE_CallGate+0xc4>)
 8000298:	601a      	str	r2, [r3, #0]

  /* Initializing arguments to store all values after peSE_Status */
  va_start(arguments, PrimaskParam);
 800029a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800029e:	613b      	str	r3, [r7, #16]
#if defined(SFU_ISOLATE_SE_WITH_FIREWALL)
  /* Set SE specific stack before executing SE service */
  e_ret_status =  SE_SP_SMUGGLE(eID, peSE_Status, arguments);
#else
  /* No need to use a specific Stack */
  e_ret_status =  SE_CallGateService(eID, peSE_Status, arguments);
 80002a0:	693a      	ldr	r2, [r7, #16]
 80002a2:	6839      	ldr	r1, [r7, #0]
 80002a4:	6878      	ldr	r0, [r7, #4]
 80002a6:	f000 feb1 	bl	800100c <SE_CallGateService>
 80002aa:	6178      	str	r0, [r7, #20]
#endif /* SFU_ISOLATE_SE_WITH_FIREWALL */

  /* Exit the protected area */
  EXIT_PROTECTED_AREA();

  return e_ret_status;
 80002ac:	697b      	ldr	r3, [r7, #20]
}
 80002ae:	4618      	mov	r0, r3
 80002b0:	3718      	adds	r7, #24
 80002b2:	46bd      	mov	sp, r7
 80002b4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80002b8:	b002      	add	sp, #8
 80002ba:	4770      	bx	lr
 80002bc:	08005a00 	.word	0x08005a00
 80002c0:	080061ff 	.word	0x080061ff
 80002c4:	0012310f 	.word	0x0012310f
 80002c8:	0012e223 	.word	0x0012e223

Disassembly of section .SE_Startup_Code:

08000500 <SE_CORE_Startup>:
  */
#if defined(__ARMCC_VERSION)
__attribute__((section(".SE_Startup_Code")))
#endif /* __ARMCC_VERSION */
__root SE_ErrorStatus SE_CORE_Startup(void)
{
 8000500:	b508      	push	{r3, lr}
  /* Data initialization function*/
  __iar_data_init3();
#elif defined (__ARMCC_VERSION)
  __arm_data_init();
#elif defined(__GNUC__)
  __gcc_data_init();
 8000502:	f000 f8db 	bl	80006bc <__gcc_data_init>
#endif /* __ICCARM__ */

  /*NOTE : other initialization may be added here */
  return SE_SUCCESS;
}
 8000506:	4801      	ldr	r0, [pc, #4]	; (800050c <SE_CORE_Startup+0xc>)
 8000508:	bd08      	pop	{r3, pc}
 800050a:	bf00      	nop
 800050c:	0012310f 	.word	0x0012310f

Disassembly of section .text:

08000600 <__do_global_dtors_aux>:
 8000600:	b510      	push	{r4, lr}
 8000602:	4c05      	ldr	r4, [pc, #20]	; (8000618 <__do_global_dtors_aux+0x18>)
 8000604:	7823      	ldrb	r3, [r4, #0]
 8000606:	b933      	cbnz	r3, 8000616 <__do_global_dtors_aux+0x16>
 8000608:	4b04      	ldr	r3, [pc, #16]	; (800061c <__do_global_dtors_aux+0x1c>)
 800060a:	b113      	cbz	r3, 8000612 <__do_global_dtors_aux+0x12>
 800060c:	4804      	ldr	r0, [pc, #16]	; (8000620 <__do_global_dtors_aux+0x20>)
 800060e:	f3af 8000 	nop.w
 8000612:	2301      	movs	r3, #1
 8000614:	7023      	strb	r3, [r4, #0]
 8000616:	bd10      	pop	{r4, pc}
 8000618:	20000408 	.word	0x20000408
 800061c:	00000000 	.word	0x00000000
 8000620:	080043c4 	.word	0x080043c4

08000624 <frame_dummy>:
 8000624:	b508      	push	{r3, lr}
 8000626:	4b03      	ldr	r3, [pc, #12]	; (8000634 <frame_dummy+0x10>)
 8000628:	b11b      	cbz	r3, 8000632 <frame_dummy+0xe>
 800062a:	4903      	ldr	r1, [pc, #12]	; (8000638 <frame_dummy+0x14>)
 800062c:	4803      	ldr	r0, [pc, #12]	; (800063c <frame_dummy+0x18>)
 800062e:	f3af 8000 	nop.w
 8000632:	bd08      	pop	{r3, pc}
 8000634:	00000000 	.word	0x00000000
 8000638:	2000040c 	.word	0x2000040c
 800063c:	080043c4 	.word	0x080043c4

08000640 <LoopCopyDataInit>:
	extern uint8_t _edata asm("_edata");

	vu32* src = (vu32*) &_sidata;
	vu32* dst = (vu32*) &_sdata;

	vu32 len = (&_edata - &_sdata) / 4;
 8000640:	4b0d      	ldr	r3, [pc, #52]	; (8000678 <LoopCopyDataInit+0x38>)
 8000642:	4a0e      	ldr	r2, [pc, #56]	; (800067c <LoopCopyDataInit+0x3c>)

	for(vu32 i=0; i < len; i++)
		dst[i] = src[i];
 8000644:	480e      	ldr	r0, [pc, #56]	; (8000680 <LoopCopyDataInit+0x40>)
	vu32 len = (&_edata - &_sdata) / 4;
 8000646:	1a9b      	subs	r3, r3, r2
{
 8000648:	b082      	sub	sp, #8
	vu32 len = (&_edata - &_sdata) / 4;
 800064a:	bf48      	it	mi
 800064c:	3303      	addmi	r3, #3
 800064e:	109b      	asrs	r3, r3, #2
 8000650:	9300      	str	r3, [sp, #0]
	for(vu32 i=0; i < len; i++)
 8000652:	2300      	movs	r3, #0
 8000654:	9301      	str	r3, [sp, #4]
 8000656:	9901      	ldr	r1, [sp, #4]
 8000658:	9b00      	ldr	r3, [sp, #0]
 800065a:	4299      	cmp	r1, r3
 800065c:	d301      	bcc.n	8000662 <LoopCopyDataInit+0x22>
}
 800065e:	b002      	add	sp, #8
 8000660:	4770      	bx	lr
		dst[i] = src[i];
 8000662:	9901      	ldr	r1, [sp, #4]
 8000664:	9b01      	ldr	r3, [sp, #4]
 8000666:	f850 1021 	ldr.w	r1, [r0, r1, lsl #2]
 800066a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for(vu32 i=0; i < len; i++)
 800066e:	9b01      	ldr	r3, [sp, #4]
 8000670:	3301      	adds	r3, #1
 8000672:	9301      	str	r3, [sp, #4]
 8000674:	e7ef      	b.n	8000656 <LoopCopyDataInit+0x16>
 8000676:	bf00      	nop
 8000678:	20000408 	.word	0x20000408
 800067c:	20000400 	.word	0x20000400
 8000680:	08004ca8 	.word	0x08004ca8

08000684 <LoopFillZerobss>:
{
	extern uint8_t _sbss asm("_sbss");
	extern uint8_t _ebss asm("_ebss");

	vu32* dst = (vu32*) &_sbss;
	vu32 len = (&_ebss - &_sbss) / 4;
 8000684:	4b0b      	ldr	r3, [pc, #44]	; (80006b4 <LoopFillZerobss+0x30>)
 8000686:	4a0c      	ldr	r2, [pc, #48]	; (80006b8 <LoopFillZerobss+0x34>)
 8000688:	1a9b      	subs	r3, r3, r2
{
 800068a:	b082      	sub	sp, #8
	vu32 len = (&_ebss - &_sbss) / 4;
 800068c:	bf48      	it	mi
 800068e:	3303      	addmi	r3, #3
 8000690:	109b      	asrs	r3, r3, #2

	for(vu32 i=0; i < len; i++)
 8000692:	2100      	movs	r1, #0
	vu32 len = (&_ebss - &_sbss) / 4;
 8000694:	9300      	str	r3, [sp, #0]
	for(vu32 i=0; i < len; i++)
 8000696:	9101      	str	r1, [sp, #4]
 8000698:	9801      	ldr	r0, [sp, #4]
 800069a:	9b00      	ldr	r3, [sp, #0]
 800069c:	4298      	cmp	r0, r3
 800069e:	d301      	bcc.n	80006a4 <LoopFillZerobss+0x20>
		dst[i] = 0;
}
 80006a0:	b002      	add	sp, #8
 80006a2:	4770      	bx	lr
		dst[i] = 0;
 80006a4:	9b01      	ldr	r3, [sp, #4]
 80006a6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for(vu32 i=0; i < len; i++)
 80006aa:	9b01      	ldr	r3, [sp, #4]
 80006ac:	3301      	adds	r3, #1
 80006ae:	9301      	str	r3, [sp, #4]
 80006b0:	e7f2      	b.n	8000698 <LoopFillZerobss+0x14>
 80006b2:	bf00      	nop
 80006b4:	20000e38 	.word	0x20000e38
 80006b8:	20000408 	.word	0x20000408

080006bc <__gcc_data_init>:
/**
  * @brief  Data section initialization.
  * @param  None.
  * @retval None.
  */
void __gcc_data_init(void) {
 80006bc:	b508      	push	{r3, lr}
	LoopFillZerobss();
 80006be:	f7ff ffe1 	bl	8000684 <LoopFillZerobss>
	LoopCopyDataInit();
}
 80006c2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	LoopCopyDataInit();
 80006c6:	f7ff bfbb 	b.w	8000640 <LoopCopyDataInit>
	...

080006cc <SE_CRYPTO_Decrypt_Init>:
  * @param SE_FwType: Type of Fw Image.
  *        This parameter can be SE_FW_IMAGE_COMPLETE or SE_FW_IMAGE_PARTIAL.
  * @retval SE_ErrorStatus SE_SUCCESS if successful, SE_ERROR otherwise.
  */
SE_ErrorStatus SE_CRYPTO_Decrypt_Init(SE_FwRawHeaderTypeDef *pxSE_Metadata, uint32_t SE_FwType)
{
 80006cc:	b510      	push	{r4, lr}
#else
#error "The current example does not support the selected crypto scheme."
#endif /* SECBOOT_CRYPTO_SCHEME == SECBOOT_AES128_GCM_AES128_GCM_AES128_GCM */

  /* Check the pointers allocation */
  if (pxSE_Metadata == NULL)
 80006ce:	4604      	mov	r4, r0
 80006d0:	b198      	cbz	r0, 80006fa <SE_CRYPTO_Decrypt_Init+0x2e>
  if (memcmp(pxSE_Metadata->SFUMagic, SFUM_1, strlen(SFUM_1)) == 0)
 80006d2:	490c      	ldr	r1, [pc, #48]	; (8000704 <SE_CRYPTO_Decrypt_Init+0x38>)
 80006d4:	2204      	movs	r2, #4
 80006d6:	f003 fe4f 	bl	8004378 <memcmp>
 80006da:	b910      	cbnz	r0, 80006e2 <SE_CRYPTO_Decrypt_Init+0x16>
    SE_ReadKey_1(&(m_aSE_FirmwareKey[0]));
 80006dc:	480a      	ldr	r0, [pc, #40]	; (8000708 <SE_CRYPTO_Decrypt_Init+0x3c>)
 80006de:	f7ff fe8f 	bl	8000400 <SE_ReadKey_1>
  UNUSED(SE_FwType);
  /* Read the Symmetric Key */
  SE_CRYPTO_AES_ReadKey(pxSE_Metadata);

  /* Set flag field to default value */
  m_AESCBCctx.mFlags = E_SK_DEFAULT;
 80006e2:	4909      	ldr	r1, [pc, #36]	; (8000708 <SE_CRYPTO_Decrypt_Init+0x3c>)
 80006e4:	2300      	movs	r3, #0
 80006e6:	750b      	strb	r3, [r1, #20]

  /* Set key size to 16 (corresponding to AES-128) */
  m_AESCBCctx.mKeySize = (int32_t) SE_SYMKEY_LEN;
 80006e8:	2310      	movs	r3, #16

  /* Set iv size field to IvLength*/
  m_AESCBCctx.mIvSize = (int32_t) SE_IV_LEN;

  /* Initialize the operation, by passing the key and IV */
  cryptolib_status = AES_CBC_Decrypt_Init(&m_AESCBCctx, m_aSE_FirmwareKey, pxSE_Metadata->InitVector);
 80006ea:	f104 0254 	add.w	r2, r4, #84	; 0x54
 80006ee:	18c8      	adds	r0, r1, r3
  m_AESCBCctx.mKeySize = (int32_t) SE_SYMKEY_LEN;
 80006f0:	634b      	str	r3, [r1, #52]	; 0x34
  m_AESCBCctx.mIvSize = (int32_t) SE_IV_LEN;
 80006f2:	620b      	str	r3, [r1, #32]
  cryptolib_status = AES_CBC_Decrypt_Init(&m_AESCBCctx, m_aSE_FirmwareKey, pxSE_Metadata->InitVector);
 80006f4:	f001 fbc2 	bl	8001e7c <AES_CBC_Decrypt_Init>

  /* map the return code */
  if (AES_SUCCESS == cryptolib_status)
 80006f8:	b108      	cbz	r0, 80006fe <SE_CRYPTO_Decrypt_Init+0x32>
  {
    e_ret_status = SE_SUCCESS;
  }
  else
  {
    e_ret_status = SE_ERROR;
 80006fa:	4804      	ldr	r0, [pc, #16]	; (800070c <SE_CRYPTO_Decrypt_Init+0x40>)
#error "The current example does not support the selected crypto scheme."
#endif /* SECBOOT_CRYPTO_SCHEME */

  /* Return status*/
  return e_ret_status;
}
 80006fc:	bd10      	pop	{r4, pc}
    e_ret_status = SE_SUCCESS;
 80006fe:	4804      	ldr	r0, [pc, #16]	; (8000710 <SE_CRYPTO_Decrypt_Init+0x44>)
 8000700:	e7fc      	b.n	80006fc <SE_CRYPTO_Decrypt_Init+0x30>
 8000702:	bf00      	nop
 8000704:	08004564 	.word	0x08004564
 8000708:	20000424 	.word	0x20000424
 800070c:	00018799 	.word	0x00018799
 8000710:	0012310f 	.word	0x0012310f

08000714 <SE_CRYPTO_Decrypt_Append>:
  * @param pOutputSize: pointer to Output Size (bytes).
  * @retval SE_ErrorStatus SE_SUCCESS if successful, SE_ERROR otherwise.
  */
SE_ErrorStatus SE_CRYPTO_Decrypt_Append(const uint8_t *pInputBuffer, int32_t InputSize, uint8_t *pOutputBuffer,
                                        int32_t *pOutputSize)
{
 8000714:	b507      	push	{r0, r1, r2, lr}
#if (SECBOOT_CRYPTO_SCHEME == SECBOOT_ECCDSA_WITH_AES128_CBC_SHA256)
  int32_t cryptolib_status;
#endif /* SECBOOT_ECCDSA_WITH_AES128_CBC_SHA256 */

  /* DecryptImageInDwlSlot() always starts by calling the Decrypt service with a 0 byte buffer */
  if (0 == InputSize)
 8000716:	b919      	cbnz	r1, 8000720 <SE_CRYPTO_Decrypt_Append+0xc>
  {
    /* Nothing to do but we must return a success for the decrypt operation to continue */
    return (SE_SUCCESS);
 8000718:	4808      	ldr	r0, [pc, #32]	; (800073c <SE_CRYPTO_Decrypt_Append+0x28>)
#error "The current example does not support the selected crypto scheme."
#endif /* SECBOOT_CRYPTO_SCHEME */

  /* Return status*/
  return e_ret_status;
}
 800071a:	b003      	add	sp, #12
 800071c:	f85d fb04 	ldr.w	pc, [sp], #4
  if ((pInputBuffer == NULL) || (pOutputBuffer == NULL) || (pOutputSize == NULL))
 8000720:	b150      	cbz	r0, 8000738 <SE_CRYPTO_Decrypt_Append+0x24>
 8000722:	b14a      	cbz	r2, 8000738 <SE_CRYPTO_Decrypt_Append+0x24>
 8000724:	b143      	cbz	r3, 8000738 <SE_CRYPTO_Decrypt_Append+0x24>
  cryptolib_status = AES_CBC_Decrypt_Append(&m_AESCBCctx, pInputBuffer, InputSize, pOutputBuffer, pOutputSize);
 8000726:	9300      	str	r3, [sp, #0]
 8000728:	4613      	mov	r3, r2
 800072a:	460a      	mov	r2, r1
 800072c:	4601      	mov	r1, r0
 800072e:	4804      	ldr	r0, [pc, #16]	; (8000740 <SE_CRYPTO_Decrypt_Append+0x2c>)
 8000730:	f001 fba7 	bl	8001e82 <AES_CBC_Decrypt_Append>
  if (AES_SUCCESS == cryptolib_status)
 8000734:	2800      	cmp	r0, #0
 8000736:	d0ef      	beq.n	8000718 <SE_CRYPTO_Decrypt_Append+0x4>
    e_ret_status = SE_ERROR;
 8000738:	4802      	ldr	r0, [pc, #8]	; (8000744 <SE_CRYPTO_Decrypt_Append+0x30>)
 800073a:	e7ee      	b.n	800071a <SE_CRYPTO_Decrypt_Append+0x6>
 800073c:	0012310f 	.word	0x0012310f
 8000740:	20000434 	.word	0x20000434
 8000744:	00018799 	.word	0x00018799

08000748 <SE_CRYPTO_Decrypt_Finish>:
  * @param pOutputBuffer: pointer to Output Buffer.
  * @param pOutputSize: pointer to Output Size (bytes).
  * @retval SE_ErrorStatus SE_SUCCESS if successful, SE_ERROR otherwise.
  */
SE_ErrorStatus SE_CRYPTO_Decrypt_Finish(uint8_t *pOutputBuffer, int32_t *pOutputSize)
{
 8000748:	b538      	push	{r3, r4, r5, lr}
 800074a:	460a      	mov	r2, r1
 800074c:	4c2b      	ldr	r4, [pc, #172]	; (80007fc <SE_CRYPTO_Decrypt_Finish+0xb4>)
  int32_t cryptolib_status;
#elif (SECBOOT_CRYPTO_SCHEME == SECBOOT_AES128_GCM_AES128_GCM_AES128_GCM)
#endif /* SECBOOT_ECCDSA_WITH_AES128_CBC_SHA256 */

  /* Check the pointers allocation */
  if ((pOutputBuffer == NULL) || (pOutputSize == NULL))
 800074e:	b100      	cbz	r0, 8000752 <SE_CRYPTO_Decrypt_Finish+0xa>
 8000750:	bb31      	cbnz	r1, 80007a0 <SE_CRYPTO_Decrypt_Finish+0x58>
  {
    /* Clean-up the key in RAM */
    SE_CLEAN_UP_FW_KEY();
 8000752:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8000756:	f640 72ff 	movw	r2, #4095	; 0xfff
 800075a:	699b      	ldr	r3, [r3, #24]
 800075c:	fbb3 f2f2 	udiv	r2, r3, r2
 8000760:	ebc2 3202 	rsb	r2, r2, r2, lsl #12
 8000764:	1a9b      	subs	r3, r3, r2
 8000766:	4423      	add	r3, r4
 8000768:	4a25      	ldr	r2, [pc, #148]	; (8000800 <SE_CRYPTO_Decrypt_Finish+0xb8>)
 800076a:	f103 0110 	add.w	r1, r3, #16
 800076e:	f853 0b04 	ldr.w	r0, [r3], #4
 8000772:	f842 0b04 	str.w	r0, [r2], #4
 8000776:	428b      	cmp	r3, r1
 8000778:	d1f9      	bne.n	800076e <SE_CRYPTO_Decrypt_Finish+0x26>
 800077a:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800077e:	f640 71ff 	movw	r1, #4095	; 0xfff
 8000782:	699b      	ldr	r3, [r3, #24]
 8000784:	fbb3 f1f1 	udiv	r1, r3, r1
 8000788:	ebc1 3101 	rsb	r1, r1, r1, lsl #12
 800078c:	1a59      	subs	r1, r3, r1
 800078e:	481d      	ldr	r0, [pc, #116]	; (8000804 <SE_CRYPTO_Decrypt_Finish+0xbc>)

    return e_ret_status;
 8000790:	4d1d      	ldr	r5, [pc, #116]	; (8000808 <SE_CRYPTO_Decrypt_Finish+0xc0>)
    SE_CLEAN_UP_FW_KEY();
 8000792:	f44f 728c 	mov.w	r2, #280	; 0x118
 8000796:	4421      	add	r1, r4
 8000798:	f003 fdfe 	bl	8004398 <memcpy>
  /* Clean-up the key in RAM */
  SE_CLEAN_UP_FW_KEY();

  /* Return status*/
  return e_ret_status;
}
 800079c:	4628      	mov	r0, r5
 800079e:	bd38      	pop	{r3, r4, r5, pc}
  cryptolib_status = AES_CBC_Decrypt_Finish(&m_AESCBCctx, pOutputBuffer, pOutputSize);
 80007a0:	4601      	mov	r1, r0
 80007a2:	4818      	ldr	r0, [pc, #96]	; (8000804 <SE_CRYPTO_Decrypt_Finish+0xbc>)
    e_ret_status = SE_ERROR;
 80007a4:	4d19      	ldr	r5, [pc, #100]	; (800080c <SE_CRYPTO_Decrypt_Finish+0xc4>)
  cryptolib_status = AES_CBC_Decrypt_Finish(&m_AESCBCctx, pOutputBuffer, pOutputSize);
 80007a6:	f001 fc7e 	bl	80020a6 <AES_CBC_Decrypt_Finish>
    e_ret_status = SE_ERROR;
 80007aa:	4b17      	ldr	r3, [pc, #92]	; (8000808 <SE_CRYPTO_Decrypt_Finish+0xc0>)
 80007ac:	2800      	cmp	r0, #0
 80007ae:	bf18      	it	ne
 80007b0:	461d      	movne	r5, r3
  SE_CLEAN_UP_FW_KEY();
 80007b2:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 80007b6:	f640 72ff 	movw	r2, #4095	; 0xfff
 80007ba:	699b      	ldr	r3, [r3, #24]
 80007bc:	fbb3 f2f2 	udiv	r2, r3, r2
 80007c0:	ebc2 3202 	rsb	r2, r2, r2, lsl #12
 80007c4:	1a9b      	subs	r3, r3, r2
 80007c6:	4423      	add	r3, r4
 80007c8:	4a0d      	ldr	r2, [pc, #52]	; (8000800 <SE_CRYPTO_Decrypt_Finish+0xb8>)
 80007ca:	f103 0110 	add.w	r1, r3, #16
 80007ce:	f853 0b04 	ldr.w	r0, [r3], #4
 80007d2:	f842 0b04 	str.w	r0, [r2], #4
 80007d6:	428b      	cmp	r3, r1
 80007d8:	d1f9      	bne.n	80007ce <SE_CRYPTO_Decrypt_Finish+0x86>
 80007da:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 80007de:	f640 71ff 	movw	r1, #4095	; 0xfff
 80007e2:	699b      	ldr	r3, [r3, #24]
 80007e4:	fbb3 f1f1 	udiv	r1, r3, r1
 80007e8:	ebc1 3101 	rsb	r1, r1, r1, lsl #12
 80007ec:	1a59      	subs	r1, r3, r1
 80007ee:	f44f 728c 	mov.w	r2, #280	; 0x118
 80007f2:	4421      	add	r1, r4
 80007f4:	4803      	ldr	r0, [pc, #12]	; (8000804 <SE_CRYPTO_Decrypt_Finish+0xbc>)
 80007f6:	f003 fdcf 	bl	8004398 <memcpy>
  return e_ret_status;
 80007fa:	e7cf      	b.n	800079c <SE_CRYPTO_Decrypt_Finish+0x54>
 80007fc:	08000500 	.word	0x08000500
 8000800:	20000424 	.word	0x20000424
 8000804:	20000434 	.word	0x20000434
 8000808:	00018799 	.word	0x00018799
 800080c:	0012310f 	.word	0x0012310f

08000810 <SE_CRYPTO_AuthenticateFW_Init>:
  /* Prevent unused argument(s) compilation warning */
  UNUSED(pxSE_Metadata);
  UNUSED(SE_FwType);

  /* Set the size of the desired hash digest: SHA-256 */
  m_SHA256ctx.mTagSize = CRL_SHA256_SIZE;
 8000810:	4809      	ldr	r0, [pc, #36]	; (8000838 <SE_CRYPTO_AuthenticateFW_Init+0x28>)
{
 8000812:	b508      	push	{r3, lr}
  m_SHA256ctx.mTagSize = CRL_SHA256_SIZE;
 8000814:	2320      	movs	r3, #32
 8000816:	f8c0 3130 	str.w	r3, [r0, #304]	; 0x130

  /* Set flag field to default value */
  m_SHA256ctx.mFlags = E_HASH_DEFAULT;
 800081a:	2300      	movs	r3, #0
 800081c:	f880 312c 	strb.w	r3, [r0, #300]	; 0x12c

  /* Initialize the HASH context */
  error_status = SHA256_Init(&m_SHA256ctx);
 8000820:	f500 7094 	add.w	r0, r0, #296	; 0x128
 8000824:	f001 fcd2 	bl	80021cc <SHA256_Init>
#error "The current example does not support the selected crypto scheme."
#endif /* SECBOOT_CRYPTO_SCHEME */

  /* Return status*/
  return e_ret_status;
}
 8000828:	4a04      	ldr	r2, [pc, #16]	; (800083c <SE_CRYPTO_AuthenticateFW_Init+0x2c>)
 800082a:	4b05      	ldr	r3, [pc, #20]	; (8000840 <SE_CRYPTO_AuthenticateFW_Init+0x30>)
 800082c:	2800      	cmp	r0, #0
 800082e:	bf0c      	ite	eq
 8000830:	4610      	moveq	r0, r2
 8000832:	4618      	movne	r0, r3
 8000834:	bd08      	pop	{r3, pc}
 8000836:	bf00      	nop
 8000838:	20000424 	.word	0x20000424
 800083c:	0012310f 	.word	0x0012310f
 8000840:	00018799 	.word	0x00018799

08000844 <SE_CRYPTO_AuthenticateFW_Append>:
  * @param pOutputSize: pointer to Output Size (bytes).
  * @retval SE_ErrorStatus SE_SUCCESS if successful, SE_ERROR otherwise.
  */
SE_ErrorStatus SE_CRYPTO_AuthenticateFW_Append(const uint8_t *pInputBuffer, int32_t InputSize, uint8_t *pOutputBuffer,
                                               int32_t *pOutputSize)
{
 8000844:	b508      	push	{r3, lr}
 8000846:	460a      	mov	r2, r1
  /* The parameters below are useless for the HASH but are needed for API compatibility with other procedures */
  (void)pOutputBuffer;
  (void)pOutputSize;

  /* Add data to be hashed */
  error_status = SHA256_Append(&m_SHA256ctx, pInputBuffer, InputSize);
 8000848:	4601      	mov	r1, r0
 800084a:	4805      	ldr	r0, [pc, #20]	; (8000860 <SE_CRYPTO_AuthenticateFW_Append+0x1c>)
 800084c:	f001 fc81 	bl	8002152 <SHA256_Append>
#error "The current example does not support the selected crypto scheme."
#endif /* SECBOOT_CRYPTO_SCHEME */

  /* Return status*/
  return e_ret_status;
}
 8000850:	4a04      	ldr	r2, [pc, #16]	; (8000864 <SE_CRYPTO_AuthenticateFW_Append+0x20>)
 8000852:	4b05      	ldr	r3, [pc, #20]	; (8000868 <SE_CRYPTO_AuthenticateFW_Append+0x24>)
 8000854:	2800      	cmp	r0, #0
 8000856:	bf0c      	ite	eq
 8000858:	4610      	moveq	r0, r2
 800085a:	4618      	movne	r0, r3
 800085c:	bd08      	pop	{r3, pc}
 800085e:	bf00      	nop
 8000860:	2000054c 	.word	0x2000054c
 8000864:	0012310f 	.word	0x0012310f
 8000868:	00018799 	.word	0x00018799

0800086c <SE_CRYPTO_AuthenticateFW_Finish>:
  * @param pOutputBuffer: pointer to Output Buffer.
  * @param pOutputSize: pointer to Output Size (bytes).
  * @retval SE_ErrorStatus SE_SUCCESS if successful, SE_ERROR otherwise.
  */
SE_ErrorStatus SE_CRYPTO_AuthenticateFW_Finish(uint8_t *pOutputBuffer, int32_t *pOutputSize)
{
 800086c:	b508      	push	{r3, lr}
 800086e:	460a      	mov	r2, r1
  e_ret_status = SE_CRYPTO_Encrypt_Finish(pOutputBuffer, pOutputSize);
#elif ( (SECBOOT_CRYPTO_SCHEME == SECBOOT_ECCDSA_WITH_AES128_CBC_SHA256) || (SECBOOT_CRYPTO_SCHEME == SECBOOT_ECCDSA_WITHOUT_ENCRYPT_SHA256) )
  int32_t error_status;

  /* Add data to be hashed */
  error_status = SHA256_Finish(&m_SHA256ctx, pOutputBuffer, pOutputSize);
 8000870:	4601      	mov	r1, r0
 8000872:	4805      	ldr	r0, [pc, #20]	; (8000888 <SE_CRYPTO_AuthenticateFW_Finish+0x1c>)
 8000874:	f001 fd37 	bl	80022e6 <SHA256_Finish>
#error "The current example does not support the selected crypto scheme."
#endif /* SECBOOT_CRYPTO_SCHEME */

  /* Return status*/
  return e_ret_status;
}
 8000878:	4a04      	ldr	r2, [pc, #16]	; (800088c <SE_CRYPTO_AuthenticateFW_Finish+0x20>)
 800087a:	4b05      	ldr	r3, [pc, #20]	; (8000890 <SE_CRYPTO_AuthenticateFW_Finish+0x24>)
 800087c:	2800      	cmp	r0, #0
 800087e:	bf0c      	ite	eq
 8000880:	4610      	moveq	r0, r2
 8000882:	4618      	movne	r0, r3
 8000884:	bd08      	pop	{r3, pc}
 8000886:	bf00      	nop
 8000888:	2000054c 	.word	0x2000054c
 800088c:	0012310f 	.word	0x0012310f
 8000890:	00018799 	.word	0x00018799

08000894 <SE_CRYPTO_Authenticate_Metadata>:
  *        Authenticates the header containing the Firmware metadata.
  * @param pxSE_Metadata: Firmware metadata.
  * @retval SE_ErrorStatus SE_SUCCESS if successful, SE_ERROR otherwise.
  */
SE_ErrorStatus SE_CRYPTO_Authenticate_Metadata(SE_FwRawHeaderTypeDef *pxSE_Metadata)
{
 8000894:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000898:	b0ae      	sub	sp, #184	; 0xb8
  /* the key to be used for crypto operations (as this is a pointer to m_aSE_FirmwareKey or m_aSE_PubKey it can be a
     local variable, the pointed data is protected) */
  uint8_t *pKey;
#elif ( (SECBOOT_CRYPTO_SCHEME == SECBOOT_ECCDSA_WITH_AES128_CBC_SHA256) || (SECBOOT_CRYPTO_SCHEME == SECBOOT_ECCDSA_WITHOUT_ENCRYPT_SHA256) )
  int32_t status;
  ECDSAsignature_stt *sign = NULL;
 800089a:	2300      	movs	r3, #0
  /* Proceed with ECC signature generation */
  EC_stt EC_st;
  /* Structure that will contain the public key, please note that the public key
    * is just a point on the curve, hence the name ECpoint_stt
    */
  ECpoint_stt *PubKey = NULL;
 800089c:	e9cd 3302 	strd	r3, r3, [sp, #8]
  uint8_t *pSign;             /* Reference MAC (ECCDSA signed SHA256 of the FW metadata) */
  const uint8_t *pPub_x;
  const uint8_t *pPub_y;
  /* buffer for sha256 computing */
  uint8_t MessageDigest[CRL_SHA256_SIZE];
  int32_t MessageDigestLength = 0;
 80008a0:	9304      	str	r3, [sp, #16]
  /* the key to be used for crypto operations (as this is a pointer to m_aSE_FirmwareKey or m_aSE_PubKey it can be a
     local variable, the pointed data is protected) */
  uint8_t *pKey;
#endif /* SECBOOT_CRYPTO_SCHEME */

  if (NULL == pxSE_Metadata)
 80008a2:	4607      	mov	r7, r0
 80008a4:	2800      	cmp	r0, #0
 80008a6:	f000 80ba 	beq.w	8000a1e <SE_CRYPTO_Authenticate_Metadata+0x18a>
  if (memcmp(pxSE_Metadata->SFUMagic, SFUM_1, strlen(SFUM_1)) == 0)
 80008aa:	495e      	ldr	r1, [pc, #376]	; (8000a24 <SE_CRYPTO_Authenticate_Metadata+0x190>)
 80008ac:	2204      	movs	r2, #4
 80008ae:	f003 fd63 	bl	8004378 <memcmp>
 80008b2:	b910      	cbnz	r0, 80008ba <SE_CRYPTO_Authenticate_Metadata+0x26>
    SE_ReadKey_1_Pub(paSE_PubKey);
 80008b4:	485c      	ldr	r0, [pc, #368]	; (8000a28 <SE_CRYPTO_Authenticate_Metadata+0x194>)
 80008b6:	f7ff fdb8 	bl	800042a <SE_ReadKey_1_Pub>
  error_status = SHA256_Init(&P_pSHA256ctx);
 80008ba:	ad11      	add	r5, sp, #68	; 0x44
  P_pSHA256ctx.mTagSize = CRL_SHA256_SIZE;
 80008bc:	2420      	movs	r4, #32
  P_pSHA256ctx.mFlags = E_HASH_DEFAULT;
 80008be:	2300      	movs	r3, #0
  error_status = SHA256_Init(&P_pSHA256ctx);
 80008c0:	4628      	mov	r0, r5
  P_pSHA256ctx.mTagSize = CRL_SHA256_SIZE;
 80008c2:	9413      	str	r4, [sp, #76]	; 0x4c
  P_pSHA256ctx.mFlags = E_HASH_DEFAULT;
 80008c4:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
  error_status = SHA256_Init(&P_pSHA256ctx);
 80008c8:	f001 fc80 	bl	80021cc <SHA256_Init>
  if (error_status == HASH_SUCCESS)
 80008cc:	b958      	cbnz	r0, 80008e6 <SE_CRYPTO_Authenticate_Metadata+0x52>
    error_status = SHA256_Append(&P_pSHA256ctx,
 80008ce:	2280      	movs	r2, #128	; 0x80
 80008d0:	4639      	mov	r1, r7
 80008d2:	4628      	mov	r0, r5
 80008d4:	f001 fc3d 	bl	8002152 <SHA256_Append>
    if (error_status == HASH_SUCCESS)
 80008d8:	b928      	cbnz	r0, 80008e6 <SE_CRYPTO_Authenticate_Metadata+0x52>
      error_status = SHA256_Finish(&P_pSHA256ctx, MessageDigest, MessageDigestLength);
 80008da:	aa04      	add	r2, sp, #16
 80008dc:	a909      	add	r1, sp, #36	; 0x24
 80008de:	4628      	mov	r0, r5
 80008e0:	f001 fd01 	bl	80022e6 <SHA256_Finish>
  status = SE_CRYPTO_SHA256_HASH_DigestCompute(pPayload,
                                               payloadSize,
                                               (uint8_t *)MessageDigest,
                                               &MessageDigestLength);

  if (status == HASH_SUCCESS)
 80008e4:	b108      	cbz	r0, 80008ea <SE_CRYPTO_Authenticate_Metadata+0x56>
  e_ret_status = SE_ERROR;
 80008e6:	4c51      	ldr	r4, [pc, #324]	; (8000a2c <SE_CRYPTO_Authenticate_Metadata+0x198>)
 80008e8:	e071      	b.n	80009ce <SE_CRYPTO_Authenticate_Metadata+0x13a>
  {
    /* We prepare the memory buffer structure */
    Crypto_Buffer.pmBuf =  preallocated_buffer;
    Crypto_Buffer.mUsed = 0;
    Crypto_Buffer.mSize = (int16_t) sizeof(preallocated_buffer);
 80008ea:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80008ee:	9306      	str	r3, [sp, #24]
    EC_st.pmA = P_256_a;
 80008f0:	4b4f      	ldr	r3, [pc, #316]	; (8000a30 <SE_CRYPTO_Authenticate_Metadata+0x19c>)
    Crypto_Buffer.pmBuf =  preallocated_buffer;
 80008f2:	f8df 814c 	ldr.w	r8, [pc, #332]	; 8000a40 <SE_CRYPTO_Authenticate_Metadata+0x1ac>
    EC_st.pmA = P_256_a;
 80008f6:	9311      	str	r3, [sp, #68]	; 0x44
    EC_st.pmB = P_256_b;
 80008f8:	f103 0220 	add.w	r2, r3, #32
 80008fc:	9213      	str	r2, [sp, #76]	; 0x4c
    EC_st.pmP = P_256_p;
 80008fe:	f103 0240 	add.w	r2, r3, #64	; 0x40
 8000902:	9215      	str	r2, [sp, #84]	; 0x54
    EC_st.mNsize = (int32_t)sizeof(P_256_n);
    EC_st.mPsize = (int32_t)sizeof(P_256_p);
    EC_st.mGxsize = (int32_t)sizeof(P_256_Gx);
    EC_st.mGysize = (int32_t)sizeof(P_256_Gy);

    status = ECCinitEC(&EC_st, &Crypto_Buffer);
 8000904:	ae05      	add	r6, sp, #20
    EC_st.pmN = P_256_n;
 8000906:	f103 0260 	add.w	r2, r3, #96	; 0x60
 800090a:	9217      	str	r2, [sp, #92]	; 0x5c
    status = ECCinitEC(&EC_st, &Crypto_Buffer);
 800090c:	4631      	mov	r1, r6
    EC_st.pmGx = P_256_Gx;
 800090e:	f103 0280 	add.w	r2, r3, #128	; 0x80
    status = ECCinitEC(&EC_st, &Crypto_Buffer);
 8000912:	4628      	mov	r0, r5
    EC_st.pmGy = P_256_Gy;
 8000914:	33a0      	adds	r3, #160	; 0xa0
    Crypto_Buffer.pmBuf =  preallocated_buffer;
 8000916:	f8cd 8014 	str.w	r8, [sp, #20]
    EC_st.pmGx = P_256_Gx;
 800091a:	9219      	str	r2, [sp, #100]	; 0x64
    EC_st.pmGy = P_256_Gy;
 800091c:	931b      	str	r3, [sp, #108]	; 0x6c
    EC_st.mAsize = (int32_t)sizeof(P_256_a);
 800091e:	9412      	str	r4, [sp, #72]	; 0x48
    EC_st.mBsize = (int32_t)sizeof(P_256_b);
 8000920:	9414      	str	r4, [sp, #80]	; 0x50
    EC_st.mNsize = (int32_t)sizeof(P_256_n);
 8000922:	9418      	str	r4, [sp, #96]	; 0x60
    EC_st.mPsize = (int32_t)sizeof(P_256_p);
 8000924:	9416      	str	r4, [sp, #88]	; 0x58
    EC_st.mGxsize = (int32_t)sizeof(P_256_Gx);
 8000926:	941a      	str	r4, [sp, #104]	; 0x68
    EC_st.mGysize = (int32_t)sizeof(P_256_Gy);
 8000928:	941c      	str	r4, [sp, #112]	; 0x70
    status = ECCinitEC(&EC_st, &Crypto_Buffer);
 800092a:	f002 fd7c 	bl	8003426 <ECCinitEC>

    if (status == ECC_SUCCESS)
 800092e:	2800      	cmp	r0, #0
 8000930:	d1d9      	bne.n	80008e6 <SE_CRYPTO_Authenticate_Metadata+0x52>
    {
      status = ECCinitPoint(&PubKey, &EC_st, &Crypto_Buffer);
 8000932:	4629      	mov	r1, r5
 8000934:	4632      	mov	r2, r6
 8000936:	a803      	add	r0, sp, #12
 8000938:	f002 fe98 	bl	800366c <ECCinitPoint>
    }

    if (status == ECC_SUCCESS)
 800093c:	4601      	mov	r1, r0
 800093e:	2800      	cmp	r0, #0
 8000940:	d1d1      	bne.n	80008e6 <SE_CRYPTO_Authenticate_Metadata+0x52>
    {
      /* Point is initialized, now import the public key */
      (void)ECCsetPointCoordinate(PubKey, E_ECC_POINT_COORDINATE_X, pPub_x, 32);
 8000942:	4623      	mov	r3, r4
 8000944:	f1a8 0240 	sub.w	r2, r8, #64	; 0x40
 8000948:	9803      	ldr	r0, [sp, #12]
 800094a:	f002 ff17 	bl	800377c <ECCsetPointCoordinate>
      (void)ECCsetPointCoordinate(PubKey, E_ECC_POINT_COORDINATE_Y, pPub_y, 32);
 800094e:	f1a8 0220 	sub.w	r2, r8, #32
 8000952:	2101      	movs	r1, #1
 8000954:	9803      	ldr	r0, [sp, #12]
 8000956:	4623      	mov	r3, r4
 8000958:	f002 ff10 	bl	800377c <ECCsetPointCoordinate>
      /* Try to validate the Public Key. */
      status = ECCvalidatePubKey(PubKey, &EC_st, &Crypto_Buffer);
 800095c:	9803      	ldr	r0, [sp, #12]
 800095e:	4632      	mov	r2, r6
 8000960:	4629      	mov	r1, r5
 8000962:	f003 fbe1 	bl	8004128 <ECCvalidatePubKey>
    }

    if (status == ECC_SUCCESS)
 8000966:	2800      	cmp	r0, #0
 8000968:	d1bd      	bne.n	80008e6 <SE_CRYPTO_Authenticate_Metadata+0x52>
    {
      /* Public Key is validated, Initialize the signature object */
      status = ECDSAinitSign(&sign, &EC_st, &Crypto_Buffer);
 800096a:	4629      	mov	r1, r5
 800096c:	4632      	mov	r2, r6
 800096e:	a802      	add	r0, sp, #8
 8000970:	f003 f9f6 	bl	8003d60 <ECDSAinitSign>
    }

    if (status == ECC_SUCCESS)
 8000974:	4601      	mov	r1, r0
 8000976:	2800      	cmp	r0, #0
 8000978:	d1b5      	bne.n	80008e6 <SE_CRYPTO_Authenticate_Metadata+0x52>
    {
      /* Import the signature values */
      (void)ECDSAsetSignature(sign, E_ECDSA_SIGNATURE_R_VALUE, pSign_r, 32);
 800097a:	4623      	mov	r3, r4
 800097c:	f107 0280 	add.w	r2, r7, #128	; 0x80
 8000980:	9802      	ldr	r0, [sp, #8]
 8000982:	f003 fa3b 	bl	8003dfc <ECDSAsetSignature>
      (void)ECDSAsetSignature(sign, E_ECDSA_SIGNATURE_S_VALUE, pSign_s, 32);
 8000986:	4623      	mov	r3, r4
 8000988:	f107 02a0 	add.w	r2, r7, #160	; 0xa0
 800098c:	2101      	movs	r1, #1
 800098e:	9802      	ldr	r0, [sp, #8]

      /* Verify it */
      status = ECDSAverify(MessageDigest, MessageDigestLength, sign, &verctx, &Crypto_Buffer);
      if (status == SIGNATURE_VALID)
      {
        e_ret_status = SE_SUCCESS;
 8000990:	4c26      	ldr	r4, [pc, #152]	; (8000a2c <SE_CRYPTO_Authenticate_Metadata+0x198>)
      (void)ECDSAsetSignature(sign, E_ECDSA_SIGNATURE_S_VALUE, pSign_s, 32);
 8000992:	f003 fa33 	bl	8003dfc <ECDSAsetSignature>
      verctx.pmPubKey = PubKey;
 8000996:	9b03      	ldr	r3, [sp, #12]
      status = ECDSAverify(MessageDigest, MessageDigestLength, sign, &verctx, &Crypto_Buffer);
 8000998:	9a02      	ldr	r2, [sp, #8]
 800099a:	9904      	ldr	r1, [sp, #16]
      verctx.pmPubKey = PubKey;
 800099c:	9307      	str	r3, [sp, #28]
      status = ECDSAverify(MessageDigest, MessageDigestLength, sign, &verctx, &Crypto_Buffer);
 800099e:	9600      	str	r6, [sp, #0]
 80009a0:	ab07      	add	r3, sp, #28
 80009a2:	a809      	add	r0, sp, #36	; 0x24
      verctx.pmEC = &EC_st;
 80009a4:	9508      	str	r5, [sp, #32]
      status = ECDSAverify(MessageDigest, MessageDigestLength, sign, &verctx, &Crypto_Buffer);
 80009a6:	f003 fa40 	bl	8003e2a <ECDSAverify>
        e_ret_status = SE_SUCCESS;
 80009aa:	4b22      	ldr	r3, [pc, #136]	; (8000a34 <SE_CRYPTO_Authenticate_Metadata+0x1a0>)
 80009ac:	f240 32eb 	movw	r2, #1003	; 0x3eb
 80009b0:	4290      	cmp	r0, r2
 80009b2:	bf08      	it	eq
 80009b4:	461c      	moveq	r4, r3
      }
      /* release resource ...*/
      (void)ECDSAfreeSign(&sign, &Crypto_Buffer);
 80009b6:	4631      	mov	r1, r6
 80009b8:	a802      	add	r0, sp, #8
 80009ba:	f003 fa08 	bl	8003dce <ECDSAfreeSign>
      (void)ECCfreePoint(&PubKey, &Crypto_Buffer);
 80009be:	4631      	mov	r1, r6
 80009c0:	a803      	add	r0, sp, #12
 80009c2:	f002 febc 	bl	800373e <ECCfreePoint>
      (void)ECCfreeEC(&EC_st, &Crypto_Buffer);
 80009c6:	4631      	mov	r1, r6
 80009c8:	4628      	mov	r0, r5
 80009ca:	f002 fe11 	bl	80035f0 <ECCfreeEC>
#if (SECBOOT_CRYPTO_SCHEME == SECBOOT_AES128_GCM_AES128_GCM_AES128_GCM)
  /* Symmetric key */
  SE_CLEAN_UP_FW_KEY();
#else
  /* ECC public key */
  SE_CLEAN_UP_PUB_KEY();
 80009ce:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 80009d2:	4919      	ldr	r1, [pc, #100]	; (8000a38 <SE_CRYPTO_Authenticate_Metadata+0x1a4>)
 80009d4:	699b      	ldr	r3, [r3, #24]
 80009d6:	f640 72ff 	movw	r2, #4095	; 0xfff
 80009da:	fbb3 f2f2 	udiv	r2, r3, r2
 80009de:	ebc2 3202 	rsb	r2, r2, r2, lsl #12
 80009e2:	1a9b      	subs	r3, r3, r2
 80009e4:	440b      	add	r3, r1
 80009e6:	4a10      	ldr	r2, [pc, #64]	; (8000a28 <SE_CRYPTO_Authenticate_Metadata+0x194>)
 80009e8:	f103 0040 	add.w	r0, r3, #64	; 0x40
 80009ec:	f853 5b04 	ldr.w	r5, [r3], #4
 80009f0:	f842 5b04 	str.w	r5, [r2], #4
 80009f4:	4283      	cmp	r3, r0
 80009f6:	d1f9      	bne.n	80009ec <SE_CRYPTO_Authenticate_Metadata+0x158>
 80009f8:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 80009fc:	480f      	ldr	r0, [pc, #60]	; (8000a3c <SE_CRYPTO_Authenticate_Metadata+0x1a8>)
 80009fe:	699a      	ldr	r2, [r3, #24]
 8000a00:	f640 73ff 	movw	r3, #4095	; 0xfff
 8000a04:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a08:	ebc3 3303 	rsb	r3, r3, r3, lsl #12
 8000a0c:	1ad3      	subs	r3, r2, r3
 8000a0e:	4419      	add	r1, r3
 8000a10:	2274      	movs	r2, #116	; 0x74
 8000a12:	f003 fcc1 	bl	8004398 <memcpy>
#endif /* SECBOOT_CRYPTO_SCHEME */

  /* Return status*/
  return e_ret_status;
}
 8000a16:	4620      	mov	r0, r4
 8000a18:	b02e      	add	sp, #184	; 0xb8
 8000a1a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return e_ret_status;
 8000a1e:	4c03      	ldr	r4, [pc, #12]	; (8000a2c <SE_CRYPTO_Authenticate_Metadata+0x198>)
 8000a20:	e7f9      	b.n	8000a16 <SE_CRYPTO_Authenticate_Metadata+0x182>
 8000a22:	bf00      	nop
 8000a24:	08004564 	.word	0x08004564
 8000a28:	200005c0 	.word	0x200005c0
 8000a2c:	00018799 	.word	0x00018799
 8000a30:	08004400 	.word	0x08004400
 8000a34:	0012310f 	.word	0x0012310f
 8000a38:	08000500 	.word	0x08000500
 8000a3c:	2000054c 	.word	0x2000054c
 8000a40:	20000600 	.word	0x20000600

08000a44 <__NVIC_SystemReset>:
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000a44:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8000a48:	4905      	ldr	r1, [pc, #20]	; (8000a60 <__NVIC_SystemReset+0x1c>)
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8000a4a:	4b06      	ldr	r3, [pc, #24]	; (8000a64 <__NVIC_SystemReset+0x20>)
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8000a4c:	68ca      	ldr	r2, [r1, #12]
 8000a4e:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8000a52:	4313      	orrs	r3, r2
 8000a54:	60cb      	str	r3, [r1, #12]
 8000a56:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8000a5a:	bf00      	nop
  for(;;)                                                           /* wait until reset */
 8000a5c:	e7fd      	b.n	8000a5a <__NVIC_SystemReset+0x16>
 8000a5e:	bf00      	nop
 8000a60:	e000ed00 	.word	0xe000ed00
 8000a64:	05fa0004 	.word	0x05fa0004

08000a68 <SE_LL_CRC_Config>:
  * @brief  Set CRC configuration and call HAL CRC initialization function.
  * @param  None.
  * @retval SE_ErrorStatus SE_SUCCESS if successful, SE_ERROR otherwise
  */
SE_ErrorStatus SE_LL_CRC_Config(void)
{
 8000a68:	b508      	push	{r3, lr}
  SE_ErrorStatus e_ret_status = SE_ERROR;

  CrcHandle.Instance = CRC;
 8000a6a:	4806      	ldr	r0, [pc, #24]	; (8000a84 <SE_LL_CRC_Config+0x1c>)
 8000a6c:	4b06      	ldr	r3, [pc, #24]	; (8000a88 <SE_LL_CRC_Config+0x20>)
 8000a6e:	6003      	str	r3, [r0, #0]
  /* CRC Init*/
  if (HAL_CRC_Init(&CrcHandle) == HAL_OK)
 8000a70:	f000 f8eb 	bl	8000c4a <HAL_CRC_Init>
  {
    e_ret_status = SE_SUCCESS;
  }

  return e_ret_status;
}
 8000a74:	4a05      	ldr	r2, [pc, #20]	; (8000a8c <SE_LL_CRC_Config+0x24>)
 8000a76:	4b06      	ldr	r3, [pc, #24]	; (8000a90 <SE_LL_CRC_Config+0x28>)
 8000a78:	2800      	cmp	r0, #0
 8000a7a:	bf14      	ite	ne
 8000a7c:	4610      	movne	r0, r2
 8000a7e:	4618      	moveq	r0, r3
 8000a80:	bd08      	pop	{r3, pc}
 8000a82:	bf00      	nop
 8000a84:	20000e00 	.word	0x20000e00
 8000a88:	40023000 	.word	0x40023000
 8000a8c:	00018799 	.word	0x00018799
 8000a90:	0012310f 	.word	0x0012310f

08000a94 <SE_LL_FLASH_Erase>:
  * @param  pStart: pointer to  user flash area
  * @param  Length: number of bytes.
  * @retval SE_ErrorStatus SE_SUCCESS if successful, SE_ERROR otherwise.
  */
SE_ErrorStatus SE_LL_FLASH_Erase(uint8_t *pStart, uint32_t Length)
{
 8000a94:	b530      	push	{r4, r5, lr}
 8000a96:	b087      	sub	sp, #28
  uint32_t sector_error = 0U;
 8000a98:	2300      	movs	r3, #0
 8000a9a:	9300      	str	r3, [sp, #0]
{
 8000a9c:	4604      	mov	r4, r0
 8000a9e:	460d      	mov	r5, r1
  uint32_t start = (uint32_t)pStart;
  FLASH_EraseInitTypeDef p_erase_init;
  SE_ErrorStatus e_ret_status = SE_SUCCESS;

  /* Unlock the Flash to enable the flash control register access *************/
  if (HAL_FLASH_Unlock() == HAL_OK)
 8000aa0:	f000 f964 	bl	8000d6c <HAL_FLASH_Unlock>
 8000aa4:	4603      	mov	r3, r0
 8000aa6:	bb28      	cbnz	r0, 8000af4 <SE_LL_FLASH_Erase+0x60>
  {
    /* Fill EraseInit structure*/
    p_erase_init.TypeErase     = FLASH_TYPEERASE_SECTORS;
    p_erase_init.VoltageRange  = FLASH_VOLTAGE_RANGE_3;
 8000aa8:	2202      	movs	r2, #2
  */
static uint32_t SE_LL_GetSector(uint32_t Address)
{
  uint32_t sector = 0;

  while (Address >= FlashSectorsAddress[sector + 1])
 8000aaa:	4913      	ldr	r1, [pc, #76]	; (8000af8 <SE_LL_FLASH_Erase+0x64>)
    p_erase_init.TypeErase     = FLASH_TYPEERASE_SECTORS;
 8000aac:	9001      	str	r0, [sp, #4]
    p_erase_init.VoltageRange  = FLASH_VOLTAGE_RANGE_3;
 8000aae:	9205      	str	r2, [sp, #20]
  while (Address >= FlashSectorsAddress[sector + 1])
 8000ab0:	461a      	mov	r2, r3
 8000ab2:	3301      	adds	r3, #1
 8000ab4:	f851 0023 	ldr.w	r0, [r1, r3, lsl #2]
 8000ab8:	4284      	cmp	r4, r0
 8000aba:	d2f9      	bcs.n	8000ab0 <SE_LL_FLASH_Erase+0x1c>
    p_erase_init.NbSectors     = SE_LL_GetSector(start + Length - 1U) - p_erase_init.Sector + 1U;
 8000abc:	3d01      	subs	r5, #1
    p_erase_init.Sector        = SE_LL_GetSector(start);
 8000abe:	9203      	str	r2, [sp, #12]
    p_erase_init.NbSectors     = SE_LL_GetSector(start + Length - 1U) - p_erase_init.Sector + 1U;
 8000ac0:	4425      	add	r5, r4
  uint32_t sector = 0;
 8000ac2:	2300      	movs	r3, #0
  while (Address >= FlashSectorsAddress[sector + 1])
 8000ac4:	4618      	mov	r0, r3
 8000ac6:	3301      	adds	r3, #1
 8000ac8:	f851 4023 	ldr.w	r4, [r1, r3, lsl #2]
 8000acc:	42a5      	cmp	r5, r4
 8000ace:	d2f9      	bcs.n	8000ac4 <SE_LL_FLASH_Erase+0x30>
    p_erase_init.NbSectors     = SE_LL_GetSector(start + Length - 1U) - p_erase_init.Sector + 1U;
 8000ad0:	f1c2 0201 	rsb	r2, r2, #1
 8000ad4:	4402      	add	r2, r0
    if (HAL_FLASHEx_Erase(&p_erase_init, &sector_error) != HAL_OK)
 8000ad6:	4669      	mov	r1, sp
 8000ad8:	a801      	add	r0, sp, #4
    p_erase_init.NbSectors     = SE_LL_GetSector(start + Length - 1U) - p_erase_init.Sector + 1U;
 8000ada:	9204      	str	r2, [sp, #16]
    if (HAL_FLASHEx_Erase(&p_erase_init, &sector_error) != HAL_OK)
 8000adc:	f000 fa34 	bl	8000f48 <HAL_FLASHEx_Erase>
      e_ret_status = SE_ERROR;
 8000ae0:	4c06      	ldr	r4, [pc, #24]	; (8000afc <SE_LL_FLASH_Erase+0x68>)
 8000ae2:	4b07      	ldr	r3, [pc, #28]	; (8000b00 <SE_LL_FLASH_Erase+0x6c>)
 8000ae4:	2800      	cmp	r0, #0
 8000ae6:	bf18      	it	ne
 8000ae8:	461c      	movne	r4, r3
    (void)HAL_FLASH_Lock();
 8000aea:	f000 f951 	bl	8000d90 <HAL_FLASH_Lock>
}
 8000aee:	4620      	mov	r0, r4
 8000af0:	b007      	add	sp, #28
 8000af2:	bd30      	pop	{r4, r5, pc}
    e_ret_status = SE_ERROR;
 8000af4:	4c02      	ldr	r4, [pc, #8]	; (8000b00 <SE_LL_FLASH_Erase+0x6c>)
  return e_ret_status;
 8000af6:	e7fa      	b.n	8000aee <SE_LL_FLASH_Erase+0x5a>
 8000af8:	080044c0 	.word	0x080044c0
 8000afc:	0012310f 	.word	0x0012310f
 8000b00:	00018799 	.word	0x00018799

08000b04 <SE_LL_FLASH_Write>:
{
 8000b04:	b570      	push	{r4, r5, r6, lr}
 8000b06:	460e      	mov	r6, r1
  uint32_t destination = (uint32_t)pDestination;
 8000b08:	4604      	mov	r4, r0
  if (Length == 0U)
 8000b0a:	b912      	cbnz	r2, 8000b12 <SE_LL_FLASH_Write+0xe>
    return SE_ERROR;
 8000b0c:	4c10      	ldr	r4, [pc, #64]	; (8000b50 <SE_LL_FLASH_Write+0x4c>)
}
 8000b0e:	4620      	mov	r0, r4
 8000b10:	bd70      	pop	{r4, r5, r6, pc}
    if ((destination >= SlotHeaderAdd[SLOT_ACTIVE_1 + i]) &&
 8000b12:	4b10      	ldr	r3, [pc, #64]	; (8000b54 <SE_LL_FLASH_Write+0x50>)
 8000b14:	4283      	cmp	r3, r0
 8000b16:	d8f9      	bhi.n	8000b0c <SE_LL_FLASH_Write+0x8>
        ((destination + Length) <= (SlotHeaderAdd[SLOT_ACTIVE_1 + i] + SFU_IMG_IMAGE_OFFSET)))
 8000b18:	1885      	adds	r5, r0, r2
 8000b1a:	f503 7300 	add.w	r3, r3, #512	; 0x200
    if ((destination >= SlotHeaderAdd[SLOT_ACTIVE_1 + i]) &&
 8000b1e:	429d      	cmp	r5, r3
 8000b20:	d8f4      	bhi.n	8000b0c <SE_LL_FLASH_Write+0x8>
  if (HAL_FLASH_Unlock() == HAL_OK)
 8000b22:	f000 f923 	bl	8000d6c <HAL_FLASH_Unlock>
 8000b26:	2800      	cmp	r0, #0
 8000b28:	d1f0      	bne.n	8000b0c <SE_LL_FLASH_Write+0x8>
 8000b2a:	3e01      	subs	r6, #1
      if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_BYTE, (destination + i), *(uint8_t *)(source + i)) != HAL_OK)
 8000b2c:	2300      	movs	r3, #0
 8000b2e:	f816 2f01 	ldrb.w	r2, [r6, #1]!
 8000b32:	4621      	mov	r1, r4
 8000b34:	4618      	mov	r0, r3
 8000b36:	f000 f95d 	bl	8000df4 <HAL_FLASH_Program>
 8000b3a:	b930      	cbnz	r0, 8000b4a <SE_LL_FLASH_Write+0x46>
    for (i = 0U; i < Length; i++)
 8000b3c:	3401      	adds	r4, #1
 8000b3e:	42a5      	cmp	r5, r4
 8000b40:	d1f4      	bne.n	8000b2c <SE_LL_FLASH_Write+0x28>
  SE_ErrorStatus ret = SE_SUCCESS;
 8000b42:	4c05      	ldr	r4, [pc, #20]	; (8000b58 <SE_LL_FLASH_Write+0x54>)
    (void)HAL_FLASH_Lock();
 8000b44:	f000 f924 	bl	8000d90 <HAL_FLASH_Lock>
 8000b48:	e7e1      	b.n	8000b0e <SE_LL_FLASH_Write+0xa>
        ret = SE_ERROR;
 8000b4a:	4c01      	ldr	r4, [pc, #4]	; (8000b50 <SE_LL_FLASH_Write+0x4c>)
 8000b4c:	e7fa      	b.n	8000b44 <SE_LL_FLASH_Write+0x40>
 8000b4e:	bf00      	nop
 8000b50:	00018799 	.word	0x00018799
 8000b54:	08011000 	.word	0x08011000
 8000b58:	0012310f 	.word	0x0012310f

08000b5c <SE_LL_FLASH_Read>:
{
 8000b5c:	b538      	push	{r3, r4, r5, lr}
    if ((source >= SlotHeaderAdd[SLOT_ACTIVE_1 + i]) &&
 8000b5e:	4c0d      	ldr	r4, [pc, #52]	; (8000b94 <SE_LL_FLASH_Read+0x38>)
 8000b60:	428c      	cmp	r4, r1
 8000b62:	d814      	bhi.n	8000b8e <SE_LL_FLASH_Read+0x32>
        ((source + Length) <= (SlotHeaderAdd[SLOT_ACTIVE_1 + i] + SFU_IMG_IMAGE_OFFSET)))
 8000b64:	188b      	adds	r3, r1, r2
 8000b66:	f504 7400 	add.w	r4, r4, #512	; 0x200
    if ((source >= SlotHeaderAdd[SLOT_ACTIVE_1 + i]) &&
 8000b6a:	429c      	cmp	r4, r3
 8000b6c:	bf34      	ite	cc
 8000b6e:	2300      	movcc	r3, #0
 8000b70:	2301      	movcs	r3, #1
    if ((source >= SlotStartAdd[SLOT_DWL_1 + i]) &&
 8000b72:	4c09      	ldr	r4, [pc, #36]	; (8000b98 <SE_LL_FLASH_Read+0x3c>)
 8000b74:	42a1      	cmp	r1, r4
 8000b76:	d202      	bcs.n	8000b7e <SE_LL_FLASH_Read+0x22>
  if (verified == 0U)
 8000b78:	b92b      	cbnz	r3, 8000b86 <SE_LL_FLASH_Read+0x2a>
    return SE_ERROR;
 8000b7a:	4808      	ldr	r0, [pc, #32]	; (8000b9c <SE_LL_FLASH_Read+0x40>)
 8000b7c:	e006      	b.n	8000b8c <SE_LL_FLASH_Read+0x30>
        ((source + Length) <= (SlotStartAdd[SLOT_DWL_1 + i] + SLOT_SIZE(SLOT_DWL_1))))
 8000b7e:	4d08      	ldr	r5, [pc, #32]	; (8000ba0 <SE_LL_FLASH_Read+0x44>)
 8000b80:	188c      	adds	r4, r1, r2
    if ((source >= SlotStartAdd[SLOT_DWL_1 + i]) &&
 8000b82:	42ac      	cmp	r4, r5
 8000b84:	d8f8      	bhi.n	8000b78 <SE_LL_FLASH_Read+0x1c>
  (void)memcpy(pDestination, pSource, Length);
 8000b86:	f003 fc07 	bl	8004398 <memcpy>
  return e_ret_status;
 8000b8a:	4806      	ldr	r0, [pc, #24]	; (8000ba4 <SE_LL_FLASH_Read+0x48>)
}
 8000b8c:	bd38      	pop	{r3, r4, r5, pc}
 8000b8e:	2300      	movs	r3, #0
 8000b90:	e7ef      	b.n	8000b72 <SE_LL_FLASH_Read+0x16>
 8000b92:	bf00      	nop
 8000b94:	08011000 	.word	0x08011000
 8000b98:	08028000 	.word	0x08028000
 8000b9c:	00018799 	.word	0x00018799
 8000ba0:	08040000 	.word	0x08040000
 8000ba4:	0012310f 	.word	0x0012310f

08000ba8 <SE_LL_Buffer_in_ram>:
{
 8000ba8:	b508      	push	{r3, lr}
  uint32_t addr_end = addr_start + Length - 1U;
 8000baa:	1e4b      	subs	r3, r1, #1
 8000bac:	4403      	add	r3, r0
  if ((Length != 0U) && (!((0xFFFFFFFFUL - addr_start) < Length))
 8000bae:	b141      	cbz	r1, 8000bc2 <SE_LL_Buffer_in_ram+0x1a>
 8000bb0:	43c2      	mvns	r2, r0
 8000bb2:	428a      	cmp	r2, r1
 8000bb4:	d305      	bcc.n	8000bc2 <SE_LL_Buffer_in_ram+0x1a>
      && (addr_start >= SRAM1_BASE) && (addr_end < 0x2004FFFFU))
 8000bb6:	f1b0 5f00 	cmp.w	r0, #536870912	; 0x20000000
 8000bba:	d302      	bcc.n	8000bc2 <SE_LL_Buffer_in_ram+0x1a>
 8000bbc:	4a03      	ldr	r2, [pc, #12]	; (8000bcc <SE_LL_Buffer_in_ram+0x24>)
 8000bbe:	4293      	cmp	r3, r2
 8000bc0:	d301      	bcc.n	8000bc6 <SE_LL_Buffer_in_ram+0x1e>
    NVIC_SystemReset();
 8000bc2:	f7ff ff3f 	bl	8000a44 <__NVIC_SystemReset>
}
 8000bc6:	4802      	ldr	r0, [pc, #8]	; (8000bd0 <SE_LL_Buffer_in_ram+0x28>)
 8000bc8:	bd08      	pop	{r3, pc}
 8000bca:	bf00      	nop
 8000bcc:	2004ffff 	.word	0x2004ffff
 8000bd0:	0012310f 	.word	0x0012310f

08000bd4 <SE_LL_Buffer_in_SBSFU_ram>:
{
 8000bd4:	b508      	push	{r3, lr}
  uint32_t addr_end = addr_start + Length - 1U;
 8000bd6:	1e4b      	subs	r3, r1, #1
 8000bd8:	4403      	add	r3, r0
  if ((Length != 0U) && (!((0xFFFFFFFFUL - addr_start) < Length))
 8000bda:	b141      	cbz	r1, 8000bee <SE_LL_Buffer_in_SBSFU_ram+0x1a>
 8000bdc:	43c2      	mvns	r2, r0
 8000bde:	428a      	cmp	r2, r1
 8000be0:	d305      	bcc.n	8000bee <SE_LL_Buffer_in_SBSFU_ram+0x1a>
      && ((addr_end  <= SB_REGION_RAM_END) && (addr_start >= SB_REGION_RAM_START)))
 8000be2:	4a05      	ldr	r2, [pc, #20]	; (8000bf8 <SE_LL_Buffer_in_SBSFU_ram+0x24>)
 8000be4:	4293      	cmp	r3, r2
 8000be6:	d802      	bhi.n	8000bee <SE_LL_Buffer_in_SBSFU_ram+0x1a>
 8000be8:	4b04      	ldr	r3, [pc, #16]	; (8000bfc <SE_LL_Buffer_in_SBSFU_ram+0x28>)
 8000bea:	4298      	cmp	r0, r3
 8000bec:	d201      	bcs.n	8000bf2 <SE_LL_Buffer_in_SBSFU_ram+0x1e>
    NVIC_SystemReset();
 8000bee:	f7ff ff29 	bl	8000a44 <__NVIC_SystemReset>
}
 8000bf2:	4803      	ldr	r0, [pc, #12]	; (8000c00 <SE_LL_Buffer_in_SBSFU_ram+0x2c>)
 8000bf4:	bd08      	pop	{r3, pc}
 8000bf6:	bf00      	nop
 8000bf8:	2000bfff 	.word	0x2000bfff
 8000bfc:	20001000 	.word	0x20001000
 8000c00:	0012310f 	.word	0x0012310f

08000c04 <SE_LL_Buffer_part_of_SE_ram>:
{
 8000c04:	b508      	push	{r3, lr}
  if (((Length != 0U) && (!(((addr_start < SE_REGION_RAM_START) && (addr_end < SE_REGION_RAM_START)) ||
 8000c06:	b181      	cbz	r1, 8000c2a <SE_LL_Buffer_part_of_SE_ram+0x26>
 8000c08:	4a09      	ldr	r2, [pc, #36]	; (8000c30 <SE_LL_Buffer_part_of_SE_ram+0x2c>)
  uint32_t addr_end = addr_start + Length - 1U;
 8000c0a:	1e4b      	subs	r3, r1, #1
  if (((Length != 0U) && (!(((addr_start < SE_REGION_RAM_START) && (addr_end < SE_REGION_RAM_START)) ||
 8000c0c:	4282      	cmp	r2, r0
  uint32_t addr_end = addr_start + Length - 1U;
 8000c0e:	4403      	add	r3, r0
  if (((Length != 0U) && (!(((addr_start < SE_REGION_RAM_START) && (addr_end < SE_REGION_RAM_START)) ||
 8000c10:	d901      	bls.n	8000c16 <SE_LL_Buffer_part_of_SE_ram+0x12>
 8000c12:	429a      	cmp	r2, r3
 8000c14:	d804      	bhi.n	8000c20 <SE_LL_Buffer_part_of_SE_ram+0x1c>
                            ((addr_start > SE_REGION_RAM_END) && (addr_end > SE_REGION_RAM_END)))))
 8000c16:	4a07      	ldr	r2, [pc, #28]	; (8000c34 <SE_LL_Buffer_part_of_SE_ram+0x30>)
  if (((Length != 0U) && (!(((addr_start < SE_REGION_RAM_START) && (addr_end < SE_REGION_RAM_START)) ||
 8000c18:	4282      	cmp	r2, r0
 8000c1a:	d204      	bcs.n	8000c26 <SE_LL_Buffer_part_of_SE_ram+0x22>
                            ((addr_start > SE_REGION_RAM_END) && (addr_end > SE_REGION_RAM_END)))))
 8000c1c:	429a      	cmp	r2, r3
 8000c1e:	d202      	bcs.n	8000c26 <SE_LL_Buffer_part_of_SE_ram+0x22>
      || ((0xFFFFFFFFUL - addr_start) < Length))
 8000c20:	43c0      	mvns	r0, r0
 8000c22:	4288      	cmp	r0, r1
 8000c24:	d201      	bcs.n	8000c2a <SE_LL_Buffer_part_of_SE_ram+0x26>
    NVIC_SystemReset();
 8000c26:	f7ff ff0d 	bl	8000a44 <__NVIC_SystemReset>
}
 8000c2a:	4803      	ldr	r0, [pc, #12]	; (8000c38 <SE_LL_Buffer_part_of_SE_ram+0x34>)
 8000c2c:	bd08      	pop	{r3, pc}
 8000c2e:	bf00      	nop
 8000c30:	20000000 	.word	0x20000000
 8000c34:	20000fff 	.word	0x20000fff
 8000c38:	00018799 	.word	0x00018799

08000c3c <SE_LL_CORE_Cleanup>:
  * The function is called  during SE_LOCK_RESTRICT_SERVICES.
  *
  */
void  SE_LL_CORE_Cleanup(void)
{
}
 8000c3c:	4770      	bx	lr
	...

08000c40 <SE_LL_Lock_Keys>:
  * @retval SE_ErrorStatus SE_SUCCESS if successful, SE_ERROR otherwise
  */
SE_ErrorStatus SE_LL_Lock_Keys(void)
{
  return SE_SUCCESS;
}
 8000c40:	4800      	ldr	r0, [pc, #0]	; (8000c44 <SE_LL_Lock_Keys+0x4>)
 8000c42:	4770      	bx	lr
 8000c44:	0012310f 	.word	0x0012310f

08000c48 <HAL_CRC_MspInit>:
  UNUSED(hcrc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_CRC_MspInit can be implemented in the user file
   */
}
 8000c48:	4770      	bx	lr

08000c4a <HAL_CRC_Init>:
{
 8000c4a:	b510      	push	{r4, lr}
  if (hcrc == NULL)
 8000c4c:	4604      	mov	r4, r0
 8000c4e:	b150      	cbz	r0, 8000c66 <HAL_CRC_Init+0x1c>
  if (hcrc->State == HAL_CRC_STATE_RESET)
 8000c50:	7943      	ldrb	r3, [r0, #5]
 8000c52:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8000c56:	b913      	cbnz	r3, 8000c5e <HAL_CRC_Init+0x14>
    hcrc->Lock = HAL_UNLOCKED;
 8000c58:	7102      	strb	r2, [r0, #4]
    HAL_CRC_MspInit(hcrc);
 8000c5a:	f7ff fff5 	bl	8000c48 <HAL_CRC_MspInit>
  hcrc->State = HAL_CRC_STATE_READY;
 8000c5e:	2301      	movs	r3, #1
 8000c60:	7163      	strb	r3, [r4, #5]
  return HAL_OK;
 8000c62:	2000      	movs	r0, #0
}
 8000c64:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8000c66:	2001      	movs	r0, #1
 8000c68:	e7fc      	b.n	8000c64 <HAL_CRC_Init+0x1a>
	...

08000c6c <FLASH_Program_DoubleWord>:
{
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8000c6c:	4909      	ldr	r1, [pc, #36]	; (8000c94 <FLASH_Program_DoubleWord+0x28>)
{
 8000c6e:	b510      	push	{r4, lr}
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8000c70:	690c      	ldr	r4, [r1, #16]
 8000c72:	f424 7440 	bic.w	r4, r4, #768	; 0x300
 8000c76:	610c      	str	r4, [r1, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 8000c78:	690c      	ldr	r4, [r1, #16]
 8000c7a:	f444 7440 	orr.w	r4, r4, #768	; 0x300
 8000c7e:	610c      	str	r4, [r1, #16]
  FLASH->CR |= FLASH_CR_PG;
 8000c80:	690c      	ldr	r4, [r1, #16]
 8000c82:	f044 0401 	orr.w	r4, r4, #1
 8000c86:	610c      	str	r4, [r1, #16]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 8000c88:	6002      	str	r2, [r0, #0]
  __ASM volatile ("isb 0xF":::"memory");
 8000c8a:	f3bf 8f6f 	isb	sy
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 8000c8e:	6043      	str	r3, [r0, #4]
}
 8000c90:	bd10      	pop	{r4, pc}
 8000c92:	bf00      	nop
 8000c94:	40023c00 	.word	0x40023c00

08000c98 <FLASH_Program_Word>:
{
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8000c98:	4b07      	ldr	r3, [pc, #28]	; (8000cb8 <FLASH_Program_Word+0x20>)
 8000c9a:	691a      	ldr	r2, [r3, #16]
 8000c9c:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8000ca0:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 8000ca2:	691a      	ldr	r2, [r3, #16]
 8000ca4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000ca8:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_CR_PG;
 8000caa:	691a      	ldr	r2, [r3, #16]
 8000cac:	f042 0201 	orr.w	r2, r2, #1
 8000cb0:	611a      	str	r2, [r3, #16]

  *(__IO uint32_t*)Address = Data;
 8000cb2:	6001      	str	r1, [r0, #0]
}
 8000cb4:	4770      	bx	lr
 8000cb6:	bf00      	nop
 8000cb8:	40023c00 	.word	0x40023c00

08000cbc <FLASH_Program_HalfWord>:
{
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8000cbc:	4b07      	ldr	r3, [pc, #28]	; (8000cdc <FLASH_Program_HalfWord+0x20>)
 8000cbe:	691a      	ldr	r2, [r3, #16]
 8000cc0:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8000cc4:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 8000cc6:	691a      	ldr	r2, [r3, #16]
 8000cc8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000ccc:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_CR_PG;
 8000cce:	691a      	ldr	r2, [r3, #16]
 8000cd0:	f042 0201 	orr.w	r2, r2, #1
 8000cd4:	611a      	str	r2, [r3, #16]

  *(__IO uint16_t*)Address = Data;
 8000cd6:	8001      	strh	r1, [r0, #0]
}
 8000cd8:	4770      	bx	lr
 8000cda:	bf00      	nop
 8000cdc:	40023c00 	.word	0x40023c00

08000ce0 <FLASH_SetErrorCode>:
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 8000ce0:	4b20      	ldr	r3, [pc, #128]	; (8000d64 <FLASH_SetErrorCode+0x84>)
 8000ce2:	68da      	ldr	r2, [r3, #12]
 8000ce4:	06d0      	lsls	r0, r2, #27
 8000ce6:	d506      	bpl.n	8000cf6 <FLASH_SetErrorCode+0x16>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8000ce8:	491f      	ldr	r1, [pc, #124]	; (8000d68 <FLASH_SetErrorCode+0x88>)
 8000cea:	69ca      	ldr	r2, [r1, #28]
 8000cec:	f042 0210 	orr.w	r2, r2, #16
 8000cf0:	61ca      	str	r2, [r1, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 8000cf2:	2210      	movs	r2, #16
 8000cf4:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 8000cf6:	68da      	ldr	r2, [r3, #12]
 8000cf8:	0691      	lsls	r1, r2, #26
 8000cfa:	d506      	bpl.n	8000d0a <FLASH_SetErrorCode+0x2a>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 8000cfc:	491a      	ldr	r1, [pc, #104]	; (8000d68 <FLASH_SetErrorCode+0x88>)
 8000cfe:	69ca      	ldr	r2, [r1, #28]
 8000d00:	f042 0208 	orr.w	r2, r2, #8
 8000d04:	61ca      	str	r2, [r1, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 8000d06:	2220      	movs	r2, #32
 8000d08:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 8000d0a:	4b16      	ldr	r3, [pc, #88]	; (8000d64 <FLASH_SetErrorCode+0x84>)
 8000d0c:	68da      	ldr	r2, [r3, #12]
 8000d0e:	0652      	lsls	r2, r2, #25
 8000d10:	d506      	bpl.n	8000d20 <FLASH_SetErrorCode+0x40>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 8000d12:	4915      	ldr	r1, [pc, #84]	; (8000d68 <FLASH_SetErrorCode+0x88>)
 8000d14:	69ca      	ldr	r2, [r1, #28]
 8000d16:	f042 0204 	orr.w	r2, r2, #4
 8000d1a:	61ca      	str	r2, [r1, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 8000d1c:	2240      	movs	r2, #64	; 0x40
 8000d1e:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 8000d20:	68da      	ldr	r2, [r3, #12]
 8000d22:	0610      	lsls	r0, r2, #24
 8000d24:	d506      	bpl.n	8000d34 <FLASH_SetErrorCode+0x54>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 8000d26:	4910      	ldr	r1, [pc, #64]	; (8000d68 <FLASH_SetErrorCode+0x88>)
 8000d28:	69ca      	ldr	r2, [r1, #28]
 8000d2a:	f042 0202 	orr.w	r2, r2, #2
 8000d2e:	61ca      	str	r2, [r1, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 8000d30:	2280      	movs	r2, #128	; 0x80
 8000d32:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR) 
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR) != RESET)
 8000d34:	4b0b      	ldr	r3, [pc, #44]	; (8000d64 <FLASH_SetErrorCode+0x84>)
 8000d36:	68da      	ldr	r2, [r3, #12]
 8000d38:	05d1      	lsls	r1, r2, #23
 8000d3a:	d507      	bpl.n	8000d4c <FLASH_SetErrorCode+0x6c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 8000d3c:	490a      	ldr	r1, [pc, #40]	; (8000d68 <FLASH_SetErrorCode+0x88>)
 8000d3e:	69ca      	ldr	r2, [r1, #28]
 8000d40:	f042 0201 	orr.w	r2, r2, #1
 8000d44:	61ca      	str	r2, [r1, #28]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
 8000d46:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000d4a:	60da      	str	r2, [r3, #12]
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 8000d4c:	68da      	ldr	r2, [r3, #12]
 8000d4e:	0792      	lsls	r2, r2, #30
 8000d50:	d506      	bpl.n	8000d60 <FLASH_SetErrorCode+0x80>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 8000d52:	4905      	ldr	r1, [pc, #20]	; (8000d68 <FLASH_SetErrorCode+0x88>)
 8000d54:	69ca      	ldr	r2, [r1, #28]
 8000d56:	f042 0220 	orr.w	r2, r2, #32
 8000d5a:	61ca      	str	r2, [r1, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 8000d5c:	2202      	movs	r2, #2
 8000d5e:	60da      	str	r2, [r3, #12]
  }
}
 8000d60:	4770      	bx	lr
 8000d62:	bf00      	nop
 8000d64:	40023c00 	.word	0x40023c00
 8000d68:	20000e08 	.word	0x20000e08

08000d6c <HAL_FLASH_Unlock>:
  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8000d6c:	4b06      	ldr	r3, [pc, #24]	; (8000d88 <HAL_FLASH_Unlock+0x1c>)
 8000d6e:	691a      	ldr	r2, [r3, #16]
 8000d70:	2a00      	cmp	r2, #0
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8000d72:	bfbf      	itttt	lt
 8000d74:	4a05      	ldrlt	r2, [pc, #20]	; (8000d8c <HAL_FLASH_Unlock+0x20>)
 8000d76:	605a      	strlt	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8000d78:	f102 3288 	addlt.w	r2, r2, #2290649224	; 0x88888888
 8000d7c:	605a      	strlt	r2, [r3, #4]
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8000d7e:	bfba      	itte	lt
 8000d80:	6918      	ldrlt	r0, [r3, #16]
  HAL_StatusTypeDef status = HAL_OK;
 8000d82:	0fc0      	lsrlt	r0, r0, #31
 8000d84:	2000      	movge	r0, #0
}
 8000d86:	4770      	bx	lr
 8000d88:	40023c00 	.word	0x40023c00
 8000d8c:	45670123 	.word	0x45670123

08000d90 <HAL_FLASH_Lock>:
  FLASH->CR |= FLASH_CR_LOCK;
 8000d90:	4a03      	ldr	r2, [pc, #12]	; (8000da0 <HAL_FLASH_Lock+0x10>)
 8000d92:	6913      	ldr	r3, [r2, #16]
 8000d94:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000d98:	6113      	str	r3, [r2, #16]
}
 8000d9a:	2000      	movs	r0, #0
 8000d9c:	4770      	bx	lr
 8000d9e:	bf00      	nop
 8000da0:	40023c00 	.word	0x40023c00

08000da4 <FLASH_WaitForLastOperation>:
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8000da4:	4b11      	ldr	r3, [pc, #68]	; (8000dec <FLASH_WaitForLastOperation+0x48>)
{ 
 8000da6:	b570      	push	{r4, r5, r6, lr}
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8000da8:	2200      	movs	r2, #0
{ 
 8000daa:	4604      	mov	r4, r0
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8000dac:	61da      	str	r2, [r3, #28]
  tickstart = HAL_GetTick();
 8000dae:	f000 fbfd 	bl	80015ac <HAL_GetTick>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8000db2:	4d0f      	ldr	r5, [pc, #60]	; (8000df0 <FLASH_WaitForLastOperation+0x4c>)
  tickstart = HAL_GetTick();
 8000db4:	4606      	mov	r6, r0
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8000db6:	68eb      	ldr	r3, [r5, #12]
 8000db8:	03da      	lsls	r2, r3, #15
 8000dba:	d40c      	bmi.n	8000dd6 <FLASH_WaitForLastOperation+0x32>
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 8000dbc:	68eb      	ldr	r3, [r5, #12]
 8000dbe:	07db      	lsls	r3, r3, #31
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8000dc0:	bf44      	itt	mi
 8000dc2:	2301      	movmi	r3, #1
 8000dc4:	60eb      	strmi	r3, [r5, #12]
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 8000dc6:	68e8      	ldr	r0, [r5, #12]
 8000dc8:	f410 70f9 	ands.w	r0, r0, #498	; 0x1f2
 8000dcc:	d007      	beq.n	8000dde <FLASH_WaitForLastOperation+0x3a>
    FLASH_SetErrorCode();
 8000dce:	f7ff ff87 	bl	8000ce0 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8000dd2:	2001      	movs	r0, #1
 8000dd4:	e003      	b.n	8000dde <FLASH_WaitForLastOperation+0x3a>
    if(Timeout != HAL_MAX_DELAY)
 8000dd6:	1c61      	adds	r1, r4, #1
 8000dd8:	d0ed      	beq.n	8000db6 <FLASH_WaitForLastOperation+0x12>
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 8000dda:	b90c      	cbnz	r4, 8000de0 <FLASH_WaitForLastOperation+0x3c>
        return HAL_TIMEOUT;
 8000ddc:	2003      	movs	r0, #3
}  
 8000dde:	bd70      	pop	{r4, r5, r6, pc}
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 8000de0:	f000 fbe4 	bl	80015ac <HAL_GetTick>
 8000de4:	1b80      	subs	r0, r0, r6
 8000de6:	42a0      	cmp	r0, r4
 8000de8:	d9e5      	bls.n	8000db6 <FLASH_WaitForLastOperation+0x12>
 8000dea:	e7f7      	b.n	8000ddc <FLASH_WaitForLastOperation+0x38>
 8000dec:	20000e08 	.word	0x20000e08
 8000df0:	40023c00 	.word	0x40023c00

08000df4 <HAL_FLASH_Program>:
{
 8000df4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  __HAL_LOCK(&pFlash);
 8000df6:	4e20      	ldr	r6, [pc, #128]	; (8000e78 <HAL_FLASH_Program+0x84>)
{
 8000df8:	9301      	str	r3, [sp, #4]
 8000dfa:	4614      	mov	r4, r2
  __HAL_LOCK(&pFlash);
 8000dfc:	7e32      	ldrb	r2, [r6, #24]
 8000dfe:	2a01      	cmp	r2, #1
{
 8000e00:	4607      	mov	r7, r0
 8000e02:	460d      	mov	r5, r1
  __HAL_LOCK(&pFlash);
 8000e04:	d035      	beq.n	8000e72 <HAL_FLASH_Program+0x7e>
 8000e06:	2201      	movs	r2, #1
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8000e08:	f24c 3050 	movw	r0, #50000	; 0xc350
  __HAL_LOCK(&pFlash);
 8000e0c:	7632      	strb	r2, [r6, #24]
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8000e0e:	f7ff ffc9 	bl	8000da4 <FLASH_WaitForLastOperation>
  if(status == HAL_OK)
 8000e12:	b9b8      	cbnz	r0, 8000e44 <HAL_FLASH_Program+0x50>
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 8000e14:	9b01      	ldr	r3, [sp, #4]
 8000e16:	b9cf      	cbnz	r7, 8000e4c <HAL_FLASH_Program+0x58>
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8000e18:	4b18      	ldr	r3, [pc, #96]	; (8000e7c <HAL_FLASH_Program+0x88>)
 8000e1a:	691a      	ldr	r2, [r3, #16]
 8000e1c:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8000e20:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 8000e22:	691a      	ldr	r2, [r3, #16]
 8000e24:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_CR_PG;
 8000e26:	691a      	ldr	r2, [r3, #16]
      FLASH_Program_Byte(Address, (uint8_t) Data);
 8000e28:	b2e4      	uxtb	r4, r4
  FLASH->CR |= FLASH_CR_PG;
 8000e2a:	f042 0201 	orr.w	r2, r2, #1
 8000e2e:	611a      	str	r2, [r3, #16]
  *(__IO uint8_t*)Address = Data;
 8000e30:	702c      	strb	r4, [r5, #0]
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8000e32:	f24c 3050 	movw	r0, #50000	; 0xc350
 8000e36:	f7ff ffb5 	bl	8000da4 <FLASH_WaitForLastOperation>
    FLASH->CR &= (~FLASH_CR_PG);  
 8000e3a:	4a10      	ldr	r2, [pc, #64]	; (8000e7c <HAL_FLASH_Program+0x88>)
 8000e3c:	6913      	ldr	r3, [r2, #16]
 8000e3e:	f023 0301 	bic.w	r3, r3, #1
 8000e42:	6113      	str	r3, [r2, #16]
  __HAL_UNLOCK(&pFlash);
 8000e44:	2300      	movs	r3, #0
 8000e46:	7633      	strb	r3, [r6, #24]
}
 8000e48:	b003      	add	sp, #12
 8000e4a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8000e4c:	2f01      	cmp	r7, #1
 8000e4e:	d104      	bne.n	8000e5a <HAL_FLASH_Program+0x66>
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 8000e50:	b2a1      	uxth	r1, r4
 8000e52:	4628      	mov	r0, r5
 8000e54:	f7ff ff32 	bl	8000cbc <FLASH_Program_HalfWord>
 8000e58:	e7eb      	b.n	8000e32 <HAL_FLASH_Program+0x3e>
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8000e5a:	2f02      	cmp	r7, #2
 8000e5c:	d104      	bne.n	8000e68 <HAL_FLASH_Program+0x74>
      FLASH_Program_Word(Address, (uint32_t) Data);
 8000e5e:	4621      	mov	r1, r4
 8000e60:	4628      	mov	r0, r5
 8000e62:	f7ff ff19 	bl	8000c98 <FLASH_Program_Word>
 8000e66:	e7e4      	b.n	8000e32 <HAL_FLASH_Program+0x3e>
      FLASH_Program_DoubleWord(Address, Data);
 8000e68:	4622      	mov	r2, r4
 8000e6a:	4628      	mov	r0, r5
 8000e6c:	f7ff fefe 	bl	8000c6c <FLASH_Program_DoubleWord>
 8000e70:	e7df      	b.n	8000e32 <HAL_FLASH_Program+0x3e>
  __HAL_LOCK(&pFlash);
 8000e72:	2002      	movs	r0, #2
 8000e74:	e7e8      	b.n	8000e48 <HAL_FLASH_Program+0x54>
 8000e76:	bf00      	nop
 8000e78:	20000e08 	.word	0x20000e08
 8000e7c:	40023c00 	.word	0x40023c00

08000e80 <FLASH_MassErase.constprop.0>:
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));
  
  /* If the previous operation is completed, proceed to erase all sectors */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8000e80:	4b07      	ldr	r3, [pc, #28]	; (8000ea0 <FLASH_MassErase.constprop.0+0x20>)
 8000e82:	6919      	ldr	r1, [r3, #16]
 8000e84:	f421 7140 	bic.w	r1, r1, #768	; 0x300
 8000e88:	6119      	str	r1, [r3, #16]
  FLASH->CR |= FLASH_CR_MER;
 8000e8a:	6919      	ldr	r1, [r3, #16]
 8000e8c:	f041 0104 	orr.w	r1, r1, #4
 8000e90:	6119      	str	r1, [r3, #16]
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange <<8U);
 8000e92:	691a      	ldr	r2, [r3, #16]
 8000e94:	ea42 2000 	orr.w	r0, r2, r0, lsl #8
 8000e98:	f440 3080 	orr.w	r0, r0, #65536	; 0x10000
 8000e9c:	6118      	str	r0, [r3, #16]
}
 8000e9e:	4770      	bx	lr
 8000ea0:	40023c00 	.word	0x40023c00

08000ea4 <FLASH_Erase_Sector>:

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  
  if(VoltageRange == FLASH_VOLTAGE_RANGE_1)
 8000ea4:	b139      	cbz	r1, 8000eb6 <FLASH_Erase_Sector+0x12>
  {
     tmp_psize = FLASH_PSIZE_BYTE;
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_2)
 8000ea6:	2901      	cmp	r1, #1
 8000ea8:	d01c      	beq.n	8000ee4 <FLASH_Erase_Sector+0x40>
  {
    tmp_psize = FLASH_PSIZE_WORD;
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 8000eaa:	2902      	cmp	r1, #2
 8000eac:	bf0c      	ite	eq
 8000eae:	f44f 7100 	moveq.w	r1, #512	; 0x200
 8000eb2:	f44f 7140 	movne.w	r1, #768	; 0x300
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8000eb6:	4b0d      	ldr	r3, [pc, #52]	; (8000eec <FLASH_Erase_Sector+0x48>)
 8000eb8:	691a      	ldr	r2, [r3, #16]
 8000eba:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8000ebe:	611a      	str	r2, [r3, #16]
  FLASH->CR |= tmp_psize;
 8000ec0:	691a      	ldr	r2, [r3, #16]
 8000ec2:	4311      	orrs	r1, r2
 8000ec4:	6119      	str	r1, [r3, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 8000ec6:	691a      	ldr	r2, [r3, #16]
 8000ec8:	f022 0278 	bic.w	r2, r2, #120	; 0x78
 8000ecc:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 8000ece:	691a      	ldr	r2, [r3, #16]
 8000ed0:	ea42 00c0 	orr.w	r0, r2, r0, lsl #3
 8000ed4:	f040 0002 	orr.w	r0, r0, #2
 8000ed8:	6118      	str	r0, [r3, #16]
  FLASH->CR |= FLASH_CR_STRT;
 8000eda:	691a      	ldr	r2, [r3, #16]
 8000edc:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8000ee0:	611a      	str	r2, [r3, #16]
}
 8000ee2:	4770      	bx	lr
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 8000ee4:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000ee8:	e7e5      	b.n	8000eb6 <FLASH_Erase_Sector+0x12>
 8000eea:	bf00      	nop
 8000eec:	40023c00 	.word	0x40023c00

08000ef0 <FLASH_FlushCaches>:
  * @retval None
  */
void FLASH_FlushCaches(void)
{
  /* Flush instruction cache  */
  if(READ_BIT(FLASH->ACR, FLASH_ACR_ICEN)!= RESET)
 8000ef0:	4b14      	ldr	r3, [pc, #80]	; (8000f44 <FLASH_FlushCaches+0x54>)
 8000ef2:	681a      	ldr	r2, [r3, #0]
 8000ef4:	0591      	lsls	r1, r2, #22
 8000ef6:	d50f      	bpl.n	8000f18 <FLASH_FlushCaches+0x28>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8000ef8:	681a      	ldr	r2, [r3, #0]
 8000efa:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8000efe:	601a      	str	r2, [r3, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8000f00:	681a      	ldr	r2, [r3, #0]
 8000f02:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8000f06:	601a      	str	r2, [r3, #0]
 8000f08:	681a      	ldr	r2, [r3, #0]
 8000f0a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8000f0e:	601a      	str	r2, [r3, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000f10:	681a      	ldr	r2, [r3, #0]
 8000f12:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000f16:	601a      	str	r2, [r3, #0]
  }
  
  /* Flush data cache */
  if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 8000f18:	4b0a      	ldr	r3, [pc, #40]	; (8000f44 <FLASH_FlushCaches+0x54>)
 8000f1a:	681a      	ldr	r2, [r3, #0]
 8000f1c:	0552      	lsls	r2, r2, #21
 8000f1e:	d50f      	bpl.n	8000f40 <FLASH_FlushCaches+0x50>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 8000f20:	681a      	ldr	r2, [r3, #0]
 8000f22:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000f26:	601a      	str	r2, [r3, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8000f28:	681a      	ldr	r2, [r3, #0]
 8000f2a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8000f2e:	601a      	str	r2, [r3, #0]
 8000f30:	681a      	ldr	r2, [r3, #0]
 8000f32:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8000f36:	601a      	str	r2, [r3, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8000f38:	681a      	ldr	r2, [r3, #0]
 8000f3a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8000f3e:	601a      	str	r2, [r3, #0]
  }
}
 8000f40:	4770      	bx	lr
 8000f42:	bf00      	nop
 8000f44:	40023c00 	.word	0x40023c00

08000f48 <HAL_FLASHEx_Erase>:
{
 8000f48:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  __HAL_LOCK(&pFlash);
 8000f4c:	f8df 8094 	ldr.w	r8, [pc, #148]	; 8000fe4 <HAL_FLASHEx_Erase+0x9c>
 8000f50:	f898 3018 	ldrb.w	r3, [r8, #24]
 8000f54:	2b01      	cmp	r3, #1
{
 8000f56:	4605      	mov	r5, r0
 8000f58:	460f      	mov	r7, r1
  __HAL_LOCK(&pFlash);
 8000f5a:	d03f      	beq.n	8000fdc <HAL_FLASHEx_Erase+0x94>
 8000f5c:	2301      	movs	r3, #1
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8000f5e:	f24c 3050 	movw	r0, #50000	; 0xc350
  __HAL_LOCK(&pFlash);
 8000f62:	f888 3018 	strb.w	r3, [r8, #24]
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8000f66:	f7ff ff1d 	bl	8000da4 <FLASH_WaitForLastOperation>
  if(status == HAL_OK)
 8000f6a:	4604      	mov	r4, r0
 8000f6c:	b9a0      	cbnz	r0, 8000f98 <HAL_FLASHEx_Erase+0x50>
    *SectorError = 0xFFFFFFFFU;
 8000f6e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000f72:	603b      	str	r3, [r7, #0]
    if(pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8000f74:	682b      	ldr	r3, [r5, #0]
 8000f76:	2b01      	cmp	r3, #1
 8000f78:	d114      	bne.n	8000fa4 <HAL_FLASHEx_Erase+0x5c>
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 8000f7a:	7c28      	ldrb	r0, [r5, #16]
 8000f7c:	f7ff ff80 	bl	8000e80 <FLASH_MassErase.constprop.0>
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8000f80:	f24c 3050 	movw	r0, #50000	; 0xc350
 8000f84:	f7ff ff0e 	bl	8000da4 <FLASH_WaitForLastOperation>
      FLASH->CR &= (~FLASH_MER_BIT);
 8000f88:	4a15      	ldr	r2, [pc, #84]	; (8000fe0 <HAL_FLASHEx_Erase+0x98>)
 8000f8a:	6913      	ldr	r3, [r2, #16]
 8000f8c:	f023 0304 	bic.w	r3, r3, #4
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8000f90:	4604      	mov	r4, r0
      FLASH->CR &= (~FLASH_MER_BIT);
 8000f92:	6113      	str	r3, [r2, #16]
    FLASH_FlushCaches();    
 8000f94:	f7ff ffac 	bl	8000ef0 <FLASH_FlushCaches>
  __HAL_UNLOCK(&pFlash);
 8000f98:	2300      	movs	r3, #0
 8000f9a:	f888 3018 	strb.w	r3, [r8, #24]
}
 8000f9e:	4620      	mov	r0, r4
 8000fa0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8000fa4:	68ae      	ldr	r6, [r5, #8]
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 8000fa6:	f8df 9038 	ldr.w	r9, [pc, #56]	; 8000fe0 <HAL_FLASHEx_Erase+0x98>
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8000faa:	e9d5 2302 	ldrd	r2, r3, [r5, #8]
 8000fae:	4413      	add	r3, r2
 8000fb0:	42b3      	cmp	r3, r6
 8000fb2:	d9ef      	bls.n	8000f94 <HAL_FLASHEx_Erase+0x4c>
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 8000fb4:	7c29      	ldrb	r1, [r5, #16]
 8000fb6:	4630      	mov	r0, r6
 8000fb8:	f7ff ff74 	bl	8000ea4 <FLASH_Erase_Sector>
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8000fbc:	f24c 3050 	movw	r0, #50000	; 0xc350
 8000fc0:	f7ff fef0 	bl	8000da4 <FLASH_WaitForLastOperation>
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 8000fc4:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8000fc8:	f023 037a 	bic.w	r3, r3, #122	; 0x7a
 8000fcc:	f8c9 3010 	str.w	r3, [r9, #16]
        if(status != HAL_OK) 
 8000fd0:	b110      	cbz	r0, 8000fd8 <HAL_FLASHEx_Erase+0x90>
          *SectorError = index;
 8000fd2:	603e      	str	r6, [r7, #0]
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8000fd4:	4604      	mov	r4, r0
          break;
 8000fd6:	e7dd      	b.n	8000f94 <HAL_FLASHEx_Erase+0x4c>
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8000fd8:	3601      	adds	r6, #1
 8000fda:	e7e6      	b.n	8000faa <HAL_FLASHEx_Erase+0x62>
  __HAL_LOCK(&pFlash);
 8000fdc:	2402      	movs	r4, #2
 8000fde:	e7de      	b.n	8000f9e <HAL_FLASHEx_Erase+0x56>
 8000fe0:	40023c00 	.word	0x40023c00
 8000fe4:	20000e08 	.word	0x20000e08

08000fe8 <__NVIC_SystemReset>:
  __ASM volatile ("dsb 0xF":::"memory");
 8000fe8:	f3bf 8f4f 	dsb	sy
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8000fec:	4905      	ldr	r1, [pc, #20]	; (8001004 <__NVIC_SystemReset+0x1c>)
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8000fee:	4b06      	ldr	r3, [pc, #24]	; (8001008 <__NVIC_SystemReset+0x20>)
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8000ff0:	68ca      	ldr	r2, [r1, #12]
 8000ff2:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8000ff6:	4313      	orrs	r3, r2
 8000ff8:	60cb      	str	r3, [r1, #12]
 8000ffa:	f3bf 8f4f 	dsb	sy
    __NOP();
 8000ffe:	bf00      	nop
  for(;;)                                                           /* wait until reset */
 8001000:	e7fd      	b.n	8000ffe <__NVIC_SystemReset+0x16>
 8001002:	bf00      	nop
 8001004:	e000ed00 	.word	0xe000ed00
 8001008:	05fa0004 	.word	0x05fa0004

0800100c <SE_CallGateService>:
   */
  static SE_LockStatus SE_LockRestrictedServices = SE_UNLOCKED;

  SE_ErrorStatus e_ret_status = SE_ERROR;

  switch (eID)
 800100c:	2810      	cmp	r0, #16
{
 800100e:	e92d 4f73 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, sl, fp, lr}
 8001012:	460c      	mov	r4, r1
  switch (eID)
 8001014:	d815      	bhi.n	8001042 <SE_CallGateService+0x36>
 8001016:	4db3      	ldr	r5, [pc, #716]	; (80012e4 <SE_CallGateService+0x2d8>)
 8001018:	2810      	cmp	r0, #16
 800101a:	d821      	bhi.n	8001060 <SE_CallGateService+0x54>
 800101c:	e8df f010 	tbh	[pc, r0, lsl #1]
 8001020:	00200031 	.word	0x00200031
 8001024:	00200020 	.word	0x00200020
 8001028:	0068003e 	.word	0x0068003e
 800102c:	00e500ae 	.word	0x00e500ae
 8001030:	016c0112 	.word	0x016c0112
 8001034:	00200020 	.word	0x00200020
 8001038:	00200020 	.word	0x00200020
 800103c:	00200020 	.word	0x00200020
 8001040:	01a3      	.short	0x01a3
 8001042:	2894      	cmp	r0, #148	; 0x94
 8001044:	f000 8205 	beq.w	8001452 <SE_CallGateService+0x446>
 8001048:	d80c      	bhi.n	8001064 <SE_CallGateService+0x58>
 800104a:	2892      	cmp	r0, #146	; 0x92
 800104c:	f8df 82a4 	ldr.w	r8, [pc, #676]	; 80012f4 <SE_CallGateService+0x2e8>
 8001050:	f000 81b1 	beq.w	80013b6 <SE_CallGateService+0x3aa>
 8001054:	2893      	cmp	r0, #147	; 0x93
 8001056:	f000 81d5 	beq.w	8001404 <SE_CallGateService+0x3f8>
 800105a:	2820      	cmp	r0, #32
 800105c:	f000 8211 	beq.w	8001482 <SE_CallGateService+0x476>
        }
        break;
      }
#endif /* KMS_ENABLED */
      /* Unspecified function ID -> Reset */
      NVIC_SystemReset();
 8001060:	f7ff ffc2 	bl	8000fe8 <__NVIC_SystemReset>
  switch (eID)
 8001064:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
 8001068:	f000 81fe 	beq.w	8001468 <SE_CallGateService+0x45c>
 800106c:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
 8001070:	d1f6      	bne.n	8001060 <SE_CallGateService+0x54>

      break;
    }
  }
  if ((e_ret_status == SE_ERROR) && (*peSE_Status == SE_OK))
 8001072:	4b9d      	ldr	r3, [pc, #628]	; (80012e8 <SE_CallGateService+0x2dc>)
 8001074:	6822      	ldr	r2, [r4, #0]
 8001076:	489d      	ldr	r0, [pc, #628]	; (80012ec <SE_CallGateService+0x2e0>)
 8001078:	429a      	cmp	r2, r3
  {
    *peSE_Status = SE_KO;
 800107a:	bf04      	itt	eq
 800107c:	4b9c      	ldreq	r3, [pc, #624]	; (80012f0 <SE_CallGateService+0x2e4>)
 800107e:	6023      	streq	r3, [r4, #0]
  }
  return e_ret_status;
 8001080:	e009      	b.n	8001096 <SE_CallGateService+0x8a>
      IS_SE_LOCKED_SERVICES();
 8001082:	682b      	ldr	r3, [r5, #0]
 8001084:	f1b3 3f55 	cmp.w	r3, #1431655765	; 0x55555555
 8001088:	d1ea      	bne.n	8001060 <SE_CallGateService+0x54>
      SE_SetSystemCoreClock(se_system_core_clock);
 800108a:	6810      	ldr	r0, [r2, #0]
 800108c:	f000 fa88 	bl	80015a0 <SE_SetSystemCoreClock>
      *peSE_Status = SE_OK;
 8001090:	4b95      	ldr	r3, [pc, #596]	; (80012e8 <SE_CallGateService+0x2dc>)
      e_ret_status = SE_SUCCESS;
 8001092:	4898      	ldr	r0, [pc, #608]	; (80012f4 <SE_CallGateService+0x2e8>)
      *peSE_Status = SE_OK;
 8001094:	6023      	str	r3, [r4, #0]
}
 8001096:	b002      	add	sp, #8
 8001098:	e8bd 8f70 	ldmia.w	sp!, {r4, r5, r6, r8, r9, sl, fp, pc}
      IS_SE_LOCKED_SERVICES();
 800109c:	682b      	ldr	r3, [r5, #0]
 800109e:	f1b3 3f55 	cmp.w	r3, #1431655765	; 0x55555555
 80010a2:	d1dd      	bne.n	8001060 <SE_CallGateService+0x54>
      se_FwType = va_arg(arguments, uint32_t);
 80010a4:	e9d2 8900 	ldrd	r8, r9, [r2]
      if (SE_LL_CRC_Config() == SE_ERROR)
 80010a8:	f7ff fcde 	bl	8000a68 <SE_LL_CRC_Config>
 80010ac:	4b8f      	ldr	r3, [pc, #572]	; (80012ec <SE_CallGateService+0x2e0>)
 80010ae:	4298      	cmp	r0, r3
 80010b0:	d0df      	beq.n	8001072 <SE_CallGateService+0x66>
      if (SE_LL_Buffer_in_SBSFU_ram(p_x_se_Metadata, sizeof(*p_x_se_Metadata)) != SE_SUCCESS)
 80010b2:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80010b6:	4640      	mov	r0, r8
 80010b8:	f7ff fd8c 	bl	8000bd4 <SE_LL_Buffer_in_SBSFU_ram>
 80010bc:	4b8d      	ldr	r3, [pc, #564]	; (80012f4 <SE_CallGateService+0x2e8>)
 80010be:	4298      	cmp	r0, r3
 80010c0:	4606      	mov	r6, r0
 80010c2:	d1d6      	bne.n	8001072 <SE_CallGateService+0x66>
      if ((se_FwType != SE_FW_IMAGE_COMPLETE) && (se_FwType != SE_FW_IMAGE_PARTIAL))
 80010c4:	f1b9 0f01 	cmp.w	r9, #1
 80010c8:	d8d3      	bhi.n	8001072 <SE_CallGateService+0x66>
      IS_SE_LOCKED_SERVICES();
 80010ca:	682b      	ldr	r3, [r5, #0]
 80010cc:	f1b3 3f55 	cmp.w	r3, #1431655765	; 0x55555555
 80010d0:	d1c6      	bne.n	8001060 <SE_CallGateService+0x54>
      if (SE_LL_Buffer_in_SBSFU_ram(p_x_se_Metadata, sizeof(*p_x_se_Metadata)) != SE_SUCCESS)
 80010d2:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80010d6:	4640      	mov	r0, r8
 80010d8:	f7ff fd7c 	bl	8000bd4 <SE_LL_Buffer_in_SBSFU_ram>
 80010dc:	42b0      	cmp	r0, r6
 80010de:	d1c8      	bne.n	8001072 <SE_CallGateService+0x66>
      e_ret_status = SE_CRYPTO_Decrypt_Init(p_x_se_Metadata, se_FwType);
 80010e0:	4649      	mov	r1, r9
 80010e2:	4640      	mov	r0, r8
 80010e4:	f7ff faf2 	bl	80006cc <SE_CRYPTO_Decrypt_Init>
  if ((e_ret_status == SE_ERROR) && (*peSE_Status == SE_OK))
 80010e8:	4b80      	ldr	r3, [pc, #512]	; (80012ec <SE_CallGateService+0x2e0>)
 80010ea:	4298      	cmp	r0, r3
 80010ec:	d1d3      	bne.n	8001096 <SE_CallGateService+0x8a>
 80010ee:	e7c0      	b.n	8001072 <SE_CallGateService+0x66>
      IS_SE_LOCKED_SERVICES();
 80010f0:	682b      	ldr	r3, [r5, #0]
 80010f2:	f1b3 3f55 	cmp.w	r3, #1431655765	; 0x55555555
 80010f6:	d1b3      	bne.n	8001060 <SE_CallGateService+0x54>
      input_size = va_arg(arguments, int32_t);
 80010f8:	e9d2 8600 	ldrd	r8, r6, [r2]
      output_size = va_arg(arguments, int32_t *);
 80010fc:	e9d2 9a02 	ldrd	r9, sl, [r2, #8]
      if (SE_LL_CRC_Config() == SE_ERROR)
 8001100:	f7ff fcb2 	bl	8000a68 <SE_LL_CRC_Config>
 8001104:	4b79      	ldr	r3, [pc, #484]	; (80012ec <SE_CallGateService+0x2e0>)
 8001106:	4298      	cmp	r0, r3
 8001108:	d0b3      	beq.n	8001072 <SE_CallGateService+0x66>
      if (input_size <= 0)
 800110a:	2e00      	cmp	r6, #0
 800110c:	ddb1      	ble.n	8001072 <SE_CallGateService+0x66>
      if (SE_LL_Buffer_in_SBSFU_ram(input_buffer, (uint32_t)input_size) != SE_SUCCESS)
 800110e:	4631      	mov	r1, r6
 8001110:	4640      	mov	r0, r8
 8001112:	f7ff fd5f 	bl	8000bd4 <SE_LL_Buffer_in_SBSFU_ram>
 8001116:	4a77      	ldr	r2, [pc, #476]	; (80012f4 <SE_CallGateService+0x2e8>)
 8001118:	4290      	cmp	r0, r2
 800111a:	d1aa      	bne.n	8001072 <SE_CallGateService+0x66>
 800111c:	9001      	str	r0, [sp, #4]
      if (SE_LL_Buffer_in_SBSFU_ram(output_size, sizeof(*output_size)) != SE_SUCCESS)
 800111e:	2104      	movs	r1, #4
 8001120:	4650      	mov	r0, sl
 8001122:	f7ff fd57 	bl	8000bd4 <SE_LL_Buffer_in_SBSFU_ram>
 8001126:	9b01      	ldr	r3, [sp, #4]
 8001128:	4298      	cmp	r0, r3
 800112a:	4683      	mov	fp, r0
 800112c:	d1a1      	bne.n	8001072 <SE_CallGateService+0x66>
      if (SE_LL_Buffer_in_SBSFU_ram(output_buffer, (uint32_t)input_size) != SE_SUCCESS)
 800112e:	4631      	mov	r1, r6
 8001130:	4648      	mov	r0, r9
 8001132:	f7ff fd4f 	bl	8000bd4 <SE_LL_Buffer_in_SBSFU_ram>
 8001136:	4558      	cmp	r0, fp
 8001138:	d19b      	bne.n	8001072 <SE_CallGateService+0x66>
      IS_SE_LOCKED_SERVICES();
 800113a:	682a      	ldr	r2, [r5, #0]
 800113c:	9001      	str	r0, [sp, #4]
 800113e:	f1b2 3f55 	cmp.w	r2, #1431655765	; 0x55555555
 8001142:	d18d      	bne.n	8001060 <SE_CallGateService+0x54>
      if (SE_LL_Buffer_in_SBSFU_ram(input_buffer, (uint32_t)input_size) != SE_SUCCESS)
 8001144:	4631      	mov	r1, r6
 8001146:	4640      	mov	r0, r8
 8001148:	f7ff fd44 	bl	8000bd4 <SE_LL_Buffer_in_SBSFU_ram>
 800114c:	9b01      	ldr	r3, [sp, #4]
 800114e:	4298      	cmp	r0, r3
 8001150:	4683      	mov	fp, r0
 8001152:	d18e      	bne.n	8001072 <SE_CallGateService+0x66>
      if (SE_LL_Buffer_in_SBSFU_ram(output_size, sizeof(*output_size)) != SE_SUCCESS)
 8001154:	2104      	movs	r1, #4
 8001156:	4650      	mov	r0, sl
 8001158:	f7ff fd3c 	bl	8000bd4 <SE_LL_Buffer_in_SBSFU_ram>
 800115c:	4558      	cmp	r0, fp
 800115e:	4605      	mov	r5, r0
 8001160:	d187      	bne.n	8001072 <SE_CallGateService+0x66>
      if (SE_LL_Buffer_in_SBSFU_ram(output_buffer, (uint32_t)input_size) != SE_SUCCESS)
 8001162:	4631      	mov	r1, r6
 8001164:	4648      	mov	r0, r9
 8001166:	f7ff fd35 	bl	8000bd4 <SE_LL_Buffer_in_SBSFU_ram>
 800116a:	42a8      	cmp	r0, r5
 800116c:	d181      	bne.n	8001072 <SE_CallGateService+0x66>
      e_ret_status = SE_CRYPTO_Decrypt_Append(input_buffer, input_size, output_buffer, output_size);
 800116e:	4653      	mov	r3, sl
 8001170:	464a      	mov	r2, r9
 8001172:	4631      	mov	r1, r6
 8001174:	4640      	mov	r0, r8
 8001176:	f7ff facd 	bl	8000714 <SE_CRYPTO_Decrypt_Append>
      break;
 800117a:	e7b5      	b.n	80010e8 <SE_CallGateService+0xdc>
      IS_SE_LOCKED_SERVICES();
 800117c:	682b      	ldr	r3, [r5, #0]
 800117e:	f1b3 3f55 	cmp.w	r3, #1431655765	; 0x55555555
 8001182:	f47f af6d 	bne.w	8001060 <SE_CallGateService+0x54>
      output_size = va_arg(arguments, int32_t *);
 8001186:	e9d2 8900 	ldrd	r8, r9, [r2]
      if (SE_LL_CRC_Config() == SE_ERROR)
 800118a:	f7ff fc6d 	bl	8000a68 <SE_LL_CRC_Config>
 800118e:	4b57      	ldr	r3, [pc, #348]	; (80012ec <SE_CallGateService+0x2e0>)
 8001190:	4298      	cmp	r0, r3
 8001192:	f43f af6e 	beq.w	8001072 <SE_CallGateService+0x66>
      if (SE_LL_Buffer_in_SBSFU_ram(output_size, sizeof(*output_size)) != SE_SUCCESS)
 8001196:	2104      	movs	r1, #4
 8001198:	4648      	mov	r0, r9
 800119a:	f7ff fd1b 	bl	8000bd4 <SE_LL_Buffer_in_SBSFU_ram>
 800119e:	4b55      	ldr	r3, [pc, #340]	; (80012f4 <SE_CallGateService+0x2e8>)
 80011a0:	4298      	cmp	r0, r3
 80011a2:	4682      	mov	sl, r0
 80011a4:	f47f af65 	bne.w	8001072 <SE_CallGateService+0x66>
      if (SE_LL_Buffer_in_SBSFU_ram(output_buffer, (uint32_t)16U) != SE_SUCCESS)
 80011a8:	2110      	movs	r1, #16
 80011aa:	4640      	mov	r0, r8
 80011ac:	f7ff fd12 	bl	8000bd4 <SE_LL_Buffer_in_SBSFU_ram>
 80011b0:	4550      	cmp	r0, sl
 80011b2:	4606      	mov	r6, r0
 80011b4:	f47f af5d 	bne.w	8001072 <SE_CallGateService+0x66>
      IS_SE_LOCKED_SERVICES();
 80011b8:	682b      	ldr	r3, [r5, #0]
 80011ba:	f1b3 3f55 	cmp.w	r3, #1431655765	; 0x55555555
 80011be:	f47f af4f 	bne.w	8001060 <SE_CallGateService+0x54>
      if (SE_LL_Buffer_in_SBSFU_ram(output_size, sizeof(*output_size)) != SE_SUCCESS)
 80011c2:	2104      	movs	r1, #4
 80011c4:	4648      	mov	r0, r9
 80011c6:	f7ff fd05 	bl	8000bd4 <SE_LL_Buffer_in_SBSFU_ram>
 80011ca:	42b0      	cmp	r0, r6
 80011cc:	4605      	mov	r5, r0
 80011ce:	f47f af50 	bne.w	8001072 <SE_CallGateService+0x66>
      if (SE_LL_Buffer_in_SBSFU_ram(output_buffer, (uint32_t)16U) != SE_SUCCESS)
 80011d2:	2110      	movs	r1, #16
 80011d4:	4640      	mov	r0, r8
 80011d6:	f7ff fcfd 	bl	8000bd4 <SE_LL_Buffer_in_SBSFU_ram>
 80011da:	42a8      	cmp	r0, r5
 80011dc:	f47f af49 	bne.w	8001072 <SE_CallGateService+0x66>
      e_ret_status =  SE_CRYPTO_Decrypt_Finish(output_buffer, output_size);
 80011e0:	4649      	mov	r1, r9
 80011e2:	4640      	mov	r0, r8
 80011e4:	f7ff fab0 	bl	8000748 <SE_CRYPTO_Decrypt_Finish>
      break;
 80011e8:	e77e      	b.n	80010e8 <SE_CallGateService+0xdc>
      IS_SE_LOCKED_SERVICES();
 80011ea:	682b      	ldr	r3, [r5, #0]
 80011ec:	f1b3 3f55 	cmp.w	r3, #1431655765	; 0x55555555
 80011f0:	f47f af36 	bne.w	8001060 <SE_CallGateService+0x54>
      se_FwType = va_arg(arguments, uint32_t);
 80011f4:	e9d2 8900 	ldrd	r8, r9, [r2]
      if (SE_LL_CRC_Config() == SE_ERROR)
 80011f8:	f7ff fc36 	bl	8000a68 <SE_LL_CRC_Config>
 80011fc:	4b3b      	ldr	r3, [pc, #236]	; (80012ec <SE_CallGateService+0x2e0>)
 80011fe:	4298      	cmp	r0, r3
 8001200:	f43f af37 	beq.w	8001072 <SE_CallGateService+0x66>
      if (SE_LL_Buffer_in_SBSFU_ram(p_x_se_Metadata, sizeof(*p_x_se_Metadata)) != SE_SUCCESS)
 8001204:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8001208:	4640      	mov	r0, r8
 800120a:	f7ff fce3 	bl	8000bd4 <SE_LL_Buffer_in_SBSFU_ram>
 800120e:	4b39      	ldr	r3, [pc, #228]	; (80012f4 <SE_CallGateService+0x2e8>)
 8001210:	4298      	cmp	r0, r3
 8001212:	4606      	mov	r6, r0
 8001214:	f47f af2d 	bne.w	8001072 <SE_CallGateService+0x66>
      if ((se_FwType != SE_FW_IMAGE_COMPLETE) && (se_FwType != SE_FW_IMAGE_PARTIAL))
 8001218:	f1b9 0f01 	cmp.w	r9, #1
 800121c:	f63f af29 	bhi.w	8001072 <SE_CallGateService+0x66>
      IS_SE_LOCKED_SERVICES();
 8001220:	682b      	ldr	r3, [r5, #0]
 8001222:	f1b3 3f55 	cmp.w	r3, #1431655765	; 0x55555555
 8001226:	f47f af1b 	bne.w	8001060 <SE_CallGateService+0x54>
      if (SE_LL_Buffer_in_SBSFU_ram(p_x_se_Metadata, sizeof(*p_x_se_Metadata)) != SE_SUCCESS)
 800122a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800122e:	4640      	mov	r0, r8
 8001230:	f7ff fcd0 	bl	8000bd4 <SE_LL_Buffer_in_SBSFU_ram>
 8001234:	42b0      	cmp	r0, r6
 8001236:	f47f af1c 	bne.w	8001072 <SE_CallGateService+0x66>
      e_ret_status = SE_CRYPTO_AuthenticateFW_Init(p_x_se_Metadata, se_FwType);
 800123a:	4649      	mov	r1, r9
 800123c:	4640      	mov	r0, r8
 800123e:	f7ff fae7 	bl	8000810 <SE_CRYPTO_AuthenticateFW_Init>
      break;
 8001242:	e751      	b.n	80010e8 <SE_CallGateService+0xdc>
      IS_SE_LOCKED_SERVICES();
 8001244:	682b      	ldr	r3, [r5, #0]
 8001246:	f1b3 3f55 	cmp.w	r3, #1431655765	; 0x55555555
 800124a:	f47f af09 	bne.w	8001060 <SE_CallGateService+0x54>
      input_size = va_arg(arguments, int32_t);
 800124e:	e9d2 8600 	ldrd	r8, r6, [r2]
      output_size = va_arg(arguments, int32_t *);
 8001252:	e9d2 9a02 	ldrd	r9, sl, [r2, #8]
      if (SE_LL_CRC_Config() == SE_ERROR)
 8001256:	f7ff fc07 	bl	8000a68 <SE_LL_CRC_Config>
 800125a:	4b24      	ldr	r3, [pc, #144]	; (80012ec <SE_CallGateService+0x2e0>)
 800125c:	4298      	cmp	r0, r3
 800125e:	f43f af08 	beq.w	8001072 <SE_CallGateService+0x66>
      if (input_size <= 0)
 8001262:	2e00      	cmp	r6, #0
 8001264:	f77f af05 	ble.w	8001072 <SE_CallGateService+0x66>
      if (SE_LL_Buffer_in_SBSFU_ram(input_buffer, (uint32_t)input_size) != SE_SUCCESS)
 8001268:	4631      	mov	r1, r6
 800126a:	4640      	mov	r0, r8
 800126c:	f7ff fcb2 	bl	8000bd4 <SE_LL_Buffer_in_SBSFU_ram>
 8001270:	4a20      	ldr	r2, [pc, #128]	; (80012f4 <SE_CallGateService+0x2e8>)
 8001272:	4290      	cmp	r0, r2
 8001274:	f47f aefd 	bne.w	8001072 <SE_CallGateService+0x66>
 8001278:	9001      	str	r0, [sp, #4]
      if (SE_LL_Buffer_in_SBSFU_ram(output_size, sizeof(*output_size)) != SE_SUCCESS)
 800127a:	2104      	movs	r1, #4
 800127c:	4650      	mov	r0, sl
 800127e:	f7ff fca9 	bl	8000bd4 <SE_LL_Buffer_in_SBSFU_ram>
 8001282:	9b01      	ldr	r3, [sp, #4]
 8001284:	4298      	cmp	r0, r3
 8001286:	4683      	mov	fp, r0
 8001288:	f47f aef3 	bne.w	8001072 <SE_CallGateService+0x66>
      if (SE_LL_Buffer_in_SBSFU_ram(output_buffer, (uint32_t)input_size) != SE_SUCCESS)
 800128c:	4631      	mov	r1, r6
 800128e:	4648      	mov	r0, r9
 8001290:	f7ff fca0 	bl	8000bd4 <SE_LL_Buffer_in_SBSFU_ram>
 8001294:	4558      	cmp	r0, fp
 8001296:	f47f aeec 	bne.w	8001072 <SE_CallGateService+0x66>
      IS_SE_LOCKED_SERVICES();
 800129a:	682a      	ldr	r2, [r5, #0]
 800129c:	9001      	str	r0, [sp, #4]
 800129e:	f1b2 3f55 	cmp.w	r2, #1431655765	; 0x55555555
 80012a2:	f47f aedd 	bne.w	8001060 <SE_CallGateService+0x54>
      if (SE_LL_Buffer_in_SBSFU_ram(input_buffer, (uint32_t)input_size) != SE_SUCCESS)
 80012a6:	4631      	mov	r1, r6
 80012a8:	4640      	mov	r0, r8
 80012aa:	f7ff fc93 	bl	8000bd4 <SE_LL_Buffer_in_SBSFU_ram>
 80012ae:	9b01      	ldr	r3, [sp, #4]
 80012b0:	4298      	cmp	r0, r3
 80012b2:	4683      	mov	fp, r0
 80012b4:	f47f aedd 	bne.w	8001072 <SE_CallGateService+0x66>
      if (SE_LL_Buffer_in_SBSFU_ram(output_size, sizeof(*output_size)) != SE_SUCCESS)
 80012b8:	2104      	movs	r1, #4
 80012ba:	4650      	mov	r0, sl
 80012bc:	f7ff fc8a 	bl	8000bd4 <SE_LL_Buffer_in_SBSFU_ram>
 80012c0:	4558      	cmp	r0, fp
 80012c2:	4605      	mov	r5, r0
 80012c4:	f47f aed5 	bne.w	8001072 <SE_CallGateService+0x66>
      if (SE_LL_Buffer_in_SBSFU_ram(output_buffer, (uint32_t)input_size) != SE_SUCCESS)
 80012c8:	4631      	mov	r1, r6
 80012ca:	4648      	mov	r0, r9
 80012cc:	f7ff fc82 	bl	8000bd4 <SE_LL_Buffer_in_SBSFU_ram>
 80012d0:	42a8      	cmp	r0, r5
 80012d2:	f47f aece 	bne.w	8001072 <SE_CallGateService+0x66>
      e_ret_status = SE_CRYPTO_AuthenticateFW_Append(input_buffer, input_size, output_buffer, output_size);
 80012d6:	4653      	mov	r3, sl
 80012d8:	464a      	mov	r2, r9
 80012da:	4631      	mov	r1, r6
 80012dc:	4640      	mov	r0, r8
 80012de:	f7ff fab1 	bl	8000844 <SE_CRYPTO_AuthenticateFW_Append>
      break;
 80012e2:	e701      	b.n	80010e8 <SE_CallGateService+0xdc>
 80012e4:	20000400 	.word	0x20000400
 80012e8:	0012e223 	.word	0x0012e223
 80012ec:	00018799 	.word	0x00018799
 80012f0:	0013023d 	.word	0x0013023d
 80012f4:	0012310f 	.word	0x0012310f
      IS_SE_LOCKED_SERVICES();
 80012f8:	682b      	ldr	r3, [r5, #0]
 80012fa:	f1b3 3f55 	cmp.w	r3, #1431655765	; 0x55555555
 80012fe:	f47f aeaf 	bne.w	8001060 <SE_CallGateService+0x54>
      output_size = va_arg(arguments, int32_t *);
 8001302:	e9d2 8900 	ldrd	r8, r9, [r2]
      if (SE_LL_CRC_Config() == SE_ERROR)
 8001306:	f7ff fbaf 	bl	8000a68 <SE_LL_CRC_Config>
 800130a:	4b70      	ldr	r3, [pc, #448]	; (80014cc <SE_CallGateService+0x4c0>)
 800130c:	4298      	cmp	r0, r3
 800130e:	f43f aeb0 	beq.w	8001072 <SE_CallGateService+0x66>
      if (SE_LL_Buffer_in_SBSFU_ram(output_size, sizeof(*output_size)) != SE_SUCCESS)
 8001312:	2104      	movs	r1, #4
 8001314:	4648      	mov	r0, r9
 8001316:	f7ff fc5d 	bl	8000bd4 <SE_LL_Buffer_in_SBSFU_ram>
 800131a:	4b6d      	ldr	r3, [pc, #436]	; (80014d0 <SE_CallGateService+0x4c4>)
 800131c:	4298      	cmp	r0, r3
 800131e:	4682      	mov	sl, r0
 8001320:	f47f aea7 	bne.w	8001072 <SE_CallGateService+0x66>
      if (SE_LL_Buffer_in_SBSFU_ram(output_buffer, (uint32_t)16U) != SE_SUCCESS)
 8001324:	2110      	movs	r1, #16
 8001326:	4640      	mov	r0, r8
 8001328:	f7ff fc54 	bl	8000bd4 <SE_LL_Buffer_in_SBSFU_ram>
 800132c:	4550      	cmp	r0, sl
 800132e:	4606      	mov	r6, r0
 8001330:	f47f ae9f 	bne.w	8001072 <SE_CallGateService+0x66>
      IS_SE_LOCKED_SERVICES();
 8001334:	682b      	ldr	r3, [r5, #0]
 8001336:	f1b3 3f55 	cmp.w	r3, #1431655765	; 0x55555555
 800133a:	f47f ae91 	bne.w	8001060 <SE_CallGateService+0x54>
      if (SE_LL_Buffer_in_SBSFU_ram(output_size, sizeof(*output_size)) != SE_SUCCESS)
 800133e:	2104      	movs	r1, #4
 8001340:	4648      	mov	r0, r9
 8001342:	f7ff fc47 	bl	8000bd4 <SE_LL_Buffer_in_SBSFU_ram>
 8001346:	42b0      	cmp	r0, r6
 8001348:	4605      	mov	r5, r0
 800134a:	f47f ae92 	bne.w	8001072 <SE_CallGateService+0x66>
      if (SE_LL_Buffer_in_SBSFU_ram(output_buffer, (uint32_t)16U) != SE_SUCCESS)
 800134e:	2110      	movs	r1, #16
 8001350:	4640      	mov	r0, r8
 8001352:	f7ff fc3f 	bl	8000bd4 <SE_LL_Buffer_in_SBSFU_ram>
 8001356:	42a8      	cmp	r0, r5
 8001358:	f47f ae8b 	bne.w	8001072 <SE_CallGateService+0x66>
      e_ret_status = SE_CRYPTO_AuthenticateFW_Finish(output_buffer, output_size);
 800135c:	4649      	mov	r1, r9
 800135e:	4640      	mov	r0, r8
 8001360:	f7ff fa84 	bl	800086c <SE_CRYPTO_AuthenticateFW_Finish>
      break;
 8001364:	e6c0      	b.n	80010e8 <SE_CallGateService+0xdc>
      IS_SE_LOCKED_SERVICES();
 8001366:	682b      	ldr	r3, [r5, #0]
 8001368:	f1b3 3f55 	cmp.w	r3, #1431655765	; 0x55555555
 800136c:	f47f ae78 	bne.w	8001060 <SE_CallGateService+0x54>
      p_x_se_Metadata = va_arg(arguments, SE_FwRawHeaderTypeDef *);
 8001370:	f8d2 8000 	ldr.w	r8, [r2]
      if (SE_LL_CRC_Config() == SE_ERROR)
 8001374:	f7ff fb78 	bl	8000a68 <SE_LL_CRC_Config>
 8001378:	4b54      	ldr	r3, [pc, #336]	; (80014cc <SE_CallGateService+0x4c0>)
 800137a:	4298      	cmp	r0, r3
 800137c:	f43f ae79 	beq.w	8001072 <SE_CallGateService+0x66>
      if (SE_LL_Buffer_in_SBSFU_ram(p_x_se_Metadata, sizeof(*p_x_se_Metadata)) != SE_SUCCESS)
 8001380:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8001384:	4640      	mov	r0, r8
 8001386:	f7ff fc25 	bl	8000bd4 <SE_LL_Buffer_in_SBSFU_ram>
 800138a:	4b51      	ldr	r3, [pc, #324]	; (80014d0 <SE_CallGateService+0x4c4>)
 800138c:	4298      	cmp	r0, r3
 800138e:	4606      	mov	r6, r0
 8001390:	f47f ae6f 	bne.w	8001072 <SE_CallGateService+0x66>
      IS_SE_LOCKED_SERVICES();
 8001394:	682b      	ldr	r3, [r5, #0]
 8001396:	f1b3 3f55 	cmp.w	r3, #1431655765	; 0x55555555
 800139a:	f47f ae61 	bne.w	8001060 <SE_CallGateService+0x54>
      if (SE_LL_Buffer_in_SBSFU_ram(p_x_se_Metadata, sizeof(*p_x_se_Metadata)) != SE_SUCCESS)
 800139e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80013a2:	4640      	mov	r0, r8
 80013a4:	f7ff fc16 	bl	8000bd4 <SE_LL_Buffer_in_SBSFU_ram>
 80013a8:	42b0      	cmp	r0, r6
 80013aa:	f47f ae62 	bne.w	8001072 <SE_CallGateService+0x66>
      e_ret_status = SE_CRYPTO_Authenticate_Metadata(p_x_se_Metadata);
 80013ae:	4640      	mov	r0, r8
 80013b0:	f7ff fa70 	bl	8000894 <SE_CRYPTO_Authenticate_Metadata>
      break;
 80013b4:	e698      	b.n	80010e8 <SE_CallGateService+0xdc>
      IS_SE_LOCKED_SERVICES();
 80013b6:	f8df b11c 	ldr.w	fp, [pc, #284]	; 80014d4 <SE_CallGateService+0x4c8>
 80013ba:	f8db 3000 	ldr.w	r3, [fp]
 80013be:	f1b3 3f55 	cmp.w	r3, #1431655765	; 0x55555555
 80013c2:	f47f ae4d 	bne.w	8001060 <SE_CallGateService+0x54>
      p_source = va_arg(arguments, const uint8_t *);
 80013c6:	e9d2 6900 	ldrd	r6, r9, [r2]
      length = va_arg(arguments, uint32_t);
 80013ca:	f8d2 a008 	ldr.w	sl, [r2, #8]
      if (SE_LL_Buffer_in_SBSFU_ram(p_destination, length) != SE_SUCCESS)
 80013ce:	4630      	mov	r0, r6
 80013d0:	4651      	mov	r1, sl
 80013d2:	f7ff fbff 	bl	8000bd4 <SE_LL_Buffer_in_SBSFU_ram>
 80013d6:	4540      	cmp	r0, r8
 80013d8:	4605      	mov	r5, r0
 80013da:	f47f ae4a 	bne.w	8001072 <SE_CallGateService+0x66>
      IS_SE_LOCKED_SERVICES();
 80013de:	f8db 3000 	ldr.w	r3, [fp]
 80013e2:	f1b3 3f55 	cmp.w	r3, #1431655765	; 0x55555555
 80013e6:	f47f ae3b 	bne.w	8001060 <SE_CallGateService+0x54>
      if (SE_LL_Buffer_in_SBSFU_ram(p_destination, length) != SE_SUCCESS)
 80013ea:	4651      	mov	r1, sl
 80013ec:	4630      	mov	r0, r6
 80013ee:	f7ff fbf1 	bl	8000bd4 <SE_LL_Buffer_in_SBSFU_ram>
 80013f2:	42a8      	cmp	r0, r5
 80013f4:	f47f ae3d 	bne.w	8001072 <SE_CallGateService+0x66>
      e_ret_status = SE_IMG_Read(p_destination, p_source, length);
 80013f8:	4652      	mov	r2, sl
 80013fa:	4649      	mov	r1, r9
 80013fc:	4630      	mov	r0, r6
 80013fe:	f000 f883 	bl	8001508 <SE_IMG_Read>
      break;
 8001402:	e671      	b.n	80010e8 <SE_CallGateService+0xdc>
      IS_SE_LOCKED_SERVICES();
 8001404:	f8df b0cc 	ldr.w	fp, [pc, #204]	; 80014d4 <SE_CallGateService+0x4c8>
 8001408:	f8db 3000 	ldr.w	r3, [fp]
 800140c:	f1b3 3f55 	cmp.w	r3, #1431655765	; 0x55555555
 8001410:	f47f ae26 	bne.w	8001060 <SE_CallGateService+0x54>
      p_source = va_arg(arguments, const uint8_t *);
 8001414:	e9d2 9600 	ldrd	r9, r6, [r2]
      length = va_arg(arguments, uint32_t);
 8001418:	f8d2 a008 	ldr.w	sl, [r2, #8]
      if (SE_LL_Buffer_in_SBSFU_ram(p_source, length) != SE_SUCCESS)
 800141c:	4630      	mov	r0, r6
 800141e:	4651      	mov	r1, sl
 8001420:	f7ff fbd8 	bl	8000bd4 <SE_LL_Buffer_in_SBSFU_ram>
 8001424:	4540      	cmp	r0, r8
 8001426:	4605      	mov	r5, r0
 8001428:	f47f ae23 	bne.w	8001072 <SE_CallGateService+0x66>
      IS_SE_LOCKED_SERVICES();
 800142c:	f8db 3000 	ldr.w	r3, [fp]
 8001430:	f1b3 3f55 	cmp.w	r3, #1431655765	; 0x55555555
 8001434:	f47f ae14 	bne.w	8001060 <SE_CallGateService+0x54>
      if (SE_LL_Buffer_in_SBSFU_ram(p_source, length) != SE_SUCCESS)
 8001438:	4651      	mov	r1, sl
 800143a:	4630      	mov	r0, r6
 800143c:	f7ff fbca 	bl	8000bd4 <SE_LL_Buffer_in_SBSFU_ram>
 8001440:	42a8      	cmp	r0, r5
 8001442:	f47f ae16 	bne.w	8001072 <SE_CallGateService+0x66>
      e_ret_status = SE_IMG_Write(p_destination, p_source, length);
 8001446:	4652      	mov	r2, sl
 8001448:	4631      	mov	r1, r6
 800144a:	4648      	mov	r0, r9
 800144c:	f000 f846 	bl	80014dc <SE_IMG_Write>
      break;
 8001450:	e64a      	b.n	80010e8 <SE_CallGateService+0xdc>
      IS_SE_LOCKED_SERVICES();
 8001452:	4b20      	ldr	r3, [pc, #128]	; (80014d4 <SE_CallGateService+0x4c8>)
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	f1b3 3f55 	cmp.w	r3, #1431655765	; 0x55555555
 800145a:	f47f ae01 	bne.w	8001060 <SE_CallGateService+0x54>
      e_ret_status = SE_IMG_Erase(p_destination, length);
 800145e:	e9d2 0100 	ldrd	r0, r1, [r2]
 8001462:	f000 f867 	bl	8001534 <SE_IMG_Erase>
      break;
 8001466:	e63f      	b.n	80010e8 <SE_CallGateService+0xdc>
      SE_LockRestrictedServices = SE_LOCKED;
 8001468:	4d1a      	ldr	r5, [pc, #104]	; (80014d4 <SE_CallGateService+0x4c8>)
 800146a:	4e1b      	ldr	r6, [pc, #108]	; (80014d8 <SE_CallGateService+0x4cc>)
      SE_LL_CORE_Cleanup();
 800146c:	f7ff fbe6 	bl	8000c3c <SE_LL_CORE_Cleanup>
      SE_LockRestrictedServices = SE_LOCKED;
 8001470:	602e      	str	r6, [r5, #0]
      if (SE_LL_Lock_Keys() != SE_SUCCESS)
 8001472:	f7ff fbe5 	bl	8000c40 <SE_LL_Lock_Keys>
 8001476:	4b16      	ldr	r3, [pc, #88]	; (80014d0 <SE_CallGateService+0x4c4>)
 8001478:	4298      	cmp	r0, r3
 800147a:	f47f adfa 	bne.w	8001072 <SE_CallGateService+0x66>
      SE_LockRestrictedServices = SE_LOCKED;
 800147e:	602e      	str	r6, [r5, #0]
  if ((e_ret_status == SE_ERROR) && (*peSE_Status == SE_OK))
 8001480:	e609      	b.n	8001096 <SE_CallGateService+0x8a>
      p_FwInfo = va_arg(arguments, SE_APP_ActiveFwInfo_t *);
 8001482:	e9d2 9500 	ldrd	r9, r5, [r2]
      if (SE_LL_Buffer_in_ram((void *)p_FwInfo, sizeof(*p_FwInfo)) != SE_SUCCESS)
 8001486:	2108      	movs	r1, #8
 8001488:	4628      	mov	r0, r5
 800148a:	f7ff fb8d 	bl	8000ba8 <SE_LL_Buffer_in_ram>
 800148e:	4540      	cmp	r0, r8
 8001490:	4606      	mov	r6, r0
 8001492:	f47f adee 	bne.w	8001072 <SE_CallGateService+0x66>
      if (SE_LL_Buffer_part_of_SE_ram((void *)p_FwInfo, sizeof(*p_FwInfo)) == SE_SUCCESS)
 8001496:	2108      	movs	r1, #8
 8001498:	4628      	mov	r0, r5
 800149a:	f7ff fbb3 	bl	8000c04 <SE_LL_Buffer_part_of_SE_ram>
 800149e:	42b0      	cmp	r0, r6
 80014a0:	f43f ade7 	beq.w	8001072 <SE_CallGateService+0x66>
      if (SE_LL_Buffer_in_ram((void *)p_FwInfo, sizeof(*p_FwInfo)) != SE_SUCCESS)
 80014a4:	2108      	movs	r1, #8
 80014a6:	4628      	mov	r0, r5
 80014a8:	f7ff fb7e 	bl	8000ba8 <SE_LL_Buffer_in_ram>
 80014ac:	42b0      	cmp	r0, r6
 80014ae:	4680      	mov	r8, r0
 80014b0:	f47f addf 	bne.w	8001072 <SE_CallGateService+0x66>
      if (SE_LL_Buffer_part_of_SE_ram((void *)p_FwInfo, sizeof(*p_FwInfo)) == SE_SUCCESS)
 80014b4:	2108      	movs	r1, #8
 80014b6:	4628      	mov	r0, r5
 80014b8:	f7ff fba4 	bl	8000c04 <SE_LL_Buffer_part_of_SE_ram>
 80014bc:	4540      	cmp	r0, r8
 80014be:	f43f add8 	beq.w	8001072 <SE_CallGateService+0x66>
      e_ret_status = SE_APPLI_GetActiveFwInfo(slot_number, p_FwInfo);
 80014c2:	4629      	mov	r1, r5
 80014c4:	4648      	mov	r0, r9
 80014c6:	f000 f84d 	bl	8001564 <SE_APPLI_GetActiveFwInfo>
      break;
 80014ca:	e60d      	b.n	80010e8 <SE_CallGateService+0xdc>
 80014cc:	00018799 	.word	0x00018799
 80014d0:	0012310f 	.word	0x0012310f
 80014d4:	20000400 	.word	0x20000400
 80014d8:	7aaaaaaa 	.word	0x7aaaaaaa

080014dc <SE_IMG_Write>:
  * @param  Length number of bytes to be written
  * @retval SE_SUCCESS if successful, otherwise SE_ERROR
  */

SE_ErrorStatus SE_IMG_Write(uint8_t *pDestination, const uint8_t *pSource, uint32_t Length)
{
 80014dc:	b430      	push	{r4, r5}

  /* Is destination area part of 1 of the firmware image headers ?
     Headers are located inside protected memory   */
  for (i = 0U; i < SFU_NB_MAX_ACTIVE_IMAGE; i++)
  {
    if ((areabegin >= SlotHeaderAdd[SLOT_ACTIVE_1 + i]) &&
 80014de:	4c08      	ldr	r4, [pc, #32]	; (8001500 <SE_IMG_Write+0x24>)
 80014e0:	6864      	ldr	r4, [r4, #4]
  uint32_t areaend = areabegin + Length - 1U;
 80014e2:	1e53      	subs	r3, r2, #1
    if ((areabegin >= SlotHeaderAdd[SLOT_ACTIVE_1 + i]) &&
 80014e4:	4284      	cmp	r4, r0
  uint32_t areaend = areabegin + Length - 1U;
 80014e6:	4403      	add	r3, r0
    if ((areabegin >= SlotHeaderAdd[SLOT_ACTIVE_1 + i]) &&
 80014e8:	d803      	bhi.n	80014f2 <SE_IMG_Write+0x16>
        (areaend < (SlotHeaderAdd[SLOT_ACTIVE_1 + i] + SFU_IMG_IMAGE_OFFSET)))
 80014ea:	f504 7400 	add.w	r4, r4, #512	; 0x200
    if ((areabegin >= SlotHeaderAdd[SLOT_ACTIVE_1 + i]) &&
 80014ee:	429c      	cmp	r4, r3
 80014f0:	d802      	bhi.n	80014f8 <SE_IMG_Write+0x1c>
    ret = SE_LL_FLASH_Write(pDestination, pSource, Length);
  }
  else
  {
    /* Abnormal case: this primitive should not be used to access this address */
    ret = SE_ERROR;
 80014f2:	4804      	ldr	r0, [pc, #16]	; (8001504 <SE_IMG_Write+0x28>)
  }
  return ret;
}
 80014f4:	bc30      	pop	{r4, r5}
 80014f6:	4770      	bx	lr
 80014f8:	bc30      	pop	{r4, r5}
    ret = SE_LL_FLASH_Write(pDestination, pSource, Length);
 80014fa:	f7ff bb03 	b.w	8000b04 <SE_LL_FLASH_Write>
 80014fe:	bf00      	nop
 8001500:	08004544 	.word	0x08004544
 8001504:	00018799 	.word	0x00018799

08001508 <SE_IMG_Read>:
  * @param  Length number of bytes to be read
  * @retval SE_SUCCESS if successful, otherwise SE_ERROR
  */

SE_ErrorStatus SE_IMG_Read(uint8_t *pDestination, const uint8_t *pSource, uint32_t Length)
{
 8001508:	b430      	push	{r4, r5}

  /* Is destination area part of 1 of the firmware image headers ?
     Headers are located inside protected memory   */
  for (i = 0U; i < SFU_NB_MAX_ACTIVE_IMAGE; i++)
  {
    if ((areabegin >= SlotHeaderAdd[SLOT_ACTIVE_1 + i]) &&
 800150a:	4c08      	ldr	r4, [pc, #32]	; (800152c <SE_IMG_Read+0x24>)
 800150c:	6864      	ldr	r4, [r4, #4]
  uint32_t areaend = areabegin + Length - 1U;
 800150e:	1e53      	subs	r3, r2, #1
    if ((areabegin >= SlotHeaderAdd[SLOT_ACTIVE_1 + i]) &&
 8001510:	428c      	cmp	r4, r1
  uint32_t areaend = areabegin + Length - 1U;
 8001512:	440b      	add	r3, r1
    if ((areabegin >= SlotHeaderAdd[SLOT_ACTIVE_1 + i]) &&
 8001514:	d803      	bhi.n	800151e <SE_IMG_Read+0x16>
        (areaend < (SlotHeaderAdd[SLOT_ACTIVE_1 + i] + SFU_IMG_IMAGE_OFFSET)))
 8001516:	f504 7400 	add.w	r4, r4, #512	; 0x200
    if ((areabegin >= SlotHeaderAdd[SLOT_ACTIVE_1 + i]) &&
 800151a:	429c      	cmp	r4, r3
 800151c:	d802      	bhi.n	8001524 <SE_IMG_Read+0x1c>
    ret = SE_LL_FLASH_Read(pDestination, pSource, Length);
  }
  else
  {
    /* Abnormal case: this primitive should not be used to access this address */
    ret = SE_ERROR;
 800151e:	4804      	ldr	r0, [pc, #16]	; (8001530 <SE_IMG_Read+0x28>)
  }
  return ret;
}
 8001520:	bc30      	pop	{r4, r5}
 8001522:	4770      	bx	lr
 8001524:	bc30      	pop	{r4, r5}
    ret = SE_LL_FLASH_Read(pDestination, pSource, Length);
 8001526:	f7ff bb19 	b.w	8000b5c <SE_LL_FLASH_Read>
 800152a:	bf00      	nop
 800152c:	08004544 	.word	0x08004544
 8001530:	00018799 	.word	0x00018799

08001534 <SE_IMG_Erase>:

  /* Is destination area part of 1 of the firmware image headers ?
     Headers are located inside protected memory   */
  for (i = 0U; i < SFU_NB_MAX_ACTIVE_IMAGE; i++)
  {
    if ((areabegin >= SlotHeaderAdd[SLOT_ACTIVE_1 + i]) &&
 8001534:	4a09      	ldr	r2, [pc, #36]	; (800155c <SE_IMG_Erase+0x28>)
 8001536:	6852      	ldr	r2, [r2, #4]
  uint32_t areaend = areabegin + Length - 1U;
 8001538:	1e4b      	subs	r3, r1, #1
    if ((areabegin >= SlotHeaderAdd[SLOT_ACTIVE_1 + i]) &&
 800153a:	4282      	cmp	r2, r0
{
 800153c:	b410      	push	{r4}
  uint32_t areaend = areabegin + Length - 1U;
 800153e:	4403      	add	r3, r0
    if ((areabegin >= SlotHeaderAdd[SLOT_ACTIVE_1 + i]) &&
 8001540:	d803      	bhi.n	800154a <SE_IMG_Erase+0x16>
        (areaend < (SlotHeaderAdd[SLOT_ACTIVE_1 + i] + SFU_IMG_IMAGE_OFFSET)))
 8001542:	f502 7200 	add.w	r2, r2, #512	; 0x200
    if ((areabegin >= SlotHeaderAdd[SLOT_ACTIVE_1 + i]) &&
 8001546:	429a      	cmp	r2, r3
 8001548:	d803      	bhi.n	8001552 <SE_IMG_Erase+0x1e>
    ret = SE_LL_FLASH_Erase(pDestination, Length);
  }
  else
  {
    /* Abnormal case: this primitive should not be used to access this address */
    ret = SE_ERROR;
 800154a:	4805      	ldr	r0, [pc, #20]	; (8001560 <SE_IMG_Erase+0x2c>)
  }
  return ret;
}
 800154c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001550:	4770      	bx	lr
 8001552:	f85d 4b04 	ldr.w	r4, [sp], #4
    ret = SE_LL_FLASH_Erase(pDestination, Length);
 8001556:	f7ff ba9d 	b.w	8000a94 <SE_LL_FLASH_Erase>
 800155a:	bf00      	nop
 800155c:	08004544 	.word	0x08004544
 8001560:	00018799 	.word	0x00018799

08001564 <SE_APPLI_GetActiveFwInfo>:
  * @param  SlotNumber index of the slot in the list
  * @param p_FwInfo Active Firmware Info structure that will be filled.
  * @retval SE_ErrorStatus SE_SUCCESS if successful, SE_ERROR otherwise.
  */
SE_ErrorStatus SE_APPLI_GetActiveFwInfo(uint32_t SlotNumber, SE_APP_ActiveFwInfo_t *p_FwInfo)
{
 8001564:	b510      	push	{r4, lr}
  SE_ErrorStatus e_ret_status;
  uint8_t buffer[SE_FW_HEADER_TOT_LEN];     /* to read FW metadata from FLASH */
  SE_FwRawHeaderTypeDef *pfw_image_header;  /* FW metadata */

  /* Check the pointer allocation */
  if (NULL == p_FwInfo)
 8001566:	460c      	mov	r4, r1
{
 8001568:	b0d0      	sub	sp, #320	; 0x140
  if (NULL == p_FwInfo)
 800156a:	b199      	cbz	r1, 8001594 <SE_APPLI_GetActiveFwInfo+0x30>
  {
    return SE_ERROR;
  }

  /* Check Slot_Number value */
  if (SlotNumber > SFU_NB_MAX_ACTIVE_IMAGE)
 800156c:	2801      	cmp	r0, #1
 800156e:	d811      	bhi.n	8001594 <SE_APPLI_GetActiveFwInfo+0x30>
    return SE_ERROR;
  }
  /*
   * The Firmware Information is available in the header of the active slot.
   */
  e_ret_status = SE_LL_FLASH_Read(buffer, (uint8_t *) SlotHeaderAdd[SlotNumber], sizeof(buffer));
 8001570:	4b09      	ldr	r3, [pc, #36]	; (8001598 <SE_APPLI_GetActiveFwInfo+0x34>)
 8001572:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8001576:	f853 1020 	ldr.w	r1, [r3, r0, lsl #2]
 800157a:	4668      	mov	r0, sp
 800157c:	f7ff faee 	bl	8000b5c <SE_LL_FLASH_Read>
  if (e_ret_status != SE_ERROR)
 8001580:	4b06      	ldr	r3, [pc, #24]	; (800159c <SE_APPLI_GetActiveFwInfo+0x38>)
 8001582:	4298      	cmp	r0, r3
 8001584:	d004      	beq.n	8001590 <SE_APPLI_GetActiveFwInfo+0x2c>

    /*
     * We do not check the header validity.
     * We just copy the information.
     */
    p_FwInfo->ActiveFwVersion = pfw_image_header->FwVersion;
 8001586:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 800158a:	8023      	strh	r3, [r4, #0]
    p_FwInfo->ActiveFwSize = pfw_image_header->FwSize;
 800158c:	9b02      	ldr	r3, [sp, #8]
 800158e:	6063      	str	r3, [r4, #4]
  }

  return e_ret_status;
}
 8001590:	b050      	add	sp, #320	; 0x140
 8001592:	bd10      	pop	{r4, pc}
    return SE_ERROR;
 8001594:	4801      	ldr	r0, [pc, #4]	; (800159c <SE_APPLI_GetActiveFwInfo+0x38>)
 8001596:	e7fb      	b.n	8001590 <SE_APPLI_GetActiveFwInfo+0x2c>
 8001598:	08004544 	.word	0x08004544
 800159c:	00018799 	.word	0x00018799

080015a0 <SE_SetSystemCoreClock>:
  * @param uSystemCoreClock Secure Engine SystemCoreClock variable.
  * @retval None.
  */
void SE_SetSystemCoreClock(uint32_t uSystemCoreClock)
{
  m_uSE_SystemCoreClock = uSystemCoreClock;
 80015a0:	4b01      	ldr	r3, [pc, #4]	; (80015a8 <SE_SetSystemCoreClock+0x8>)
 80015a2:	6018      	str	r0, [r3, #0]
}
 80015a4:	4770      	bx	lr
 80015a6:	bf00      	nop
 80015a8:	20000e28 	.word	0x20000e28

080015ac <HAL_GetTick>:
  static uint32_t t1 = 0U, tdelta = 0U;
  uint32_t t2;

  t2 =  SysTick->VAL;

  if (t2 <= t1)
 80015ac:	4a0e      	ldr	r2, [pc, #56]	; (80015e8 <HAL_GetTick+0x3c>)
  t2 =  SysTick->VAL;
 80015ae:	f04f 20e0 	mov.w	r0, #3758153728	; 0xe000e000
{
 80015b2:	b510      	push	{r4, lr}
  {
    tdelta += t1 - t2;
 80015b4:	e9d2 3401 	ldrd	r3, r4, [r2, #4]
  t2 =  SysTick->VAL;
 80015b8:	6981      	ldr	r1, [r0, #24]
  if (t2 <= t1)
 80015ba:	428b      	cmp	r3, r1
  }
  else
  {
    tdelta += t1 + SysTick->LOAD - t2;
 80015bc:	bf38      	it	cc
 80015be:	6940      	ldrcc	r0, [r0, #20]
 80015c0:	4423      	add	r3, r4
 80015c2:	bf38      	it	cc
 80015c4:	181b      	addcc	r3, r3, r0
 80015c6:	1a5b      	subs	r3, r3, r1
  }

  if (tdelta > (m_uSE_SystemCoreClock / 1000U))
 80015c8:	6810      	ldr	r0, [r2, #0]
 80015ca:	6093      	str	r3, [r2, #8]
 80015cc:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
 80015d0:	fbb0 f0f4 	udiv	r0, r0, r4
 80015d4:	4298      	cmp	r0, r3
 80015d6:	d204      	bcs.n	80015e2 <HAL_GetTick+0x36>
  {
    tdelta = 0U;
    m_uTick ++;
 80015d8:	68d3      	ldr	r3, [r2, #12]
    tdelta = 0U;
 80015da:	2000      	movs	r0, #0
    m_uTick ++;
 80015dc:	3301      	adds	r3, #1
    tdelta = 0U;
 80015de:	6090      	str	r0, [r2, #8]
    m_uTick ++;
 80015e0:	60d3      	str	r3, [r2, #12]
  }

  t1 = t2;
  return m_uTick;
}
 80015e2:	68d0      	ldr	r0, [r2, #12]
  t1 = t2;
 80015e4:	6051      	str	r1, [r2, #4]
}
 80015e6:	bd10      	pop	{r4, pc}
 80015e8:	20000e28 	.word	0x20000e28

080015ec <AES_keyschedule_enc_LL>:
 80015ec:	b570      	push	{r4, r5, r6, lr}
 80015ee:	1092      	asrs	r2, r2, #2
 80015f0:	2300      	movs	r3, #0
 80015f2:	4293      	cmp	r3, r2
 80015f4:	da05      	bge.n	8001602 <AES_keyschedule_enc_LL+0x16>
 80015f6:	f850 4023 	ldr.w	r4, [r0, r3, lsl #2]
 80015fa:	f841 4023 	str.w	r4, [r1, r3, lsl #2]
 80015fe:	3301      	adds	r3, #1
 8001600:	e7f7      	b.n	80015f2 <AES_keyschedule_enc_LL+0x6>
 8001602:	2a06      	cmp	r2, #6
 8001604:	d02e      	beq.n	8001664 <AES_keyschedule_enc_LL+0x78>
 8001606:	2a08      	cmp	r2, #8
 8001608:	d05c      	beq.n	80016c4 <AES_keyschedule_enc_LL+0xd8>
 800160a:	2a04      	cmp	r2, #4
 800160c:	f040 80a3 	bne.w	8001756 <AES_keyschedule_enc_LL+0x16a>
 8001610:	2200      	movs	r2, #0
 8001612:	4851      	ldr	r0, [pc, #324]	; (8001758 <AES_keyschedule_enc_LL+0x16c>)
 8001614:	68cb      	ldr	r3, [r1, #12]
 8001616:	5815      	ldr	r5, [r2, r0]
 8001618:	6808      	ldr	r0, [r1, #0]
 800161a:	b2dc      	uxtb	r4, r3
 800161c:	4045      	eors	r5, r0
 800161e:	484f      	ldr	r0, [pc, #316]	; (800175c <AES_keyschedule_enc_LL+0x170>)
 8001620:	5d06      	ldrb	r6, [r0, r4]
 8001622:	0e1c      	lsrs	r4, r3, #24
 8001624:	3204      	adds	r2, #4
 8001626:	5d04      	ldrb	r4, [r0, r4]
 8001628:	ea44 2406 	orr.w	r4, r4, r6, lsl #8
 800162c:	f3c3 4607 	ubfx	r6, r3, #16, #8
 8001630:	2a28      	cmp	r2, #40	; 0x28
 8001632:	5d86      	ldrb	r6, [r0, r6]
 8001634:	ea44 6406 	orr.w	r4, r4, r6, lsl #24
 8001638:	f3c3 2607 	ubfx	r6, r3, #8, #8
 800163c:	5d80      	ldrb	r0, [r0, r6]
 800163e:	ea44 4400 	orr.w	r4, r4, r0, lsl #16
 8001642:	ea85 0004 	eor.w	r0, r5, r4
 8001646:	684c      	ldr	r4, [r1, #4]
 8001648:	6108      	str	r0, [r1, #16]
 800164a:	ea80 0004 	eor.w	r0, r0, r4
 800164e:	688c      	ldr	r4, [r1, #8]
 8001650:	6148      	str	r0, [r1, #20]
 8001652:	ea80 0004 	eor.w	r0, r0, r4
 8001656:	ea80 0303 	eor.w	r3, r0, r3
 800165a:	6188      	str	r0, [r1, #24]
 800165c:	61cb      	str	r3, [r1, #28]
 800165e:	d07a      	beq.n	8001756 <AES_keyschedule_enc_LL+0x16a>
 8001660:	3110      	adds	r1, #16
 8001662:	e7d6      	b.n	8001612 <AES_keyschedule_enc_LL+0x26>
 8001664:	2200      	movs	r2, #0
 8001666:	4b3c      	ldr	r3, [pc, #240]	; (8001758 <AES_keyschedule_enc_LL+0x16c>)
 8001668:	6948      	ldr	r0, [r1, #20]
 800166a:	3201      	adds	r2, #1
 800166c:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8001670:	b2c5      	uxtb	r5, r0
 8001672:	f853 4c04 	ldr.w	r4, [r3, #-4]
 8001676:	680b      	ldr	r3, [r1, #0]
 8001678:	405c      	eors	r4, r3
 800167a:	4b38      	ldr	r3, [pc, #224]	; (800175c <AES_keyschedule_enc_LL+0x170>)
 800167c:	5d5e      	ldrb	r6, [r3, r5]
 800167e:	0e05      	lsrs	r5, r0, #24
 8001680:	5d5d      	ldrb	r5, [r3, r5]
 8001682:	ea45 2506 	orr.w	r5, r5, r6, lsl #8
 8001686:	f3c0 4607 	ubfx	r6, r0, #16, #8
 800168a:	f3c0 2007 	ubfx	r0, r0, #8, #8
 800168e:	5d9e      	ldrb	r6, [r3, r6]
 8001690:	5c18      	ldrb	r0, [r3, r0]
 8001692:	ea45 6506 	orr.w	r5, r5, r6, lsl #24
 8001696:	ea45 4000 	orr.w	r0, r5, r0, lsl #16
 800169a:	ea84 0300 	eor.w	r3, r4, r0
 800169e:	618b      	str	r3, [r1, #24]
 80016a0:	2001      	movs	r0, #1
 80016a2:	460b      	mov	r3, r1
 80016a4:	685d      	ldr	r5, [r3, #4]
 80016a6:	699c      	ldr	r4, [r3, #24]
 80016a8:	2803      	cmp	r0, #3
 80016aa:	ea85 0404 	eor.w	r4, r5, r4
 80016ae:	61dc      	str	r4, [r3, #28]
 80016b0:	d101      	bne.n	80016b6 <AES_keyschedule_enc_LL+0xca>
 80016b2:	2a07      	cmp	r2, #7
 80016b4:	dc4f      	bgt.n	8001756 <AES_keyschedule_enc_LL+0x16a>
 80016b6:	3001      	adds	r0, #1
 80016b8:	2806      	cmp	r0, #6
 80016ba:	f103 0304 	add.w	r3, r3, #4
 80016be:	d1f1      	bne.n	80016a4 <AES_keyschedule_enc_LL+0xb8>
 80016c0:	3118      	adds	r1, #24
 80016c2:	e7d0      	b.n	8001666 <AES_keyschedule_enc_LL+0x7a>
 80016c4:	2400      	movs	r4, #0
 80016c6:	4b24      	ldr	r3, [pc, #144]	; (8001758 <AES_keyschedule_enc_LL+0x16c>)
 80016c8:	69ca      	ldr	r2, [r1, #28]
 80016ca:	58e5      	ldr	r5, [r4, r3]
 80016cc:	680b      	ldr	r3, [r1, #0]
 80016ce:	b2d0      	uxtb	r0, r2
 80016d0:	405d      	eors	r5, r3
 80016d2:	4b22      	ldr	r3, [pc, #136]	; (800175c <AES_keyschedule_enc_LL+0x170>)
 80016d4:	5c1e      	ldrb	r6, [r3, r0]
 80016d6:	0e10      	lsrs	r0, r2, #24
 80016d8:	3404      	adds	r4, #4
 80016da:	5c18      	ldrb	r0, [r3, r0]
 80016dc:	ea40 2006 	orr.w	r0, r0, r6, lsl #8
 80016e0:	f3c2 4607 	ubfx	r6, r2, #16, #8
 80016e4:	2c1c      	cmp	r4, #28
 80016e6:	5d9e      	ldrb	r6, [r3, r6]
 80016e8:	ea40 6006 	orr.w	r0, r0, r6, lsl #24
 80016ec:	f3c2 2607 	ubfx	r6, r2, #8, #8
 80016f0:	5d9e      	ldrb	r6, [r3, r6]
 80016f2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80016f6:	ea85 0000 	eor.w	r0, r5, r0
 80016fa:	684d      	ldr	r5, [r1, #4]
 80016fc:	6208      	str	r0, [r1, #32]
 80016fe:	ea80 0005 	eor.w	r0, r0, r5
 8001702:	688d      	ldr	r5, [r1, #8]
 8001704:	6248      	str	r0, [r1, #36]	; 0x24
 8001706:	ea80 0005 	eor.w	r0, r0, r5
 800170a:	68cd      	ldr	r5, [r1, #12]
 800170c:	6288      	str	r0, [r1, #40]	; 0x28
 800170e:	ea80 0005 	eor.w	r0, r0, r5
 8001712:	62c8      	str	r0, [r1, #44]	; 0x2c
 8001714:	d01f      	beq.n	8001756 <AES_keyschedule_enc_LL+0x16a>
 8001716:	0e05      	lsrs	r5, r0, #24
 8001718:	3120      	adds	r1, #32
 800171a:	5d5e      	ldrb	r6, [r3, r5]
 800171c:	b2c5      	uxtb	r5, r0
 800171e:	5d5d      	ldrb	r5, [r3, r5]
 8001720:	ea45 6506 	orr.w	r5, r5, r6, lsl #24
 8001724:	f3c0 4607 	ubfx	r6, r0, #16, #8
 8001728:	f3c0 2007 	ubfx	r0, r0, #8, #8
 800172c:	5d9e      	ldrb	r6, [r3, r6]
 800172e:	5c1b      	ldrb	r3, [r3, r0]
 8001730:	f851 0c10 	ldr.w	r0, [r1, #-16]
 8001734:	ea45 4506 	orr.w	r5, r5, r6, lsl #16
 8001738:	ea45 2303 	orr.w	r3, r5, r3, lsl #8
 800173c:	4043      	eors	r3, r0
 800173e:	f851 0c0c 	ldr.w	r0, [r1, #-12]
 8001742:	610b      	str	r3, [r1, #16]
 8001744:	4043      	eors	r3, r0
 8001746:	f851 0c08 	ldr.w	r0, [r1, #-8]
 800174a:	614b      	str	r3, [r1, #20]
 800174c:	4043      	eors	r3, r0
 800174e:	405a      	eors	r2, r3
 8001750:	618b      	str	r3, [r1, #24]
 8001752:	61ca      	str	r2, [r1, #28]
 8001754:	e7b7      	b.n	80016c6 <AES_keyschedule_enc_LL+0xda>
 8001756:	bd70      	pop	{r4, r5, r6, pc}
 8001758:	0800456c 	.word	0x0800456c
 800175c:	08004b94 	.word	0x08004b94

08001760 <SHA256Transform>:
 8001760:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001764:	b0c5      	sub	sp, #276	; 0x114
 8001766:	2300      	movs	r3, #0
 8001768:	9303      	str	r3, [sp, #12]
 800176a:	680b      	ldr	r3, [r1, #0]
 800176c:	ba1b      	rev	r3, r3
 800176e:	9304      	str	r3, [sp, #16]
 8001770:	684b      	ldr	r3, [r1, #4]
 8001772:	ba1b      	rev	r3, r3
 8001774:	9305      	str	r3, [sp, #20]
 8001776:	688b      	ldr	r3, [r1, #8]
 8001778:	ba1b      	rev	r3, r3
 800177a:	9306      	str	r3, [sp, #24]
 800177c:	68cb      	ldr	r3, [r1, #12]
 800177e:	ba1b      	rev	r3, r3
 8001780:	9307      	str	r3, [sp, #28]
 8001782:	690b      	ldr	r3, [r1, #16]
 8001784:	ba1b      	rev	r3, r3
 8001786:	9308      	str	r3, [sp, #32]
 8001788:	694b      	ldr	r3, [r1, #20]
 800178a:	ba1b      	rev	r3, r3
 800178c:	9309      	str	r3, [sp, #36]	; 0x24
 800178e:	698b      	ldr	r3, [r1, #24]
 8001790:	ba1b      	rev	r3, r3
 8001792:	930a      	str	r3, [sp, #40]	; 0x28
 8001794:	69cb      	ldr	r3, [r1, #28]
 8001796:	ba1b      	rev	r3, r3
 8001798:	930b      	str	r3, [sp, #44]	; 0x2c
 800179a:	6a0b      	ldr	r3, [r1, #32]
 800179c:	ba1b      	rev	r3, r3
 800179e:	930c      	str	r3, [sp, #48]	; 0x30
 80017a0:	6a4b      	ldr	r3, [r1, #36]	; 0x24
 80017a2:	ba1b      	rev	r3, r3
 80017a4:	930d      	str	r3, [sp, #52]	; 0x34
 80017a6:	6a8b      	ldr	r3, [r1, #40]	; 0x28
 80017a8:	ba1b      	rev	r3, r3
 80017aa:	930e      	str	r3, [sp, #56]	; 0x38
 80017ac:	6acb      	ldr	r3, [r1, #44]	; 0x2c
 80017ae:	ba1b      	rev	r3, r3
 80017b0:	930f      	str	r3, [sp, #60]	; 0x3c
 80017b2:	6b0b      	ldr	r3, [r1, #48]	; 0x30
 80017b4:	ba1b      	rev	r3, r3
 80017b6:	9310      	str	r3, [sp, #64]	; 0x40
 80017b8:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 80017ba:	ba1b      	rev	r3, r3
 80017bc:	9311      	str	r3, [sp, #68]	; 0x44
 80017be:	6b8b      	ldr	r3, [r1, #56]	; 0x38
 80017c0:	ba1b      	rev	r3, r3
 80017c2:	9312      	str	r3, [sp, #72]	; 0x48
 80017c4:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
 80017c6:	ba1b      	rev	r3, r3
 80017c8:	9313      	str	r3, [sp, #76]	; 0x4c
 80017ca:	ae42      	add	r6, sp, #264	; 0x108
 80017cc:	ab12      	add	r3, sp, #72	; 0x48
 80017ce:	6819      	ldr	r1, [r3, #0]
 80017d0:	f853 5c38 	ldr.w	r5, [r3, #-56]
 80017d4:	f853 4c14 	ldr.w	r4, [r3, #-20]
 80017d8:	f853 2c34 	ldr.w	r2, [r3, #-52]
 80017dc:	442c      	add	r4, r5
 80017de:	0a8d      	lsrs	r5, r1, #10
 80017e0:	ea85 4571 	eor.w	r5, r5, r1, ror #17
 80017e4:	ea85 41f1 	eor.w	r1, r5, r1, ror #19
 80017e8:	08d7      	lsrs	r7, r2, #3
 80017ea:	f853 5c10 	ldr.w	r5, [r3, #-16]
 80017ee:	4421      	add	r1, r4
 80017f0:	ea87 17f2 	eor.w	r7, r7, r2, ror #7
 80017f4:	685c      	ldr	r4, [r3, #4]
 80017f6:	ea87 47b2 	eor.w	r7, r7, r2, ror #18
 80017fa:	4439      	add	r1, r7
 80017fc:	442a      	add	r2, r5
 80017fe:	0aa5      	lsrs	r5, r4, #10
 8001800:	6099      	str	r1, [r3, #8]
 8001802:	ea85 4574 	eor.w	r5, r5, r4, ror #17
 8001806:	f853 1c30 	ldr.w	r1, [r3, #-48]
 800180a:	ea85 44f4 	eor.w	r4, r5, r4, ror #19
 800180e:	4422      	add	r2, r4
 8001810:	08cc      	lsrs	r4, r1, #3
 8001812:	ea84 14f1 	eor.w	r4, r4, r1, ror #7
 8001816:	ea84 41b1 	eor.w	r1, r4, r1, ror #18
 800181a:	4411      	add	r1, r2
 800181c:	60d9      	str	r1, [r3, #12]
 800181e:	3308      	adds	r3, #8
 8001820:	42b3      	cmp	r3, r6
 8001822:	d1d4      	bne.n	80017ce <SHA256Transform+0x6e>
 8001824:	4e66      	ldr	r6, [pc, #408]	; (80019c0 <SHA256Transform+0x260>)
 8001826:	6803      	ldr	r3, [r0, #0]
 8001828:	6902      	ldr	r2, [r0, #16]
 800182a:	6844      	ldr	r4, [r0, #4]
 800182c:	6941      	ldr	r1, [r0, #20]
 800182e:	f8d0 a008 	ldr.w	sl, [r0, #8]
 8001832:	6985      	ldr	r5, [r0, #24]
 8001834:	f8d0 800c 	ldr.w	r8, [r0, #12]
 8001838:	f8d0 901c 	ldr.w	r9, [r0, #28]
 800183c:	2701      	movs	r7, #1
 800183e:	6037      	str	r7, [r6, #0]
 8001840:	6836      	ldr	r6, [r6, #0]
 8001842:	9603      	str	r6, [sp, #12]
 8001844:	4e5f      	ldr	r6, [pc, #380]	; (80019c4 <SHA256Transform+0x264>)
 8001846:	6837      	ldr	r7, [r6, #0]
 8001848:	9703      	str	r7, [sp, #12]
 800184a:	9f03      	ldr	r7, [sp, #12]
 800184c:	3701      	adds	r7, #1
 800184e:	d127      	bne.n	80018a0 <SHA256Transform+0x140>
 8001850:	9f03      	ldr	r7, [sp, #12]
 8001852:	6037      	str	r7, [r6, #0]
 8001854:	6836      	ldr	r6, [r6, #0]
 8001856:	9603      	str	r6, [sp, #12]
 8001858:	9e03      	ldr	r6, [sp, #12]
 800185a:	2e00      	cmp	r6, #0
 800185c:	d038      	beq.n	80018d0 <SHA256Transform+0x170>
 800185e:	6803      	ldr	r3, [r0, #0]
 8001860:	4e59      	ldr	r6, [pc, #356]	; (80019c8 <SHA256Transform+0x268>)
 8001862:	4f59      	ldr	r7, [pc, #356]	; (80019c8 <SHA256Transform+0x268>)
 8001864:	69c1      	ldr	r1, [r0, #28]
 8001866:	6985      	ldr	r5, [r0, #24]
 8001868:	68c2      	ldr	r2, [r0, #12]
 800186a:	f8d0 9014 	ldr.w	r9, [r0, #20]
 800186e:	f8d0 b008 	ldr.w	fp, [r0, #8]
 8001872:	f8d0 c004 	ldr.w	ip, [r0, #4]
 8001876:	405e      	eors	r6, r3
 8001878:	6903      	ldr	r3, [r0, #16]
 800187a:	6006      	str	r6, [r0, #0]
 800187c:	405f      	eors	r7, r3
 800187e:	ea82 0405 	eor.w	r4, r2, r5
 8001882:	ea87 0301 	eor.w	r3, r7, r1
 8001886:	ea8b 0a09 	eor.w	sl, fp, r9
 800188a:	6107      	str	r7, [r0, #16]
 800188c:	ea87 080c 	eor.w	r8, r7, ip
 8001890:	4072      	eors	r2, r6
 8001892:	ea8b 0101 	eor.w	r1, fp, r1
 8001896:	ea8c 0505 	eor.w	r5, ip, r5
 800189a:	ea86 0909 	eor.w	r9, r6, r9
 800189e:	e017      	b.n	80018d0 <SHA256Transform+0x170>
 80018a0:	4f49      	ldr	r7, [pc, #292]	; (80019c8 <SHA256Transform+0x268>)
 80018a2:	4e49      	ldr	r6, [pc, #292]	; (80019c8 <SHA256Transform+0x268>)
 80018a4:	405f      	eors	r7, r3
 80018a6:	4056      	eors	r6, r2
 80018a8:	ea88 0c05 	eor.w	ip, r8, r5
 80018ac:	ea8a 0b01 	eor.w	fp, sl, r1
 80018b0:	ea89 0a0a 	eor.w	sl, r9, sl
 80018b4:	ea86 0309 	eor.w	r3, r6, r9
 80018b8:	ea87 0208 	eor.w	r2, r7, r8
 80018bc:	4065      	eors	r5, r4
 80018be:	ea87 0901 	eor.w	r9, r7, r1
 80018c2:	ea86 0804 	eor.w	r8, r6, r4
 80018c6:	4651      	mov	r1, sl
 80018c8:	6007      	str	r7, [r0, #0]
 80018ca:	6106      	str	r6, [r0, #16]
 80018cc:	46da      	mov	sl, fp
 80018ce:	4664      	mov	r4, ip
 80018d0:	f04f 0c00 	mov.w	ip, #0
 80018d4:	f10c 0710 	add.w	r7, ip, #16
 80018d8:	f8df b0f0 	ldr.w	fp, [pc, #240]	; 80019cc <SHA256Transform+0x26c>
 80018dc:	466e      	mov	r6, sp
 80018de:	59be      	ldr	r6, [r7, r6]
 80018e0:	f85c 700b 	ldr.w	r7, [ip, fp]
 80018e4:	4437      	add	r7, r6
 80018e6:	ea4f 16b2 	mov.w	r6, r2, ror #6
 80018ea:	ea86 26f2 	eor.w	r6, r6, r2, ror #11
 80018ee:	ea86 6672 	eor.w	r6, r6, r2, ror #25
 80018f2:	4437      	add	r7, r6
 80018f4:	ea85 0601 	eor.w	r6, r5, r1
 80018f8:	4016      	ands	r6, r2
 80018fa:	406e      	eors	r6, r5
 80018fc:	443e      	add	r6, r7
 80018fe:	44b1      	add	r9, r6
 8001900:	ea44 0603 	orr.w	r6, r4, r3
 8001904:	ea06 060a 	and.w	r6, r6, sl
 8001908:	ea04 0703 	and.w	r7, r4, r3
 800190c:	433e      	orrs	r6, r7
 800190e:	ea4f 07b3 	mov.w	r7, r3, ror #2
 8001912:	ea87 3773 	eor.w	r7, r7, r3, ror #13
 8001916:	ea87 57b3 	eor.w	r7, r7, r3, ror #22
 800191a:	443e      	add	r6, r7
 800191c:	af04      	add	r7, sp, #16
 800191e:	44e3      	add	fp, ip
 8001920:	4467      	add	r7, ip
 8001922:	f8db b004 	ldr.w	fp, [fp, #4]
 8001926:	687f      	ldr	r7, [r7, #4]
 8001928:	44c8      	add	r8, r9
 800192a:	44bb      	add	fp, r7
 800192c:	ea81 0702 	eor.w	r7, r1, r2
 8001930:	ea08 0707 	and.w	r7, r8, r7
 8001934:	445d      	add	r5, fp
 8001936:	404f      	eors	r7, r1
 8001938:	443d      	add	r5, r7
 800193a:	ea4f 17b8 	mov.w	r7, r8, ror #6
 800193e:	444e      	add	r6, r9
 8001940:	ea87 27f8 	eor.w	r7, r7, r8, ror #11
 8001944:	ea87 6778 	eor.w	r7, r7, r8, ror #25
 8001948:	ea46 0b03 	orr.w	fp, r6, r3
 800194c:	443d      	add	r5, r7
 800194e:	ea0b 0b04 	and.w	fp, fp, r4
 8001952:	ea06 0703 	and.w	r7, r6, r3
 8001956:	ea4b 0b07 	orr.w	fp, fp, r7
 800195a:	ea4f 07b6 	mov.w	r7, r6, ror #2
 800195e:	ea87 3776 	eor.w	r7, r7, r6, ror #13
 8001962:	ea87 57b6 	eor.w	r7, r7, r6, ror #22
 8001966:	f10c 0c08 	add.w	ip, ip, #8
 800196a:	44bb      	add	fp, r7
 800196c:	f5bc 7f80 	cmp.w	ip, #256	; 0x100
 8001970:	44aa      	add	sl, r5
 8001972:	44ab      	add	fp, r5
 8001974:	d008      	beq.n	8001988 <SHA256Transform+0x228>
 8001976:	4689      	mov	r9, r1
 8001978:	4615      	mov	r5, r2
 800197a:	4641      	mov	r1, r8
 800197c:	4652      	mov	r2, sl
 800197e:	46a0      	mov	r8, r4
 8001980:	469a      	mov	sl, r3
 8001982:	4634      	mov	r4, r6
 8001984:	465b      	mov	r3, fp
 8001986:	e7a5      	b.n	80018d4 <SHA256Transform+0x174>
 8001988:	6845      	ldr	r5, [r0, #4]
 800198a:	6807      	ldr	r7, [r0, #0]
 800198c:	442e      	add	r6, r5
 800198e:	6885      	ldr	r5, [r0, #8]
 8001990:	6046      	str	r6, [r0, #4]
 8001992:	442b      	add	r3, r5
 8001994:	6083      	str	r3, [r0, #8]
 8001996:	68c3      	ldr	r3, [r0, #12]
 8001998:	441c      	add	r4, r3
 800199a:	6903      	ldr	r3, [r0, #16]
 800199c:	60c4      	str	r4, [r0, #12]
 800199e:	4453      	add	r3, sl
 80019a0:	6103      	str	r3, [r0, #16]
 80019a2:	6943      	ldr	r3, [r0, #20]
 80019a4:	4443      	add	r3, r8
 80019a6:	6143      	str	r3, [r0, #20]
 80019a8:	6983      	ldr	r3, [r0, #24]
 80019aa:	441a      	add	r2, r3
 80019ac:	69c3      	ldr	r3, [r0, #28]
 80019ae:	6182      	str	r2, [r0, #24]
 80019b0:	445f      	add	r7, fp
 80019b2:	4419      	add	r1, r3
 80019b4:	6007      	str	r7, [r0, #0]
 80019b6:	61c1      	str	r1, [r0, #28]
 80019b8:	b045      	add	sp, #276	; 0x114
 80019ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80019be:	bf00      	nop
 80019c0:	40023008 	.word	0x40023008
 80019c4:	40023000 	.word	0x40023000
 80019c8:	a5a5f0f0 	.word	0xa5a5f0f0
 80019cc:	08004994 	.word	0x08004994

080019d0 <AES_keyschedule_enc>:
 80019d0:	b530      	push	{r4, r5, lr}
 80019d2:	2300      	movs	r3, #0
 80019d4:	1095      	asrs	r5, r2, #2
 80019d6:	42ab      	cmp	r3, r5
 80019d8:	da06      	bge.n	80019e8 <AES_keyschedule_enc+0x18>
 80019da:	f850 4023 	ldr.w	r4, [r0, r3, lsl #2]
 80019de:	ba24      	rev	r4, r4
 80019e0:	f841 4023 	str.w	r4, [r1, r3, lsl #2]
 80019e4:	3301      	adds	r3, #1
 80019e6:	e7f6      	b.n	80019d6 <AES_keyschedule_enc+0x6>
 80019e8:	4608      	mov	r0, r1
 80019ea:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80019ee:	f7ff bdfd 	b.w	80015ec <AES_keyschedule_enc_LL>
	...

080019f4 <AES_keyschedule_dec>:
 80019f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80019f6:	4615      	mov	r5, r2
 80019f8:	460c      	mov	r4, r1
 80019fa:	f7ff ffe9 	bl	80019d0 <AES_keyschedule_enc>
 80019fe:	10ea      	asrs	r2, r5, #3
 8001a00:	3203      	adds	r2, #3
 8001a02:	0052      	lsls	r2, r2, #1
 8001a04:	2501      	movs	r5, #1
 8001a06:	4295      	cmp	r5, r2
 8001a08:	da6c      	bge.n	8001ae4 <AES_keyschedule_dec+0xf0>
 8001a0a:	f854 1f10 	ldr.w	r1, [r4, #16]!
 8001a0e:	4836      	ldr	r0, [pc, #216]	; (8001ae8 <AES_keyschedule_dec+0xf4>)
 8001a10:	4b36      	ldr	r3, [pc, #216]	; (8001aec <AES_keyschedule_dec+0xf8>)
 8001a12:	b2ce      	uxtb	r6, r1
 8001a14:	3501      	adds	r5, #1
 8001a16:	5d86      	ldrb	r6, [r0, r6]
 8001a18:	f853 7026 	ldr.w	r7, [r3, r6, lsl #2]
 8001a1c:	0e0e      	lsrs	r6, r1, #24
 8001a1e:	5d86      	ldrb	r6, [r0, r6]
 8001a20:	f853 6026 	ldr.w	r6, [r3, r6, lsl #2]
 8001a24:	ea86 6637 	eor.w	r6, r6, r7, ror #24
 8001a28:	f3c1 4707 	ubfx	r7, r1, #16, #8
 8001a2c:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8001a30:	5dc7      	ldrb	r7, [r0, r7]
 8001a32:	5c41      	ldrb	r1, [r0, r1]
 8001a34:	f853 7027 	ldr.w	r7, [r3, r7, lsl #2]
 8001a38:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
 8001a3c:	ea86 2637 	eor.w	r6, r6, r7, ror #8
 8001a40:	ea86 4131 	eor.w	r1, r6, r1, ror #16
 8001a44:	6021      	str	r1, [r4, #0]
 8001a46:	6861      	ldr	r1, [r4, #4]
 8001a48:	b2ce      	uxtb	r6, r1
 8001a4a:	5d86      	ldrb	r6, [r0, r6]
 8001a4c:	f853 7026 	ldr.w	r7, [r3, r6, lsl #2]
 8001a50:	0e0e      	lsrs	r6, r1, #24
 8001a52:	5d86      	ldrb	r6, [r0, r6]
 8001a54:	f853 6026 	ldr.w	r6, [r3, r6, lsl #2]
 8001a58:	ea86 6637 	eor.w	r6, r6, r7, ror #24
 8001a5c:	f3c1 4707 	ubfx	r7, r1, #16, #8
 8001a60:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8001a64:	5dc7      	ldrb	r7, [r0, r7]
 8001a66:	5c41      	ldrb	r1, [r0, r1]
 8001a68:	f853 7027 	ldr.w	r7, [r3, r7, lsl #2]
 8001a6c:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
 8001a70:	ea86 2637 	eor.w	r6, r6, r7, ror #8
 8001a74:	ea86 4131 	eor.w	r1, r6, r1, ror #16
 8001a78:	6061      	str	r1, [r4, #4]
 8001a7a:	68a1      	ldr	r1, [r4, #8]
 8001a7c:	b2ce      	uxtb	r6, r1
 8001a7e:	5d86      	ldrb	r6, [r0, r6]
 8001a80:	f853 7026 	ldr.w	r7, [r3, r6, lsl #2]
 8001a84:	0e0e      	lsrs	r6, r1, #24
 8001a86:	5d86      	ldrb	r6, [r0, r6]
 8001a88:	f853 6026 	ldr.w	r6, [r3, r6, lsl #2]
 8001a8c:	ea86 6637 	eor.w	r6, r6, r7, ror #24
 8001a90:	f3c1 4707 	ubfx	r7, r1, #16, #8
 8001a94:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8001a98:	5dc7      	ldrb	r7, [r0, r7]
 8001a9a:	5c41      	ldrb	r1, [r0, r1]
 8001a9c:	f853 7027 	ldr.w	r7, [r3, r7, lsl #2]
 8001aa0:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
 8001aa4:	ea86 2637 	eor.w	r6, r6, r7, ror #8
 8001aa8:	ea86 4131 	eor.w	r1, r6, r1, ror #16
 8001aac:	60a1      	str	r1, [r4, #8]
 8001aae:	68e1      	ldr	r1, [r4, #12]
 8001ab0:	b2ce      	uxtb	r6, r1
 8001ab2:	5d86      	ldrb	r6, [r0, r6]
 8001ab4:	f853 7026 	ldr.w	r7, [r3, r6, lsl #2]
 8001ab8:	0e0e      	lsrs	r6, r1, #24
 8001aba:	5d86      	ldrb	r6, [r0, r6]
 8001abc:	f853 6026 	ldr.w	r6, [r3, r6, lsl #2]
 8001ac0:	ea86 6637 	eor.w	r6, r6, r7, ror #24
 8001ac4:	f3c1 4707 	ubfx	r7, r1, #16, #8
 8001ac8:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8001acc:	5dc7      	ldrb	r7, [r0, r7]
 8001ace:	5c41      	ldrb	r1, [r0, r1]
 8001ad0:	f853 7027 	ldr.w	r7, [r3, r7, lsl #2]
 8001ad4:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8001ad8:	ea86 2637 	eor.w	r6, r6, r7, ror #8
 8001adc:	ea86 4333 	eor.w	r3, r6, r3, ror #16
 8001ae0:	60e3      	str	r3, [r4, #12]
 8001ae2:	e790      	b.n	8001a06 <AES_keyschedule_dec+0x12>
 8001ae4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001ae6:	bf00      	nop
 8001ae8:	08004b94 	.word	0x08004b94
 8001aec:	08004594 	.word	0x08004594

08001af0 <AESstdInit>:
 8001af0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001af4:	460f      	mov	r7, r1
 8001af6:	4604      	mov	r4, r0
 8001af8:	4611      	mov	r1, r2
 8001afa:	2800      	cmp	r0, #0
 8001afc:	d05e      	beq.n	8001bbc <AESstdInit+0xcc>
 8001afe:	2f00      	cmp	r7, #0
 8001b00:	d05c      	beq.n	8001bbc <AESstdInit+0xcc>
 8001b02:	b91a      	cbnz	r2, 8001b0c <AESstdInit+0x1c>
 8001b04:	f003 0206 	and.w	r2, r3, #6
 8001b08:	2a02      	cmp	r2, #2
 8001b0a:	d157      	bne.n	8001bbc <AESstdInit+0xcc>
 8001b0c:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8001b0e:	f022 0008 	bic.w	r0, r2, #8
 8001b12:	2810      	cmp	r0, #16
 8001b14:	d001      	beq.n	8001b1a <AESstdInit+0x2a>
 8001b16:	2a20      	cmp	r2, #32
 8001b18:	d14c      	bne.n	8001bb4 <AESstdInit+0xc4>
 8001b1a:	f003 0c06 	and.w	ip, r3, #6
 8001b1e:	f1bc 0f02 	cmp.w	ip, #2
 8001b22:	d003      	beq.n	8001b2c <AESstdInit+0x3c>
 8001b24:	6920      	ldr	r0, [r4, #16]
 8001b26:	3801      	subs	r0, #1
 8001b28:	280f      	cmp	r0, #15
 8001b2a:	d843      	bhi.n	8001bb4 <AESstdInit+0xc4>
 8001b2c:	7920      	ldrb	r0, [r4, #4]
 8001b2e:	60e1      	str	r1, [r4, #12]
 8001b30:	f020 0506 	bic.w	r5, r0, #6
 8001b34:	f1bc 0f02 	cmp.w	ip, #2
 8001b38:	7125      	strb	r5, [r4, #4]
 8001b3a:	d103      	bne.n	8001b44 <AESstdInit+0x54>
 8001b3c:	f010 0501 	ands.w	r5, r0, #1
 8001b40:	d026      	beq.n	8001b90 <AESstdInit+0xa0>
 8001b42:	e031      	b.n	8001ba8 <AESstdInit+0xb8>
 8001b44:	2600      	movs	r6, #0
 8001b46:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8001b4a:	6166      	str	r6, [r4, #20]
 8001b4c:	61a6      	str	r6, [r4, #24]
 8001b4e:	61e6      	str	r6, [r4, #28]
 8001b50:	6226      	str	r6, [r4, #32]
 8001b52:	454e      	cmp	r6, r9
 8001b54:	daf2      	bge.n	8001b3c <AESstdInit+0x4c>
 8001b56:	4d1b      	ldr	r5, [pc, #108]	; (8001bc4 <AESstdInit+0xd4>)
 8001b58:	f811 a006 	ldrb.w	sl, [r1, r6]
 8001b5c:	f04f 0804 	mov.w	r8, #4
 8001b60:	4035      	ands	r5, r6
 8001b62:	fb96 f8f8 	sdiv	r8, r6, r8
 8001b66:	2d00      	cmp	r5, #0
 8001b68:	eb04 0888 	add.w	r8, r4, r8, lsl #2
 8001b6c:	da03      	bge.n	8001b76 <AESstdInit+0x86>
 8001b6e:	3d01      	subs	r5, #1
 8001b70:	f065 0503 	orn	r5, r5, #3
 8001b74:	3501      	adds	r5, #1
 8001b76:	f1c5 0503 	rsb	r5, r5, #3
 8001b7a:	00ed      	lsls	r5, r5, #3
 8001b7c:	fa0a fa05 	lsl.w	sl, sl, r5
 8001b80:	f8d8 5014 	ldr.w	r5, [r8, #20]
 8001b84:	ea45 0a0a 	orr.w	sl, r5, sl
 8001b88:	f8c8 a014 	str.w	sl, [r8, #20]
 8001b8c:	3601      	adds	r6, #1
 8001b8e:	e7e0      	b.n	8001b52 <AESstdInit+0x62>
 8001b90:	f013 0f01 	tst.w	r3, #1
 8001b94:	60a7      	str	r7, [r4, #8]
 8001b96:	4638      	mov	r0, r7
 8001b98:	f104 0128 	add.w	r1, r4, #40	; 0x28
 8001b9c:	d002      	beq.n	8001ba4 <AESstdInit+0xb4>
 8001b9e:	f1bc 0f06 	cmp.w	ip, #6
 8001ba2:	d104      	bne.n	8001bae <AESstdInit+0xbe>
 8001ba4:	f7ff ff14 	bl	80019d0 <AES_keyschedule_enc>
 8001ba8:	2000      	movs	r0, #0
 8001baa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001bae:	f7ff ff21 	bl	80019f4 <AES_keyschedule_dec>
 8001bb2:	e7f9      	b.n	8001ba8 <AESstdInit+0xb8>
 8001bb4:	f640 401f 	movw	r0, #3103	; 0xc1f
 8001bb8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001bbc:	f44f 6042 	mov.w	r0, #3104	; 0xc20
 8001bc0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001bc4:	80000003 	.word	0x80000003

08001bc8 <AES_general_SW_dec>:
 8001bc8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001bcc:	2500      	movs	r5, #0
 8001bce:	9501      	str	r5, [sp, #4]
 8001bd0:	4da6      	ldr	r5, [pc, #664]	; (8001e6c <AES_general_SW_dec+0x2a4>)
 8001bd2:	2601      	movs	r6, #1
 8001bd4:	602e      	str	r6, [r5, #0]
 8001bd6:	682d      	ldr	r5, [r5, #0]
 8001bd8:	9501      	str	r5, [sp, #4]
 8001bda:	4da5      	ldr	r5, [pc, #660]	; (8001e70 <AES_general_SW_dec+0x2a8>)
 8001bdc:	682e      	ldr	r6, [r5, #0]
 8001bde:	9601      	str	r6, [sp, #4]
 8001be0:	10db      	asrs	r3, r3, #3
 8001be2:	9e01      	ldr	r6, [sp, #4]
 8001be4:	f103 0903 	add.w	r9, r3, #3
 8001be8:	ea4f 1349 	mov.w	r3, r9, lsl #5
 8001bec:	3601      	adds	r6, #1
 8001bee:	468b      	mov	fp, r1
 8001bf0:	eb02 0403 	add.w	r4, r2, r3
 8001bf4:	d117      	bne.n	8001c26 <AES_general_SW_dec+0x5e>
 8001bf6:	9e01      	ldr	r6, [sp, #4]
 8001bf8:	602e      	str	r6, [r5, #0]
 8001bfa:	682d      	ldr	r5, [r5, #0]
 8001bfc:	9501      	str	r5, [sp, #4]
 8001bfe:	9e01      	ldr	r6, [sp, #4]
 8001c00:	58d2      	ldr	r2, [r2, r3]
 8001c02:	6867      	ldr	r7, [r4, #4]
 8001c04:	6803      	ldr	r3, [r0, #0]
 8001c06:	6845      	ldr	r5, [r0, #4]
 8001c08:	b956      	cbnz	r6, 8001c20 <AES_general_SW_dec+0x58>
 8001c0a:	ea82 0c03 	eor.w	ip, r2, r3
 8001c0e:	6883      	ldr	r3, [r0, #8]
 8001c10:	68a2      	ldr	r2, [r4, #8]
 8001c12:	68c0      	ldr	r0, [r0, #12]
 8001c14:	405a      	eors	r2, r3
 8001c16:	68e3      	ldr	r3, [r4, #12]
 8001c18:	406f      	eors	r7, r5
 8001c1a:	ea83 0800 	eor.w	r8, r3, r0
 8001c1e:	e00b      	b.n	8001c38 <AES_general_SW_dec+0x70>
 8001c20:	ea87 0c05 	eor.w	ip, r7, r5
 8001c24:	e005      	b.n	8001c32 <AES_general_SW_dec+0x6a>
 8001c26:	6866      	ldr	r6, [r4, #4]
 8001c28:	6845      	ldr	r5, [r0, #4]
 8001c2a:	58d2      	ldr	r2, [r2, r3]
 8001c2c:	6803      	ldr	r3, [r0, #0]
 8001c2e:	ea86 0c05 	eor.w	ip, r6, r5
 8001c32:	405a      	eors	r2, r3
 8001c34:	4690      	mov	r8, r2
 8001c36:	4617      	mov	r7, r2
 8001c38:	4b8e      	ldr	r3, [pc, #568]	; (8001e74 <AES_general_SW_dec+0x2ac>)
 8001c3a:	3c20      	subs	r4, #32
 8001c3c:	ea4f 601c 	mov.w	r0, ip, lsr #24
 8001c40:	b2fd      	uxtb	r5, r7
 8001c42:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
 8001c46:	6920      	ldr	r0, [r4, #16]
 8001c48:	4070      	eors	r0, r6
 8001c4a:	f853 6025 	ldr.w	r6, [r3, r5, lsl #2]
 8001c4e:	f3c8 4507 	ubfx	r5, r8, #16, #8
 8001c52:	ea80 6036 	eor.w	r0, r0, r6, ror #24
 8001c56:	f853 6025 	ldr.w	r6, [r3, r5, lsl #2]
 8001c5a:	ea80 2636 	eor.w	r6, r0, r6, ror #8
 8001c5e:	f3c2 2007 	ubfx	r0, r2, #8, #8
 8001c62:	fa5f fa88 	uxtb.w	sl, r8
 8001c66:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 8001c6a:	f853 a02a 	ldr.w	sl, [r3, sl, lsl #2]
 8001c6e:	ea86 4630 	eor.w	r6, r6, r0, ror #16
 8001c72:	0e38      	lsrs	r0, r7, #24
 8001c74:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 8001c78:	f853 5020 	ldr.w	r5, [r3, r0, lsl #2]
 8001c7c:	6960      	ldr	r0, [r4, #20]
 8001c7e:	4068      	eors	r0, r5
 8001c80:	b2d5      	uxtb	r5, r2
 8001c82:	f1b9 0f00 	cmp.w	r9, #0
 8001c86:	f853 5025 	ldr.w	r5, [r3, r5, lsl #2]
 8001c8a:	ea80 6035 	eor.w	r0, r0, r5, ror #24
 8001c8e:	f3cc 4507 	ubfx	r5, ip, #16, #8
 8001c92:	f853 5025 	ldr.w	r5, [r3, r5, lsl #2]
 8001c96:	ea80 2035 	eor.w	r0, r0, r5, ror #8
 8001c9a:	f3c8 2507 	ubfx	r5, r8, #8, #8
 8001c9e:	ea4f 6818 	mov.w	r8, r8, lsr #24
 8001ca2:	f853 5025 	ldr.w	r5, [r3, r5, lsl #2]
 8001ca6:	f853 8028 	ldr.w	r8, [r3, r8, lsl #2]
 8001caa:	ea80 4035 	eor.w	r0, r0, r5, ror #16
 8001cae:	ea4f 6512 	mov.w	r5, r2, lsr #24
 8001cb2:	f3c2 4207 	ubfx	r2, r2, #16, #8
 8001cb6:	f853 1025 	ldr.w	r1, [r3, r5, lsl #2]
 8001cba:	69a5      	ldr	r5, [r4, #24]
 8001cbc:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8001cc0:	ea81 0105 	eor.w	r1, r1, r5
 8001cc4:	ea81 653a 	eor.w	r5, r1, sl, ror #24
 8001cc8:	f3c7 4a07 	ubfx	sl, r7, #16, #8
 8001ccc:	69e1      	ldr	r1, [r4, #28]
 8001cce:	f853 a02a 	ldr.w	sl, [r3, sl, lsl #2]
 8001cd2:	ea85 253a 	eor.w	r5, r5, sl, ror #8
 8001cd6:	f3cc 2a07 	ubfx	sl, ip, #8, #8
 8001cda:	fa5f fc8c 	uxtb.w	ip, ip
 8001cde:	ea88 0801 	eor.w	r8, r8, r1
 8001ce2:	f853 c02c 	ldr.w	ip, [r3, ip, lsl #2]
 8001ce6:	f853 a02a 	ldr.w	sl, [r3, sl, lsl #2]
 8001cea:	f3c7 2707 	ubfx	r7, r7, #8, #8
 8001cee:	ea88 683c 	eor.w	r8, r8, ip, ror #24
 8001cf2:	ea88 2832 	eor.w	r8, r8, r2, ror #8
 8001cf6:	f853 2027 	ldr.w	r2, [r3, r7, lsl #2]
 8001cfa:	ea85 453a 	eor.w	r5, r5, sl, ror #16
 8001cfe:	ea88 4832 	eor.w	r8, r8, r2, ror #16
 8001d02:	ea4f 6216 	mov.w	r2, r6, lsr #24
 8001d06:	dd5a      	ble.n	8001dbe <AES_general_SW_dec+0x1f6>
 8001d08:	f853 7022 	ldr.w	r7, [r3, r2, lsl #2]
 8001d0c:	6822      	ldr	r2, [r4, #0]
 8001d0e:	68a1      	ldr	r1, [r4, #8]
 8001d10:	407a      	eors	r2, r7
 8001d12:	b2c7      	uxtb	r7, r0
 8001d14:	fa5f fa88 	uxtb.w	sl, r8
 8001d18:	f853 7027 	ldr.w	r7, [r3, r7, lsl #2]
 8001d1c:	f853 a02a 	ldr.w	sl, [r3, sl, lsl #2]
 8001d20:	ea82 6237 	eor.w	r2, r2, r7, ror #24
 8001d24:	f3c8 4707 	ubfx	r7, r8, #16, #8
 8001d28:	f853 7027 	ldr.w	r7, [r3, r7, lsl #2]
 8001d2c:	ea82 2c37 	eor.w	ip, r2, r7, ror #8
 8001d30:	f3c5 2207 	ubfx	r2, r5, #8, #8
 8001d34:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8001d38:	ea8c 4c32 	eor.w	ip, ip, r2, ror #16
 8001d3c:	0e02      	lsrs	r2, r0, #24
 8001d3e:	f853 7022 	ldr.w	r7, [r3, r2, lsl #2]
 8001d42:	6862      	ldr	r2, [r4, #4]
 8001d44:	407a      	eors	r2, r7
 8001d46:	b2ef      	uxtb	r7, r5
 8001d48:	f853 7027 	ldr.w	r7, [r3, r7, lsl #2]
 8001d4c:	ea82 6237 	eor.w	r2, r2, r7, ror #24
 8001d50:	f3c6 4707 	ubfx	r7, r6, #16, #8
 8001d54:	f853 7027 	ldr.w	r7, [r3, r7, lsl #2]
 8001d58:	ea82 2737 	eor.w	r7, r2, r7, ror #8
 8001d5c:	f3c8 2207 	ubfx	r2, r8, #8, #8
 8001d60:	ea4f 6818 	mov.w	r8, r8, lsr #24
 8001d64:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8001d68:	f853 8028 	ldr.w	r8, [r3, r8, lsl #2]
 8001d6c:	ea87 4732 	eor.w	r7, r7, r2, ror #16
 8001d70:	0e2a      	lsrs	r2, r5, #24
 8001d72:	f3c5 4507 	ubfx	r5, r5, #16, #8
 8001d76:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8001d7a:	f853 5025 	ldr.w	r5, [r3, r5, lsl #2]
 8001d7e:	404a      	eors	r2, r1
 8001d80:	ea82 623a 	eor.w	r2, r2, sl, ror #24
 8001d84:	f3c0 4a07 	ubfx	sl, r0, #16, #8
 8001d88:	68e1      	ldr	r1, [r4, #12]
 8001d8a:	f853 a02a 	ldr.w	sl, [r3, sl, lsl #2]
 8001d8e:	ea82 223a 	eor.w	r2, r2, sl, ror #8
 8001d92:	f3c6 2a07 	ubfx	sl, r6, #8, #8
 8001d96:	b2f6      	uxtb	r6, r6
 8001d98:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8001d9c:	f853 6026 	ldr.w	r6, [r3, r6, lsl #2]
 8001da0:	f853 a02a 	ldr.w	sl, [r3, sl, lsl #2]
 8001da4:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8001da8:	ea88 0801 	eor.w	r8, r8, r1
 8001dac:	ea88 6836 	eor.w	r8, r8, r6, ror #24
 8001db0:	ea88 2835 	eor.w	r8, r8, r5, ror #8
 8001db4:	ea82 423a 	eor.w	r2, r2, sl, ror #16
 8001db8:	ea88 4833 	eor.w	r8, r8, r3, ror #16
 8001dbc:	e73c      	b.n	8001c38 <AES_general_SW_dec+0x70>
 8001dbe:	4b2e      	ldr	r3, [pc, #184]	; (8001e78 <AES_general_SW_dec+0x2b0>)
 8001dc0:	5c9f      	ldrb	r7, [r3, r2]
 8001dc2:	b2c2      	uxtb	r2, r0
 8001dc4:	5c9a      	ldrb	r2, [r3, r2]
 8001dc6:	ea42 6707 	orr.w	r7, r2, r7, lsl #24
 8001dca:	f3c8 4207 	ubfx	r2, r8, #16, #8
 8001dce:	5c9a      	ldrb	r2, [r3, r2]
 8001dd0:	ea47 4702 	orr.w	r7, r7, r2, lsl #16
 8001dd4:	f3c5 2207 	ubfx	r2, r5, #8, #8
 8001dd8:	5c9a      	ldrb	r2, [r3, r2]
 8001dda:	ea47 2702 	orr.w	r7, r7, r2, lsl #8
 8001dde:	6822      	ldr	r2, [r4, #0]
 8001de0:	407a      	eors	r2, r7
 8001de2:	f8cb 2000 	str.w	r2, [fp]
 8001de6:	0e02      	lsrs	r2, r0, #24
 8001de8:	5c9f      	ldrb	r7, [r3, r2]
 8001dea:	b2ea      	uxtb	r2, r5
 8001dec:	5c9a      	ldrb	r2, [r3, r2]
 8001dee:	ea42 6707 	orr.w	r7, r2, r7, lsl #24
 8001df2:	f3c6 4207 	ubfx	r2, r6, #16, #8
 8001df6:	5c9a      	ldrb	r2, [r3, r2]
 8001df8:	ea47 4702 	orr.w	r7, r7, r2, lsl #16
 8001dfc:	f3c8 2207 	ubfx	r2, r8, #8, #8
 8001e00:	5c9a      	ldrb	r2, [r3, r2]
 8001e02:	ea47 2702 	orr.w	r7, r7, r2, lsl #8
 8001e06:	6862      	ldr	r2, [r4, #4]
 8001e08:	407a      	eors	r2, r7
 8001e0a:	f8cb 2004 	str.w	r2, [fp, #4]
 8001e0e:	0e2a      	lsrs	r2, r5, #24
 8001e10:	f3c5 4507 	ubfx	r5, r5, #16, #8
 8001e14:	5c9f      	ldrb	r7, [r3, r2]
 8001e16:	5d5d      	ldrb	r5, [r3, r5]
 8001e18:	fa5f f288 	uxtb.w	r2, r8
 8001e1c:	ea4f 6818 	mov.w	r8, r8, lsr #24
 8001e20:	5c9a      	ldrb	r2, [r3, r2]
 8001e22:	ea42 6707 	orr.w	r7, r2, r7, lsl #24
 8001e26:	f3c0 4207 	ubfx	r2, r0, #16, #8
 8001e2a:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8001e2e:	5c9a      	ldrb	r2, [r3, r2]
 8001e30:	ea47 4702 	orr.w	r7, r7, r2, lsl #16
 8001e34:	f3c6 2207 	ubfx	r2, r6, #8, #8
 8001e38:	b2f6      	uxtb	r6, r6
 8001e3a:	5c9a      	ldrb	r2, [r3, r2]
 8001e3c:	ea47 2702 	orr.w	r7, r7, r2, lsl #8
 8001e40:	68a2      	ldr	r2, [r4, #8]
 8001e42:	407a      	eors	r2, r7
 8001e44:	f8cb 2008 	str.w	r2, [fp, #8]
 8001e48:	f813 7008 	ldrb.w	r7, [r3, r8]
 8001e4c:	5d9a      	ldrb	r2, [r3, r6]
 8001e4e:	5c1b      	ldrb	r3, [r3, r0]
 8001e50:	ea42 6207 	orr.w	r2, r2, r7, lsl #24
 8001e54:	ea42 4205 	orr.w	r2, r2, r5, lsl #16
 8001e58:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
 8001e5c:	68e2      	ldr	r2, [r4, #12]
 8001e5e:	4053      	eors	r3, r2
 8001e60:	f8cb 300c 	str.w	r3, [fp, #12]
 8001e64:	b003      	add	sp, #12
 8001e66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001e6a:	bf00      	nop
 8001e6c:	40023008 	.word	0x40023008
 8001e70:	40023000 	.word	0x40023000
 8001e74:	08004594 	.word	0x08004594
 8001e78:	08004a94 	.word	0x08004a94

08001e7c <AES_CBC_Decrypt_Init>:
 8001e7c:	2305      	movs	r3, #5
 8001e7e:	f7ff be37 	b.w	8001af0 <AESstdInit>

08001e82 <AES_CBC_Decrypt_Append>:
 8001e82:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001e86:	b08d      	sub	sp, #52	; 0x34
 8001e88:	f10d 0a20 	add.w	sl, sp, #32
 8001e8c:	4605      	mov	r5, r0
 8001e8e:	4688      	mov	r8, r1
 8001e90:	4616      	mov	r6, r2
 8001e92:	4650      	mov	r0, sl
 8001e94:	2100      	movs	r1, #0
 8001e96:	2210      	movs	r2, #16
 8001e98:	461f      	mov	r7, r3
 8001e9a:	f002 fa8b 	bl	80043b4 <memset>
 8001e9e:	2d00      	cmp	r5, #0
 8001ea0:	f000 80f6 	beq.w	8002090 <AES_CBC_Decrypt_Append+0x20e>
 8001ea4:	f1b8 0f00 	cmp.w	r8, #0
 8001ea8:	f000 80f2 	beq.w	8002090 <AES_CBC_Decrypt_Append+0x20e>
 8001eac:	2f00      	cmp	r7, #0
 8001eae:	f000 80ef 	beq.w	8002090 <AES_CBC_Decrypt_Append+0x20e>
 8001eb2:	9816      	ldr	r0, [sp, #88]	; 0x58
 8001eb4:	2800      	cmp	r0, #0
 8001eb6:	f000 80eb 	beq.w	8002090 <AES_CBC_Decrypt_Append+0x20e>
 8001eba:	2e0f      	cmp	r6, #15
 8001ebc:	f340 80eb 	ble.w	8002096 <AES_CBC_Decrypt_Append+0x214>
 8001ec0:	792b      	ldrb	r3, [r5, #4]
 8001ec2:	f013 0f06 	tst.w	r3, #6
 8001ec6:	f040 80e9 	bne.w	800209c <AES_CBC_Decrypt_Append+0x21a>
 8001eca:	0732      	lsls	r2, r6, #28
 8001ecc:	bf1d      	ittte	ne
 8001ece:	f043 0304 	orrne.w	r3, r3, #4
 8001ed2:	f1a6 0920 	subne.w	r9, r6, #32
 8001ed6:	712b      	strbne	r3, [r5, #4]
 8001ed8:	46b1      	moveq	r9, r6
 8001eda:	2400      	movs	r4, #0
 8001edc:	454c      	cmp	r4, r9
 8001ede:	da28      	bge.n	8001f32 <AES_CBC_Decrypt_Append+0xb0>
 8001ee0:	2300      	movs	r3, #0
 8001ee2:	eb08 0204 	add.w	r2, r8, r4
 8001ee6:	f103 0b10 	add.w	fp, r3, #16
 8001eea:	58d2      	ldr	r2, [r2, r3]
 8001eec:	4669      	mov	r1, sp
 8001eee:	3304      	adds	r3, #4
 8001ef0:	ba12      	rev	r2, r2
 8001ef2:	2b10      	cmp	r3, #16
 8001ef4:	f84b 2001 	str.w	r2, [fp, r1]
 8001ef8:	d1f3      	bne.n	8001ee2 <AES_CBC_Decrypt_Append+0x60>
 8001efa:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8001efc:	a804      	add	r0, sp, #16
 8001efe:	4651      	mov	r1, sl
 8001f00:	f105 0228 	add.w	r2, r5, #40	; 0x28
 8001f04:	f7ff fe60 	bl	8001bc8 <AES_general_SW_dec>
 8001f08:	2300      	movs	r3, #0
 8001f0a:	18e9      	adds	r1, r5, r3
 8001f0c:	f85a 2003 	ldr.w	r2, [sl, r3]
 8001f10:	6948      	ldr	r0, [r1, #20]
 8001f12:	f10d 0c10 	add.w	ip, sp, #16
 8001f16:	4042      	eors	r2, r0
 8001f18:	f85c 0003 	ldr.w	r0, [ip, r3]
 8001f1c:	6148      	str	r0, [r1, #20]
 8001f1e:	1939      	adds	r1, r7, r4
 8001f20:	f84a 2003 	str.w	r2, [sl, r3]
 8001f24:	ba12      	rev	r2, r2
 8001f26:	50ca      	str	r2, [r1, r3]
 8001f28:	3304      	adds	r3, #4
 8001f2a:	2b10      	cmp	r3, #16
 8001f2c:	d1ed      	bne.n	8001f0a <AES_CBC_Decrypt_Append+0x88>
 8001f2e:	3410      	adds	r4, #16
 8001f30:	e7d4      	b.n	8001edc <AES_CBC_Decrypt_Append+0x5a>
 8001f32:	42b4      	cmp	r4, r6
 8001f34:	db03      	blt.n	8001f3e <AES_CBC_Decrypt_Append+0xbc>
 8001f36:	9816      	ldr	r0, [sp, #88]	; 0x58
 8001f38:	6006      	str	r6, [r0, #0]
 8001f3a:	2000      	movs	r0, #0
 8001f3c:	e0b0      	b.n	80020a0 <AES_CBC_Decrypt_Append+0x21e>
 8001f3e:	2300      	movs	r3, #0
 8001f40:	eb08 0904 	add.w	r9, r8, r4
 8001f44:	f103 0b10 	add.w	fp, r3, #16
 8001f48:	f859 2003 	ldr.w	r2, [r9, r3]
 8001f4c:	4669      	mov	r1, sp
 8001f4e:	3304      	adds	r3, #4
 8001f50:	ba12      	rev	r2, r2
 8001f52:	2b10      	cmp	r3, #16
 8001f54:	f84b 2001 	str.w	r2, [fp, r1]
 8001f58:	d1f2      	bne.n	8001f40 <AES_CBC_Decrypt_Append+0xbe>
 8001f5a:	f105 0c28 	add.w	ip, r5, #40	; 0x28
 8001f5e:	4662      	mov	r2, ip
 8001f60:	4651      	mov	r1, sl
 8001f62:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8001f64:	f8cd c00c 	str.w	ip, [sp, #12]
 8001f68:	a804      	add	r0, sp, #16
 8001f6a:	f7ff fe2d 	bl	8001bc8 <AES_general_SW_dec>
 8001f6e:	f104 0c10 	add.w	ip, r4, #16
 8001f72:	ebcc 0e06 	rsb	lr, ip, r6
 8001f76:	2104      	movs	r1, #4
 8001f78:	fb9e f1f1 	sdiv	r1, lr, r1
 8001f7c:	2300      	movs	r3, #0
 8001f7e:	9102      	str	r1, [sp, #8]
 8001f80:	461a      	mov	r2, r3
 8001f82:	f8dd a008 	ldr.w	sl, [sp, #8]
 8001f86:	4552      	cmp	r2, sl
 8001f88:	da18      	bge.n	8001fbc <AES_CBC_Decrypt_Append+0x13a>
 8001f8a:	eb09 0003 	add.w	r0, r9, r3
 8001f8e:	f103 0a10 	add.w	sl, r3, #16
 8001f92:	6900      	ldr	r0, [r0, #16]
 8001f94:	4669      	mov	r1, sp
 8001f96:	ba00      	rev	r0, r0
 8001f98:	f84a 0001 	str.w	r0, [sl, r1]
 8001f9c:	f10d 0a20 	add.w	sl, sp, #32
 8001fa0:	3201      	adds	r2, #1
 8001fa2:	f853 100a 	ldr.w	r1, [r3, sl]
 8001fa6:	4048      	eors	r0, r1
 8001fa8:	f843 000a 	str.w	r0, [r3, sl]
 8001fac:	fa90 fb80 	rev.w	fp, r0
 8001fb0:	1938      	adds	r0, r7, r4
 8001fb2:	4418      	add	r0, r3
 8001fb4:	3304      	adds	r3, #4
 8001fb6:	f8c0 b010 	str.w	fp, [r0, #16]
 8001fba:	e7e2      	b.n	8001f82 <AES_CBC_Decrypt_Append+0x100>
 8001fbc:	ea2a 71ea 	bic.w	r1, sl, sl, asr #31
 8001fc0:	008b      	lsls	r3, r1, #2
 8001fc2:	a80c      	add	r0, sp, #48	; 0x30
 8001fc4:	4418      	add	r0, r3
 8001fc6:	2200      	movs	r2, #0
 8001fc8:	449c      	add	ip, r3
 8001fca:	f840 2c20 	str.w	r2, [r0, #-32]
 8001fce:	ebae 0b81 	sub.w	fp, lr, r1, lsl #2
 8001fd2:	f8cd c004 	str.w	ip, [sp, #4]
 8001fd6:	455a      	cmp	r2, fp
 8001fd8:	da20      	bge.n	800201c <AES_CBC_Decrypt_Append+0x19a>
 8001fda:	9801      	ldr	r0, [sp, #4]
 8001fdc:	4440      	add	r0, r8
 8001fde:	ea4f 0ac2 	mov.w	sl, r2, lsl #3
 8001fe2:	f810 9002 	ldrb.w	r9, [r0, r2]
 8001fe6:	f10d 0c30 	add.w	ip, sp, #48	; 0x30
 8001fea:	eb0c 0e81 	add.w	lr, ip, r1, lsl #2
 8001fee:	f1ca 0a18 	rsb	sl, sl, #24
 8001ff2:	fa09 f00a 	lsl.w	r0, r9, sl
 8001ff6:	4684      	mov	ip, r0
 8001ff8:	f85e 0c20 	ldr.w	r0, [lr, #-32]
 8001ffc:	ea8c 0000 	eor.w	r0, ip, r0
 8002000:	f84e 0c20 	str.w	r0, [lr, #-32]
 8002004:	9801      	ldr	r0, [sp, #4]
 8002006:	f85e ec10 	ldr.w	lr, [lr, #-16]
 800200a:	4438      	add	r0, r7
 800200c:	fa2e fa0a 	lsr.w	sl, lr, sl
 8002010:	ea8a 0a09 	eor.w	sl, sl, r9
 8002014:	f800 a002 	strb.w	sl, [r0, r2]
 8002018:	3201      	adds	r2, #1
 800201a:	e7dc      	b.n	8001fd6 <AES_CBC_Decrypt_Append+0x154>
 800201c:	aa0c      	add	r2, sp, #48	; 0x30
 800201e:	441a      	add	r2, r3
 8002020:	ea2b 7eeb 	bic.w	lr, fp, fp, asr #31
 8002024:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002028:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 800202c:	fa20 fe0e 	lsr.w	lr, r0, lr
 8002030:	f852 0c10 	ldr.w	r0, [r2, #-16]
 8002034:	ea0e 0e00 	and.w	lr, lr, r0
 8002038:	f852 0c20 	ldr.w	r0, [r2, #-32]
 800203c:	ea8e 0000 	eor.w	r0, lr, r0
 8002040:	f842 0c20 	str.w	r0, [r2, #-32]
 8002044:	f10d 0820 	add.w	r8, sp, #32
 8002048:	a804      	add	r0, sp, #16
 800204a:	eb08 0e03 	add.w	lr, r8, r3
 800204e:	3101      	adds	r1, #1
 8002050:	4403      	add	r3, r0
 8002052:	2200      	movs	r2, #0
 8002054:	2903      	cmp	r1, #3
 8002056:	f102 0204 	add.w	r2, r2, #4
 800205a:	dc04      	bgt.n	8002066 <AES_CBC_Decrypt_Append+0x1e4>
 800205c:	f85e 0002 	ldr.w	r0, [lr, r2]
 8002060:	5098      	str	r0, [r3, r2]
 8002062:	3101      	adds	r1, #1
 8002064:	e7f6      	b.n	8002054 <AES_CBC_Decrypt_Append+0x1d2>
 8002066:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8002068:	9a03      	ldr	r2, [sp, #12]
 800206a:	a804      	add	r0, sp, #16
 800206c:	4641      	mov	r1, r8
 800206e:	f7ff fdab 	bl	8001bc8 <AES_general_SW_dec>
 8002072:	2300      	movs	r3, #0
 8002074:	18ea      	adds	r2, r5, r3
 8002076:	6951      	ldr	r1, [r2, #20]
 8002078:	f858 2003 	ldr.w	r2, [r8, r3]
 800207c:	404a      	eors	r2, r1
 800207e:	1939      	adds	r1, r7, r4
 8002080:	f848 2003 	str.w	r2, [r8, r3]
 8002084:	ba12      	rev	r2, r2
 8002086:	50ca      	str	r2, [r1, r3]
 8002088:	3304      	adds	r3, #4
 800208a:	2b10      	cmp	r3, #16
 800208c:	d1f2      	bne.n	8002074 <AES_CBC_Decrypt_Append+0x1f2>
 800208e:	e752      	b.n	8001f36 <AES_CBC_Decrypt_Append+0xb4>
 8002090:	f44f 6042 	mov.w	r0, #3104	; 0xc20
 8002094:	e004      	b.n	80020a0 <AES_CBC_Decrypt_Append+0x21e>
 8002096:	f640 401d 	movw	r0, #3101	; 0xc1d
 800209a:	e001      	b.n	80020a0 <AES_CBC_Decrypt_Append+0x21e>
 800209c:	f640 401e 	movw	r0, #3102	; 0xc1e
 80020a0:	b00d      	add	sp, #52	; 0x34
 80020a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080020a6 <AES_CBC_Decrypt_Finish>:
 80020a6:	b138      	cbz	r0, 80020b8 <AES_CBC_Decrypt_Finish+0x12>
 80020a8:	b132      	cbz	r2, 80020b8 <AES_CBC_Decrypt_Finish+0x12>
 80020aa:	7903      	ldrb	r3, [r0, #4]
 80020ac:	f043 0302 	orr.w	r3, r3, #2
 80020b0:	7103      	strb	r3, [r0, #4]
 80020b2:	2000      	movs	r0, #0
 80020b4:	6010      	str	r0, [r2, #0]
 80020b6:	4770      	bx	lr
 80020b8:	f44f 6042 	mov.w	r0, #3104	; 0xc20
 80020bc:	4770      	bx	lr

080020be <SHA256Update>:
 80020be:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80020c2:	4616      	mov	r6, r2
 80020c4:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
 80020c6:	00f3      	lsls	r3, r6, #3
 80020c8:	4604      	mov	r4, r0
 80020ca:	f3c2 00c5 	ubfx	r0, r2, #3, #6
 80020ce:	441a      	add	r2, r3
 80020d0:	429a      	cmp	r2, r3
 80020d2:	460f      	mov	r7, r1
 80020d4:	64e2      	str	r2, [r4, #76]	; 0x4c
 80020d6:	d202      	bcs.n	80020de <SHA256Update+0x20>
 80020d8:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80020da:	3301      	adds	r3, #1
 80020dc:	6523      	str	r3, [r4, #80]	; 0x50
 80020de:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80020e0:	eb03 7356 	add.w	r3, r3, r6, lsr #29
 80020e4:	6523      	str	r3, [r4, #80]	; 0x50
 80020e6:	1833      	adds	r3, r6, r0
 80020e8:	2b3f      	cmp	r3, #63	; 0x3f
 80020ea:	d929      	bls.n	8002140 <SHA256Update+0x82>
 80020ec:	f1c0 0540 	rsb	r5, r0, #64	; 0x40
 80020f0:	4420      	add	r0, r4
 80020f2:	4639      	mov	r1, r7
 80020f4:	300c      	adds	r0, #12
 80020f6:	462a      	mov	r2, r5
 80020f8:	f104 0854 	add.w	r8, r4, #84	; 0x54
 80020fc:	f104 090c 	add.w	r9, r4, #12
 8002100:	f002 f94a 	bl	8004398 <memcpy>
 8002104:	4640      	mov	r0, r8
 8002106:	4649      	mov	r1, r9
 8002108:	f7ff fb2a 	bl	8001760 <SHA256Transform>
 800210c:	f105 033f 	add.w	r3, r5, #63	; 0x3f
 8002110:	42b3      	cmp	r3, r6
 8002112:	d213      	bcs.n	800213c <SHA256Update+0x7e>
 8002114:	1979      	adds	r1, r7, r5
 8002116:	078b      	lsls	r3, r1, #30
 8002118:	d001      	beq.n	800211e <SHA256Update+0x60>
 800211a:	4640      	mov	r0, r8
 800211c:	e00a      	b.n	8002134 <SHA256Update+0x76>
 800211e:	460b      	mov	r3, r1
 8002120:	464a      	mov	r2, r9
 8002122:	3140      	adds	r1, #64	; 0x40
 8002124:	f853 0b04 	ldr.w	r0, [r3], #4
 8002128:	f842 0b04 	str.w	r0, [r2], #4
 800212c:	428b      	cmp	r3, r1
 800212e:	d1f9      	bne.n	8002124 <SHA256Update+0x66>
 8002130:	4640      	mov	r0, r8
 8002132:	4649      	mov	r1, r9
 8002134:	f7ff fb14 	bl	8001760 <SHA256Transform>
 8002138:	3540      	adds	r5, #64	; 0x40
 800213a:	e7e7      	b.n	800210c <SHA256Update+0x4e>
 800213c:	2000      	movs	r0, #0
 800213e:	e000      	b.n	8002142 <SHA256Update+0x84>
 8002140:	2500      	movs	r5, #0
 8002142:	4420      	add	r0, r4
 8002144:	1979      	adds	r1, r7, r5
 8002146:	1b72      	subs	r2, r6, r5
 8002148:	300c      	adds	r0, #12
 800214a:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800214e:	f002 b923 	b.w	8004398 <memcpy>

08002152 <SHA256_Append>:
 8002152:	b538      	push	{r3, r4, r5, lr}
 8002154:	b178      	cbz	r0, 8002176 <SHA256_Append+0x24>
 8002156:	b171      	cbz	r1, 8002176 <SHA256_Append+0x24>
 8002158:	2a00      	cmp	r2, #0
 800215a:	db0c      	blt.n	8002176 <SHA256_Append+0x24>
 800215c:	7903      	ldrb	r3, [r0, #4]
 800215e:	f003 0304 	and.w	r3, r3, #4
 8002162:	f003 04ff 	and.w	r4, r3, #255	; 0xff
 8002166:	b91b      	cbnz	r3, 8002170 <SHA256_Append+0x1e>
 8002168:	f7ff ffa9 	bl	80020be <SHA256Update>
 800216c:	4620      	mov	r0, r4
 800216e:	bd38      	pop	{r3, r4, r5, pc}
 8002170:	f640 70a1 	movw	r0, #4001	; 0xfa1
 8002174:	bd38      	pop	{r3, r4, r5, pc}
 8002176:	f640 70a3 	movw	r0, #4003	; 0xfa3
 800217a:	bd38      	pop	{r3, r4, r5, pc}

0800217c <SHA256Init>:
 800217c:	4b0c      	ldr	r3, [pc, #48]	; (80021b0 <SHA256Init+0x34>)
 800217e:	6543      	str	r3, [r0, #84]	; 0x54
 8002180:	4b0c      	ldr	r3, [pc, #48]	; (80021b4 <SHA256Init+0x38>)
 8002182:	6583      	str	r3, [r0, #88]	; 0x58
 8002184:	4b0c      	ldr	r3, [pc, #48]	; (80021b8 <SHA256Init+0x3c>)
 8002186:	65c3      	str	r3, [r0, #92]	; 0x5c
 8002188:	4b0c      	ldr	r3, [pc, #48]	; (80021bc <SHA256Init+0x40>)
 800218a:	6603      	str	r3, [r0, #96]	; 0x60
 800218c:	4b0c      	ldr	r3, [pc, #48]	; (80021c0 <SHA256Init+0x44>)
 800218e:	6643      	str	r3, [r0, #100]	; 0x64
 8002190:	4b0c      	ldr	r3, [pc, #48]	; (80021c4 <SHA256Init+0x48>)
 8002192:	6683      	str	r3, [r0, #104]	; 0x68
 8002194:	4b0c      	ldr	r3, [pc, #48]	; (80021c8 <SHA256Init+0x4c>)
 8002196:	66c3      	str	r3, [r0, #108]	; 0x6c
 8002198:	f103 5374 	add.w	r3, r3, #1023410176	; 0x3d000000
 800219c:	f5a3 0323 	sub.w	r3, r3, #10682368	; 0xa30000
 80021a0:	f6a3 4392 	subw	r3, r3, #3218	; 0xc92
 80021a4:	6703      	str	r3, [r0, #112]	; 0x70
 80021a6:	2300      	movs	r3, #0
 80021a8:	64c3      	str	r3, [r0, #76]	; 0x4c
 80021aa:	6503      	str	r3, [r0, #80]	; 0x50
 80021ac:	4770      	bx	lr
 80021ae:	bf00      	nop
 80021b0:	6a09e667 	.word	0x6a09e667
 80021b4:	bb67ae85 	.word	0xbb67ae85
 80021b8:	3c6ef372 	.word	0x3c6ef372
 80021bc:	a54ff53a 	.word	0xa54ff53a
 80021c0:	510e527f 	.word	0x510e527f
 80021c4:	9b05688c 	.word	0x9b05688c
 80021c8:	1f83d9ab 	.word	0x1f83d9ab

080021cc <SHA256_Init>:
 80021cc:	b508      	push	{r3, lr}
 80021ce:	b138      	cbz	r0, 80021e0 <SHA256_Init+0x14>
 80021d0:	7902      	ldrb	r2, [r0, #4]
 80021d2:	f022 0206 	bic.w	r2, r2, #6
 80021d6:	7102      	strb	r2, [r0, #4]
 80021d8:	f7ff ffd0 	bl	800217c <SHA256Init>
 80021dc:	2000      	movs	r0, #0
 80021de:	bd08      	pop	{r3, pc}
 80021e0:	f640 70a3 	movw	r0, #4003	; 0xfa3
 80021e4:	bd08      	pop	{r3, pc}

080021e6 <SHA256Final>:
 80021e6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80021e8:	2300      	movs	r3, #0
 80021ea:	4607      	mov	r7, r0
 80021ec:	460e      	mov	r6, r1
 80021ee:	2b03      	cmp	r3, #3
 80021f0:	bfd4      	ite	le
 80021f2:	214c      	movle	r1, #76	; 0x4c
 80021f4:	2148      	movgt	r1, #72	; 0x48
 80021f6:	4439      	add	r1, r7
 80021f8:	43da      	mvns	r2, r3
 80021fa:	f002 0203 	and.w	r2, r2, #3
 80021fe:	6849      	ldr	r1, [r1, #4]
 8002200:	00d2      	lsls	r2, r2, #3
 8002202:	fa21 f202 	lsr.w	r2, r1, r2
 8002206:	f80d 2003 	strb.w	r2, [sp, r3]
 800220a:	3301      	adds	r3, #1
 800220c:	2b08      	cmp	r3, #8
 800220e:	d1ee      	bne.n	80021ee <SHA256Final+0x8>
 8002210:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002212:	6d3d      	ldr	r5, [r7, #80]	; 0x50
 8002214:	2400      	movs	r4, #0
 8002216:	431c      	orrs	r4, r3
 8002218:	08e2      	lsrs	r2, r4, #3
 800221a:	ea42 7245 	orr.w	r2, r2, r5, lsl #29
 800221e:	08eb      	lsrs	r3, r5, #3
 8002220:	243f      	movs	r4, #63	; 0x3f
 8002222:	2500      	movs	r5, #0
 8002224:	4014      	ands	r4, r2
 8002226:	401d      	ands	r5, r3
 8002228:	2d00      	cmp	r5, #0
 800222a:	bf08      	it	eq
 800222c:	2c38      	cmpeq	r4, #56	; 0x38
 800222e:	443c      	add	r4, r7
 8002230:	f04f 0380 	mov.w	r3, #128	; 0x80
 8002234:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8002238:	7323      	strb	r3, [r4, #12]
 800223a:	f102 0201 	add.w	r2, r2, #1
 800223e:	d214      	bcs.n	800226a <SHA256Final+0x84>
 8002240:	2a37      	cmp	r2, #55	; 0x37
 8002242:	f04f 0300 	mov.w	r3, #0
 8002246:	dc03      	bgt.n	8002250 <SHA256Final+0x6a>
 8002248:	18b9      	adds	r1, r7, r2
 800224a:	3201      	adds	r2, #1
 800224c:	730b      	strb	r3, [r1, #12]
 800224e:	e7f7      	b.n	8002240 <SHA256Final+0x5a>
 8002250:	18fa      	adds	r2, r7, r3
 8002252:	f81d 1003 	ldrb.w	r1, [sp, r3]
 8002256:	f882 1044 	strb.w	r1, [r2, #68]	; 0x44
 800225a:	3301      	adds	r3, #1
 800225c:	2b08      	cmp	r3, #8
 800225e:	d1f7      	bne.n	8002250 <SHA256Final+0x6a>
 8002260:	f107 0054 	add.w	r0, r7, #84	; 0x54
 8002264:	f107 010c 	add.w	r1, r7, #12
 8002268:	e01f      	b.n	80022aa <SHA256Final+0xc4>
 800226a:	2a40      	cmp	r2, #64	; 0x40
 800226c:	d004      	beq.n	8002278 <SHA256Final+0x92>
 800226e:	18bb      	adds	r3, r7, r2
 8002270:	2100      	movs	r1, #0
 8002272:	7319      	strb	r1, [r3, #12]
 8002274:	3201      	adds	r2, #1
 8002276:	e7f8      	b.n	800226a <SHA256Final+0x84>
 8002278:	f107 0554 	add.w	r5, r7, #84	; 0x54
 800227c:	f107 040c 	add.w	r4, r7, #12
 8002280:	4628      	mov	r0, r5
 8002282:	4621      	mov	r1, r4
 8002284:	f7ff fa6c 	bl	8001760 <SHA256Transform>
 8002288:	2200      	movs	r2, #0
 800228a:	18b9      	adds	r1, r7, r2
 800228c:	3201      	adds	r2, #1
 800228e:	2300      	movs	r3, #0
 8002290:	2a38      	cmp	r2, #56	; 0x38
 8002292:	730b      	strb	r3, [r1, #12]
 8002294:	d1f9      	bne.n	800228a <SHA256Final+0xa4>
 8002296:	18fa      	adds	r2, r7, r3
 8002298:	f81d 1003 	ldrb.w	r1, [sp, r3]
 800229c:	f882 1044 	strb.w	r1, [r2, #68]	; 0x44
 80022a0:	3301      	adds	r3, #1
 80022a2:	2b08      	cmp	r3, #8
 80022a4:	d1f7      	bne.n	8002296 <SHA256Final+0xb0>
 80022a6:	4628      	mov	r0, r5
 80022a8:	4621      	mov	r1, r4
 80022aa:	f7ff fa59 	bl	8001760 <SHA256Transform>
 80022ae:	2400      	movs	r4, #0
 80022b0:	193b      	adds	r3, r7, r4
 80022b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022b4:	ba1b      	rev	r3, r3
 80022b6:	5133      	str	r3, [r6, r4]
 80022b8:	3404      	adds	r4, #4
 80022ba:	2c20      	cmp	r4, #32
 80022bc:	d1f8      	bne.n	80022b0 <SHA256Final+0xca>
 80022be:	f107 000c 	add.w	r0, r7, #12
 80022c2:	2100      	movs	r1, #0
 80022c4:	2240      	movs	r2, #64	; 0x40
 80022c6:	f002 f875 	bl	80043b4 <memset>
 80022ca:	4622      	mov	r2, r4
 80022cc:	f107 0054 	add.w	r0, r7, #84	; 0x54
 80022d0:	2100      	movs	r1, #0
 80022d2:	f002 f86f 	bl	80043b4 <memset>
 80022d6:	f107 004c 	add.w	r0, r7, #76	; 0x4c
 80022da:	2100      	movs	r1, #0
 80022dc:	2208      	movs	r2, #8
 80022de:	f002 f869 	bl	80043b4 <memset>
 80022e2:	b003      	add	sp, #12
 80022e4:	bdf0      	pop	{r4, r5, r6, r7, pc}

080022e6 <SHA256_Finish>:
 80022e6:	b570      	push	{r4, r5, r6, lr}
 80022e8:	460d      	mov	r5, r1
 80022ea:	b088      	sub	sp, #32
 80022ec:	4616      	mov	r6, r2
 80022ee:	4604      	mov	r4, r0
 80022f0:	b1c0      	cbz	r0, 8002324 <SHA256_Finish+0x3e>
 80022f2:	b1b9      	cbz	r1, 8002324 <SHA256_Finish+0x3e>
 80022f4:	b1b2      	cbz	r2, 8002324 <SHA256_Finish+0x3e>
 80022f6:	6883      	ldr	r3, [r0, #8]
 80022f8:	3b01      	subs	r3, #1
 80022fa:	2b1f      	cmp	r3, #31
 80022fc:	d815      	bhi.n	800232a <SHA256_Finish+0x44>
 80022fe:	7903      	ldrb	r3, [r0, #4]
 8002300:	f043 0304 	orr.w	r3, r3, #4
 8002304:	7103      	strb	r3, [r0, #4]
 8002306:	4669      	mov	r1, sp
 8002308:	f7ff ff6d 	bl	80021e6 <SHA256Final>
 800230c:	2300      	movs	r3, #0
 800230e:	68a2      	ldr	r2, [r4, #8]
 8002310:	4293      	cmp	r3, r2
 8002312:	da04      	bge.n	800231e <SHA256_Finish+0x38>
 8002314:	f81d 2003 	ldrb.w	r2, [sp, r3]
 8002318:	54ea      	strb	r2, [r5, r3]
 800231a:	3301      	adds	r3, #1
 800231c:	e7f7      	b.n	800230e <SHA256_Finish+0x28>
 800231e:	6032      	str	r2, [r6, #0]
 8002320:	2000      	movs	r0, #0
 8002322:	e004      	b.n	800232e <SHA256_Finish+0x48>
 8002324:	f640 70a3 	movw	r0, #4003	; 0xfa3
 8002328:	e001      	b.n	800232e <SHA256_Finish+0x48>
 800232a:	f640 70a2 	movw	r0, #4002	; 0xfa2
 800232e:	b008      	add	sp, #32
 8002330:	bd70      	pop	{r4, r5, r6, pc}

08002332 <StAllocBig>:
 8002332:	88d3      	ldrh	r3, [r2, #6]
 8002334:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002336:	1c4c      	adds	r4, r1, #1
 8002338:	f103 0608 	add.w	r6, r3, #8
 800233c:	00a4      	lsls	r4, r4, #2
 800233e:	8895      	ldrh	r5, [r2, #4]
 8002340:	19a7      	adds	r7, r4, r6
 8002342:	42af      	cmp	r7, r5
 8002344:	d80d      	bhi.n	8002362 <StAllocBig+0x30>
 8002346:	6815      	ldr	r5, [r2, #0]
 8002348:	18ef      	adds	r7, r5, r3
 800234a:	6007      	str	r7, [r0, #0]
 800234c:	6817      	ldr	r7, [r2, #0]
 800234e:	443e      	add	r6, r7
 8002350:	50ee      	str	r6, [r5, r3]
 8002352:	6803      	ldr	r3, [r0, #0]
 8002354:	7199      	strb	r1, [r3, #6]
 8002356:	88d3      	ldrh	r3, [r2, #6]
 8002358:	3308      	adds	r3, #8
 800235a:	441c      	add	r4, r3
 800235c:	80d4      	strh	r4, [r2, #6]
 800235e:	2000      	movs	r0, #0
 8002360:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002362:	f240 30ed 	movw	r0, #1005	; 0x3ed
 8002366:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002368 <StFreeBig>:
 8002368:	6803      	ldr	r3, [r0, #0]
 800236a:	b14b      	cbz	r3, 8002380 <StFreeBig+0x18>
 800236c:	b141      	cbz	r1, 8002380 <StFreeBig+0x18>
 800236e:	88ca      	ldrh	r2, [r1, #6]
 8002370:	799b      	ldrb	r3, [r3, #6]
 8002372:	3a08      	subs	r2, #8
 8002374:	43db      	mvns	r3, r3
 8002376:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800237a:	80cb      	strh	r3, [r1, #6]
 800237c:	2300      	movs	r3, #0
 800237e:	6003      	str	r3, [r0, #0]
 8002380:	4770      	bx	lr

08002382 <InitBig>:
 8002382:	b510      	push	{r4, lr}
 8002384:	2301      	movs	r3, #1
 8002386:	7982      	ldrb	r2, [r0, #6]
 8002388:	3201      	adds	r2, #1
 800238a:	4293      	cmp	r3, r2
 800238c:	6802      	ldr	r2, [r0, #0]
 800238e:	d205      	bcs.n	800239c <InitBig+0x1a>
 8002390:	2400      	movs	r4, #0
 8002392:	f842 4023 	str.w	r4, [r2, r3, lsl #2]
 8002396:	3301      	adds	r3, #1
 8002398:	b29b      	uxth	r3, r3
 800239a:	e7f4      	b.n	8002386 <InitBig+0x4>
 800239c:	2301      	movs	r3, #1
 800239e:	2900      	cmp	r1, #0
 80023a0:	8083      	strh	r3, [r0, #4]
 80023a2:	bfb3      	iteet	lt
 80023a4:	4249      	neglt	r1, r1
 80023a6:	2300      	movge	r3, #0
 80023a8:	71c3      	strbge	r3, [r0, #7]
 80023aa:	71c3      	strblt	r3, [r0, #7]
 80023ac:	6011      	str	r1, [r2, #0]
 80023ae:	bd10      	pop	{r4, pc}

080023b0 <CopyBig>:
 80023b0:	8883      	ldrh	r3, [r0, #4]
 80023b2:	798a      	ldrb	r2, [r1, #6]
 80023b4:	429a      	cmp	r2, r3
 80023b6:	b570      	push	{r4, r5, r6, lr}
 80023b8:	d205      	bcs.n	80023c6 <CopyBig+0x16>
 80023ba:	3201      	adds	r2, #1
 80023bc:	429a      	cmp	r2, r3
 80023be:	d31e      	bcc.n	80023fe <CopyBig+0x4e>
 80023c0:	f241 44b5 	movw	r4, #5301	; 0x14b5
 80023c4:	e000      	b.n	80023c8 <CopyBig+0x18>
 80023c6:	2400      	movs	r4, #0
 80023c8:	79c2      	ldrb	r2, [r0, #7]
 80023ca:	71ca      	strb	r2, [r1, #7]
 80023cc:	808b      	strh	r3, [r1, #4]
 80023ce:	2200      	movs	r2, #0
 80023d0:	429a      	cmp	r2, r3
 80023d2:	da07      	bge.n	80023e4 <CopyBig+0x34>
 80023d4:	6805      	ldr	r5, [r0, #0]
 80023d6:	f855 6022 	ldr.w	r6, [r5, r2, lsl #2]
 80023da:	680d      	ldr	r5, [r1, #0]
 80023dc:	f845 6022 	str.w	r6, [r5, r2, lsl #2]
 80023e0:	3201      	adds	r2, #1
 80023e2:	e7f5      	b.n	80023d0 <CopyBig+0x20>
 80023e4:	2200      	movs	r2, #0
 80023e6:	798d      	ldrb	r5, [r1, #6]
 80023e8:	18d0      	adds	r0, r2, r3
 80023ea:	4285      	cmp	r5, r0
 80023ec:	db05      	blt.n	80023fa <CopyBig+0x4a>
 80023ee:	680d      	ldr	r5, [r1, #0]
 80023f0:	2600      	movs	r6, #0
 80023f2:	f845 6020 	str.w	r6, [r5, r0, lsl #2]
 80023f6:	3201      	adds	r2, #1
 80023f8:	e7f5      	b.n	80023e6 <CopyBig+0x36>
 80023fa:	4620      	mov	r0, r4
 80023fc:	bd70      	pop	{r4, r5, r6, pc}
 80023fe:	f241 40b5 	movw	r0, #5301	; 0x14b5
 8002402:	bd70      	pop	{r4, r5, r6, pc}

08002404 <Add_Moduli_Big>:
 8002404:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002408:	4616      	mov	r6, r2
 800240a:	f8d0 9000 	ldr.w	r9, [r0]
 800240e:	6817      	ldr	r7, [r2, #0]
 8002410:	888b      	ldrh	r3, [r1, #4]
 8002412:	8882      	ldrh	r2, [r0, #4]
 8002414:	f8d1 8000 	ldr.w	r8, [r1]
 8002418:	4293      	cmp	r3, r2
 800241a:	bf34      	ite	cc
 800241c:	469a      	movcc	sl, r3
 800241e:	4692      	movcs	sl, r2
 8002420:	eb09 0c82 	add.w	ip, r9, r2, lsl #2
 8002424:	2500      	movs	r5, #0
 8002426:	7984      	ldrb	r4, [r0, #6]
 8002428:	eb05 0e02 	add.w	lr, r5, r2
 800242c:	3401      	adds	r4, #1
 800242e:	45a6      	cmp	lr, r4
 8002430:	f04f 0400 	mov.w	r4, #0
 8002434:	d203      	bcs.n	800243e <Add_Moduli_Big+0x3a>
 8002436:	f84c 4025 	str.w	r4, [ip, r5, lsl #2]
 800243a:	3501      	adds	r5, #1
 800243c:	e7f3      	b.n	8002426 <Add_Moduli_Big+0x22>
 800243e:	eb08 0c83 	add.w	ip, r8, r3, lsl #2
 8002442:	798d      	ldrb	r5, [r1, #6]
 8002444:	eb04 0e03 	add.w	lr, r4, r3
 8002448:	3501      	adds	r5, #1
 800244a:	45ae      	cmp	lr, r5
 800244c:	d204      	bcs.n	8002458 <Add_Moduli_Big+0x54>
 800244e:	2500      	movs	r5, #0
 8002450:	f84c 5024 	str.w	r5, [ip, r4, lsl #2]
 8002454:	3401      	adds	r4, #1
 8002456:	e7f4      	b.n	8002442 <Add_Moduli_Big+0x3e>
 8002458:	429a      	cmp	r2, r3
 800245a:	bf38      	it	cc
 800245c:	4608      	movcc	r0, r1
 800245e:	4631      	mov	r1, r6
 8002460:	f7ff ffa6 	bl	80023b0 <CopyBig>
 8002464:	ea4f 0b8a 	mov.w	fp, sl, lsl #2
 8002468:	46d4      	mov	ip, sl
 800246a:	2200      	movs	r2, #0
 800246c:	2000      	movs	r0, #0
 800246e:	2100      	movs	r1, #0
 8002470:	455a      	cmp	r2, fp
 8002472:	d00f      	beq.n	8002494 <Add_Moduli_Big+0x90>
 8002474:	f859 3002 	ldr.w	r3, [r9, r2]
 8002478:	f858 4002 	ldr.w	r4, [r8, r2]
 800247c:	2500      	movs	r5, #0
 800247e:	18e4      	adds	r4, r4, r3
 8002480:	f145 0500 	adc.w	r5, r5, #0
 8002484:	1824      	adds	r4, r4, r0
 8002486:	eb45 0501 	adc.w	r5, r5, r1
 800248a:	50bc      	str	r4, [r7, r2]
 800248c:	4628      	mov	r0, r5
 800248e:	2100      	movs	r1, #0
 8002490:	3204      	adds	r2, #4
 8002492:	e7ed      	b.n	8002470 <Add_Moduli_Big+0x6c>
 8002494:	ea50 0301 	orrs.w	r3, r0, r1
 8002498:	88b1      	ldrh	r1, [r6, #4]
 800249a:	d104      	bne.n	80024a6 <Add_Moduli_Big+0xa2>
 800249c:	f857 3021 	ldr.w	r3, [r7, r1, lsl #2]
 80024a0:	b9b3      	cbnz	r3, 80024d0 <Add_Moduli_Big+0xcc>
 80024a2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80024a6:	58bb      	ldr	r3, [r7, r2]
 80024a8:	f10a 4a80 	add.w	sl, sl, #1073741824	; 0x40000000
 80024ac:	3301      	adds	r3, #1
 80024ae:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 80024b2:	50bb      	str	r3, [r7, r2]
 80024b4:	eb07 038a 	add.w	r3, r7, sl, lsl #2
 80024b8:	f853 2f04 	ldr.w	r2, [r3, #4]!
 80024bc:	2a00      	cmp	r2, #0
 80024be:	d1ed      	bne.n	800249c <Add_Moduli_Big+0x98>
 80024c0:	458c      	cmp	ip, r1
 80024c2:	d8eb      	bhi.n	800249c <Add_Moduli_Big+0x98>
 80024c4:	685a      	ldr	r2, [r3, #4]
 80024c6:	3201      	adds	r2, #1
 80024c8:	f10c 0c01 	add.w	ip, ip, #1
 80024cc:	605a      	str	r2, [r3, #4]
 80024ce:	e7f3      	b.n	80024b8 <Add_Moduli_Big+0xb4>
 80024d0:	3101      	adds	r1, #1
 80024d2:	80b1      	strh	r1, [r6, #4]
 80024d4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

080024d8 <IsZeroBig>:
 80024d8:	8883      	ldrh	r3, [r0, #4]
 80024da:	2b01      	cmp	r3, #1
 80024dc:	d106      	bne.n	80024ec <IsZeroBig+0x14>
 80024de:	6803      	ldr	r3, [r0, #0]
 80024e0:	6818      	ldr	r0, [r3, #0]
 80024e2:	f1d0 0001 	rsbs	r0, r0, #1
 80024e6:	bf38      	it	cc
 80024e8:	2000      	movcc	r0, #0
 80024ea:	4770      	bx	lr
 80024ec:	2000      	movs	r0, #0
 80024ee:	4770      	bx	lr

080024f0 <SetZeroBig>:
 80024f0:	b510      	push	{r4, lr}
 80024f2:	2300      	movs	r3, #0
 80024f4:	71c3      	strb	r3, [r0, #7]
 80024f6:	7981      	ldrb	r1, [r0, #6]
 80024f8:	b29a      	uxth	r2, r3
 80024fa:	3101      	adds	r1, #1
 80024fc:	428a      	cmp	r2, r1
 80024fe:	f103 0301 	add.w	r3, r3, #1
 8002502:	d204      	bcs.n	800250e <SetZeroBig+0x1e>
 8002504:	6801      	ldr	r1, [r0, #0]
 8002506:	2400      	movs	r4, #0
 8002508:	f841 4022 	str.w	r4, [r1, r2, lsl #2]
 800250c:	e7f3      	b.n	80024f6 <SetZeroBig+0x6>
 800250e:	2301      	movs	r3, #1
 8002510:	8083      	strh	r3, [r0, #4]
 8002512:	bd10      	pop	{r4, pc}

08002514 <SignBig>:
 8002514:	f990 0007 	ldrsb.w	r0, [r0, #7]
 8002518:	1e43      	subs	r3, r0, #1
 800251a:	4258      	negs	r0, r3
 800251c:	4158      	adcs	r0, r3
 800251e:	4770      	bx	lr

08002520 <EvenBig>:
 8002520:	6803      	ldr	r3, [r0, #0]
 8002522:	6818      	ldr	r0, [r3, #0]
 8002524:	f000 0001 	and.w	r0, r0, #1
 8002528:	f080 0001 	eor.w	r0, r0, #1
 800252c:	4770      	bx	lr

0800252e <CompareBig>:
 800252e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002532:	79c2      	ldrb	r2, [r0, #7]
 8002534:	79cb      	ldrb	r3, [r1, #7]
 8002536:	4293      	cmp	r3, r2
 8002538:	b254      	sxtb	r4, r2
 800253a:	d132      	bne.n	80025a2 <CompareBig+0x74>
 800253c:	8884      	ldrh	r4, [r0, #4]
 800253e:	888d      	ldrh	r5, [r1, #4]
 8002540:	42ac      	cmp	r4, r5
 8002542:	d820      	bhi.n	8002586 <CompareBig+0x58>
 8002544:	d326      	bcc.n	8002594 <CompareBig+0x66>
 8002546:	6800      	ldr	r0, [r0, #0]
 8002548:	6809      	ldr	r1, [r1, #0]
 800254a:	eb00 0784 	add.w	r7, r0, r4, lsl #2
 800254e:	eb01 0c85 	add.w	ip, r1, r5, lsl #2
 8002552:	2301      	movs	r3, #1
 8002554:	f06f 0603 	mvn.w	r6, #3
 8002558:	435e      	muls	r6, r3
 800255a:	f857 8006 	ldr.w	r8, [r7, r6]
 800255e:	f85c 6006 	ldr.w	r6, [ip, r6]
 8002562:	45b0      	cmp	r8, r6
 8002564:	d104      	bne.n	8002570 <CompareBig+0x42>
 8002566:	42a3      	cmp	r3, r4
 8002568:	d802      	bhi.n	8002570 <CompareBig+0x42>
 800256a:	3301      	adds	r3, #1
 800256c:	42a3      	cmp	r3, r4
 800256e:	d9f1      	bls.n	8002554 <CompareBig+0x26>
 8002570:	1e5e      	subs	r6, r3, #1
 8002572:	42a6      	cmp	r6, r4
 8002574:	d01e      	beq.n	80025b4 <CompareBig+0x86>
 8002576:	1ae4      	subs	r4, r4, r3
 8002578:	1aeb      	subs	r3, r5, r3
 800257a:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 800257e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8002582:	4298      	cmp	r0, r3
 8002584:	d906      	bls.n	8002594 <CompareBig+0x66>
 8002586:	2a00      	cmp	r2, #0
 8002588:	bf0c      	ite	eq
 800258a:	2002      	moveq	r0, #2
 800258c:	f06f 0001 	mvnne.w	r0, #1
 8002590:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002594:	2a00      	cmp	r2, #0
 8002596:	bf0c      	ite	eq
 8002598:	f04f 30ff 	moveq.w	r0, #4294967295	; 0xffffffff
 800259c:	2001      	movne	r0, #1
 800259e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80025a2:	2c01      	cmp	r4, #1
 80025a4:	d109      	bne.n	80025ba <CompareBig+0x8c>
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	bf0c      	ite	eq
 80025aa:	f06f 0002 	mvneq.w	r0, #2
 80025ae:	2003      	movne	r0, #3
 80025b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80025b4:	2000      	movs	r0, #0
 80025b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80025ba:	2003      	movs	r0, #3
 80025bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080025c0 <CountBits>:
 80025c0:	b510      	push	{r4, lr}
 80025c2:	4604      	mov	r4, r0
 80025c4:	f7ff ff88 	bl	80024d8 <IsZeroBig>
 80025c8:	b9a0      	cbnz	r0, 80025f4 <CountBits+0x34>
 80025ca:	88a2      	ldrh	r2, [r4, #4]
 80025cc:	6821      	ldr	r1, [r4, #0]
 80025ce:	0153      	lsls	r3, r2, #5
 80025d0:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 80025d4:	3a01      	subs	r2, #1
 80025d6:	f851 0022 	ldr.w	r0, [r1, r2, lsl #2]
 80025da:	f1a3 0120 	sub.w	r1, r3, #32
 80025de:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80025e2:	ea02 0400 	and.w	r4, r2, r0
 80025e6:	4294      	cmp	r4, r2
 80025e8:	d006      	beq.n	80025f8 <CountBits+0x38>
 80025ea:	428b      	cmp	r3, r1
 80025ec:	d004      	beq.n	80025f8 <CountBits+0x38>
 80025ee:	0852      	lsrs	r2, r2, #1
 80025f0:	3b01      	subs	r3, #1
 80025f2:	e7f6      	b.n	80025e2 <CountBits+0x22>
 80025f4:	2001      	movs	r0, #1
 80025f6:	bd10      	pop	{r4, pc}
 80025f8:	4618      	mov	r0, r3
 80025fa:	bd10      	pop	{r4, pc}

080025fc <GiveBit>:
 80025fc:	f001 031f 	and.w	r3, r1, #31
 8002600:	2201      	movs	r2, #1
 8002602:	fa02 f303 	lsl.w	r3, r2, r3
 8002606:	0949      	lsrs	r1, r1, #5
 8002608:	6802      	ldr	r2, [r0, #0]
 800260a:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
 800260e:	4018      	ands	r0, r3
 8002610:	1ac3      	subs	r3, r0, r3
 8002612:	4258      	negs	r0, r3
 8002614:	4158      	adcs	r0, r3
 8002616:	4770      	bx	lr

08002618 <W8_to_Big>:
 8002618:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800261a:	460c      	mov	r4, r1
 800261c:	2a00      	cmp	r2, #0
 800261e:	d053      	beq.n	80026c8 <W8_to_Big+0xb0>
 8002620:	b908      	cbnz	r0, 8002626 <W8_to_Big+0xe>
 8002622:	2900      	cmp	r1, #0
 8002624:	d150      	bne.n	80026c8 <W8_to_Big+0xb0>
 8002626:	1ce7      	adds	r7, r4, #3
 8002628:	7993      	ldrb	r3, [r2, #6]
 800262a:	08bf      	lsrs	r7, r7, #2
 800262c:	42bb      	cmp	r3, r7
 800262e:	d348      	bcc.n	80026c2 <W8_to_Big+0xaa>
 8002630:	2c00      	cmp	r4, #0
 8002632:	d041      	beq.n	80026b8 <W8_to_Big+0xa0>
 8002634:	2104      	movs	r1, #4
 8002636:	fb94 f1f1 	sdiv	r1, r4, r1
 800263a:	1906      	adds	r6, r0, r4
 800263c:	2500      	movs	r5, #0
 800263e:	428d      	cmp	r5, r1
 8002640:	6813      	ldr	r3, [r2, #0]
 8002642:	da07      	bge.n	8002654 <W8_to_Big+0x3c>
 8002644:	f856 cd04 	ldr.w	ip, [r6, #-4]!
 8002648:	fa9c fc8c 	rev.w	ip, ip
 800264c:	f843 c025 	str.w	ip, [r3, r5, lsl #2]
 8002650:	3501      	adds	r5, #1
 8002652:	e7f4      	b.n	800263e <W8_to_Big+0x26>
 8002654:	ea21 75e1 	bic.w	r5, r1, r1, asr #31
 8002658:	00ae      	lsls	r6, r5, #2
 800265a:	f892 c006 	ldrb.w	ip, [r2, #6]
 800265e:	4565      	cmp	r5, ip
 8002660:	da06      	bge.n	8002670 <W8_to_Big+0x58>
 8002662:	f04f 0c00 	mov.w	ip, #0
 8002666:	f843 c006 	str.w	ip, [r3, r6]
 800266a:	3501      	adds	r5, #1
 800266c:	3604      	adds	r6, #4
 800266e:	e7f4      	b.n	800265a <W8_to_Big+0x42>
 8002670:	f014 0403 	ands.w	r4, r4, #3
 8002674:	d101      	bne.n	800267a <W8_to_Big+0x62>
 8002676:	8097      	strh	r7, [r2, #4]
 8002678:	e013      	b.n	80026a2 <W8_to_Big+0x8a>
 800267a:	7806      	ldrb	r6, [r0, #0]
 800267c:	f843 6021 	str.w	r6, [r3, r1, lsl #2]
 8002680:	eb03 0581 	add.w	r5, r3, r1, lsl #2
 8002684:	2101      	movs	r1, #1
 8002686:	42a1      	cmp	r1, r4
 8002688:	daf5      	bge.n	8002676 <W8_to_Big+0x5e>
 800268a:	f810 c001 	ldrb.w	ip, [r0, r1]
 800268e:	682e      	ldr	r6, [r5, #0]
 8002690:	ea4c 2606 	orr.w	r6, ip, r6, lsl #8
 8002694:	602e      	str	r6, [r5, #0]
 8002696:	3101      	adds	r1, #1
 8002698:	e7f5      	b.n	8002686 <W8_to_Big+0x6e>
 800269a:	2901      	cmp	r1, #1
 800269c:	d009      	beq.n	80026b2 <W8_to_Big+0x9a>
 800269e:	3901      	subs	r1, #1
 80026a0:	8091      	strh	r1, [r2, #4]
 80026a2:	8891      	ldrh	r1, [r2, #4]
 80026a4:	f101 4080 	add.w	r0, r1, #1073741824	; 0x40000000
 80026a8:	3801      	subs	r0, #1
 80026aa:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 80026ae:	2800      	cmp	r0, #0
 80026b0:	d0f3      	beq.n	800269a <W8_to_Big+0x82>
 80026b2:	2000      	movs	r0, #0
 80026b4:	71d0      	strb	r0, [r2, #7]
 80026b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80026b8:	4610      	mov	r0, r2
 80026ba:	f7ff ff19 	bl	80024f0 <SetZeroBig>
 80026be:	4620      	mov	r0, r4
 80026c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80026c2:	f241 40b5 	movw	r0, #5301	; 0x14b5
 80026c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80026c8:	f241 40b8 	movw	r0, #5304	; 0x14b8
 80026cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080026ce <FastMul2>:
 80026ce:	b570      	push	{r4, r5, r6, lr}
 80026d0:	4604      	mov	r4, r0
 80026d2:	f7ff ff01 	bl	80024d8 <IsZeroBig>
 80026d6:	b108      	cbz	r0, 80026dc <FastMul2+0xe>
 80026d8:	2000      	movs	r0, #0
 80026da:	bd70      	pop	{r4, r5, r6, pc}
 80026dc:	88a1      	ldrh	r1, [r4, #4]
 80026de:	4608      	mov	r0, r1
 80026e0:	008a      	lsls	r2, r1, #2
 80026e2:	6823      	ldr	r3, [r4, #0]
 80026e4:	b150      	cbz	r0, 80026fc <FastMul2+0x2e>
 80026e6:	189d      	adds	r5, r3, r2
 80026e8:	3801      	subs	r0, #1
 80026ea:	f855 6c04 	ldr.w	r6, [r5, #-4]
 80026ee:	589d      	ldr	r5, [r3, r2]
 80026f0:	006d      	lsls	r5, r5, #1
 80026f2:	ea45 75d6 	orr.w	r5, r5, r6, lsr #31
 80026f6:	509d      	str	r5, [r3, r2]
 80026f8:	3a04      	subs	r2, #4
 80026fa:	e7f2      	b.n	80026e2 <FastMul2+0x14>
 80026fc:	681a      	ldr	r2, [r3, #0]
 80026fe:	0052      	lsls	r2, r2, #1
 8002700:	601a      	str	r2, [r3, #0]
 8002702:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8002706:	2b01      	cmp	r3, #1
 8002708:	d1e6      	bne.n	80026d8 <FastMul2+0xa>
 800270a:	3101      	adds	r1, #1
 800270c:	b289      	uxth	r1, r1
 800270e:	79a2      	ldrb	r2, [r4, #6]
 8002710:	80a1      	strh	r1, [r4, #4]
 8002712:	f241 43b5 	movw	r3, #5301	; 0x14b5
 8002716:	3101      	adds	r1, #1
 8002718:	4291      	cmp	r1, r2
 800271a:	bf8c      	ite	hi
 800271c:	4618      	movhi	r0, r3
 800271e:	2000      	movls	r0, #0
 8002720:	bd70      	pop	{r4, r5, r6, pc}

08002722 <FastDiv2>:
 8002722:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002724:	4604      	mov	r4, r0
 8002726:	f7ff fed7 	bl	80024d8 <IsZeroBig>
 800272a:	b9c8      	cbnz	r0, 8002760 <FastDiv2+0x3e>
 800272c:	88a5      	ldrh	r5, [r4, #4]
 800272e:	4601      	mov	r1, r0
 8002730:	1e6a      	subs	r2, r5, #1
 8002732:	4291      	cmp	r1, r2
 8002734:	6823      	ldr	r3, [r4, #0]
 8002736:	d209      	bcs.n	800274c <FastDiv2+0x2a>
 8002738:	0088      	lsls	r0, r1, #2
 800273a:	181e      	adds	r6, r3, r0
 800273c:	3101      	adds	r1, #1
 800273e:	6877      	ldr	r7, [r6, #4]
 8002740:	581e      	ldr	r6, [r3, r0]
 8002742:	0876      	lsrs	r6, r6, #1
 8002744:	ea46 76c7 	orr.w	r6, r6, r7, lsl #31
 8002748:	501e      	str	r6, [r3, r0]
 800274a:	e7f2      	b.n	8002732 <FastDiv2+0x10>
 800274c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8002750:	2d01      	cmp	r5, #1
 8002752:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8002756:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800275a:	d901      	bls.n	8002760 <FastDiv2+0x3e>
 800275c:	b901      	cbnz	r1, 8002760 <FastDiv2+0x3e>
 800275e:	80a2      	strh	r2, [r4, #4]
 8002760:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08002762 <FastMulInnerBase>:
 8002762:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002764:	8882      	ldrh	r2, [r0, #4]
 8002766:	7983      	ldrb	r3, [r0, #6]
 8002768:	440a      	add	r2, r1
 800276a:	429a      	cmp	r2, r3
 800276c:	4605      	mov	r5, r0
 800276e:	460c      	mov	r4, r1
 8002770:	dc23      	bgt.n	80027ba <FastMulInnerBase+0x58>
 8002772:	f7ff feb1 	bl	80024d8 <IsZeroBig>
 8002776:	bb18      	cbnz	r0, 80027c0 <FastMulInnerBase+0x5e>
 8002778:	b31c      	cbz	r4, 80027c2 <FastMulInnerBase+0x60>
 800277a:	88ae      	ldrh	r6, [r5, #4]
 800277c:	f106 4180 	add.w	r1, r6, #1073741824	; 0x40000000
 8002780:	3901      	subs	r1, #1
 8002782:	4421      	add	r1, r4
 8002784:	f06f 0c03 	mvn.w	ip, #3
 8002788:	1e73      	subs	r3, r6, #1
 800278a:	0089      	lsls	r1, r1, #2
 800278c:	fb0c fc04 	mul.w	ip, ip, r4
 8002790:	682a      	ldr	r2, [r5, #0]
 8002792:	b133      	cbz	r3, 80027a2 <FastMulInnerBase+0x40>
 8002794:	1857      	adds	r7, r2, r1
 8002796:	3b01      	subs	r3, #1
 8002798:	f857 700c 	ldr.w	r7, [r7, ip]
 800279c:	5057      	str	r7, [r2, r1]
 800279e:	3904      	subs	r1, #4
 80027a0:	e7f6      	b.n	8002790 <FastMulInnerBase+0x2e>
 80027a2:	6811      	ldr	r1, [r2, #0]
 80027a4:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80027a8:	2100      	movs	r1, #0
 80027aa:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 80027ae:	3301      	adds	r3, #1
 80027b0:	42a3      	cmp	r3, r4
 80027b2:	d3f9      	bcc.n	80027a8 <FastMulInnerBase+0x46>
 80027b4:	4434      	add	r4, r6
 80027b6:	80ac      	strh	r4, [r5, #4]
 80027b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80027ba:	f241 40b5 	movw	r0, #5301	; 0x14b5
 80027be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80027c0:	2000      	movs	r0, #0
 80027c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080027c4 <LeftShift>:
 80027c4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80027c8:	b399      	cbz	r1, 8002832 <LeftShift+0x6e>
 80027ca:	8884      	ldrh	r4, [r0, #4]
 80027cc:	6803      	ldr	r3, [r0, #0]
 80027ce:	f104 4280 	add.w	r2, r4, #1073741824	; 0x40000000
 80027d2:	3a01      	subs	r2, #1
 80027d4:	f1c1 0c20 	rsb	ip, r1, #32
 80027d8:	f853 6022 	ldr.w	r6, [r3, r2, lsl #2]
 80027dc:	ea4f 0882 	mov.w	r8, r2, lsl #2
 80027e0:	fa26 f60c 	lsr.w	r6, r6, ip
 80027e4:	1e62      	subs	r2, r4, #1
 80027e6:	eb03 0584 	add.w	r5, r3, r4, lsl #2
 80027ea:	b162      	cbz	r2, 8002806 <LeftShift+0x42>
 80027ec:	f855 7c08 	ldr.w	r7, [r5, #-8]
 80027f0:	fa27 f90c 	lsr.w	r9, r7, ip
 80027f4:	f855 7c04 	ldr.w	r7, [r5, #-4]
 80027f8:	408f      	lsls	r7, r1
 80027fa:	ea49 0707 	orr.w	r7, r9, r7
 80027fe:	f845 7d04 	str.w	r7, [r5, #-4]!
 8002802:	3a01      	subs	r2, #1
 8002804:	e7f1      	b.n	80027ea <LeftShift+0x26>
 8002806:	681d      	ldr	r5, [r3, #0]
 8002808:	fa05 f101 	lsl.w	r1, r5, r1
 800280c:	6019      	str	r1, [r3, #0]
 800280e:	b14e      	cbz	r6, 8002824 <LeftShift+0x60>
 8002810:	7981      	ldrb	r1, [r0, #6]
 8002812:	3401      	adds	r4, #1
 8002814:	428c      	cmp	r4, r1
 8002816:	d808      	bhi.n	800282a <LeftShift+0x66>
 8002818:	4443      	add	r3, r8
 800281a:	605e      	str	r6, [r3, #4]
 800281c:	8084      	strh	r4, [r0, #4]
 800281e:	4610      	mov	r0, r2
 8002820:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8002824:	4630      	mov	r0, r6
 8002826:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800282a:	f241 40b5 	movw	r0, #5301	; 0x14b5
 800282e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8002832:	4608      	mov	r0, r1
 8002834:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08002838 <RightShift>:
 8002838:	1e4b      	subs	r3, r1, #1
 800283a:	2b1e      	cmp	r3, #30
 800283c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800283e:	d820      	bhi.n	8002882 <RightShift+0x4a>
 8002840:	8884      	ldrh	r4, [r0, #4]
 8002842:	2200      	movs	r2, #0
 8002844:	1e66      	subs	r6, r4, #1
 8002846:	42b2      	cmp	r2, r6
 8002848:	6803      	ldr	r3, [r0, #0]
 800284a:	d20d      	bcs.n	8002868 <RightShift+0x30>
 800284c:	0095      	lsls	r5, r2, #2
 800284e:	195f      	adds	r7, r3, r5
 8002850:	f1c1 0c20 	rsb	ip, r1, #32
 8002854:	687f      	ldr	r7, [r7, #4]
 8002856:	fa07 fc0c 	lsl.w	ip, r7, ip
 800285a:	595f      	ldr	r7, [r3, r5]
 800285c:	40cf      	lsrs	r7, r1
 800285e:	ea4c 0707 	orr.w	r7, ip, r7
 8002862:	3201      	adds	r2, #1
 8002864:	515f      	str	r7, [r3, r5]
 8002866:	e7ee      	b.n	8002846 <RightShift+0xe>
 8002868:	f104 4280 	add.w	r2, r4, #1073741824	; 0x40000000
 800286c:	3a01      	subs	r2, #1
 800286e:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 8002872:	fa25 f101 	lsr.w	r1, r5, r1
 8002876:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800287a:	b911      	cbnz	r1, 8002882 <RightShift+0x4a>
 800287c:	2c01      	cmp	r4, #1
 800287e:	bf18      	it	ne
 8002880:	8086      	strhne	r6, [r0, #4]
 8002882:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002884 <MulBigbyUnInt>:
 8002884:	e92d 4df0 	stmdb	sp!, {r4, r5, r6, r7, r8, sl, fp, lr}
 8002888:	4606      	mov	r6, r0
 800288a:	460f      	mov	r7, r1
 800288c:	b1f9      	cbz	r1, 80028ce <MulBigbyUnInt+0x4a>
 800288e:	f8d0 8000 	ldr.w	r8, [r0]
 8002892:	8881      	ldrh	r1, [r0, #4]
 8002894:	46c4      	mov	ip, r8
 8002896:	2000      	movs	r0, #0
 8002898:	2200      	movs	r2, #0
 800289a:	2300      	movs	r3, #0
 800289c:	4288      	cmp	r0, r1
 800289e:	d20b      	bcs.n	80028b8 <MulBigbyUnInt+0x34>
 80028a0:	f8dc 4000 	ldr.w	r4, [ip]
 80028a4:	4692      	mov	sl, r2
 80028a6:	469b      	mov	fp, r3
 80028a8:	fbe7 ab04 	umlal	sl, fp, r7, r4
 80028ac:	f84c ab04 	str.w	sl, [ip], #4
 80028b0:	465a      	mov	r2, fp
 80028b2:	2300      	movs	r3, #0
 80028b4:	3001      	adds	r0, #1
 80028b6:	e7f1      	b.n	800289c <MulBigbyUnInt+0x18>
 80028b8:	b132      	cbz	r2, 80028c8 <MulBigbyUnInt+0x44>
 80028ba:	79b4      	ldrb	r4, [r6, #6]
 80028bc:	1c48      	adds	r0, r1, #1
 80028be:	42a0      	cmp	r0, r4
 80028c0:	d808      	bhi.n	80028d4 <MulBigbyUnInt+0x50>
 80028c2:	80b0      	strh	r0, [r6, #4]
 80028c4:	f848 2021 	str.w	r2, [r8, r1, lsl #2]
 80028c8:	2000      	movs	r0, #0
 80028ca:	e8bd 8df0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, sl, fp, pc}
 80028ce:	f7ff fe0f 	bl	80024f0 <SetZeroBig>
 80028d2:	e7f9      	b.n	80028c8 <MulBigbyUnInt+0x44>
 80028d4:	f241 40b5 	movw	r0, #5301	; 0x14b5
 80028d8:	e8bd 8df0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, sl, fp, pc}

080028dc <Sub_Moduli_Big>:
 80028dc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80028e0:	8883      	ldrh	r3, [r0, #4]
 80028e2:	f8b1 8004 	ldrh.w	r8, [r1, #4]
 80028e6:	7994      	ldrb	r4, [r2, #6]
 80028e8:	4543      	cmp	r3, r8
 80028ea:	bf2c      	ite	cs
 80028ec:	4699      	movcs	r9, r3
 80028ee:	46c1      	movcc	r9, r8
 80028f0:	3401      	adds	r4, #1
 80028f2:	45a1      	cmp	r9, r4
 80028f4:	d857      	bhi.n	80029a6 <Sub_Moduli_Big+0xca>
 80028f6:	7984      	ldrb	r4, [r0, #6]
 80028f8:	429c      	cmp	r4, r3
 80028fa:	d306      	bcc.n	800290a <Sub_Moduli_Big+0x2e>
 80028fc:	6804      	ldr	r4, [r0, #0]
 80028fe:	2500      	movs	r5, #0
 8002900:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
 8002904:	3301      	adds	r3, #1
 8002906:	b29b      	uxth	r3, r3
 8002908:	e7f5      	b.n	80028f6 <Sub_Moduli_Big+0x1a>
 800290a:	4643      	mov	r3, r8
 800290c:	798c      	ldrb	r4, [r1, #6]
 800290e:	429c      	cmp	r4, r3
 8002910:	f04f 0400 	mov.w	r4, #0
 8002914:	d305      	bcc.n	8002922 <Sub_Moduli_Big+0x46>
 8002916:	680d      	ldr	r5, [r1, #0]
 8002918:	f845 4023 	str.w	r4, [r5, r3, lsl #2]
 800291c:	3301      	adds	r3, #1
 800291e:	b29b      	uxth	r3, r3
 8002920:	e7f4      	b.n	800290c <Sub_Moduli_Big+0x30>
 8002922:	46a4      	mov	ip, r4
 8002924:	2500      	movs	r5, #0
 8002926:	2400      	movs	r4, #0
 8002928:	fa1f f38c 	uxth.w	r3, ip
 800292c:	f108 0601 	add.w	r6, r8, #1
 8002930:	42b3      	cmp	r3, r6
 8002932:	f10c 0c01 	add.w	ip, ip, #1
 8002936:	d211      	bcs.n	800295c <Sub_Moduli_Big+0x80>
 8002938:	6806      	ldr	r6, [r0, #0]
 800293a:	f856 7023 	ldr.w	r7, [r6, r3, lsl #2]
 800293e:	680e      	ldr	r6, [r1, #0]
 8002940:	f856 6023 	ldr.w	r6, [r6, r3, lsl #2]
 8002944:	1bbe      	subs	r6, r7, r6
 8002946:	eb67 0707 	sbc.w	r7, r7, r7
 800294a:	1936      	adds	r6, r6, r4
 800294c:	6814      	ldr	r4, [r2, #0]
 800294e:	eb47 0705 	adc.w	r7, r7, r5
 8002952:	f844 6023 	str.w	r6, [r4, r3, lsl #2]
 8002956:	17fd      	asrs	r5, r7, #31
 8002958:	463c      	mov	r4, r7
 800295a:	e7e5      	b.n	8002928 <Sub_Moduli_Big+0x4c>
 800295c:	454b      	cmp	r3, r9
 800295e:	6811      	ldr	r1, [r2, #0]
 8002960:	d20d      	bcs.n	800297e <Sub_Moduli_Big+0xa2>
 8002962:	6806      	ldr	r6, [r0, #0]
 8002964:	f856 c023 	ldr.w	ip, [r6, r3, lsl #2]
 8002968:	eb14 060c 	adds.w	r6, r4, ip
 800296c:	f145 0700 	adc.w	r7, r5, #0
 8002970:	f841 6023 	str.w	r6, [r1, r3, lsl #2]
 8002974:	3301      	adds	r3, #1
 8002976:	463c      	mov	r4, r7
 8002978:	17fd      	asrs	r5, r7, #31
 800297a:	b29b      	uxth	r3, r3
 800297c:	e7ee      	b.n	800295c <Sub_Moduli_Big+0x80>
 800297e:	b134      	cbz	r4, 800298e <Sub_Moduli_Big+0xb2>
 8002980:	f103 4080 	add.w	r0, r3, #1073741824	; 0x40000000
 8002984:	3801      	subs	r0, #1
 8002986:	f06f 0401 	mvn.w	r4, #1
 800298a:	f841 4020 	str.w	r4, [r1, r0, lsl #2]
 800298e:	3b01      	subs	r3, #1
 8002990:	b29b      	uxth	r3, r3
 8002992:	f851 0023 	ldr.w	r0, [r1, r3, lsl #2]
 8002996:	b908      	cbnz	r0, 800299c <Sub_Moduli_Big+0xc0>
 8002998:	2b00      	cmp	r3, #0
 800299a:	d1f8      	bne.n	800298e <Sub_Moduli_Big+0xb2>
 800299c:	3301      	adds	r3, #1
 800299e:	8093      	strh	r3, [r2, #4]
 80029a0:	2000      	movs	r0, #0
 80029a2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80029a6:	f241 40b5 	movw	r0, #5301	; 0x14b5
 80029aa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

080029ae <AddBig>:
 80029ae:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80029b2:	460d      	mov	r5, r1
 80029b4:	ae02      	add	r6, sp, #8
 80029b6:	461f      	mov	r7, r3
 80029b8:	2300      	movs	r3, #0
 80029ba:	f846 3d04 	str.w	r3, [r6, #-4]!
 80029be:	7981      	ldrb	r1, [r0, #6]
 80029c0:	79ab      	ldrb	r3, [r5, #6]
 80029c2:	4299      	cmp	r1, r3
 80029c4:	bf38      	it	cc
 80029c6:	4619      	movcc	r1, r3
 80029c8:	4604      	mov	r4, r0
 80029ca:	4690      	mov	r8, r2
 80029cc:	4630      	mov	r0, r6
 80029ce:	3101      	adds	r1, #1
 80029d0:	463a      	mov	r2, r7
 80029d2:	f7ff fcae 	bl	8002332 <StAllocBig>
 80029d6:	2800      	cmp	r0, #0
 80029d8:	d16d      	bne.n	8002ab6 <AddBig+0x108>
 80029da:	4620      	mov	r0, r4
 80029dc:	4629      	mov	r1, r5
 80029de:	f7ff fda6 	bl	800252e <CompareBig>
 80029e2:	3003      	adds	r0, #3
 80029e4:	2806      	cmp	r0, #6
 80029e6:	d857      	bhi.n	8002a98 <AddBig+0xea>
 80029e8:	e8df f000 	tbb	[pc, r0]
 80029ec:	251c2c32 	.word	0x251c2c32
 80029f0:	1c2c      	.short	0x1c2c
 80029f2:	04          	.byte	0x04
 80029f3:	00          	.byte	0x00
 80029f4:	9901      	ldr	r1, [sp, #4]
 80029f6:	4628      	mov	r0, r5
 80029f8:	f7ff fcda 	bl	80023b0 <CopyBig>
 80029fc:	9901      	ldr	r1, [sp, #4]
 80029fe:	f04f 0900 	mov.w	r9, #0
 8002a02:	f881 9007 	strb.w	r9, [r1, #7]
 8002a06:	4620      	mov	r0, r4
 8002a08:	f7ff fd91 	bl	800252e <CompareBig>
 8002a0c:	2800      	cmp	r0, #0
 8002a0e:	d040      	beq.n	8002a92 <AddBig+0xe4>
 8002a10:	2802      	cmp	r0, #2
 8002a12:	d004      	beq.n	8002a1e <AddBig+0x70>
 8002a14:	3001      	adds	r0, #1
 8002a16:	d13f      	bne.n	8002a98 <AddBig+0xea>
 8002a18:	4628      	mov	r0, r5
 8002a1a:	4621      	mov	r1, r4
 8002a1c:	e034      	b.n	8002a88 <AddBig+0xda>
 8002a1e:	4620      	mov	r0, r4
 8002a20:	4629      	mov	r1, r5
 8002a22:	e028      	b.n	8002a76 <AddBig+0xc8>
 8002a24:	9a01      	ldr	r2, [sp, #4]
 8002a26:	4620      	mov	r0, r4
 8002a28:	4629      	mov	r1, r5
 8002a2a:	f7ff fceb 	bl	8002404 <Add_Moduli_Big>
 8002a2e:	2200      	movs	r2, #0
 8002a30:	9b01      	ldr	r3, [sp, #4]
 8002a32:	71da      	strb	r2, [r3, #7]
 8002a34:	e030      	b.n	8002a98 <AddBig+0xea>
 8002a36:	9a01      	ldr	r2, [sp, #4]
 8002a38:	4620      	mov	r0, r4
 8002a3a:	4629      	mov	r1, r5
 8002a3c:	f7ff fce2 	bl	8002404 <Add_Moduli_Big>
 8002a40:	79e2      	ldrb	r2, [r4, #7]
 8002a42:	e7f5      	b.n	8002a30 <AddBig+0x82>
 8002a44:	4620      	mov	r0, r4
 8002a46:	4629      	mov	r1, r5
 8002a48:	9a01      	ldr	r2, [sp, #4]
 8002a4a:	f7ff fcdb 	bl	8002404 <Add_Moduli_Big>
 8002a4e:	e01e      	b.n	8002a8e <AddBig+0xe0>
 8002a50:	9901      	ldr	r1, [sp, #4]
 8002a52:	4620      	mov	r0, r4
 8002a54:	f7ff fcac 	bl	80023b0 <CopyBig>
 8002a58:	9801      	ldr	r0, [sp, #4]
 8002a5a:	f04f 0900 	mov.w	r9, #0
 8002a5e:	f880 9007 	strb.w	r9, [r0, #7]
 8002a62:	4629      	mov	r1, r5
 8002a64:	f7ff fd63 	bl	800252e <CompareBig>
 8002a68:	b198      	cbz	r0, 8002a92 <AddBig+0xe4>
 8002a6a:	2802      	cmp	r0, #2
 8002a6c:	d00a      	beq.n	8002a84 <AddBig+0xd6>
 8002a6e:	3001      	adds	r0, #1
 8002a70:	d112      	bne.n	8002a98 <AddBig+0xea>
 8002a72:	4628      	mov	r0, r5
 8002a74:	4621      	mov	r1, r4
 8002a76:	9a01      	ldr	r2, [sp, #4]
 8002a78:	f7ff ff30 	bl	80028dc <Sub_Moduli_Big>
 8002a7c:	9b01      	ldr	r3, [sp, #4]
 8002a7e:	f883 9007 	strb.w	r9, [r3, #7]
 8002a82:	e009      	b.n	8002a98 <AddBig+0xea>
 8002a84:	4620      	mov	r0, r4
 8002a86:	4629      	mov	r1, r5
 8002a88:	9a01      	ldr	r2, [sp, #4]
 8002a8a:	f7ff ff27 	bl	80028dc <Sub_Moduli_Big>
 8002a8e:	2201      	movs	r2, #1
 8002a90:	e7ce      	b.n	8002a30 <AddBig+0x82>
 8002a92:	9801      	ldr	r0, [sp, #4]
 8002a94:	f7ff fd2c 	bl	80024f0 <SetZeroBig>
 8002a98:	4640      	mov	r0, r8
 8002a9a:	2100      	movs	r1, #0
 8002a9c:	f7ff fc71 	bl	8002382 <InitBig>
 8002aa0:	4641      	mov	r1, r8
 8002aa2:	9801      	ldr	r0, [sp, #4]
 8002aa4:	f7ff fc84 	bl	80023b0 <CopyBig>
 8002aa8:	4639      	mov	r1, r7
 8002aaa:	4604      	mov	r4, r0
 8002aac:	4630      	mov	r0, r6
 8002aae:	f7ff fc5b 	bl	8002368 <StFreeBig>
 8002ab2:	4620      	mov	r0, r4
 8002ab4:	e001      	b.n	8002aba <AddBig+0x10c>
 8002ab6:	f240 30ed 	movw	r0, #1005	; 0x3ed
 8002aba:	b003      	add	sp, #12
 8002abc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08002ac0 <SubBig>:
 8002ac0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8002ac4:	460c      	mov	r4, r1
 8002ac6:	ae02      	add	r6, sp, #8
 8002ac8:	461f      	mov	r7, r3
 8002aca:	2300      	movs	r3, #0
 8002acc:	f846 3d04 	str.w	r3, [r6, #-4]!
 8002ad0:	7981      	ldrb	r1, [r0, #6]
 8002ad2:	79a3      	ldrb	r3, [r4, #6]
 8002ad4:	4605      	mov	r5, r0
 8002ad6:	4690      	mov	r8, r2
 8002ad8:	4630      	mov	r0, r6
 8002ada:	4299      	cmp	r1, r3
 8002adc:	bf38      	it	cc
 8002ade:	4619      	movcc	r1, r3
 8002ae0:	463a      	mov	r2, r7
 8002ae2:	f7ff fc26 	bl	8002332 <StAllocBig>
 8002ae6:	2800      	cmp	r0, #0
 8002ae8:	d143      	bne.n	8002b72 <SubBig+0xb2>
 8002aea:	9b01      	ldr	r3, [sp, #4]
 8002aec:	2201      	movs	r2, #1
 8002aee:	809a      	strh	r2, [r3, #4]
 8002af0:	4628      	mov	r0, r5
 8002af2:	4621      	mov	r1, r4
 8002af4:	f7ff fd1b 	bl	800252e <CompareBig>
 8002af8:	3003      	adds	r0, #3
 8002afa:	2806      	cmp	r0, #6
 8002afc:	d82a      	bhi.n	8002b54 <SubBig+0x94>
 8002afe:	e8df f000 	tbb	[pc, r0]
 8002b02:	1b21      	.short	0x1b21
 8002b04:	0a111418 	.word	0x0a111418
 8002b08:	04          	.byte	0x04
 8002b09:	00          	.byte	0x00
 8002b0a:	4628      	mov	r0, r5
 8002b0c:	4621      	mov	r1, r4
 8002b0e:	9a01      	ldr	r2, [sp, #4]
 8002b10:	f7ff fc78 	bl	8002404 <Add_Moduli_Big>
 8002b14:	e004      	b.n	8002b20 <SubBig+0x60>
 8002b16:	4628      	mov	r0, r5
 8002b18:	4621      	mov	r1, r4
 8002b1a:	9a01      	ldr	r2, [sp, #4]
 8002b1c:	f7ff fede 	bl	80028dc <Sub_Moduli_Big>
 8002b20:	2200      	movs	r2, #0
 8002b22:	e015      	b.n	8002b50 <SubBig+0x90>
 8002b24:	4620      	mov	r0, r4
 8002b26:	4629      	mov	r1, r5
 8002b28:	e7f7      	b.n	8002b1a <SubBig+0x5a>
 8002b2a:	9801      	ldr	r0, [sp, #4]
 8002b2c:	f7ff fce0 	bl	80024f0 <SetZeroBig>
 8002b30:	e010      	b.n	8002b54 <SubBig+0x94>
 8002b32:	4620      	mov	r0, r4
 8002b34:	4629      	mov	r1, r5
 8002b36:	e001      	b.n	8002b3c <SubBig+0x7c>
 8002b38:	4628      	mov	r0, r5
 8002b3a:	4621      	mov	r1, r4
 8002b3c:	9a01      	ldr	r2, [sp, #4]
 8002b3e:	f7ff fecd 	bl	80028dc <Sub_Moduli_Big>
 8002b42:	e004      	b.n	8002b4e <SubBig+0x8e>
 8002b44:	4628      	mov	r0, r5
 8002b46:	4621      	mov	r1, r4
 8002b48:	9a01      	ldr	r2, [sp, #4]
 8002b4a:	f7ff fc5b 	bl	8002404 <Add_Moduli_Big>
 8002b4e:	2201      	movs	r2, #1
 8002b50:	9b01      	ldr	r3, [sp, #4]
 8002b52:	71da      	strb	r2, [r3, #7]
 8002b54:	4640      	mov	r0, r8
 8002b56:	2100      	movs	r1, #0
 8002b58:	f7ff fc13 	bl	8002382 <InitBig>
 8002b5c:	4641      	mov	r1, r8
 8002b5e:	9801      	ldr	r0, [sp, #4]
 8002b60:	f7ff fc26 	bl	80023b0 <CopyBig>
 8002b64:	4639      	mov	r1, r7
 8002b66:	4604      	mov	r4, r0
 8002b68:	4630      	mov	r0, r6
 8002b6a:	f7ff fbfd 	bl	8002368 <StFreeBig>
 8002b6e:	4620      	mov	r0, r4
 8002b70:	e001      	b.n	8002b76 <SubBig+0xb6>
 8002b72:	f240 30ed 	movw	r0, #1005	; 0x3ed
 8002b76:	b002      	add	sp, #8
 8002b78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08002b7c <MontyInit>:
 8002b7c:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 8002b80:	f101 0904 	add.w	r9, r1, #4
 8002b84:	460c      	mov	r4, r1
 8002b86:	7981      	ldrb	r1, [r0, #6]
 8002b88:	2300      	movs	r3, #0
 8002b8a:	3102      	adds	r1, #2
 8002b8c:	4605      	mov	r5, r0
 8002b8e:	4648      	mov	r0, r9
 8002b90:	4616      	mov	r6, r2
 8002b92:	9301      	str	r3, [sp, #4]
 8002b94:	f7ff fbcd 	bl	8002332 <StAllocBig>
 8002b98:	4601      	mov	r1, r0
 8002b9a:	2800      	cmp	r0, #0
 8002b9c:	f040 8088 	bne.w	8002cb0 <MontyInit+0x134>
 8002ba0:	6860      	ldr	r0, [r4, #4]
 8002ba2:	6025      	str	r5, [r4, #0]
 8002ba4:	f7ff fbed 	bl	8002382 <InitBig>
 8002ba8:	88aa      	ldrh	r2, [r5, #4]
 8002baa:	6863      	ldr	r3, [r4, #4]
 8002bac:	3201      	adds	r2, #1
 8002bae:	809a      	strh	r2, [r3, #4]
 8002bb0:	88a9      	ldrh	r1, [r5, #4]
 8002bb2:	681a      	ldr	r2, [r3, #0]
 8002bb4:	2301      	movs	r3, #1
 8002bb6:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 8002bba:	682a      	ldr	r2, [r5, #0]
 8002bbc:	f04f 081f 	mov.w	r8, #31
 8002bc0:	6810      	ldr	r0, [r2, #0]
 8002bc2:	2103      	movs	r1, #3
 8002bc4:	2202      	movs	r2, #2
 8002bc6:	fb00 f703 	mul.w	r7, r0, r3
 8002bca:	400f      	ands	r7, r1
 8002bcc:	4297      	cmp	r7, r2
 8002bce:	bf28      	it	cs
 8002bd0:	189b      	addcs	r3, r3, r2
 8002bd2:	0049      	lsls	r1, r1, #1
 8002bd4:	f1b8 0801 	subs.w	r8, r8, #1
 8002bd8:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8002bdc:	f081 0101 	eor.w	r1, r1, #1
 8002be0:	d1f1      	bne.n	8002bc6 <MontyInit+0x4a>
 8002be2:	425b      	negs	r3, r3
 8002be4:	60a3      	str	r3, [r4, #8]
 8002be6:	79a9      	ldrb	r1, [r5, #6]
 8002be8:	a801      	add	r0, sp, #4
 8002bea:	3101      	adds	r1, #1
 8002bec:	4632      	mov	r2, r6
 8002bee:	f7ff fba0 	bl	8002332 <StAllocBig>
 8002bf2:	b108      	cbz	r0, 8002bf8 <MontyInit+0x7c>
 8002bf4:	4648      	mov	r0, r9
 8002bf6:	e058      	b.n	8002caa <MontyInit+0x12e>
 8002bf8:	9901      	ldr	r1, [sp, #4]
 8002bfa:	4628      	mov	r0, r5
 8002bfc:	f7ff fbd8 	bl	80023b0 <CopyBig>
 8002c00:	9801      	ldr	r0, [sp, #4]
 8002c02:	f7ff fcdd 	bl	80025c0 <CountBits>
 8002c06:	4240      	negs	r0, r0
 8002c08:	f000 0a1f 	and.w	sl, r0, #31
 8002c0c:	4651      	mov	r1, sl
 8002c0e:	9801      	ldr	r0, [sp, #4]
 8002c10:	f7ff fdd8 	bl	80027c4 <LeftShift>
 8002c14:	6860      	ldr	r0, [r4, #4]
 8002c16:	9901      	ldr	r1, [sp, #4]
 8002c18:	4602      	mov	r2, r0
 8002c1a:	4633      	mov	r3, r6
 8002c1c:	f7ff ff50 	bl	8002ac0 <SubBig>
 8002c20:	4607      	mov	r7, r0
 8002c22:	2800      	cmp	r0, #0
 8002c24:	d13c      	bne.n	8002ca0 <MontyInit+0x124>
 8002c26:	88ab      	ldrh	r3, [r5, #4]
 8002c28:	4598      	cmp	r8, r3
 8002c2a:	d227      	bcs.n	8002c7c <MontyInit+0x100>
 8002c2c:	6860      	ldr	r0, [r4, #4]
 8002c2e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002c32:	3b01      	subs	r3, #1
 8002c34:	6802      	ldr	r2, [r0, #0]
 8002c36:	2101      	movs	r1, #1
 8002c38:	f852 9023 	ldr.w	r9, [r2, r3, lsl #2]
 8002c3c:	f7ff fd91 	bl	8002762 <FastMulInnerBase>
 8002c40:	f1b9 0f00 	cmp.w	r9, #0
 8002c44:	d017      	beq.n	8002c76 <MontyInit+0xfa>
 8002c46:	9901      	ldr	r1, [sp, #4]
 8002c48:	4628      	mov	r0, r5
 8002c4a:	f7ff fbb1 	bl	80023b0 <CopyBig>
 8002c4e:	4649      	mov	r1, r9
 8002c50:	9801      	ldr	r0, [sp, #4]
 8002c52:	f7ff fe17 	bl	8002884 <MulBigbyUnInt>
 8002c56:	4651      	mov	r1, sl
 8002c58:	9801      	ldr	r0, [sp, #4]
 8002c5a:	f7ff fdb3 	bl	80027c4 <LeftShift>
 8002c5e:	6860      	ldr	r0, [r4, #4]
 8002c60:	9901      	ldr	r1, [sp, #4]
 8002c62:	4602      	mov	r2, r0
 8002c64:	4633      	mov	r3, r6
 8002c66:	f7ff ff2b 	bl	8002ac0 <SubBig>
 8002c6a:	6863      	ldr	r3, [r4, #4]
 8002c6c:	88aa      	ldrh	r2, [r5, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	f853 9022 	ldr.w	r9, [r3, r2, lsl #2]
 8002c74:	e7e4      	b.n	8002c40 <MontyInit+0xc4>
 8002c76:	f108 0801 	add.w	r8, r8, #1
 8002c7a:	e7d4      	b.n	8002c26 <MontyInit+0xaa>
 8002c7c:	a801      	add	r0, sp, #4
 8002c7e:	4631      	mov	r1, r6
 8002c80:	f7ff fb72 	bl	8002368 <StFreeBig>
 8002c84:	6860      	ldr	r0, [r4, #4]
 8002c86:	4629      	mov	r1, r5
 8002c88:	f7ff fc51 	bl	800252e <CompareBig>
 8002c8c:	2800      	cmp	r0, #0
 8002c8e:	dd05      	ble.n	8002c9c <MontyInit+0x120>
 8002c90:	6860      	ldr	r0, [r4, #4]
 8002c92:	4629      	mov	r1, r5
 8002c94:	4602      	mov	r2, r0
 8002c96:	4633      	mov	r3, r6
 8002c98:	f7ff ff12 	bl	8002ac0 <SubBig>
 8002c9c:	60e6      	str	r6, [r4, #12]
 8002c9e:	e009      	b.n	8002cb4 <MontyInit+0x138>
 8002ca0:	4648      	mov	r0, r9
 8002ca2:	4631      	mov	r1, r6
 8002ca4:	f7ff fb60 	bl	8002368 <StFreeBig>
 8002ca8:	a801      	add	r0, sp, #4
 8002caa:	4631      	mov	r1, r6
 8002cac:	f7ff fb5c 	bl	8002368 <StFreeBig>
 8002cb0:	f240 37ed 	movw	r7, #1005	; 0x3ed
 8002cb4:	4638      	mov	r0, r7
 8002cb6:	b002      	add	sp, #8
 8002cb8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08002cbc <MontyKillR2>:
 8002cbc:	b508      	push	{r3, lr}
 8002cbe:	4603      	mov	r3, r0
 8002cc0:	3004      	adds	r0, #4
 8002cc2:	68d9      	ldr	r1, [r3, #12]
 8002cc4:	f7ff fb50 	bl	8002368 <StFreeBig>
 8002cc8:	bd08      	pop	{r3, pc}

08002cca <MontyKillAll>:
 8002cca:	2200      	movs	r2, #0
 8002ccc:	b508      	push	{r3, lr}
 8002cce:	6002      	str	r2, [r0, #0]
 8002cd0:	6082      	str	r2, [r0, #8]
 8002cd2:	6842      	ldr	r2, [r0, #4]
 8002cd4:	4603      	mov	r3, r0
 8002cd6:	b11a      	cbz	r2, 8002ce0 <MontyKillAll+0x16>
 8002cd8:	3004      	adds	r0, #4
 8002cda:	68d9      	ldr	r1, [r3, #12]
 8002cdc:	f7ff fb44 	bl	8002368 <StFreeBig>
 8002ce0:	bd08      	pop	{r3, pc}

08002ce2 <MontyMul>:
 8002ce2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002ce6:	b09d      	sub	sp, #116	; 0x74
 8002ce8:	461c      	mov	r4, r3
 8002cea:	900c      	str	r0, [sp, #48]	; 0x30
 8002cec:	a81c      	add	r0, sp, #112	; 0x70
 8002cee:	2300      	movs	r3, #0
 8002cf0:	f840 3d04 	str.w	r3, [r0, #-4]!
 8002cf4:	6823      	ldr	r3, [r4, #0]
 8002cf6:	920d      	str	r2, [sp, #52]	; 0x34
 8002cf8:	4689      	mov	r9, r1
 8002cfa:	6819      	ldr	r1, [r3, #0]
 8002cfc:	910e      	str	r1, [sp, #56]	; 0x38
 8002cfe:	68a1      	ldr	r1, [r4, #8]
 8002d00:	9118      	str	r1, [sp, #96]	; 0x60
 8002d02:	7999      	ldrb	r1, [r3, #6]
 8002d04:	f8d9 2000 	ldr.w	r2, [r9]
 8002d08:	9209      	str	r2, [sp, #36]	; 0x24
 8002d0a:	3101      	adds	r1, #1
 8002d0c:	68e2      	ldr	r2, [r4, #12]
 8002d0e:	889f      	ldrh	r7, [r3, #4]
 8002d10:	f7ff fb0f 	bl	8002332 <StAllocBig>
 8002d14:	4680      	mov	r8, r0
 8002d16:	2800      	cmp	r0, #0
 8002d18:	f040 80c9 	bne.w	8002eae <MontyMul+0x1cc>
 8002d1c:	981b      	ldr	r0, [sp, #108]	; 0x6c
 8002d1e:	4641      	mov	r1, r8
 8002d20:	f7ff fb2f 	bl	8002382 <InitBig>
 8002d24:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 8002d26:	f8b9 3004 	ldrh.w	r3, [r9, #4]
 8002d2a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002d2c:	6835      	ldr	r5, [r6, #0]
 8002d2e:	eb02 0183 	add.w	r1, r2, r3, lsl #2
 8002d32:	4640      	mov	r0, r8
 8002d34:	18c2      	adds	r2, r0, r3
 8002d36:	42ba      	cmp	r2, r7
 8002d38:	f04f 0200 	mov.w	r2, #0
 8002d3c:	d203      	bcs.n	8002d46 <MontyMul+0x64>
 8002d3e:	f841 2020 	str.w	r2, [r1, r0, lsl #2]
 8002d42:	3001      	adds	r0, #1
 8002d44:	e7f6      	b.n	8002d34 <MontyMul+0x52>
 8002d46:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8002d48:	f8b3 e004 	ldrh.w	lr, [r3, #4]
 8002d4c:	eb02 010e 	add.w	r1, r2, lr
 8002d50:	42b9      	cmp	r1, r7
 8002d52:	d206      	bcs.n	8002d62 <MontyMul+0x80>
 8002d54:	980c      	ldr	r0, [sp, #48]	; 0x30
 8002d56:	6800      	ldr	r0, [r0, #0]
 8002d58:	2300      	movs	r3, #0
 8002d5a:	f840 3021 	str.w	r3, [r0, r1, lsl #2]
 8002d5e:	3201      	adds	r2, #1
 8002d60:	e7f4      	b.n	8002d4c <MontyMul+0x6a>
 8002d62:	ea4f 0e87 	mov.w	lr, r7, lsl #2
 8002d66:	f1ae 0304 	sub.w	r3, lr, #4
 8002d6a:	18eb      	adds	r3, r5, r3
 8002d6c:	2100      	movs	r1, #0
 8002d6e:	eb05 0c0e 	add.w	ip, r5, lr
 8002d72:	9319      	str	r3, [sp, #100]	; 0x64
 8002d74:	9100      	str	r1, [sp, #0]
 8002d76:	9800      	ldr	r0, [sp, #0]
 8002d78:	42b8      	cmp	r0, r7
 8002d7a:	d270      	bcs.n	8002e5e <MontyMul+0x17c>
 8002d7c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8002d7e:	f8dd 8000 	ldr.w	r8, [sp]
 8002d82:	6813      	ldr	r3, [r2, #0]
 8002d84:	9809      	ldr	r0, [sp, #36]	; 0x24
 8002d86:	f853 3028 	ldr.w	r3, [r3, r8, lsl #2]
 8002d8a:	9308      	str	r3, [sp, #32]
 8002d8c:	682a      	ldr	r2, [r5, #0]
 8002d8e:	6803      	ldr	r3, [r0, #0]
 8002d90:	9908      	ldr	r1, [sp, #32]
 8002d92:	980e      	ldr	r0, [sp, #56]	; 0x38
 8002d94:	4692      	mov	sl, r2
 8002d96:	f04f 0b00 	mov.w	fp, #0
 8002d9a:	fbe3 ab01 	umlal	sl, fp, r3, r1
 8002d9e:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8002da0:	fb0a f303 	mul.w	r3, sl, r3
 8002da4:	930f      	str	r3, [sp, #60]	; 0x3c
 8002da6:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8002da8:	6803      	ldr	r3, [r0, #0]
 8002daa:	46d0      	mov	r8, sl
 8002dac:	f04f 0900 	mov.w	r9, #0
 8002db0:	fbe3 8901 	umlal	r8, r9, r3, r1
 8002db4:	2100      	movs	r1, #0
 8002db6:	3104      	adds	r1, #4
 8002db8:	4571      	cmp	r1, lr
 8002dba:	d028      	beq.n	8002e0e <MontyMul+0x12c>
 8002dbc:	2200      	movs	r2, #0
 8002dbe:	920b      	str	r2, [sp, #44]	; 0x2c
 8002dc0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002dc2:	586a      	ldr	r2, [r5, r1]
 8002dc4:	5858      	ldr	r0, [r3, r1]
 8002dc6:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 8002dca:	4692      	mov	sl, r2
 8002dcc:	9a08      	ldr	r2, [sp, #32]
 8002dce:	f8cd 9048 	str.w	r9, [sp, #72]	; 0x48
 8002dd2:	f04f 0b00 	mov.w	fp, #0
 8002dd6:	fbe0 ab02 	umlal	sl, fp, r0, r2
 8002dda:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8002dde:	2000      	movs	r0, #0
 8002de0:	eb1a 0a02 	adds.w	sl, sl, r2
 8002de4:	eb4b 0b03 	adc.w	fp, fp, r3
 8002de8:	9013      	str	r0, [sp, #76]	; 0x4c
 8002dea:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8002dec:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8002dee:	585b      	ldr	r3, [r3, r1]
 8002df0:	9301      	str	r3, [sp, #4]
 8002df2:	e9dd 8912 	ldrd	r8, r9, [sp, #72]	; 0x48
 8002df6:	fbe3 8902 	umlal	r8, r9, r3, r2
 8002dfa:	186b      	adds	r3, r5, r1
 8002dfc:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8002e00:	eb18 080a 	adds.w	r8, r8, sl
 8002e04:	f149 0900 	adc.w	r9, r9, #0
 8002e08:	f843 8c04 	str.w	r8, [r3, #-4]
 8002e0c:	e7d3      	b.n	8002db6 <MontyMul+0xd4>
 8002e0e:	2300      	movs	r3, #0
 8002e10:	9307      	str	r3, [sp, #28]
 8002e12:	f8cd b018 	str.w	fp, [sp, #24]
 8002e16:	e9dd ab06 	ldrd	sl, fp, [sp, #24]
 8002e1a:	f8dc 3000 	ldr.w	r3, [ip]
 8002e1e:	f8cd 9040 	str.w	r9, [sp, #64]	; 0x40
 8002e22:	2000      	movs	r0, #0
 8002e24:	9011      	str	r0, [sp, #68]	; 0x44
 8002e26:	eb1a 0a03 	adds.w	sl, sl, r3
 8002e2a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8002e2e:	f14b 0b00 	adc.w	fp, fp, #0
 8002e32:	eb12 020a 	adds.w	r2, r2, sl
 8002e36:	f143 0300 	adc.w	r3, r3, #0
 8002e3a:	9314      	str	r3, [sp, #80]	; 0x50
 8002e3c:	f8dd 9000 	ldr.w	r9, [sp]
 8002e40:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8002e42:	9919      	ldr	r1, [sp, #100]	; 0x64
 8002e44:	9015      	str	r0, [sp, #84]	; 0x54
 8002e46:	445b      	add	r3, fp
 8002e48:	f109 0901 	add.w	r9, r9, #1
 8002e4c:	600a      	str	r2, [r1, #0]
 8002e4e:	f8cd b058 	str.w	fp, [sp, #88]	; 0x58
 8002e52:	9017      	str	r0, [sp, #92]	; 0x5c
 8002e54:	f8cc 3000 	str.w	r3, [ip]
 8002e58:	f8cd 9000 	str.w	r9, [sp]
 8002e5c:	e78b      	b.n	8002d76 <MontyMul+0x94>
 8002e5e:	1c7b      	adds	r3, r7, #1
 8002e60:	80b3      	strh	r3, [r6, #4]
 8002e62:	88b2      	ldrh	r2, [r6, #4]
 8002e64:	2a01      	cmp	r2, #1
 8002e66:	d908      	bls.n	8002e7a <MontyMul+0x198>
 8002e68:	f102 4380 	add.w	r3, r2, #1073741824	; 0x40000000
 8002e6c:	3b01      	subs	r3, #1
 8002e6e:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 8002e72:	b913      	cbnz	r3, 8002e7a <MontyMul+0x198>
 8002e74:	3a01      	subs	r2, #1
 8002e76:	80b2      	strh	r2, [r6, #4]
 8002e78:	e7f3      	b.n	8002e62 <MontyMul+0x180>
 8002e7a:	4630      	mov	r0, r6
 8002e7c:	6821      	ldr	r1, [r4, #0]
 8002e7e:	f7ff fb56 	bl	800252e <CompareBig>
 8002e82:	2800      	cmp	r0, #0
 8002e84:	981b      	ldr	r0, [sp, #108]	; 0x6c
 8002e86:	db08      	blt.n	8002e9a <MontyMul+0x1b8>
 8002e88:	6821      	ldr	r1, [r4, #0]
 8002e8a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8002e8c:	f7ff fd26 	bl	80028dc <Sub_Moduli_Big>
 8002e90:	990d      	ldr	r1, [sp, #52]	; 0x34
 8002e92:	2300      	movs	r3, #0
 8002e94:	4605      	mov	r5, r0
 8002e96:	71cb      	strb	r3, [r1, #7]
 8002e98:	e003      	b.n	8002ea2 <MontyMul+0x1c0>
 8002e9a:	990d      	ldr	r1, [sp, #52]	; 0x34
 8002e9c:	f7ff fa88 	bl	80023b0 <CopyBig>
 8002ea0:	4605      	mov	r5, r0
 8002ea2:	a81b      	add	r0, sp, #108	; 0x6c
 8002ea4:	68e1      	ldr	r1, [r4, #12]
 8002ea6:	f7ff fa5f 	bl	8002368 <StFreeBig>
 8002eaa:	4628      	mov	r0, r5
 8002eac:	e001      	b.n	8002eb2 <MontyMul+0x1d0>
 8002eae:	f240 30ed 	movw	r0, #1005	; 0x3ed
 8002eb2:	b01d      	add	sp, #116	; 0x74
 8002eb4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08002eb8 <MontyExit>:
 8002eb8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002eba:	ac02      	add	r4, sp, #8
 8002ebc:	2300      	movs	r3, #0
 8002ebe:	4606      	mov	r6, r0
 8002ec0:	f844 3d04 	str.w	r3, [r4, #-4]!
 8002ec4:	460f      	mov	r7, r1
 8002ec6:	4615      	mov	r5, r2
 8002ec8:	4620      	mov	r0, r4
 8002eca:	79b1      	ldrb	r1, [r6, #6]
 8002ecc:	68d2      	ldr	r2, [r2, #12]
 8002ece:	f7ff fa30 	bl	8002332 <StAllocBig>
 8002ed2:	b980      	cbnz	r0, 8002ef6 <MontyExit+0x3e>
 8002ed4:	9801      	ldr	r0, [sp, #4]
 8002ed6:	2101      	movs	r1, #1
 8002ed8:	f7ff fa53 	bl	8002382 <InitBig>
 8002edc:	4630      	mov	r0, r6
 8002ede:	9901      	ldr	r1, [sp, #4]
 8002ee0:	463a      	mov	r2, r7
 8002ee2:	462b      	mov	r3, r5
 8002ee4:	f7ff fefd 	bl	8002ce2 <MontyMul>
 8002ee8:	68e9      	ldr	r1, [r5, #12]
 8002eea:	4606      	mov	r6, r0
 8002eec:	4620      	mov	r0, r4
 8002eee:	f7ff fa3b 	bl	8002368 <StFreeBig>
 8002ef2:	4630      	mov	r0, r6
 8002ef4:	e001      	b.n	8002efa <MontyExit+0x42>
 8002ef6:	f240 30ed 	movw	r0, #1005	; 0x3ed
 8002efa:	b003      	add	sp, #12
 8002efc:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002efe <ModularAddBig>:
 8002efe:	b570      	push	{r4, r5, r6, lr}
 8002f00:	9d04      	ldr	r5, [sp, #16]
 8002f02:	461e      	mov	r6, r3
 8002f04:	462b      	mov	r3, r5
 8002f06:	4614      	mov	r4, r2
 8002f08:	f7ff fd51 	bl	80029ae <AddBig>
 8002f0c:	b120      	cbz	r0, 8002f18 <ModularAddBig+0x1a>
 8002f0e:	79a3      	ldrb	r3, [r4, #6]
 8002f10:	88a2      	ldrh	r2, [r4, #4]
 8002f12:	3301      	adds	r3, #1
 8002f14:	429a      	cmp	r2, r3
 8002f16:	d113      	bne.n	8002f40 <ModularAddBig+0x42>
 8002f18:	4620      	mov	r0, r4
 8002f1a:	4631      	mov	r1, r6
 8002f1c:	f7ff fb07 	bl	800252e <CompareBig>
 8002f20:	2800      	cmp	r0, #0
 8002f22:	db05      	blt.n	8002f30 <ModularAddBig+0x32>
 8002f24:	4620      	mov	r0, r4
 8002f26:	4631      	mov	r1, r6
 8002f28:	4622      	mov	r2, r4
 8002f2a:	462b      	mov	r3, r5
 8002f2c:	f7ff fdc8 	bl	8002ac0 <SubBig>
 8002f30:	88a0      	ldrh	r0, [r4, #4]
 8002f32:	79a2      	ldrb	r2, [r4, #6]
 8002f34:	f241 43b5 	movw	r3, #5301	; 0x14b5
 8002f38:	4290      	cmp	r0, r2
 8002f3a:	bf8c      	ite	hi
 8002f3c:	4618      	movhi	r0, r3
 8002f3e:	2000      	movls	r0, #0
 8002f40:	bd70      	pop	{r4, r5, r6, pc}

08002f42 <ModularSubBig>:
 8002f42:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002f44:	9d06      	ldr	r5, [sp, #24]
 8002f46:	461f      	mov	r7, r3
 8002f48:	462b      	mov	r3, r5
 8002f4a:	4616      	mov	r6, r2
 8002f4c:	f7ff fdb8 	bl	8002ac0 <SubBig>
 8002f50:	4604      	mov	r4, r0
 8002f52:	b950      	cbnz	r0, 8002f6a <ModularSubBig+0x28>
 8002f54:	4630      	mov	r0, r6
 8002f56:	f7ff fadd 	bl	8002514 <SignBig>
 8002f5a:	b130      	cbz	r0, 8002f6a <ModularSubBig+0x28>
 8002f5c:	4630      	mov	r0, r6
 8002f5e:	4639      	mov	r1, r7
 8002f60:	4632      	mov	r2, r6
 8002f62:	462b      	mov	r3, r5
 8002f64:	f7ff fd23 	bl	80029ae <AddBig>
 8002f68:	4604      	mov	r4, r0
 8002f6a:	4620      	mov	r0, r4
 8002f6c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08002f6e <ModularFastMul2>:
 8002f6e:	b570      	push	{r4, r5, r6, lr}
 8002f70:	4604      	mov	r4, r0
 8002f72:	460d      	mov	r5, r1
 8002f74:	4616      	mov	r6, r2
 8002f76:	f7ff fbaa 	bl	80026ce <FastMul2>
 8002f7a:	4620      	mov	r0, r4
 8002f7c:	4629      	mov	r1, r5
 8002f7e:	f7ff fad6 	bl	800252e <CompareBig>
 8002f82:	2800      	cmp	r0, #0
 8002f84:	db06      	blt.n	8002f94 <ModularFastMul2+0x26>
 8002f86:	4620      	mov	r0, r4
 8002f88:	4629      	mov	r1, r5
 8002f8a:	4622      	mov	r2, r4
 8002f8c:	4633      	mov	r3, r6
 8002f8e:	f7ff fd97 	bl	8002ac0 <SubBig>
 8002f92:	e000      	b.n	8002f96 <ModularFastMul2+0x28>
 8002f94:	2000      	movs	r0, #0
 8002f96:	88a1      	ldrh	r1, [r4, #4]
 8002f98:	79a2      	ldrb	r2, [r4, #6]
 8002f9a:	f241 43b5 	movw	r3, #5301	; 0x14b5
 8002f9e:	4291      	cmp	r1, r2
 8002fa0:	bf88      	it	hi
 8002fa2:	4618      	movhi	r0, r3
 8002fa4:	bd70      	pop	{r4, r5, r6, pc}

08002fa6 <ModularInvBig>:
 8002fa6:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8002faa:	4680      	mov	r8, r0
 8002fac:	461d      	mov	r5, r3
 8002fae:	4610      	mov	r0, r2
 8002fb0:	2300      	movs	r3, #0
 8002fb2:	460f      	mov	r7, r1
 8002fb4:	4616      	mov	r6, r2
 8002fb6:	9300      	str	r3, [sp, #0]
 8002fb8:	9301      	str	r3, [sp, #4]
 8002fba:	9302      	str	r3, [sp, #8]
 8002fbc:	9303      	str	r3, [sp, #12]
 8002fbe:	f7ff faaf 	bl	8002520 <EvenBig>
 8002fc2:	2800      	cmp	r0, #0
 8002fc4:	f040 80c6 	bne.w	8003154 <ModularInvBig+0x1ae>
 8002fc8:	4668      	mov	r0, sp
 8002fca:	79b1      	ldrb	r1, [r6, #6]
 8002fcc:	462a      	mov	r2, r5
 8002fce:	f7ff f9b0 	bl	8002332 <StAllocBig>
 8002fd2:	4604      	mov	r4, r0
 8002fd4:	2800      	cmp	r0, #0
 8002fd6:	f040 80bf 	bne.w	8003158 <ModularInvBig+0x1b2>
 8002fda:	a801      	add	r0, sp, #4
 8002fdc:	79b1      	ldrb	r1, [r6, #6]
 8002fde:	462a      	mov	r2, r5
 8002fe0:	f7ff f9a7 	bl	8002332 <StAllocBig>
 8002fe4:	4604      	mov	r4, r0
 8002fe6:	2800      	cmp	r0, #0
 8002fe8:	f040 80af 	bne.w	800314a <ModularInvBig+0x1a4>
 8002fec:	79b1      	ldrb	r1, [r6, #6]
 8002fee:	a802      	add	r0, sp, #8
 8002ff0:	3101      	adds	r1, #1
 8002ff2:	462a      	mov	r2, r5
 8002ff4:	f7ff f99d 	bl	8002332 <StAllocBig>
 8002ff8:	4604      	mov	r4, r0
 8002ffa:	2800      	cmp	r0, #0
 8002ffc:	f040 80a1 	bne.w	8003142 <ModularInvBig+0x19c>
 8003000:	79b1      	ldrb	r1, [r6, #6]
 8003002:	a803      	add	r0, sp, #12
 8003004:	3101      	adds	r1, #1
 8003006:	462a      	mov	r2, r5
 8003008:	f7ff f993 	bl	8002332 <StAllocBig>
 800300c:	4604      	mov	r4, r0
 800300e:	2800      	cmp	r0, #0
 8003010:	f040 8093 	bne.w	800313a <ModularInvBig+0x194>
 8003014:	4640      	mov	r0, r8
 8003016:	9900      	ldr	r1, [sp, #0]
 8003018:	f7ff f9ca 	bl	80023b0 <CopyBig>
 800301c:	4604      	mov	r4, r0
 800301e:	2800      	cmp	r0, #0
 8003020:	f040 8087 	bne.w	8003132 <ModularInvBig+0x18c>
 8003024:	4630      	mov	r0, r6
 8003026:	9901      	ldr	r1, [sp, #4]
 8003028:	f7ff f9c2 	bl	80023b0 <CopyBig>
 800302c:	4604      	mov	r4, r0
 800302e:	2800      	cmp	r0, #0
 8003030:	d17f      	bne.n	8003132 <ModularInvBig+0x18c>
 8003032:	9802      	ldr	r0, [sp, #8]
 8003034:	2101      	movs	r1, #1
 8003036:	f7ff f9a4 	bl	8002382 <InitBig>
 800303a:	9803      	ldr	r0, [sp, #12]
 800303c:	4621      	mov	r1, r4
 800303e:	f7ff f9a0 	bl	8002382 <InitBig>
 8003042:	9800      	ldr	r0, [sp, #0]
 8003044:	f7ff fa48 	bl	80024d8 <IsZeroBig>
 8003048:	2800      	cmp	r0, #0
 800304a:	d15a      	bne.n	8003102 <ModularInvBig+0x15c>
 800304c:	9800      	ldr	r0, [sp, #0]
 800304e:	f7ff fa67 	bl	8002520 <EvenBig>
 8003052:	b1e8      	cbz	r0, 8003090 <ModularInvBig+0xea>
 8003054:	9800      	ldr	r0, [sp, #0]
 8003056:	f7ff fb64 	bl	8002722 <FastDiv2>
 800305a:	9802      	ldr	r0, [sp, #8]
 800305c:	f7ff fa60 	bl	8002520 <EvenBig>
 8003060:	b940      	cbnz	r0, 8003074 <ModularInvBig+0xce>
 8003062:	9802      	ldr	r0, [sp, #8]
 8003064:	4631      	mov	r1, r6
 8003066:	4602      	mov	r2, r0
 8003068:	462b      	mov	r3, r5
 800306a:	f7ff fca0 	bl	80029ae <AddBig>
 800306e:	4604      	mov	r4, r0
 8003070:	2800      	cmp	r0, #0
 8003072:	d15e      	bne.n	8003132 <ModularInvBig+0x18c>
 8003074:	9802      	ldr	r0, [sp, #8]
 8003076:	f7ff fb54 	bl	8002722 <FastDiv2>
 800307a:	e7e7      	b.n	800304c <ModularInvBig+0xa6>
 800307c:	9801      	ldr	r0, [sp, #4]
 800307e:	f7ff fb50 	bl	8002722 <FastDiv2>
 8003082:	9803      	ldr	r0, [sp, #12]
 8003084:	f7ff fa4c 	bl	8002520 <EvenBig>
 8003088:	b140      	cbz	r0, 800309c <ModularInvBig+0xf6>
 800308a:	9803      	ldr	r0, [sp, #12]
 800308c:	f7ff fb49 	bl	8002722 <FastDiv2>
 8003090:	9801      	ldr	r0, [sp, #4]
 8003092:	f7ff fa45 	bl	8002520 <EvenBig>
 8003096:	2800      	cmp	r0, #0
 8003098:	d1f0      	bne.n	800307c <ModularInvBig+0xd6>
 800309a:	e009      	b.n	80030b0 <ModularInvBig+0x10a>
 800309c:	9803      	ldr	r0, [sp, #12]
 800309e:	4631      	mov	r1, r6
 80030a0:	4602      	mov	r2, r0
 80030a2:	462b      	mov	r3, r5
 80030a4:	f7ff fc83 	bl	80029ae <AddBig>
 80030a8:	4604      	mov	r4, r0
 80030aa:	2800      	cmp	r0, #0
 80030ac:	d0ed      	beq.n	800308a <ModularInvBig+0xe4>
 80030ae:	e040      	b.n	8003132 <ModularInvBig+0x18c>
 80030b0:	e89d 0003 	ldmia.w	sp, {r0, r1}
 80030b4:	f7ff fa3b 	bl	800252e <CompareBig>
 80030b8:	2800      	cmp	r0, #0
 80030ba:	db0b      	blt.n	80030d4 <ModularInvBig+0x12e>
 80030bc:	e89d 0003 	ldmia.w	sp, {r0, r1}
 80030c0:	462b      	mov	r3, r5
 80030c2:	4602      	mov	r2, r0
 80030c4:	f7ff fcfc 	bl	8002ac0 <SubBig>
 80030c8:	4604      	mov	r4, r0
 80030ca:	2800      	cmp	r0, #0
 80030cc:	d131      	bne.n	8003132 <ModularInvBig+0x18c>
 80030ce:	9802      	ldr	r0, [sp, #8]
 80030d0:	9903      	ldr	r1, [sp, #12]
 80030d2:	e009      	b.n	80030e8 <ModularInvBig+0x142>
 80030d4:	9801      	ldr	r0, [sp, #4]
 80030d6:	9900      	ldr	r1, [sp, #0]
 80030d8:	4602      	mov	r2, r0
 80030da:	462b      	mov	r3, r5
 80030dc:	f7ff fcf0 	bl	8002ac0 <SubBig>
 80030e0:	4604      	mov	r4, r0
 80030e2:	bb30      	cbnz	r0, 8003132 <ModularInvBig+0x18c>
 80030e4:	9803      	ldr	r0, [sp, #12]
 80030e6:	9902      	ldr	r1, [sp, #8]
 80030e8:	4602      	mov	r2, r0
 80030ea:	462b      	mov	r3, r5
 80030ec:	f7ff fce8 	bl	8002ac0 <SubBig>
 80030f0:	e7a7      	b.n	8003042 <ModularInvBig+0x9c>
 80030f2:	9803      	ldr	r0, [sp, #12]
 80030f4:	4631      	mov	r1, r6
 80030f6:	4602      	mov	r2, r0
 80030f8:	462b      	mov	r3, r5
 80030fa:	f7ff fc58 	bl	80029ae <AddBig>
 80030fe:	4604      	mov	r4, r0
 8003100:	b9b8      	cbnz	r0, 8003132 <ModularInvBig+0x18c>
 8003102:	9803      	ldr	r0, [sp, #12]
 8003104:	f7ff fa06 	bl	8002514 <SignBig>
 8003108:	2800      	cmp	r0, #0
 800310a:	d1f2      	bne.n	80030f2 <ModularInvBig+0x14c>
 800310c:	e006      	b.n	800311c <ModularInvBig+0x176>
 800310e:	4631      	mov	r1, r6
 8003110:	4602      	mov	r2, r0
 8003112:	462b      	mov	r3, r5
 8003114:	f7ff fcd4 	bl	8002ac0 <SubBig>
 8003118:	4604      	mov	r4, r0
 800311a:	b950      	cbnz	r0, 8003132 <ModularInvBig+0x18c>
 800311c:	9803      	ldr	r0, [sp, #12]
 800311e:	4631      	mov	r1, r6
 8003120:	f7ff fa05 	bl	800252e <CompareBig>
 8003124:	2800      	cmp	r0, #0
 8003126:	9803      	ldr	r0, [sp, #12]
 8003128:	daf1      	bge.n	800310e <ModularInvBig+0x168>
 800312a:	4639      	mov	r1, r7
 800312c:	f7ff f940 	bl	80023b0 <CopyBig>
 8003130:	4604      	mov	r4, r0
 8003132:	a803      	add	r0, sp, #12
 8003134:	4629      	mov	r1, r5
 8003136:	f7ff f917 	bl	8002368 <StFreeBig>
 800313a:	a802      	add	r0, sp, #8
 800313c:	4629      	mov	r1, r5
 800313e:	f7ff f913 	bl	8002368 <StFreeBig>
 8003142:	a801      	add	r0, sp, #4
 8003144:	4629      	mov	r1, r5
 8003146:	f7ff f90f 	bl	8002368 <StFreeBig>
 800314a:	4668      	mov	r0, sp
 800314c:	4629      	mov	r1, r5
 800314e:	f7ff f90b 	bl	8002368 <StFreeBig>
 8003152:	e001      	b.n	8003158 <ModularInvBig+0x1b2>
 8003154:	f241 44b6 	movw	r4, #5302	; 0x14b6
 8003158:	4620      	mov	r0, r4
 800315a:	b004      	add	sp, #16
 800315c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08003160 <ECCpoint2Monty>:
 8003160:	b538      	push	{r3, r4, r5, lr}
 8003162:	7b03      	ldrb	r3, [r0, #12]
 8003164:	079b      	lsls	r3, r3, #30
 8003166:	4604      	mov	r4, r0
 8003168:	460d      	mov	r5, r1
 800316a:	d417      	bmi.n	800319c <ECCpoint2Monty+0x3c>
 800316c:	6800      	ldr	r0, [r0, #0]
 800316e:	6849      	ldr	r1, [r1, #4]
 8003170:	4602      	mov	r2, r0
 8003172:	462b      	mov	r3, r5
 8003174:	f7ff fdb5 	bl	8002ce2 <MontyMul>
 8003178:	b988      	cbnz	r0, 800319e <ECCpoint2Monty+0x3e>
 800317a:	6860      	ldr	r0, [r4, #4]
 800317c:	6869      	ldr	r1, [r5, #4]
 800317e:	462b      	mov	r3, r5
 8003180:	4602      	mov	r2, r0
 8003182:	f7ff fdae 	bl	8002ce2 <MontyMul>
 8003186:	68a0      	ldr	r0, [r4, #8]
 8003188:	6869      	ldr	r1, [r5, #4]
 800318a:	462b      	mov	r3, r5
 800318c:	4602      	mov	r2, r0
 800318e:	f7ff fda8 	bl	8002ce2 <MontyMul>
 8003192:	7b23      	ldrb	r3, [r4, #12]
 8003194:	f043 0304 	orr.w	r3, r3, #4
 8003198:	7323      	strb	r3, [r4, #12]
 800319a:	bd38      	pop	{r3, r4, r5, pc}
 800319c:	2000      	movs	r0, #0
 800319e:	bd38      	pop	{r3, r4, r5, pc}

080031a0 <ECCpointFromMonty>:
 80031a0:	b538      	push	{r3, r4, r5, lr}
 80031a2:	7b03      	ldrb	r3, [r0, #12]
 80031a4:	f003 0306 	and.w	r3, r3, #6
 80031a8:	2b04      	cmp	r3, #4
 80031aa:	4604      	mov	r4, r0
 80031ac:	460d      	mov	r5, r1
 80031ae:	d114      	bne.n	80031da <ECCpointFromMonty+0x3a>
 80031b0:	6800      	ldr	r0, [r0, #0]
 80031b2:	462a      	mov	r2, r5
 80031b4:	4601      	mov	r1, r0
 80031b6:	f7ff fe7f 	bl	8002eb8 <MontyExit>
 80031ba:	b978      	cbnz	r0, 80031dc <ECCpointFromMonty+0x3c>
 80031bc:	6860      	ldr	r0, [r4, #4]
 80031be:	462a      	mov	r2, r5
 80031c0:	4601      	mov	r1, r0
 80031c2:	f7ff fe79 	bl	8002eb8 <MontyExit>
 80031c6:	68a0      	ldr	r0, [r4, #8]
 80031c8:	462a      	mov	r2, r5
 80031ca:	4601      	mov	r1, r0
 80031cc:	f7ff fe74 	bl	8002eb8 <MontyExit>
 80031d0:	7b23      	ldrb	r3, [r4, #12]
 80031d2:	f023 0304 	bic.w	r3, r3, #4
 80031d6:	7323      	strb	r3, [r4, #12]
 80031d8:	bd38      	pop	{r3, r4, r5, pc}
 80031da:	2000      	movs	r0, #0
 80031dc:	bd38      	pop	{r3, r4, r5, pc}

080031de <MontyJacProjDoublePoint>:
 80031de:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80031e2:	b085      	sub	sp, #20
 80031e4:	461c      	mov	r4, r3
 80031e6:	f10d 0810 	add.w	r8, sp, #16
 80031ea:	2300      	movs	r3, #0
 80031ec:	f848 3d04 	str.w	r3, [r8, #-4]!
 80031f0:	9302      	str	r3, [sp, #8]
 80031f2:	6823      	ldr	r3, [r4, #0]
 80031f4:	460e      	mov	r6, r1
 80031f6:	7999      	ldrb	r1, [r3, #6]
 80031f8:	4607      	mov	r7, r0
 80031fa:	4691      	mov	r9, r2
 80031fc:	4640      	mov	r0, r8
 80031fe:	3102      	adds	r1, #2
 8003200:	68e2      	ldr	r2, [r4, #12]
 8003202:	f7ff f896 	bl	8002332 <StAllocBig>
 8003206:	4605      	mov	r5, r0
 8003208:	2800      	cmp	r0, #0
 800320a:	f040 8108 	bne.w	800341e <MontyJacProjDoublePoint+0x240>
 800320e:	6823      	ldr	r3, [r4, #0]
 8003210:	68e2      	ldr	r2, [r4, #12]
 8003212:	7999      	ldrb	r1, [r3, #6]
 8003214:	a802      	add	r0, sp, #8
 8003216:	3102      	adds	r1, #2
 8003218:	f7ff f88b 	bl	8002332 <StAllocBig>
 800321c:	4605      	mov	r5, r0
 800321e:	2800      	cmp	r0, #0
 8003220:	f040 80f9 	bne.w	8003416 <MontyJacProjDoublePoint+0x238>
 8003224:	9803      	ldr	r0, [sp, #12]
 8003226:	f06f 0102 	mvn.w	r1, #2
 800322a:	f7ff f8aa 	bl	8002382 <InitBig>
 800322e:	7b3b      	ldrb	r3, [r7, #12]
 8003230:	079b      	lsls	r3, r3, #30
 8003232:	d502      	bpl.n	800323a <MontyJacProjDoublePoint+0x5c>
 8003234:	2302      	movs	r3, #2
 8003236:	7333      	strb	r3, [r6, #12]
 8003238:	e0e9      	b.n	800340e <MontyJacProjDoublePoint+0x230>
 800323a:	68b8      	ldr	r0, [r7, #8]
 800323c:	9a02      	ldr	r2, [sp, #8]
 800323e:	2304      	movs	r3, #4
 8003240:	7333      	strb	r3, [r6, #12]
 8003242:	4601      	mov	r1, r0
 8003244:	4623      	mov	r3, r4
 8003246:	f7ff fd4c 	bl	8002ce2 <MontyMul>
 800324a:	4605      	mov	r5, r0
 800324c:	2800      	cmp	r0, #0
 800324e:	f040 80de 	bne.w	800340e <MontyJacProjDoublePoint+0x230>
 8003252:	6879      	ldr	r1, [r7, #4]
 8003254:	68b2      	ldr	r2, [r6, #8]
 8003256:	68b8      	ldr	r0, [r7, #8]
 8003258:	4623      	mov	r3, r4
 800325a:	f7ff fd42 	bl	8002ce2 <MontyMul>
 800325e:	68b0      	ldr	r0, [r6, #8]
 8003260:	6821      	ldr	r1, [r4, #0]
 8003262:	68e2      	ldr	r2, [r4, #12]
 8003264:	f7ff fe83 	bl	8002f6e <ModularFastMul2>
 8003268:	4605      	mov	r5, r0
 800326a:	2800      	cmp	r0, #0
 800326c:	f040 80cf 	bne.w	800340e <MontyJacProjDoublePoint+0x230>
 8003270:	9803      	ldr	r0, [sp, #12]
 8003272:	6821      	ldr	r1, [r4, #0]
 8003274:	68e3      	ldr	r3, [r4, #12]
 8003276:	4602      	mov	r2, r0
 8003278:	f7ff fb99 	bl	80029ae <AddBig>
 800327c:	f8d9 3030 	ldr.w	r3, [r9, #48]	; 0x30
 8003280:	9803      	ldr	r0, [sp, #12]
 8003282:	6819      	ldr	r1, [r3, #0]
 8003284:	f7ff f953 	bl	800252e <CompareBig>
 8003288:	2800      	cmp	r0, #0
 800328a:	d137      	bne.n	80032fc <MontyJacProjDoublePoint+0x11e>
 800328c:	68e3      	ldr	r3, [r4, #12]
 800328e:	9300      	str	r3, [sp, #0]
 8003290:	6838      	ldr	r0, [r7, #0]
 8003292:	9902      	ldr	r1, [sp, #8]
 8003294:	9a03      	ldr	r2, [sp, #12]
 8003296:	6823      	ldr	r3, [r4, #0]
 8003298:	f7ff fe53 	bl	8002f42 <ModularSubBig>
 800329c:	4605      	mov	r5, r0
 800329e:	2800      	cmp	r0, #0
 80032a0:	f040 80b5 	bne.w	800340e <MontyJacProjDoublePoint+0x230>
 80032a4:	68e3      	ldr	r3, [r4, #12]
 80032a6:	9300      	str	r3, [sp, #0]
 80032a8:	6838      	ldr	r0, [r7, #0]
 80032aa:	9902      	ldr	r1, [sp, #8]
 80032ac:	6832      	ldr	r2, [r6, #0]
 80032ae:	6823      	ldr	r3, [r4, #0]
 80032b0:	f7ff fe25 	bl	8002efe <ModularAddBig>
 80032b4:	4605      	mov	r5, r0
 80032b6:	2800      	cmp	r0, #0
 80032b8:	f040 80a9 	bne.w	800340e <MontyJacProjDoublePoint+0x230>
 80032bc:	6830      	ldr	r0, [r6, #0]
 80032be:	9903      	ldr	r1, [sp, #12]
 80032c0:	9a02      	ldr	r2, [sp, #8]
 80032c2:	4623      	mov	r3, r4
 80032c4:	f7ff fd0d 	bl	8002ce2 <MontyMul>
 80032c8:	4605      	mov	r5, r0
 80032ca:	2800      	cmp	r0, #0
 80032cc:	f040 809f 	bne.w	800340e <MontyJacProjDoublePoint+0x230>
 80032d0:	9903      	ldr	r1, [sp, #12]
 80032d2:	9802      	ldr	r0, [sp, #8]
 80032d4:	f7ff f86c 	bl	80023b0 <CopyBig>
 80032d8:	9803      	ldr	r0, [sp, #12]
 80032da:	6821      	ldr	r1, [r4, #0]
 80032dc:	68e2      	ldr	r2, [r4, #12]
 80032de:	f7ff fe46 	bl	8002f6e <ModularFastMul2>
 80032e2:	4605      	mov	r5, r0
 80032e4:	2800      	cmp	r0, #0
 80032e6:	f040 8092 	bne.w	800340e <MontyJacProjDoublePoint+0x230>
 80032ea:	9902      	ldr	r1, [sp, #8]
 80032ec:	68e3      	ldr	r3, [r4, #12]
 80032ee:	9300      	str	r3, [sp, #0]
 80032f0:	9803      	ldr	r0, [sp, #12]
 80032f2:	6823      	ldr	r3, [r4, #0]
 80032f4:	460a      	mov	r2, r1
 80032f6:	f7ff fe02 	bl	8002efe <ModularAddBig>
 80032fa:	e034      	b.n	8003366 <MontyJacProjDoublePoint+0x188>
 80032fc:	9802      	ldr	r0, [sp, #8]
 80032fe:	4623      	mov	r3, r4
 8003300:	4601      	mov	r1, r0
 8003302:	4602      	mov	r2, r0
 8003304:	f7ff fced 	bl	8002ce2 <MontyMul>
 8003308:	4605      	mov	r5, r0
 800330a:	2800      	cmp	r0, #0
 800330c:	d17f      	bne.n	800340e <MontyJacProjDoublePoint+0x230>
 800330e:	f8d9 3030 	ldr.w	r3, [r9, #48]	; 0x30
 8003312:	6861      	ldr	r1, [r4, #4]
 8003314:	6818      	ldr	r0, [r3, #0]
 8003316:	9a03      	ldr	r2, [sp, #12]
 8003318:	4623      	mov	r3, r4
 800331a:	f7ff fce2 	bl	8002ce2 <MontyMul>
 800331e:	9902      	ldr	r1, [sp, #8]
 8003320:	9803      	ldr	r0, [sp, #12]
 8003322:	460a      	mov	r2, r1
 8003324:	4623      	mov	r3, r4
 8003326:	f7ff fcdc 	bl	8002ce2 <MontyMul>
 800332a:	6838      	ldr	r0, [r7, #0]
 800332c:	9a03      	ldr	r2, [sp, #12]
 800332e:	4601      	mov	r1, r0
 8003330:	4623      	mov	r3, r4
 8003332:	f7ff fcd6 	bl	8002ce2 <MontyMul>
 8003336:	9802      	ldr	r0, [sp, #8]
 8003338:	68e3      	ldr	r3, [r4, #12]
 800333a:	9300      	str	r3, [sp, #0]
 800333c:	9903      	ldr	r1, [sp, #12]
 800333e:	6823      	ldr	r3, [r4, #0]
 8003340:	4602      	mov	r2, r0
 8003342:	f7ff fddc 	bl	8002efe <ModularAddBig>
 8003346:	6821      	ldr	r1, [r4, #0]
 8003348:	68e2      	ldr	r2, [r4, #12]
 800334a:	9803      	ldr	r0, [sp, #12]
 800334c:	f7ff fe0f 	bl	8002f6e <ModularFastMul2>
 8003350:	9802      	ldr	r0, [sp, #8]
 8003352:	68e3      	ldr	r3, [r4, #12]
 8003354:	9300      	str	r3, [sp, #0]
 8003356:	9903      	ldr	r1, [sp, #12]
 8003358:	6823      	ldr	r3, [r4, #0]
 800335a:	4602      	mov	r2, r0
 800335c:	f7ff fdcf 	bl	8002efe <ModularAddBig>
 8003360:	4605      	mov	r5, r0
 8003362:	2800      	cmp	r0, #0
 8003364:	d153      	bne.n	800340e <MontyJacProjDoublePoint+0x230>
 8003366:	6878      	ldr	r0, [r7, #4]
 8003368:	6832      	ldr	r2, [r6, #0]
 800336a:	4601      	mov	r1, r0
 800336c:	4623      	mov	r3, r4
 800336e:	f7ff fcb8 	bl	8002ce2 <MontyMul>
 8003372:	4605      	mov	r5, r0
 8003374:	2800      	cmp	r0, #0
 8003376:	d14a      	bne.n	800340e <MontyJacProjDoublePoint+0x230>
 8003378:	6821      	ldr	r1, [r4, #0]
 800337a:	68e2      	ldr	r2, [r4, #12]
 800337c:	6830      	ldr	r0, [r6, #0]
 800337e:	f7ff fdf6 	bl	8002f6e <ModularFastMul2>
 8003382:	6830      	ldr	r0, [r6, #0]
 8003384:	9a03      	ldr	r2, [sp, #12]
 8003386:	4623      	mov	r3, r4
 8003388:	4601      	mov	r1, r0
 800338a:	f7ff fcaa 	bl	8002ce2 <MontyMul>
 800338e:	6821      	ldr	r1, [r4, #0]
 8003390:	68e2      	ldr	r2, [r4, #12]
 8003392:	9803      	ldr	r0, [sp, #12]
 8003394:	f7ff fdeb 	bl	8002f6e <ModularFastMul2>
 8003398:	6821      	ldr	r1, [r4, #0]
 800339a:	68e2      	ldr	r2, [r4, #12]
 800339c:	6830      	ldr	r0, [r6, #0]
 800339e:	f7ff fde6 	bl	8002f6e <ModularFastMul2>
 80033a2:	6838      	ldr	r0, [r7, #0]
 80033a4:	e896 0006 	ldmia.w	r6, {r1, r2}
 80033a8:	4623      	mov	r3, r4
 80033aa:	f7ff fc9a 	bl	8002ce2 <MontyMul>
 80033ae:	4605      	mov	r5, r0
 80033b0:	2800      	cmp	r0, #0
 80033b2:	d12c      	bne.n	800340e <MontyJacProjDoublePoint+0x230>
 80033b4:	9802      	ldr	r0, [sp, #8]
 80033b6:	6832      	ldr	r2, [r6, #0]
 80033b8:	4601      	mov	r1, r0
 80033ba:	4623      	mov	r3, r4
 80033bc:	f7ff fc91 	bl	8002ce2 <MontyMul>
 80033c0:	6830      	ldr	r0, [r6, #0]
 80033c2:	68e3      	ldr	r3, [r4, #12]
 80033c4:	9300      	str	r3, [sp, #0]
 80033c6:	6871      	ldr	r1, [r6, #4]
 80033c8:	6823      	ldr	r3, [r4, #0]
 80033ca:	4602      	mov	r2, r0
 80033cc:	f7ff fdb9 	bl	8002f42 <ModularSubBig>
 80033d0:	6830      	ldr	r0, [r6, #0]
 80033d2:	68e3      	ldr	r3, [r4, #12]
 80033d4:	9300      	str	r3, [sp, #0]
 80033d6:	6871      	ldr	r1, [r6, #4]
 80033d8:	6823      	ldr	r3, [r4, #0]
 80033da:	4602      	mov	r2, r0
 80033dc:	f7ff fdb1 	bl	8002f42 <ModularSubBig>
 80033e0:	6870      	ldr	r0, [r6, #4]
 80033e2:	68e3      	ldr	r3, [r4, #12]
 80033e4:	9300      	str	r3, [sp, #0]
 80033e6:	6831      	ldr	r1, [r6, #0]
 80033e8:	6823      	ldr	r3, [r4, #0]
 80033ea:	4602      	mov	r2, r0
 80033ec:	f7ff fda9 	bl	8002f42 <ModularSubBig>
 80033f0:	6871      	ldr	r1, [r6, #4]
 80033f2:	9802      	ldr	r0, [sp, #8]
 80033f4:	460a      	mov	r2, r1
 80033f6:	4623      	mov	r3, r4
 80033f8:	f7ff fc73 	bl	8002ce2 <MontyMul>
 80033fc:	6870      	ldr	r0, [r6, #4]
 80033fe:	68e3      	ldr	r3, [r4, #12]
 8003400:	9300      	str	r3, [sp, #0]
 8003402:	9903      	ldr	r1, [sp, #12]
 8003404:	6823      	ldr	r3, [r4, #0]
 8003406:	4602      	mov	r2, r0
 8003408:	f7ff fd9b 	bl	8002f42 <ModularSubBig>
 800340c:	4605      	mov	r5, r0
 800340e:	a802      	add	r0, sp, #8
 8003410:	68e1      	ldr	r1, [r4, #12]
 8003412:	f7fe ffa9 	bl	8002368 <StFreeBig>
 8003416:	4640      	mov	r0, r8
 8003418:	68e1      	ldr	r1, [r4, #12]
 800341a:	f7fe ffa5 	bl	8002368 <StFreeBig>
 800341e:	4628      	mov	r0, r5
 8003420:	b005      	add	sp, #20
 8003422:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08003426 <ECCinitEC>:
 8003426:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800342a:	460d      	mov	r5, r1
 800342c:	4604      	mov	r4, r0
 800342e:	2800      	cmp	r0, #0
 8003430:	f000 80d6 	beq.w	80035e0 <ECCinitEC+0x1ba>
 8003434:	2900      	cmp	r1, #0
 8003436:	f000 80d3 	beq.w	80035e0 <ECCinitEC+0x1ba>
 800343a:	6903      	ldr	r3, [r0, #16]
 800343c:	2b00      	cmp	r3, #0
 800343e:	f000 80d3 	beq.w	80035e8 <ECCinitEC+0x1c2>
 8003442:	6941      	ldr	r1, [r0, #20]
 8003444:	1e4b      	subs	r3, r1, #1
 8003446:	2b43      	cmp	r3, #67	; 0x43
 8003448:	f200 80ce 	bhi.w	80035e8 <ECCinitEC+0x1c2>
 800344c:	6803      	ldr	r3, [r0, #0]
 800344e:	2b00      	cmp	r3, #0
 8003450:	f000 80ca 	beq.w	80035e8 <ECCinitEC+0x1c2>
 8003454:	6843      	ldr	r3, [r0, #4]
 8003456:	2b44      	cmp	r3, #68	; 0x44
 8003458:	f200 80c6 	bhi.w	80035e8 <ECCinitEC+0x1c2>
 800345c:	6983      	ldr	r3, [r0, #24]
 800345e:	2b00      	cmp	r3, #0
 8003460:	f000 80c2 	beq.w	80035e8 <ECCinitEC+0x1c2>
 8003464:	69c3      	ldr	r3, [r0, #28]
 8003466:	3b01      	subs	r3, #1
 8003468:	2b43      	cmp	r3, #67	; 0x43
 800346a:	f200 80bd 	bhi.w	80035e8 <ECCinitEC+0x1c2>
 800346e:	6828      	ldr	r0, [r5, #0]
 8003470:	2800      	cmp	r0, #0
 8003472:	f000 80b9 	beq.w	80035e8 <ECCinitEC+0x1c2>
 8003476:	3103      	adds	r1, #3
 8003478:	0889      	lsrs	r1, r1, #2
 800347a:	2318      	movs	r3, #24
 800347c:	88aa      	ldrh	r2, [r5, #4]
 800347e:	434b      	muls	r3, r1
 8003480:	3360      	adds	r3, #96	; 0x60
 8003482:	429a      	cmp	r2, r3
 8003484:	d203      	bcs.n	800348e <ECCinitEC+0x68>
 8003486:	f240 30ed 	movw	r0, #1005	; 0x3ed
 800348a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800348e:	88eb      	ldrh	r3, [r5, #6]
 8003490:	4418      	add	r0, r3
 8003492:	3318      	adds	r3, #24
 8003494:	6320      	str	r0, [r4, #48]	; 0x30
 8003496:	80eb      	strh	r3, [r5, #6]
 8003498:	2800      	cmp	r0, #0
 800349a:	d0f4      	beq.n	8003486 <ECCinitEC+0x60>
 800349c:	3008      	adds	r0, #8
 800349e:	462a      	mov	r2, r5
 80034a0:	f7fe ff47 	bl	8002332 <StAllocBig>
 80034a4:	4606      	mov	r6, r0
 80034a6:	2800      	cmp	r0, #0
 80034a8:	f040 8092 	bne.w	80035d0 <ECCinitEC+0x1aa>
 80034ac:	6961      	ldr	r1, [r4, #20]
 80034ae:	6b20      	ldr	r0, [r4, #48]	; 0x30
 80034b0:	3103      	adds	r1, #3
 80034b2:	0889      	lsrs	r1, r1, #2
 80034b4:	462a      	mov	r2, r5
 80034b6:	f7fe ff3c 	bl	8002332 <StAllocBig>
 80034ba:	4606      	mov	r6, r0
 80034bc:	2800      	cmp	r0, #0
 80034be:	f040 8082 	bne.w	80035c6 <ECCinitEC+0x1a0>
 80034c2:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80034c4:	e894 0003 	ldmia.w	r4, {r0, r1}
 80034c8:	681a      	ldr	r2, [r3, #0]
 80034ca:	f7ff f8a5 	bl	8002618 <W8_to_Big>
 80034ce:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80034d0:	6961      	ldr	r1, [r4, #20]
 80034d2:	689a      	ldr	r2, [r3, #8]
 80034d4:	4680      	mov	r8, r0
 80034d6:	6920      	ldr	r0, [r4, #16]
 80034d8:	f7ff f89e 	bl	8002618 <W8_to_Big>
 80034dc:	69e1      	ldr	r1, [r4, #28]
 80034de:	4607      	mov	r7, r0
 80034e0:	6b20      	ldr	r0, [r4, #48]	; 0x30
 80034e2:	3103      	adds	r1, #3
 80034e4:	300c      	adds	r0, #12
 80034e6:	0889      	lsrs	r1, r1, #2
 80034e8:	462a      	mov	r2, r5
 80034ea:	f7fe ff22 	bl	8002332 <StAllocBig>
 80034ee:	4606      	mov	r6, r0
 80034f0:	2800      	cmp	r0, #0
 80034f2:	d164      	bne.n	80035be <ECCinitEC+0x198>
 80034f4:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80034f6:	69a0      	ldr	r0, [r4, #24]
 80034f8:	68da      	ldr	r2, [r3, #12]
 80034fa:	69e1      	ldr	r1, [r4, #28]
 80034fc:	f7ff f88c 	bl	8002618 <W8_to_Big>
 8003500:	4447      	add	r7, r8
 8003502:	4407      	add	r7, r0
 8003504:	68a3      	ldr	r3, [r4, #8]
 8003506:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8003508:	6046      	str	r6, [r0, #4]
 800350a:	6106      	str	r6, [r0, #16]
 800350c:	6146      	str	r6, [r0, #20]
 800350e:	b19b      	cbz	r3, 8003538 <ECCinitEC+0x112>
 8003510:	68e1      	ldr	r1, [r4, #12]
 8003512:	1e4b      	subs	r3, r1, #1
 8003514:	2b42      	cmp	r3, #66	; 0x42
 8003516:	d80f      	bhi.n	8003538 <ECCinitEC+0x112>
 8003518:	3103      	adds	r1, #3
 800351a:	3004      	adds	r0, #4
 800351c:	0889      	lsrs	r1, r1, #2
 800351e:	462a      	mov	r2, r5
 8003520:	f7fe ff07 	bl	8002332 <StAllocBig>
 8003524:	4606      	mov	r6, r0
 8003526:	2800      	cmp	r0, #0
 8003528:	d144      	bne.n	80035b4 <ECCinitEC+0x18e>
 800352a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800352c:	68a0      	ldr	r0, [r4, #8]
 800352e:	68e1      	ldr	r1, [r4, #12]
 8003530:	685a      	ldr	r2, [r3, #4]
 8003532:	f7ff f871 	bl	8002618 <W8_to_Big>
 8003536:	4407      	add	r7, r0
 8003538:	6a23      	ldr	r3, [r4, #32]
 800353a:	b353      	cbz	r3, 8003592 <ECCinitEC+0x16c>
 800353c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800353e:	1e4b      	subs	r3, r1, #1
 8003540:	2b42      	cmp	r3, #66	; 0x42
 8003542:	d826      	bhi.n	8003592 <ECCinitEC+0x16c>
 8003544:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8003546:	b323      	cbz	r3, 8003592 <ECCinitEC+0x16c>
 8003548:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800354a:	3b01      	subs	r3, #1
 800354c:	2b42      	cmp	r3, #66	; 0x42
 800354e:	d820      	bhi.n	8003592 <ECCinitEC+0x16c>
 8003550:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8003552:	3103      	adds	r1, #3
 8003554:	3010      	adds	r0, #16
 8003556:	0889      	lsrs	r1, r1, #2
 8003558:	462a      	mov	r2, r5
 800355a:	f7fe feea 	bl	8002332 <StAllocBig>
 800355e:	4606      	mov	r6, r0
 8003560:	bb18      	cbnz	r0, 80035aa <ECCinitEC+0x184>
 8003562:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8003564:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8003566:	691a      	ldr	r2, [r3, #16]
 8003568:	6a20      	ldr	r0, [r4, #32]
 800356a:	f7ff f855 	bl	8002618 <W8_to_Big>
 800356e:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8003570:	4407      	add	r7, r0
 8003572:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8003574:	3103      	adds	r1, #3
 8003576:	3014      	adds	r0, #20
 8003578:	0889      	lsrs	r1, r1, #2
 800357a:	462a      	mov	r2, r5
 800357c:	f7fe fed9 	bl	8002332 <StAllocBig>
 8003580:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8003582:	4606      	mov	r6, r0
 8003584:	b960      	cbnz	r0, 80035a0 <ECCinitEC+0x17a>
 8003586:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8003588:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800358a:	695a      	ldr	r2, [r3, #20]
 800358c:	f7ff f844 	bl	8002618 <W8_to_Big>
 8003590:	4407      	add	r7, r0
 8003592:	2f00      	cmp	r7, #0
 8003594:	f241 40bf 	movw	r0, #5311	; 0x14bf
 8003598:	bf08      	it	eq
 800359a:	2000      	moveq	r0, #0
 800359c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80035a0:	f103 0010 	add.w	r0, r3, #16
 80035a4:	4629      	mov	r1, r5
 80035a6:	f7fe fedf 	bl	8002368 <StFreeBig>
 80035aa:	6b20      	ldr	r0, [r4, #48]	; 0x30
 80035ac:	4629      	mov	r1, r5
 80035ae:	3004      	adds	r0, #4
 80035b0:	f7fe feda 	bl	8002368 <StFreeBig>
 80035b4:	6b20      	ldr	r0, [r4, #48]	; 0x30
 80035b6:	4629      	mov	r1, r5
 80035b8:	300c      	adds	r0, #12
 80035ba:	f7fe fed5 	bl	8002368 <StFreeBig>
 80035be:	6b20      	ldr	r0, [r4, #48]	; 0x30
 80035c0:	4629      	mov	r1, r5
 80035c2:	f7fe fed1 	bl	8002368 <StFreeBig>
 80035c6:	6b20      	ldr	r0, [r4, #48]	; 0x30
 80035c8:	4629      	mov	r1, r5
 80035ca:	3008      	adds	r0, #8
 80035cc:	f7fe fecc 	bl	8002368 <StFreeBig>
 80035d0:	88eb      	ldrh	r3, [r5, #6]
 80035d2:	3b18      	subs	r3, #24
 80035d4:	80eb      	strh	r3, [r5, #6]
 80035d6:	2300      	movs	r3, #0
 80035d8:	6323      	str	r3, [r4, #48]	; 0x30
 80035da:	4630      	mov	r0, r6
 80035dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80035e0:	f241 4054 	movw	r0, #5204	; 0x1454
 80035e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80035e8:	f241 4053 	movw	r0, #5203	; 0x1453
 80035ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080035f0 <ECCfreeEC>:
 80035f0:	b538      	push	{r3, r4, r5, lr}
 80035f2:	460d      	mov	r5, r1
 80035f4:	4604      	mov	r4, r0
 80035f6:	2800      	cmp	r0, #0
 80035f8:	d032      	beq.n	8003660 <ECCfreeEC+0x70>
 80035fa:	2900      	cmp	r1, #0
 80035fc:	d030      	beq.n	8003660 <ECCfreeEC+0x70>
 80035fe:	6b00      	ldr	r0, [r0, #48]	; 0x30
 8003600:	2800      	cmp	r0, #0
 8003602:	d030      	beq.n	8003666 <ECCfreeEC+0x76>
 8003604:	6803      	ldr	r3, [r0, #0]
 8003606:	2b00      	cmp	r3, #0
 8003608:	d02d      	beq.n	8003666 <ECCfreeEC+0x76>
 800360a:	6883      	ldr	r3, [r0, #8]
 800360c:	b35b      	cbz	r3, 8003666 <ECCfreeEC+0x76>
 800360e:	f7fe feab 	bl	8002368 <StFreeBig>
 8003612:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8003614:	4629      	mov	r1, r5
 8003616:	3008      	adds	r0, #8
 8003618:	f7fe fea6 	bl	8002368 <StFreeBig>
 800361c:	6b20      	ldr	r0, [r4, #48]	; 0x30
 800361e:	68c3      	ldr	r3, [r0, #12]
 8003620:	b11b      	cbz	r3, 800362a <ECCfreeEC+0x3a>
 8003622:	300c      	adds	r0, #12
 8003624:	4629      	mov	r1, r5
 8003626:	f7fe fe9f 	bl	8002368 <StFreeBig>
 800362a:	6b20      	ldr	r0, [r4, #48]	; 0x30
 800362c:	6843      	ldr	r3, [r0, #4]
 800362e:	b11b      	cbz	r3, 8003638 <ECCfreeEC+0x48>
 8003630:	3004      	adds	r0, #4
 8003632:	4629      	mov	r1, r5
 8003634:	f7fe fe98 	bl	8002368 <StFreeBig>
 8003638:	6b20      	ldr	r0, [r4, #48]	; 0x30
 800363a:	6903      	ldr	r3, [r0, #16]
 800363c:	b11b      	cbz	r3, 8003646 <ECCfreeEC+0x56>
 800363e:	3010      	adds	r0, #16
 8003640:	4629      	mov	r1, r5
 8003642:	f7fe fe91 	bl	8002368 <StFreeBig>
 8003646:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8003648:	6943      	ldr	r3, [r0, #20]
 800364a:	b11b      	cbz	r3, 8003654 <ECCfreeEC+0x64>
 800364c:	3014      	adds	r0, #20
 800364e:	4629      	mov	r1, r5
 8003650:	f7fe fe8a 	bl	8002368 <StFreeBig>
 8003654:	88eb      	ldrh	r3, [r5, #6]
 8003656:	2000      	movs	r0, #0
 8003658:	3b18      	subs	r3, #24
 800365a:	80eb      	strh	r3, [r5, #6]
 800365c:	6320      	str	r0, [r4, #48]	; 0x30
 800365e:	bd38      	pop	{r3, r4, r5, pc}
 8003660:	f241 4054 	movw	r0, #5204	; 0x1454
 8003664:	bd38      	pop	{r3, r4, r5, pc}
 8003666:	f241 4053 	movw	r0, #5203	; 0x1453
 800366a:	bd38      	pop	{r3, r4, r5, pc}

0800366c <ECCinitPoint>:
 800366c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003670:	4605      	mov	r5, r0
 8003672:	4614      	mov	r4, r2
 8003674:	460e      	mov	r6, r1
 8003676:	2900      	cmp	r1, #0
 8003678:	d05c      	beq.n	8003734 <ECCinitPoint+0xc8>
 800367a:	2a00      	cmp	r2, #0
 800367c:	d05a      	beq.n	8003734 <ECCinitPoint+0xc8>
 800367e:	2800      	cmp	r0, #0
 8003680:	d058      	beq.n	8003734 <ECCinitPoint+0xc8>
 8003682:	6b0b      	ldr	r3, [r1, #48]	; 0x30
 8003684:	2b00      	cmp	r3, #0
 8003686:	d04f      	beq.n	8003728 <ECCinitPoint+0xbc>
 8003688:	6810      	ldr	r0, [r2, #0]
 800368a:	2800      	cmp	r0, #0
 800368c:	d04c      	beq.n	8003728 <ECCinitPoint+0xbc>
 800368e:	6899      	ldr	r1, [r3, #8]
 8003690:	2900      	cmp	r1, #0
 8003692:	d049      	beq.n	8003728 <ECCinitPoint+0xbc>
 8003694:	88d3      	ldrh	r3, [r2, #6]
 8003696:	7989      	ldrb	r1, [r1, #6]
 8003698:	8897      	ldrh	r7, [r2, #4]
 800369a:	f103 0c34 	add.w	ip, r3, #52	; 0x34
 800369e:	f04f 080c 	mov.w	r8, #12
 80036a2:	fb18 c101 	smlabb	r1, r8, r1, ip
 80036a6:	428f      	cmp	r7, r1
 80036a8:	d341      	bcc.n	800372e <ECCinitPoint+0xc2>
 80036aa:	4418      	add	r0, r3
 80036ac:	6028      	str	r0, [r5, #0]
 80036ae:	3310      	adds	r3, #16
 80036b0:	80d3      	strh	r3, [r2, #6]
 80036b2:	6b33      	ldr	r3, [r6, #48]	; 0x30
 80036b4:	689b      	ldr	r3, [r3, #8]
 80036b6:	7999      	ldrb	r1, [r3, #6]
 80036b8:	f7fe fe3b 	bl	8002332 <StAllocBig>
 80036bc:	2800      	cmp	r0, #0
 80036be:	d12d      	bne.n	800371c <ECCinitPoint+0xb0>
 80036c0:	6b33      	ldr	r3, [r6, #48]	; 0x30
 80036c2:	6828      	ldr	r0, [r5, #0]
 80036c4:	689b      	ldr	r3, [r3, #8]
 80036c6:	3004      	adds	r0, #4
 80036c8:	7999      	ldrb	r1, [r3, #6]
 80036ca:	4622      	mov	r2, r4
 80036cc:	f7fe fe31 	bl	8002332 <StAllocBig>
 80036d0:	bb00      	cbnz	r0, 8003714 <ECCinitPoint+0xa8>
 80036d2:	6b33      	ldr	r3, [r6, #48]	; 0x30
 80036d4:	6828      	ldr	r0, [r5, #0]
 80036d6:	689b      	ldr	r3, [r3, #8]
 80036d8:	3008      	adds	r0, #8
 80036da:	7999      	ldrb	r1, [r3, #6]
 80036dc:	4622      	mov	r2, r4
 80036de:	f7fe fe28 	bl	8002332 <StAllocBig>
 80036e2:	4606      	mov	r6, r0
 80036e4:	6828      	ldr	r0, [r5, #0]
 80036e6:	b98e      	cbnz	r6, 800370c <ECCinitPoint+0xa0>
 80036e8:	6800      	ldr	r0, [r0, #0]
 80036ea:	2100      	movs	r1, #0
 80036ec:	f7fe fe49 	bl	8002382 <InitBig>
 80036f0:	682b      	ldr	r3, [r5, #0]
 80036f2:	2100      	movs	r1, #0
 80036f4:	6858      	ldr	r0, [r3, #4]
 80036f6:	f7fe fe44 	bl	8002382 <InitBig>
 80036fa:	682b      	ldr	r3, [r5, #0]
 80036fc:	2101      	movs	r1, #1
 80036fe:	6898      	ldr	r0, [r3, #8]
 8003700:	f7fe fe3f 	bl	8002382 <InitBig>
 8003704:	682b      	ldr	r3, [r5, #0]
 8003706:	2201      	movs	r2, #1
 8003708:	731a      	strb	r2, [r3, #12]
 800370a:	e015      	b.n	8003738 <ECCinitPoint+0xcc>
 800370c:	3004      	adds	r0, #4
 800370e:	4621      	mov	r1, r4
 8003710:	f7fe fe2a 	bl	8002368 <StFreeBig>
 8003714:	6828      	ldr	r0, [r5, #0]
 8003716:	4621      	mov	r1, r4
 8003718:	f7fe fe26 	bl	8002368 <StFreeBig>
 800371c:	88e3      	ldrh	r3, [r4, #6]
 800371e:	3b10      	subs	r3, #16
 8003720:	80e3      	strh	r3, [r4, #6]
 8003722:	2300      	movs	r3, #0
 8003724:	602b      	str	r3, [r5, #0]
 8003726:	e002      	b.n	800372e <ECCinitPoint+0xc2>
 8003728:	f241 4653 	movw	r6, #5203	; 0x1453
 800372c:	e004      	b.n	8003738 <ECCinitPoint+0xcc>
 800372e:	f240 36ed 	movw	r6, #1005	; 0x3ed
 8003732:	e001      	b.n	8003738 <ECCinitPoint+0xcc>
 8003734:	f241 4654 	movw	r6, #5204	; 0x1454
 8003738:	4630      	mov	r0, r6
 800373a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800373e <ECCfreePoint>:
 800373e:	b538      	push	{r3, r4, r5, lr}
 8003740:	460d      	mov	r5, r1
 8003742:	4604      	mov	r4, r0
 8003744:	b1b8      	cbz	r0, 8003776 <ECCfreePoint+0x38>
 8003746:	b1b1      	cbz	r1, 8003776 <ECCfreePoint+0x38>
 8003748:	6800      	ldr	r0, [r0, #0]
 800374a:	b188      	cbz	r0, 8003770 <ECCfreePoint+0x32>
 800374c:	3008      	adds	r0, #8
 800374e:	f7fe fe0b 	bl	8002368 <StFreeBig>
 8003752:	6820      	ldr	r0, [r4, #0]
 8003754:	4629      	mov	r1, r5
 8003756:	3004      	adds	r0, #4
 8003758:	f7fe fe06 	bl	8002368 <StFreeBig>
 800375c:	6820      	ldr	r0, [r4, #0]
 800375e:	4629      	mov	r1, r5
 8003760:	f7fe fe02 	bl	8002368 <StFreeBig>
 8003764:	88eb      	ldrh	r3, [r5, #6]
 8003766:	2000      	movs	r0, #0
 8003768:	3b10      	subs	r3, #16
 800376a:	80eb      	strh	r3, [r5, #6]
 800376c:	6020      	str	r0, [r4, #0]
 800376e:	bd38      	pop	{r3, r4, r5, pc}
 8003770:	f241 4053 	movw	r0, #5203	; 0x1453
 8003774:	bd38      	pop	{r3, r4, r5, pc}
 8003776:	f241 4054 	movw	r0, #5204	; 0x1454
 800377a:	bd38      	pop	{r3, r4, r5, pc}

0800377c <ECCsetPointCoordinate>:
 800377c:	b570      	push	{r4, r5, r6, lr}
 800377e:	460d      	mov	r5, r1
 8003780:	4614      	mov	r4, r2
 8003782:	4619      	mov	r1, r3
 8003784:	b1e0      	cbz	r0, 80037c0 <ECCsetPointCoordinate+0x44>
 8003786:	b1da      	cbz	r2, 80037c0 <ECCsetPointCoordinate+0x44>
 8003788:	2b00      	cmp	r3, #0
 800378a:	db19      	blt.n	80037c0 <ECCsetPointCoordinate+0x44>
 800378c:	6806      	ldr	r6, [r0, #0]
 800378e:	b1be      	cbz	r6, 80037c0 <ECCsetPointCoordinate+0x44>
 8003790:	6842      	ldr	r2, [r0, #4]
 8003792:	b1aa      	cbz	r2, 80037c0 <ECCsetPointCoordinate+0x44>
 8003794:	6883      	ldr	r3, [r0, #8]
 8003796:	b19b      	cbz	r3, 80037c0 <ECCsetPointCoordinate+0x44>
 8003798:	2d01      	cmp	r5, #1
 800379a:	d008      	beq.n	80037ae <ECCsetPointCoordinate+0x32>
 800379c:	d304      	bcc.n	80037a8 <ECCsetPointCoordinate+0x2c>
 800379e:	2d02      	cmp	r5, #2
 80037a0:	d111      	bne.n	80037c6 <ECCsetPointCoordinate+0x4a>
 80037a2:	4620      	mov	r0, r4
 80037a4:	461a      	mov	r2, r3
 80037a6:	e003      	b.n	80037b0 <ECCsetPointCoordinate+0x34>
 80037a8:	4620      	mov	r0, r4
 80037aa:	4632      	mov	r2, r6
 80037ac:	e000      	b.n	80037b0 <ECCsetPointCoordinate+0x34>
 80037ae:	4620      	mov	r0, r4
 80037b0:	f7fe ff32 	bl	8002618 <W8_to_Big>
 80037b4:	2800      	cmp	r0, #0
 80037b6:	f241 40bf 	movw	r0, #5311	; 0x14bf
 80037ba:	bf08      	it	eq
 80037bc:	2000      	moveq	r0, #0
 80037be:	bd70      	pop	{r4, r5, r6, pc}
 80037c0:	f241 4054 	movw	r0, #5204	; 0x1454
 80037c4:	bd70      	pop	{r4, r5, r6, pc}
 80037c6:	f241 40bf 	movw	r0, #5311	; 0x14bf
 80037ca:	bd70      	pop	{r4, r5, r6, pc}

080037cc <ECCcopyPoint>:
 80037cc:	b538      	push	{r3, r4, r5, lr}
 80037ce:	460d      	mov	r5, r1
 80037d0:	4604      	mov	r4, r0
 80037d2:	b1f0      	cbz	r0, 8003812 <ECCcopyPoint+0x46>
 80037d4:	b1e9      	cbz	r1, 8003812 <ECCcopyPoint+0x46>
 80037d6:	6800      	ldr	r0, [r0, #0]
 80037d8:	b1d8      	cbz	r0, 8003812 <ECCcopyPoint+0x46>
 80037da:	6863      	ldr	r3, [r4, #4]
 80037dc:	b1cb      	cbz	r3, 8003812 <ECCcopyPoint+0x46>
 80037de:	68a3      	ldr	r3, [r4, #8]
 80037e0:	b1bb      	cbz	r3, 8003812 <ECCcopyPoint+0x46>
 80037e2:	6809      	ldr	r1, [r1, #0]
 80037e4:	b1a9      	cbz	r1, 8003812 <ECCcopyPoint+0x46>
 80037e6:	686b      	ldr	r3, [r5, #4]
 80037e8:	b19b      	cbz	r3, 8003812 <ECCcopyPoint+0x46>
 80037ea:	68ab      	ldr	r3, [r5, #8]
 80037ec:	b18b      	cbz	r3, 8003812 <ECCcopyPoint+0x46>
 80037ee:	7b23      	ldrb	r3, [r4, #12]
 80037f0:	732b      	strb	r3, [r5, #12]
 80037f2:	7b23      	ldrb	r3, [r4, #12]
 80037f4:	079b      	lsls	r3, r3, #30
 80037f6:	d40f      	bmi.n	8003818 <ECCcopyPoint+0x4c>
 80037f8:	f7fe fdda 	bl	80023b0 <CopyBig>
 80037fc:	b968      	cbnz	r0, 800381a <ECCcopyPoint+0x4e>
 80037fe:	6860      	ldr	r0, [r4, #4]
 8003800:	6869      	ldr	r1, [r5, #4]
 8003802:	f7fe fdd5 	bl	80023b0 <CopyBig>
 8003806:	b940      	cbnz	r0, 800381a <ECCcopyPoint+0x4e>
 8003808:	68a0      	ldr	r0, [r4, #8]
 800380a:	68a9      	ldr	r1, [r5, #8]
 800380c:	f7fe fdd0 	bl	80023b0 <CopyBig>
 8003810:	bd38      	pop	{r3, r4, r5, pc}
 8003812:	f241 4054 	movw	r0, #5204	; 0x1454
 8003816:	bd38      	pop	{r3, r4, r5, pc}
 8003818:	2000      	movs	r0, #0
 800381a:	bd38      	pop	{r3, r4, r5, pc}

0800381c <Normalize>:
 800381c:	7b03      	ldrb	r3, [r0, #12]
 800381e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003820:	f013 0403 	ands.w	r4, r3, #3
 8003824:	4607      	mov	r7, r0
 8003826:	460e      	mov	r6, r1
 8003828:	4615      	mov	r5, r2
 800382a:	d003      	beq.n	8003834 <Normalize+0x18>
 800382c:	f7ff ffce 	bl	80037cc <ECCcopyPoint>
 8003830:	4604      	mov	r4, r0
 8003832:	e075      	b.n	8003920 <Normalize+0x104>
 8003834:	075b      	lsls	r3, r3, #29
 8003836:	9401      	str	r4, [sp, #4]
 8003838:	d51e      	bpl.n	8003878 <Normalize+0x5c>
 800383a:	6880      	ldr	r0, [r0, #8]
 800383c:	6889      	ldr	r1, [r1, #8]
 800383e:	f7ff fb3b 	bl	8002eb8 <MontyExit>
 8003842:	4604      	mov	r4, r0
 8003844:	2800      	cmp	r0, #0
 8003846:	d16b      	bne.n	8003920 <Normalize+0x104>
 8003848:	6838      	ldr	r0, [r7, #0]
 800384a:	6831      	ldr	r1, [r6, #0]
 800384c:	f7fe fdb0 	bl	80023b0 <CopyBig>
 8003850:	4604      	mov	r4, r0
 8003852:	2800      	cmp	r0, #0
 8003854:	d164      	bne.n	8003920 <Normalize+0x104>
 8003856:	6878      	ldr	r0, [r7, #4]
 8003858:	6871      	ldr	r1, [r6, #4]
 800385a:	f7fe fda9 	bl	80023b0 <CopyBig>
 800385e:	4604      	mov	r4, r0
 8003860:	2800      	cmp	r0, #0
 8003862:	d15d      	bne.n	8003920 <Normalize+0x104>
 8003864:	68b0      	ldr	r0, [r6, #8]
 8003866:	682a      	ldr	r2, [r5, #0]
 8003868:	68eb      	ldr	r3, [r5, #12]
 800386a:	4601      	mov	r1, r0
 800386c:	f7ff fb9b 	bl	8002fa6 <ModularInvBig>
 8003870:	4604      	mov	r4, r0
 8003872:	2800      	cmp	r0, #0
 8003874:	d154      	bne.n	8003920 <Normalize+0x104>
 8003876:	e00f      	b.n	8003898 <Normalize+0x7c>
 8003878:	6851      	ldr	r1, [r2, #4]
 800387a:	6800      	ldr	r0, [r0, #0]
 800387c:	6832      	ldr	r2, [r6, #0]
 800387e:	462b      	mov	r3, r5
 8003880:	f7ff fa2f 	bl	8002ce2 <MontyMul>
 8003884:	4604      	mov	r4, r0
 8003886:	2800      	cmp	r0, #0
 8003888:	d14a      	bne.n	8003920 <Normalize+0x104>
 800388a:	6878      	ldr	r0, [r7, #4]
 800388c:	6869      	ldr	r1, [r5, #4]
 800388e:	6872      	ldr	r2, [r6, #4]
 8003890:	462b      	mov	r3, r5
 8003892:	f7ff fa26 	bl	8002ce2 <MontyMul>
 8003896:	e7e2      	b.n	800385e <Normalize+0x42>
 8003898:	68b0      	ldr	r0, [r6, #8]
 800389a:	6869      	ldr	r1, [r5, #4]
 800389c:	4602      	mov	r2, r0
 800389e:	462b      	mov	r3, r5
 80038a0:	f7ff fa1f 	bl	8002ce2 <MontyMul>
 80038a4:	4604      	mov	r4, r0
 80038a6:	2800      	cmp	r0, #0
 80038a8:	d13a      	bne.n	8003920 <Normalize+0x104>
 80038aa:	682b      	ldr	r3, [r5, #0]
 80038ac:	68ea      	ldr	r2, [r5, #12]
 80038ae:	7999      	ldrb	r1, [r3, #6]
 80038b0:	a801      	add	r0, sp, #4
 80038b2:	f7fe fd3e 	bl	8002332 <StAllocBig>
 80038b6:	4604      	mov	r4, r0
 80038b8:	2800      	cmp	r0, #0
 80038ba:	d131      	bne.n	8003920 <Normalize+0x104>
 80038bc:	68b0      	ldr	r0, [r6, #8]
 80038be:	9a01      	ldr	r2, [sp, #4]
 80038c0:	4601      	mov	r1, r0
 80038c2:	462b      	mov	r3, r5
 80038c4:	f7ff fa0d 	bl	8002ce2 <MontyMul>
 80038c8:	4604      	mov	r4, r0
 80038ca:	b120      	cbz	r0, 80038d6 <Normalize+0xba>
 80038cc:	a801      	add	r0, sp, #4
 80038ce:	68e9      	ldr	r1, [r5, #12]
 80038d0:	f7fe fd4a 	bl	8002368 <StFreeBig>
 80038d4:	e024      	b.n	8003920 <Normalize+0x104>
 80038d6:	6830      	ldr	r0, [r6, #0]
 80038d8:	9901      	ldr	r1, [sp, #4]
 80038da:	4602      	mov	r2, r0
 80038dc:	462b      	mov	r3, r5
 80038de:	f7ff fa00 	bl	8002ce2 <MontyMul>
 80038e2:	68b0      	ldr	r0, [r6, #8]
 80038e4:	9901      	ldr	r1, [sp, #4]
 80038e6:	4602      	mov	r2, r0
 80038e8:	462b      	mov	r3, r5
 80038ea:	f7ff f9fa 	bl	8002ce2 <MontyMul>
 80038ee:	a801      	add	r0, sp, #4
 80038f0:	68e9      	ldr	r1, [r5, #12]
 80038f2:	f7fe fd39 	bl	8002368 <StFreeBig>
 80038f6:	6871      	ldr	r1, [r6, #4]
 80038f8:	68b0      	ldr	r0, [r6, #8]
 80038fa:	460a      	mov	r2, r1
 80038fc:	462b      	mov	r3, r5
 80038fe:	f7ff f9f0 	bl	8002ce2 <MontyMul>
 8003902:	4604      	mov	r4, r0
 8003904:	b960      	cbnz	r0, 8003920 <Normalize+0x104>
 8003906:	4629      	mov	r1, r5
 8003908:	4630      	mov	r0, r6
 800390a:	f7ff fc49 	bl	80031a0 <ECCpointFromMonty>
 800390e:	68b2      	ldr	r2, [r6, #8]
 8003910:	6811      	ldr	r1, [r2, #0]
 8003912:	2301      	movs	r3, #1
 8003914:	4604      	mov	r4, r0
 8003916:	2000      	movs	r0, #0
 8003918:	600b      	str	r3, [r1, #0]
 800391a:	6048      	str	r0, [r1, #4]
 800391c:	8093      	strh	r3, [r2, #4]
 800391e:	7333      	strb	r3, [r6, #12]
 8003920:	4620      	mov	r0, r4
 8003922:	b003      	add	sp, #12
 8003924:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003926 <MontyJacProjAddPoints>:
 8003926:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800392a:	b087      	sub	sp, #28
 800392c:	4699      	mov	r9, r3
 800392e:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8003930:	6823      	ldr	r3, [r4, #0]
 8003932:	4688      	mov	r8, r1
 8003934:	2100      	movs	r1, #0
 8003936:	9103      	str	r1, [sp, #12]
 8003938:	9104      	str	r1, [sp, #16]
 800393a:	9105      	str	r1, [sp, #20]
 800393c:	7999      	ldrb	r1, [r3, #6]
 800393e:	4607      	mov	r7, r0
 8003940:	4616      	mov	r6, r2
 8003942:	a803      	add	r0, sp, #12
 8003944:	3101      	adds	r1, #1
 8003946:	68e2      	ldr	r2, [r4, #12]
 8003948:	f7fe fcf3 	bl	8002332 <StAllocBig>
 800394c:	4605      	mov	r5, r0
 800394e:	2800      	cmp	r0, #0
 8003950:	f040 8118 	bne.w	8003b84 <MontyJacProjAddPoints+0x25e>
 8003954:	6823      	ldr	r3, [r4, #0]
 8003956:	68e2      	ldr	r2, [r4, #12]
 8003958:	7999      	ldrb	r1, [r3, #6]
 800395a:	a804      	add	r0, sp, #16
 800395c:	3101      	adds	r1, #1
 800395e:	f7fe fce8 	bl	8002332 <StAllocBig>
 8003962:	4605      	mov	r5, r0
 8003964:	2800      	cmp	r0, #0
 8003966:	f040 8109 	bne.w	8003b7c <MontyJacProjAddPoints+0x256>
 800396a:	6823      	ldr	r3, [r4, #0]
 800396c:	68e2      	ldr	r2, [r4, #12]
 800396e:	7999      	ldrb	r1, [r3, #6]
 8003970:	a805      	add	r0, sp, #20
 8003972:	3101      	adds	r1, #1
 8003974:	f7fe fcdd 	bl	8002332 <StAllocBig>
 8003978:	4605      	mov	r5, r0
 800397a:	2800      	cmp	r0, #0
 800397c:	f040 80fa 	bne.w	8003b74 <MontyJacProjAddPoints+0x24e>
 8003980:	7b3b      	ldrb	r3, [r7, #12]
 8003982:	f898 100c 	ldrb.w	r1, [r8, #12]
 8003986:	f013 0f02 	tst.w	r3, #2
 800398a:	d003      	beq.n	8003994 <MontyJacProjAddPoints+0x6e>
 800398c:	078f      	lsls	r7, r1, #30
 800398e:	d479      	bmi.n	8003a84 <MontyJacProjAddPoints+0x15e>
 8003990:	4640      	mov	r0, r8
 8003992:	e002      	b.n	800399a <MontyJacProjAddPoints+0x74>
 8003994:	0788      	lsls	r0, r1, #30
 8003996:	d504      	bpl.n	80039a2 <MontyJacProjAddPoints+0x7c>
 8003998:	4638      	mov	r0, r7
 800399a:	4631      	mov	r1, r6
 800399c:	f7ff ff16 	bl	80037cc <ECCcopyPoint>
 80039a0:	e0e4      	b.n	8003b6c <MontyJacProjAddPoints+0x246>
 80039a2:	07ca      	lsls	r2, r1, #31
 80039a4:	d41e      	bmi.n	80039e4 <MontyJacProjAddPoints+0xbe>
 80039a6:	f8d8 0008 	ldr.w	r0, [r8, #8]
 80039aa:	9a03      	ldr	r2, [sp, #12]
 80039ac:	4601      	mov	r1, r0
 80039ae:	4623      	mov	r3, r4
 80039b0:	f7ff f997 	bl	8002ce2 <MontyMul>
 80039b4:	4605      	mov	r5, r0
 80039b6:	2800      	cmp	r0, #0
 80039b8:	f040 80d8 	bne.w	8003b6c <MontyJacProjAddPoints+0x246>
 80039bc:	9903      	ldr	r1, [sp, #12]
 80039be:	6832      	ldr	r2, [r6, #0]
 80039c0:	6838      	ldr	r0, [r7, #0]
 80039c2:	4623      	mov	r3, r4
 80039c4:	f7ff f98d 	bl	8002ce2 <MontyMul>
 80039c8:	9903      	ldr	r1, [sp, #12]
 80039ca:	9a05      	ldr	r2, [sp, #20]
 80039cc:	f8d8 0008 	ldr.w	r0, [r8, #8]
 80039d0:	4623      	mov	r3, r4
 80039d2:	f7ff f986 	bl	8002ce2 <MontyMul>
 80039d6:	6878      	ldr	r0, [r7, #4]
 80039d8:	9905      	ldr	r1, [sp, #20]
 80039da:	6872      	ldr	r2, [r6, #4]
 80039dc:	4623      	mov	r3, r4
 80039de:	f7ff f980 	bl	8002ce2 <MontyMul>
 80039e2:	e00b      	b.n	80039fc <MontyJacProjAddPoints+0xd6>
 80039e4:	6838      	ldr	r0, [r7, #0]
 80039e6:	6831      	ldr	r1, [r6, #0]
 80039e8:	f7fe fce2 	bl	80023b0 <CopyBig>
 80039ec:	4605      	mov	r5, r0
 80039ee:	2800      	cmp	r0, #0
 80039f0:	f040 80bc 	bne.w	8003b6c <MontyJacProjAddPoints+0x246>
 80039f4:	6878      	ldr	r0, [r7, #4]
 80039f6:	6871      	ldr	r1, [r6, #4]
 80039f8:	f7fe fcda 	bl	80023b0 <CopyBig>
 80039fc:	68b8      	ldr	r0, [r7, #8]
 80039fe:	9a03      	ldr	r2, [sp, #12]
 8003a00:	4601      	mov	r1, r0
 8003a02:	4623      	mov	r3, r4
 8003a04:	f7ff f96d 	bl	8002ce2 <MontyMul>
 8003a08:	4605      	mov	r5, r0
 8003a0a:	2800      	cmp	r0, #0
 8003a0c:	f040 80ae 	bne.w	8003b6c <MontyJacProjAddPoints+0x246>
 8003a10:	9903      	ldr	r1, [sp, #12]
 8003a12:	9a04      	ldr	r2, [sp, #16]
 8003a14:	f8d8 0000 	ldr.w	r0, [r8]
 8003a18:	4623      	mov	r3, r4
 8003a1a:	f7ff f962 	bl	8002ce2 <MontyMul>
 8003a1e:	68e3      	ldr	r3, [r4, #12]
 8003a20:	9804      	ldr	r0, [sp, #16]
 8003a22:	9300      	str	r3, [sp, #0]
 8003a24:	6831      	ldr	r1, [r6, #0]
 8003a26:	6823      	ldr	r3, [r4, #0]
 8003a28:	4602      	mov	r2, r0
 8003a2a:	f7ff fa8a 	bl	8002f42 <ModularSubBig>
 8003a2e:	4605      	mov	r5, r0
 8003a30:	2800      	cmp	r0, #0
 8003a32:	f040 809b 	bne.w	8003b6c <MontyJacProjAddPoints+0x246>
 8003a36:	9903      	ldr	r1, [sp, #12]
 8003a38:	68b8      	ldr	r0, [r7, #8]
 8003a3a:	460a      	mov	r2, r1
 8003a3c:	4623      	mov	r3, r4
 8003a3e:	f7ff f950 	bl	8002ce2 <MontyMul>
 8003a42:	9903      	ldr	r1, [sp, #12]
 8003a44:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8003a48:	460a      	mov	r2, r1
 8003a4a:	4623      	mov	r3, r4
 8003a4c:	f7ff f949 	bl	8002ce2 <MontyMul>
 8003a50:	68e3      	ldr	r3, [r4, #12]
 8003a52:	9300      	str	r3, [sp, #0]
 8003a54:	6871      	ldr	r1, [r6, #4]
 8003a56:	9a05      	ldr	r2, [sp, #20]
 8003a58:	6823      	ldr	r3, [r4, #0]
 8003a5a:	9803      	ldr	r0, [sp, #12]
 8003a5c:	f7ff fa71 	bl	8002f42 <ModularSubBig>
 8003a60:	9804      	ldr	r0, [sp, #16]
 8003a62:	f7fe fd39 	bl	80024d8 <IsZeroBig>
 8003a66:	2801      	cmp	r0, #1
 8003a68:	d10e      	bne.n	8003a88 <MontyJacProjAddPoints+0x162>
 8003a6a:	9805      	ldr	r0, [sp, #20]
 8003a6c:	f7fe fd34 	bl	80024d8 <IsZeroBig>
 8003a70:	2801      	cmp	r0, #1
 8003a72:	d107      	bne.n	8003a84 <MontyJacProjAddPoints+0x15e>
 8003a74:	4638      	mov	r0, r7
 8003a76:	4631      	mov	r1, r6
 8003a78:	464a      	mov	r2, r9
 8003a7a:	4623      	mov	r3, r4
 8003a7c:	f7ff fbaf 	bl	80031de <MontyJacProjDoublePoint>
 8003a80:	4605      	mov	r5, r0
 8003a82:	e073      	b.n	8003b6c <MontyJacProjAddPoints+0x246>
 8003a84:	2302      	movs	r3, #2
 8003a86:	e070      	b.n	8003b6a <MontyJacProjAddPoints+0x244>
 8003a88:	f898 300c 	ldrb.w	r3, [r8, #12]
 8003a8c:	68b8      	ldr	r0, [r7, #8]
 8003a8e:	07db      	lsls	r3, r3, #31
 8003a90:	d412      	bmi.n	8003ab8 <MontyJacProjAddPoints+0x192>
 8003a92:	f8d8 1008 	ldr.w	r1, [r8, #8]
 8003a96:	68b2      	ldr	r2, [r6, #8]
 8003a98:	4623      	mov	r3, r4
 8003a9a:	f7ff f922 	bl	8002ce2 <MontyMul>
 8003a9e:	4605      	mov	r5, r0
 8003aa0:	2800      	cmp	r0, #0
 8003aa2:	d163      	bne.n	8003b6c <MontyJacProjAddPoints+0x246>
 8003aa4:	68b0      	ldr	r0, [r6, #8]
 8003aa6:	9904      	ldr	r1, [sp, #16]
 8003aa8:	4602      	mov	r2, r0
 8003aaa:	4623      	mov	r3, r4
 8003aac:	f7ff f919 	bl	8002ce2 <MontyMul>
 8003ab0:	4605      	mov	r5, r0
 8003ab2:	2800      	cmp	r0, #0
 8003ab4:	d15a      	bne.n	8003b6c <MontyJacProjAddPoints+0x246>
 8003ab6:	e003      	b.n	8003ac0 <MontyJacProjAddPoints+0x19a>
 8003ab8:	68b1      	ldr	r1, [r6, #8]
 8003aba:	f7fe fc79 	bl	80023b0 <CopyBig>
 8003abe:	e7ee      	b.n	8003a9e <MontyJacProjAddPoints+0x178>
 8003ac0:	9804      	ldr	r0, [sp, #16]
 8003ac2:	9a03      	ldr	r2, [sp, #12]
 8003ac4:	4601      	mov	r1, r0
 8003ac6:	4623      	mov	r3, r4
 8003ac8:	f7ff f90b 	bl	8002ce2 <MontyMul>
 8003acc:	9804      	ldr	r0, [sp, #16]
 8003ace:	9903      	ldr	r1, [sp, #12]
 8003ad0:	4602      	mov	r2, r0
 8003ad2:	4623      	mov	r3, r4
 8003ad4:	f7ff f905 	bl	8002ce2 <MontyMul>
 8003ad8:	9803      	ldr	r0, [sp, #12]
 8003ada:	6831      	ldr	r1, [r6, #0]
 8003adc:	4602      	mov	r2, r0
 8003ade:	4623      	mov	r3, r4
 8003ae0:	f7ff f8ff 	bl	8002ce2 <MontyMul>
 8003ae4:	6870      	ldr	r0, [r6, #4]
 8003ae6:	9904      	ldr	r1, [sp, #16]
 8003ae8:	4602      	mov	r2, r0
 8003aea:	4623      	mov	r3, r4
 8003aec:	f7ff f8f9 	bl	8002ce2 <MontyMul>
 8003af0:	9805      	ldr	r0, [sp, #20]
 8003af2:	6832      	ldr	r2, [r6, #0]
 8003af4:	4601      	mov	r1, r0
 8003af6:	4623      	mov	r3, r4
 8003af8:	f7ff f8f3 	bl	8002ce2 <MontyMul>
 8003afc:	68e3      	ldr	r3, [r4, #12]
 8003afe:	6830      	ldr	r0, [r6, #0]
 8003b00:	9300      	str	r3, [sp, #0]
 8003b02:	9904      	ldr	r1, [sp, #16]
 8003b04:	6823      	ldr	r3, [r4, #0]
 8003b06:	4602      	mov	r2, r0
 8003b08:	f7ff fa1b 	bl	8002f42 <ModularSubBig>
 8003b0c:	4605      	mov	r5, r0
 8003b0e:	2800      	cmp	r0, #0
 8003b10:	d12c      	bne.n	8003b6c <MontyJacProjAddPoints+0x246>
 8003b12:	9904      	ldr	r1, [sp, #16]
 8003b14:	9803      	ldr	r0, [sp, #12]
 8003b16:	f7fe fc4b 	bl	80023b0 <CopyBig>
 8003b1a:	9804      	ldr	r0, [sp, #16]
 8003b1c:	6821      	ldr	r1, [r4, #0]
 8003b1e:	68e2      	ldr	r2, [r4, #12]
 8003b20:	f7ff fa25 	bl	8002f6e <ModularFastMul2>
 8003b24:	4605      	mov	r5, r0
 8003b26:	bb08      	cbnz	r0, 8003b6c <MontyJacProjAddPoints+0x246>
 8003b28:	68e3      	ldr	r3, [r4, #12]
 8003b2a:	6830      	ldr	r0, [r6, #0]
 8003b2c:	9300      	str	r3, [sp, #0]
 8003b2e:	9904      	ldr	r1, [sp, #16]
 8003b30:	6823      	ldr	r3, [r4, #0]
 8003b32:	4602      	mov	r2, r0
 8003b34:	f7ff fa05 	bl	8002f42 <ModularSubBig>
 8003b38:	68e3      	ldr	r3, [r4, #12]
 8003b3a:	9300      	str	r3, [sp, #0]
 8003b3c:	6831      	ldr	r1, [r6, #0]
 8003b3e:	9a04      	ldr	r2, [sp, #16]
 8003b40:	6823      	ldr	r3, [r4, #0]
 8003b42:	9803      	ldr	r0, [sp, #12]
 8003b44:	f7ff f9fd 	bl	8002f42 <ModularSubBig>
 8003b48:	9804      	ldr	r0, [sp, #16]
 8003b4a:	9905      	ldr	r1, [sp, #20]
 8003b4c:	4602      	mov	r2, r0
 8003b4e:	4623      	mov	r3, r4
 8003b50:	f7ff f8c7 	bl	8002ce2 <MontyMul>
 8003b54:	4605      	mov	r5, r0
 8003b56:	b948      	cbnz	r0, 8003b6c <MontyJacProjAddPoints+0x246>
 8003b58:	68e3      	ldr	r3, [r4, #12]
 8003b5a:	6871      	ldr	r1, [r6, #4]
 8003b5c:	9300      	str	r3, [sp, #0]
 8003b5e:	6823      	ldr	r3, [r4, #0]
 8003b60:	9804      	ldr	r0, [sp, #16]
 8003b62:	460a      	mov	r2, r1
 8003b64:	f7ff f9ed 	bl	8002f42 <ModularSubBig>
 8003b68:	2304      	movs	r3, #4
 8003b6a:	7333      	strb	r3, [r6, #12]
 8003b6c:	a805      	add	r0, sp, #20
 8003b6e:	68e1      	ldr	r1, [r4, #12]
 8003b70:	f7fe fbfa 	bl	8002368 <StFreeBig>
 8003b74:	a804      	add	r0, sp, #16
 8003b76:	68e1      	ldr	r1, [r4, #12]
 8003b78:	f7fe fbf6 	bl	8002368 <StFreeBig>
 8003b7c:	a803      	add	r0, sp, #12
 8003b7e:	68e1      	ldr	r1, [r4, #12]
 8003b80:	f7fe fbf2 	bl	8002368 <StFreeBig>
 8003b84:	4628      	mov	r0, r5
 8003b86:	b007      	add	sp, #28
 8003b88:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08003b8c <Binary_DoublePointMul>:
 8003b8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003b90:	b087      	sub	sp, #28
 8003b92:	4682      	mov	sl, r0
 8003b94:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8003b96:	9e10      	ldr	r6, [sp, #64]	; 0x40
 8003b98:	9f11      	ldr	r7, [sp, #68]	; 0x44
 8003b9a:	4608      	mov	r0, r1
 8003b9c:	4689      	mov	r9, r1
 8003b9e:	4698      	mov	r8, r3
 8003ba0:	4629      	mov	r1, r5
 8003ba2:	2300      	movs	r3, #0
 8003ba4:	4693      	mov	fp, r2
 8003ba6:	9303      	str	r3, [sp, #12]
 8003ba8:	9304      	str	r3, [sp, #16]
 8003baa:	9305      	str	r3, [sp, #20]
 8003bac:	f7ff fad8 	bl	8003160 <ECCpoint2Monty>
 8003bb0:	4604      	mov	r4, r0
 8003bb2:	2800      	cmp	r0, #0
 8003bb4:	f040 8086 	bne.w	8003cc4 <Binary_DoublePointMul+0x138>
 8003bb8:	a803      	add	r0, sp, #12
 8003bba:	4639      	mov	r1, r7
 8003bbc:	68ea      	ldr	r2, [r5, #12]
 8003bbe:	f7ff fd55 	bl	800366c <ECCinitPoint>
 8003bc2:	4604      	mov	r4, r0
 8003bc4:	2800      	cmp	r0, #0
 8003bc6:	d17d      	bne.n	8003cc4 <Binary_DoublePointMul+0x138>
 8003bc8:	9903      	ldr	r1, [sp, #12]
 8003bca:	4640      	mov	r0, r8
 8003bcc:	f7ff fdfe 	bl	80037cc <ECCcopyPoint>
 8003bd0:	9803      	ldr	r0, [sp, #12]
 8003bd2:	4629      	mov	r1, r5
 8003bd4:	f7ff fac4 	bl	8003160 <ECCpoint2Monty>
 8003bd8:	4604      	mov	r4, r0
 8003bda:	2800      	cmp	r0, #0
 8003bdc:	d16e      	bne.n	8003cbc <Binary_DoublePointMul+0x130>
 8003bde:	a805      	add	r0, sp, #20
 8003be0:	4639      	mov	r1, r7
 8003be2:	68ea      	ldr	r2, [r5, #12]
 8003be4:	f7ff fd42 	bl	800366c <ECCinitPoint>
 8003be8:	4604      	mov	r4, r0
 8003bea:	2800      	cmp	r0, #0
 8003bec:	d166      	bne.n	8003cbc <Binary_DoublePointMul+0x130>
 8003bee:	9b05      	ldr	r3, [sp, #20]
 8003bf0:	68ea      	ldr	r2, [r5, #12]
 8003bf2:	f04f 0802 	mov.w	r8, #2
 8003bf6:	f883 800c 	strb.w	r8, [r3, #12]
 8003bfa:	a804      	add	r0, sp, #16
 8003bfc:	4639      	mov	r1, r7
 8003bfe:	f7ff fd35 	bl	800366c <ECCinitPoint>
 8003c02:	4604      	mov	r4, r0
 8003c04:	2800      	cmp	r0, #0
 8003c06:	d155      	bne.n	8003cb4 <Binary_DoublePointMul+0x128>
 8003c08:	9a04      	ldr	r2, [sp, #16]
 8003c0a:	9903      	ldr	r1, [sp, #12]
 8003c0c:	f882 800c 	strb.w	r8, [r2, #12]
 8003c10:	4648      	mov	r0, r9
 8003c12:	9500      	str	r5, [sp, #0]
 8003c14:	463b      	mov	r3, r7
 8003c16:	f7ff fe86 	bl	8003926 <MontyJacProjAddPoints>
 8003c1a:	4604      	mov	r4, r0
 8003c1c:	2800      	cmp	r0, #0
 8003c1e:	d145      	bne.n	8003cac <Binary_DoublePointMul+0x120>
 8003c20:	f8ba 8004 	ldrh.w	r8, [sl, #4]
 8003c24:	f8bb 3004 	ldrh.w	r3, [fp, #4]
 8003c28:	4598      	cmp	r8, r3
 8003c2a:	bf38      	it	cc
 8003c2c:	4698      	movcc	r8, r3
 8003c2e:	ea4f 1848 	mov.w	r8, r8, lsl #5
 8003c32:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 8003c36:	f1b8 3fff 	cmp.w	r8, #4294967295	; 0xffffffff
 8003c3a:	9805      	ldr	r0, [sp, #20]
 8003c3c:	4631      	mov	r1, r6
 8003c3e:	d032      	beq.n	8003ca6 <Binary_DoublePointMul+0x11a>
 8003c40:	463a      	mov	r2, r7
 8003c42:	462b      	mov	r3, r5
 8003c44:	f7ff facb 	bl	80031de <MontyJacProjDoublePoint>
 8003c48:	4604      	mov	r4, r0
 8003c4a:	2800      	cmp	r0, #0
 8003c4c:	d12e      	bne.n	8003cac <Binary_DoublePointMul+0x120>
 8003c4e:	9905      	ldr	r1, [sp, #20]
 8003c50:	4630      	mov	r0, r6
 8003c52:	f7ff fdbb 	bl	80037cc <ECCcopyPoint>
 8003c56:	4641      	mov	r1, r8
 8003c58:	4650      	mov	r0, sl
 8003c5a:	f7fe fccf 	bl	80025fc <GiveBit>
 8003c5e:	4641      	mov	r1, r8
 8003c60:	4604      	mov	r4, r0
 8003c62:	4658      	mov	r0, fp
 8003c64:	f7fe fcca 	bl	80025fc <GiveBit>
 8003c68:	2c01      	cmp	r4, #1
 8003c6a:	d104      	bne.n	8003c76 <Binary_DoublePointMul+0xea>
 8003c6c:	b9a8      	cbnz	r0, 8003c9a <Binary_DoublePointMul+0x10e>
 8003c6e:	9500      	str	r5, [sp, #0]
 8003c70:	9805      	ldr	r0, [sp, #20]
 8003c72:	4649      	mov	r1, r9
 8003c74:	e006      	b.n	8003c84 <Binary_DoublePointMul+0xf8>
 8003c76:	2c00      	cmp	r4, #0
 8003c78:	d1db      	bne.n	8003c32 <Binary_DoublePointMul+0xa6>
 8003c7a:	2801      	cmp	r0, #1
 8003c7c:	d1d9      	bne.n	8003c32 <Binary_DoublePointMul+0xa6>
 8003c7e:	9805      	ldr	r0, [sp, #20]
 8003c80:	9903      	ldr	r1, [sp, #12]
 8003c82:	9500      	str	r5, [sp, #0]
 8003c84:	4632      	mov	r2, r6
 8003c86:	463b      	mov	r3, r7
 8003c88:	f7ff fe4d 	bl	8003926 <MontyJacProjAddPoints>
 8003c8c:	4604      	mov	r4, r0
 8003c8e:	b968      	cbnz	r0, 8003cac <Binary_DoublePointMul+0x120>
 8003c90:	4630      	mov	r0, r6
 8003c92:	9905      	ldr	r1, [sp, #20]
 8003c94:	f7ff fd9a 	bl	80037cc <ECCcopyPoint>
 8003c98:	e7cb      	b.n	8003c32 <Binary_DoublePointMul+0xa6>
 8003c9a:	2801      	cmp	r0, #1
 8003c9c:	d1c9      	bne.n	8003c32 <Binary_DoublePointMul+0xa6>
 8003c9e:	9500      	str	r5, [sp, #0]
 8003ca0:	9805      	ldr	r0, [sp, #20]
 8003ca2:	9904      	ldr	r1, [sp, #16]
 8003ca4:	e7ee      	b.n	8003c84 <Binary_DoublePointMul+0xf8>
 8003ca6:	f7ff fd91 	bl	80037cc <ECCcopyPoint>
 8003caa:	4604      	mov	r4, r0
 8003cac:	a804      	add	r0, sp, #16
 8003cae:	68e9      	ldr	r1, [r5, #12]
 8003cb0:	f7ff fd45 	bl	800373e <ECCfreePoint>
 8003cb4:	a805      	add	r0, sp, #20
 8003cb6:	68e9      	ldr	r1, [r5, #12]
 8003cb8:	f7ff fd41 	bl	800373e <ECCfreePoint>
 8003cbc:	a803      	add	r0, sp, #12
 8003cbe:	68e9      	ldr	r1, [r5, #12]
 8003cc0:	f7ff fd3d 	bl	800373e <ECCfreePoint>
 8003cc4:	4620      	mov	r0, r4
 8003cc6:	b007      	add	sp, #28
 8003cc8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08003ccc <ECCsetPointGenerator>:
 8003ccc:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8003cce:	2300      	movs	r3, #0
 8003cd0:	460e      	mov	r6, r1
 8003cd2:	9301      	str	r3, [sp, #4]
 8003cd4:	4604      	mov	r4, r0
 8003cd6:	2800      	cmp	r0, #0
 8003cd8:	d035      	beq.n	8003d46 <ECCsetPointGenerator+0x7a>
 8003cda:	2900      	cmp	r1, #0
 8003cdc:	d033      	beq.n	8003d46 <ECCsetPointGenerator+0x7a>
 8003cde:	6b0b      	ldr	r3, [r1, #48]	; 0x30
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d033      	beq.n	8003d4c <ECCsetPointGenerator+0x80>
 8003ce4:	6918      	ldr	r0, [r3, #16]
 8003ce6:	2800      	cmp	r0, #0
 8003ce8:	d030      	beq.n	8003d4c <ECCsetPointGenerator+0x80>
 8003cea:	695b      	ldr	r3, [r3, #20]
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d02d      	beq.n	8003d4c <ECCsetPointGenerator+0x80>
 8003cf0:	6821      	ldr	r1, [r4, #0]
 8003cf2:	f7fe fb5d 	bl	80023b0 <CopyBig>
 8003cf6:	4605      	mov	r5, r0
 8003cf8:	2800      	cmp	r0, #0
 8003cfa:	d129      	bne.n	8003d50 <ECCsetPointGenerator+0x84>
 8003cfc:	6b33      	ldr	r3, [r6, #48]	; 0x30
 8003cfe:	6861      	ldr	r1, [r4, #4]
 8003d00:	6958      	ldr	r0, [r3, #20]
 8003d02:	f7fe fb55 	bl	80023b0 <CopyBig>
 8003d06:	4605      	mov	r5, r0
 8003d08:	bb10      	cbnz	r0, 8003d50 <ECCsetPointGenerator+0x84>
 8003d0a:	68a0      	ldr	r0, [r4, #8]
 8003d0c:	2101      	movs	r1, #1
 8003d0e:	f7fe fb38 	bl	8002382 <InitBig>
 8003d12:	4b11      	ldr	r3, [pc, #68]	; (8003d58 <ECCsetPointGenerator+0x8c>)
 8003d14:	2201      	movs	r2, #1
 8003d16:	601a      	str	r2, [r3, #0]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	9301      	str	r3, [sp, #4]
 8003d1c:	4b0f      	ldr	r3, [pc, #60]	; (8003d5c <ECCsetPointGenerator+0x90>)
 8003d1e:	681a      	ldr	r2, [r3, #0]
 8003d20:	9201      	str	r2, [sp, #4]
 8003d22:	9a01      	ldr	r2, [sp, #4]
 8003d24:	3201      	adds	r2, #1
 8003d26:	d105      	bne.n	8003d34 <ECCsetPointGenerator+0x68>
 8003d28:	9a01      	ldr	r2, [sp, #4]
 8003d2a:	601a      	str	r2, [r3, #0]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	9301      	str	r3, [sp, #4]
 8003d30:	9b01      	ldr	r3, [sp, #4]
 8003d32:	b12b      	cbz	r3, 8003d40 <ECCsetPointGenerator+0x74>
 8003d34:	e894 000c 	ldmia.w	r4, {r2, r3}
 8003d38:	6023      	str	r3, [r4, #0]
 8003d3a:	68a3      	ldr	r3, [r4, #8]
 8003d3c:	6063      	str	r3, [r4, #4]
 8003d3e:	60a2      	str	r2, [r4, #8]
 8003d40:	2301      	movs	r3, #1
 8003d42:	7323      	strb	r3, [r4, #12]
 8003d44:	e004      	b.n	8003d50 <ECCsetPointGenerator+0x84>
 8003d46:	f241 4554 	movw	r5, #5204	; 0x1454
 8003d4a:	e001      	b.n	8003d50 <ECCsetPointGenerator+0x84>
 8003d4c:	f241 4553 	movw	r5, #5203	; 0x1453
 8003d50:	4628      	mov	r0, r5
 8003d52:	b002      	add	sp, #8
 8003d54:	bd70      	pop	{r4, r5, r6, pc}
 8003d56:	bf00      	nop
 8003d58:	40023008 	.word	0x40023008
 8003d5c:	40023000 	.word	0x40023000

08003d60 <ECDSAinitSign>:
 8003d60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d62:	4605      	mov	r5, r0
 8003d64:	4614      	mov	r4, r2
 8003d66:	460e      	mov	r6, r1
 8003d68:	b359      	cbz	r1, 8003dc2 <ECDSAinitSign+0x62>
 8003d6a:	b352      	cbz	r2, 8003dc2 <ECDSAinitSign+0x62>
 8003d6c:	b348      	cbz	r0, 8003dc2 <ECDSAinitSign+0x62>
 8003d6e:	6b0b      	ldr	r3, [r1, #48]	; 0x30
 8003d70:	b353      	cbz	r3, 8003dc8 <ECDSAinitSign+0x68>
 8003d72:	6810      	ldr	r0, [r2, #0]
 8003d74:	b340      	cbz	r0, 8003dc8 <ECDSAinitSign+0x68>
 8003d76:	68df      	ldr	r7, [r3, #12]
 8003d78:	b337      	cbz	r7, 8003dc8 <ECDSAinitSign+0x68>
 8003d7a:	88d1      	ldrh	r1, [r2, #6]
 8003d7c:	79bf      	ldrb	r7, [r7, #6]
 8003d7e:	f8b2 c004 	ldrh.w	ip, [r2, #4]
 8003d82:	f101 0308 	add.w	r3, r1, #8
 8003d86:	3703      	adds	r7, #3
 8003d88:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8003d8c:	45bc      	cmp	ip, r7
 8003d8e:	d315      	bcc.n	8003dbc <ECDSAinitSign+0x5c>
 8003d90:	4408      	add	r0, r1
 8003d92:	6028      	str	r0, [r5, #0]
 8003d94:	80d3      	strh	r3, [r2, #6]
 8003d96:	6b33      	ldr	r3, [r6, #48]	; 0x30
 8003d98:	68db      	ldr	r3, [r3, #12]
 8003d9a:	7999      	ldrb	r1, [r3, #6]
 8003d9c:	f7fe fac9 	bl	8002332 <StAllocBig>
 8003da0:	b960      	cbnz	r0, 8003dbc <ECDSAinitSign+0x5c>
 8003da2:	6b33      	ldr	r3, [r6, #48]	; 0x30
 8003da4:	6828      	ldr	r0, [r5, #0]
 8003da6:	68db      	ldr	r3, [r3, #12]
 8003da8:	3004      	adds	r0, #4
 8003daa:	7999      	ldrb	r1, [r3, #6]
 8003dac:	4622      	mov	r2, r4
 8003dae:	f7fe fac0 	bl	8002332 <StAllocBig>
 8003db2:	b158      	cbz	r0, 8003dcc <ECDSAinitSign+0x6c>
 8003db4:	6828      	ldr	r0, [r5, #0]
 8003db6:	4621      	mov	r1, r4
 8003db8:	f7fe fad6 	bl	8002368 <StFreeBig>
 8003dbc:	f240 30ed 	movw	r0, #1005	; 0x3ed
 8003dc0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003dc2:	f241 4054 	movw	r0, #5204	; 0x1454
 8003dc6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003dc8:	f241 4053 	movw	r0, #5203	; 0x1453
 8003dcc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08003dce <ECDSAfreeSign>:
 8003dce:	b538      	push	{r3, r4, r5, lr}
 8003dd0:	460d      	mov	r5, r1
 8003dd2:	4604      	mov	r4, r0
 8003dd4:	b178      	cbz	r0, 8003df6 <ECDSAfreeSign+0x28>
 8003dd6:	b171      	cbz	r1, 8003df6 <ECDSAfreeSign+0x28>
 8003dd8:	6800      	ldr	r0, [r0, #0]
 8003dda:	b160      	cbz	r0, 8003df6 <ECDSAfreeSign+0x28>
 8003ddc:	f7fe fac4 	bl	8002368 <StFreeBig>
 8003de0:	6820      	ldr	r0, [r4, #0]
 8003de2:	4629      	mov	r1, r5
 8003de4:	3004      	adds	r0, #4
 8003de6:	f7fe fabf 	bl	8002368 <StFreeBig>
 8003dea:	88eb      	ldrh	r3, [r5, #6]
 8003dec:	2000      	movs	r0, #0
 8003dee:	3b08      	subs	r3, #8
 8003df0:	80eb      	strh	r3, [r5, #6]
 8003df2:	6020      	str	r0, [r4, #0]
 8003df4:	bd38      	pop	{r3, r4, r5, pc}
 8003df6:	f241 4054 	movw	r0, #5204	; 0x1454
 8003dfa:	bd38      	pop	{r3, r4, r5, pc}

08003dfc <ECDSAsetSignature>:
 8003dfc:	b570      	push	{r4, r5, r6, lr}
 8003dfe:	460d      	mov	r5, r1
 8003e00:	4614      	mov	r4, r2
 8003e02:	4619      	mov	r1, r3
 8003e04:	b170      	cbz	r0, 8003e24 <ECDSAsetSignature+0x28>
 8003e06:	b16a      	cbz	r2, 8003e24 <ECDSAsetSignature+0x28>
 8003e08:	6806      	ldr	r6, [r0, #0]
 8003e0a:	b15e      	cbz	r6, 8003e24 <ECDSAsetSignature+0x28>
 8003e0c:	6842      	ldr	r2, [r0, #4]
 8003e0e:	b14a      	cbz	r2, 8003e24 <ECDSAsetSignature+0x28>
 8003e10:	b11d      	cbz	r5, 8003e1a <ECDSAsetSignature+0x1e>
 8003e12:	2d01      	cmp	r5, #1
 8003e14:	d106      	bne.n	8003e24 <ECDSAsetSignature+0x28>
 8003e16:	4620      	mov	r0, r4
 8003e18:	e001      	b.n	8003e1e <ECDSAsetSignature+0x22>
 8003e1a:	4620      	mov	r0, r4
 8003e1c:	4632      	mov	r2, r6
 8003e1e:	f7fe fbfb 	bl	8002618 <W8_to_Big>
 8003e22:	bd70      	pop	{r4, r5, r6, pc}
 8003e24:	f241 4054 	movw	r0, #5204	; 0x1454
 8003e28:	bd70      	pop	{r4, r5, r6, pc}

08003e2a <ECDSAverify>:
 8003e2a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003e2e:	b08c      	sub	sp, #48	; 0x30
 8003e30:	461d      	mov	r5, r3
 8003e32:	2300      	movs	r3, #0
 8003e34:	4689      	mov	r9, r1
 8003e36:	4690      	mov	r8, r2
 8003e38:	9e14      	ldr	r6, [sp, #80]	; 0x50
 8003e3a:	9304      	str	r3, [sp, #16]
 8003e3c:	9305      	str	r3, [sp, #20]
 8003e3e:	9306      	str	r3, [sp, #24]
 8003e40:	9307      	str	r3, [sp, #28]
 8003e42:	4607      	mov	r7, r0
 8003e44:	2800      	cmp	r0, #0
 8003e46:	f000 8160 	beq.w	800410a <ECDSAverify+0x2e0>
 8003e4a:	2a00      	cmp	r2, #0
 8003e4c:	f000 815d 	beq.w	800410a <ECDSAverify+0x2e0>
 8003e50:	2d00      	cmp	r5, #0
 8003e52:	f000 815a 	beq.w	800410a <ECDSAverify+0x2e0>
 8003e56:	2e00      	cmp	r6, #0
 8003e58:	f000 8157 	beq.w	800410a <ECDSAverify+0x2e0>
 8003e5c:	686b      	ldr	r3, [r5, #4]
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	f000 8156 	beq.w	8004110 <ECDSAverify+0x2e6>
 8003e64:	682a      	ldr	r2, [r5, #0]
 8003e66:	2a00      	cmp	r2, #0
 8003e68:	f000 8152 	beq.w	8004110 <ECDSAverify+0x2e6>
 8003e6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	f000 814e 	beq.w	8004110 <ECDSAverify+0x2e6>
 8003e74:	6832      	ldr	r2, [r6, #0]
 8003e76:	2a00      	cmp	r2, #0
 8003e78:	f000 814a 	beq.w	8004110 <ECDSAverify+0x2e6>
 8003e7c:	f8d8 0000 	ldr.w	r0, [r8]
 8003e80:	2800      	cmp	r0, #0
 8003e82:	f000 8145 	beq.w	8004110 <ECDSAverify+0x2e6>
 8003e86:	f8d8 2004 	ldr.w	r2, [r8, #4]
 8003e8a:	2a00      	cmp	r2, #0
 8003e8c:	f000 8140 	beq.w	8004110 <ECDSAverify+0x2e6>
 8003e90:	68da      	ldr	r2, [r3, #12]
 8003e92:	2a00      	cmp	r2, #0
 8003e94:	f000 813f 	beq.w	8004116 <ECDSAverify+0x2ec>
 8003e98:	6919      	ldr	r1, [r3, #16]
 8003e9a:	2900      	cmp	r1, #0
 8003e9c:	f000 813b 	beq.w	8004116 <ECDSAverify+0x2ec>
 8003ea0:	6959      	ldr	r1, [r3, #20]
 8003ea2:	2900      	cmp	r1, #0
 8003ea4:	f000 8137 	beq.w	8004116 <ECDSAverify+0x2ec>
 8003ea8:	6899      	ldr	r1, [r3, #8]
 8003eaa:	2900      	cmp	r1, #0
 8003eac:	f000 8133 	beq.w	8004116 <ECDSAverify+0x2ec>
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	f000 812f 	beq.w	8004116 <ECDSAverify+0x2ec>
 8003eb8:	f8b6 c006 	ldrh.w	ip, [r6, #6]
 8003ebc:	f891 a006 	ldrb.w	sl, [r1, #6]
 8003ec0:	7994      	ldrb	r4, [r2, #6]
 8003ec2:	88b2      	ldrh	r2, [r6, #4]
 8003ec4:	f50c 7ca0 	add.w	ip, ip, #320	; 0x140
 8003ec8:	213c      	movs	r1, #60	; 0x3c
 8003eca:	fb11 c10a 	smlabb	r1, r1, sl, ip
 8003ece:	2314      	movs	r3, #20
 8003ed0:	fb13 1304 	smlabb	r3, r3, r4, r1
 8003ed4:	429a      	cmp	r2, r3
 8003ed6:	f0c0 8121 	bcc.w	800411c <ECDSAverify+0x2f2>
 8003eda:	f7fe fafd 	bl	80024d8 <IsZeroBig>
 8003ede:	b110      	cbz	r0, 8003ee6 <ECDSAverify+0xbc>
 8003ee0:	f44f 747b 	mov.w	r4, #1004	; 0x3ec
 8003ee4:	e11c      	b.n	8004120 <ECDSAverify+0x2f6>
 8003ee6:	686b      	ldr	r3, [r5, #4]
 8003ee8:	f8d8 0000 	ldr.w	r0, [r8]
 8003eec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003eee:	68d9      	ldr	r1, [r3, #12]
 8003ef0:	f7fe fb1d 	bl	800252e <CompareBig>
 8003ef4:	3001      	adds	r0, #1
 8003ef6:	d1f3      	bne.n	8003ee0 <ECDSAverify+0xb6>
 8003ef8:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8003efc:	f7fe faec 	bl	80024d8 <IsZeroBig>
 8003f00:	2800      	cmp	r0, #0
 8003f02:	d1ed      	bne.n	8003ee0 <ECDSAverify+0xb6>
 8003f04:	686b      	ldr	r3, [r5, #4]
 8003f06:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8003f0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f0c:	68d9      	ldr	r1, [r3, #12]
 8003f0e:	f7fe fb0e 	bl	800252e <CompareBig>
 8003f12:	3001      	adds	r0, #1
 8003f14:	d1e4      	bne.n	8003ee0 <ECDSAverify+0xb6>
 8003f16:	686b      	ldr	r3, [r5, #4]
 8003f18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f1a:	68db      	ldr	r3, [r3, #12]
 8003f1c:	a804      	add	r0, sp, #16
 8003f1e:	7999      	ldrb	r1, [r3, #6]
 8003f20:	4632      	mov	r2, r6
 8003f22:	f7fe fa06 	bl	8002332 <StAllocBig>
 8003f26:	4604      	mov	r4, r0
 8003f28:	2800      	cmp	r0, #0
 8003f2a:	f040 80f9 	bne.w	8004120 <ECDSAverify+0x2f6>
 8003f2e:	686b      	ldr	r3, [r5, #4]
 8003f30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f32:	68d8      	ldr	r0, [r3, #12]
 8003f34:	f7fe fb44 	bl	80025c0 <CountBits>
 8003f38:	ebb0 0fc9 	cmp.w	r0, r9, lsl #3
 8003f3c:	da1b      	bge.n	8003f76 <ECDSAverify+0x14c>
 8003f3e:	686b      	ldr	r3, [r5, #4]
 8003f40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f42:	68d8      	ldr	r0, [r3, #12]
 8003f44:	f7fe fb3c 	bl	80025c0 <CountBits>
 8003f48:	2308      	movs	r3, #8
 8003f4a:	3007      	adds	r0, #7
 8003f4c:	fb90 f4f3 	sdiv	r4, r0, r3
 8003f50:	4621      	mov	r1, r4
 8003f52:	9a04      	ldr	r2, [sp, #16]
 8003f54:	4638      	mov	r0, r7
 8003f56:	f7fe fb5f 	bl	8002618 <W8_to_Big>
 8003f5a:	686b      	ldr	r3, [r5, #4]
 8003f5c:	f8dd 9010 	ldr.w	r9, [sp, #16]
 8003f60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f62:	4607      	mov	r7, r0
 8003f64:	68d8      	ldr	r0, [r3, #12]
 8003f66:	f7fe fb2b 	bl	80025c0 <CountBits>
 8003f6a:	ebc0 01c4 	rsb	r1, r0, r4, lsl #3
 8003f6e:	4648      	mov	r0, r9
 8003f70:	f7fe fc62 	bl	8002838 <RightShift>
 8003f74:	e005      	b.n	8003f82 <ECDSAverify+0x158>
 8003f76:	4638      	mov	r0, r7
 8003f78:	4649      	mov	r1, r9
 8003f7a:	9a04      	ldr	r2, [sp, #16]
 8003f7c:	f7fe fb4c 	bl	8002618 <W8_to_Big>
 8003f80:	4607      	mov	r7, r0
 8003f82:	2f00      	cmp	r7, #0
 8003f84:	f040 80ba 	bne.w	80040fc <ECDSAverify+0x2d2>
 8003f88:	686b      	ldr	r3, [r5, #4]
 8003f8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f8c:	68db      	ldr	r3, [r3, #12]
 8003f8e:	a805      	add	r0, sp, #20
 8003f90:	7999      	ldrb	r1, [r3, #6]
 8003f92:	4632      	mov	r2, r6
 8003f94:	f7fe f9cd 	bl	8002332 <StAllocBig>
 8003f98:	4604      	mov	r4, r0
 8003f9a:	2800      	cmp	r0, #0
 8003f9c:	f040 80b0 	bne.w	8004100 <ECDSAverify+0x2d6>
 8003fa0:	686b      	ldr	r3, [r5, #4]
 8003fa2:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8003fa6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fa8:	9905      	ldr	r1, [sp, #20]
 8003faa:	68da      	ldr	r2, [r3, #12]
 8003fac:	4633      	mov	r3, r6
 8003fae:	f7fe fffa 	bl	8002fa6 <ModularInvBig>
 8003fb2:	2800      	cmp	r0, #0
 8003fb4:	f040 809b 	bne.w	80040ee <ECDSAverify+0x2c4>
 8003fb8:	686b      	ldr	r3, [r5, #4]
 8003fba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fbc:	af08      	add	r7, sp, #32
 8003fbe:	68d8      	ldr	r0, [r3, #12]
 8003fc0:	4639      	mov	r1, r7
 8003fc2:	4632      	mov	r2, r6
 8003fc4:	f7fe fdda 	bl	8002b7c <MontyInit>
 8003fc8:	4604      	mov	r4, r0
 8003fca:	2800      	cmp	r0, #0
 8003fcc:	f040 8091 	bne.w	80040f2 <ECDSAverify+0x2c8>
 8003fd0:	9805      	ldr	r0, [sp, #20]
 8003fd2:	9909      	ldr	r1, [sp, #36]	; 0x24
 8003fd4:	4602      	mov	r2, r0
 8003fd6:	463b      	mov	r3, r7
 8003fd8:	f7fe fe83 	bl	8002ce2 <MontyMul>
 8003fdc:	4604      	mov	r4, r0
 8003fde:	4638      	mov	r0, r7
 8003fe0:	2c00      	cmp	r4, #0
 8003fe2:	f040 8081 	bne.w	80040e8 <ECDSAverify+0x2be>
 8003fe6:	f7fe fe69 	bl	8002cbc <MontyKillR2>
 8003fea:	9804      	ldr	r0, [sp, #16]
 8003fec:	9905      	ldr	r1, [sp, #20]
 8003fee:	4602      	mov	r2, r0
 8003ff0:	463b      	mov	r3, r7
 8003ff2:	f7fe fe76 	bl	8002ce2 <MontyMul>
 8003ff6:	4604      	mov	r4, r0
 8003ff8:	2800      	cmp	r0, #0
 8003ffa:	d17a      	bne.n	80040f2 <ECDSAverify+0x2c8>
 8003ffc:	9905      	ldr	r1, [sp, #20]
 8003ffe:	f8d8 0000 	ldr.w	r0, [r8]
 8004002:	460a      	mov	r2, r1
 8004004:	463b      	mov	r3, r7
 8004006:	f7fe fe6c 	bl	8002ce2 <MontyMul>
 800400a:	4604      	mov	r4, r0
 800400c:	2800      	cmp	r0, #0
 800400e:	d170      	bne.n	80040f2 <ECDSAverify+0x2c8>
 8004010:	4638      	mov	r0, r7
 8004012:	f7fe fe5a 	bl	8002cca <MontyKillAll>
 8004016:	686b      	ldr	r3, [r5, #4]
 8004018:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800401a:	4639      	mov	r1, r7
 800401c:	6898      	ldr	r0, [r3, #8]
 800401e:	4632      	mov	r2, r6
 8004020:	f7fe fdac 	bl	8002b7c <MontyInit>
 8004024:	4604      	mov	r4, r0
 8004026:	2800      	cmp	r0, #0
 8004028:	d163      	bne.n	80040f2 <ECDSAverify+0x2c8>
 800402a:	a806      	add	r0, sp, #24
 800402c:	6869      	ldr	r1, [r5, #4]
 800402e:	4632      	mov	r2, r6
 8004030:	f7ff fb1c 	bl	800366c <ECCinitPoint>
 8004034:	4604      	mov	r4, r0
 8004036:	2800      	cmp	r0, #0
 8004038:	d155      	bne.n	80040e6 <ECDSAverify+0x2bc>
 800403a:	9806      	ldr	r0, [sp, #24]
 800403c:	6869      	ldr	r1, [r5, #4]
 800403e:	f7ff fe45 	bl	8003ccc <ECCsetPointGenerator>
 8004042:	4604      	mov	r4, r0
 8004044:	2800      	cmp	r0, #0
 8004046:	d14a      	bne.n	80040de <ECDSAverify+0x2b4>
 8004048:	a807      	add	r0, sp, #28
 800404a:	6869      	ldr	r1, [r5, #4]
 800404c:	4632      	mov	r2, r6
 800404e:	f7ff fb0d 	bl	800366c <ECCinitPoint>
 8004052:	4604      	mov	r4, r0
 8004054:	2800      	cmp	r0, #0
 8004056:	d13e      	bne.n	80040d6 <ECDSAverify+0x2ac>
 8004058:	9b07      	ldr	r3, [sp, #28]
 800405a:	9300      	str	r3, [sp, #0]
 800405c:	686b      	ldr	r3, [r5, #4]
 800405e:	9301      	str	r3, [sp, #4]
 8004060:	9702      	str	r7, [sp, #8]
 8004062:	9804      	ldr	r0, [sp, #16]
 8004064:	9906      	ldr	r1, [sp, #24]
 8004066:	9a05      	ldr	r2, [sp, #20]
 8004068:	682b      	ldr	r3, [r5, #0]
 800406a:	f7ff fd8f 	bl	8003b8c <Binary_DoublePointMul>
 800406e:	4604      	mov	r4, r0
 8004070:	2800      	cmp	r0, #0
 8004072:	d130      	bne.n	80040d6 <ECDSAverify+0x2ac>
 8004074:	9807      	ldr	r0, [sp, #28]
 8004076:	463a      	mov	r2, r7
 8004078:	4601      	mov	r1, r0
 800407a:	f7ff fbcf 	bl	800381c <Normalize>
 800407e:	bb28      	cbnz	r0, 80040cc <ECDSAverify+0x2a2>
 8004080:	9b07      	ldr	r3, [sp, #28]
 8004082:	7b1b      	ldrb	r3, [r3, #12]
 8004084:	2b02      	cmp	r3, #2
 8004086:	d024      	beq.n	80040d2 <ECDSAverify+0x2a8>
 8004088:	686b      	ldr	r3, [r5, #4]
 800408a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800408c:	9b07      	ldr	r3, [sp, #28]
 800408e:	68d1      	ldr	r1, [r2, #12]
 8004090:	6818      	ldr	r0, [r3, #0]
 8004092:	f7fe fa4c 	bl	800252e <CompareBig>
 8004096:	2800      	cmp	r0, #0
 8004098:	9b07      	ldr	r3, [sp, #28]
 800409a:	db0b      	blt.n	80040b4 <ECDSAverify+0x28a>
 800409c:	6818      	ldr	r0, [r3, #0]
 800409e:	686b      	ldr	r3, [r5, #4]
 80040a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040a2:	4602      	mov	r2, r0
 80040a4:	68d9      	ldr	r1, [r3, #12]
 80040a6:	4633      	mov	r3, r6
 80040a8:	f7fe fd0a 	bl	8002ac0 <SubBig>
 80040ac:	4604      	mov	r4, r0
 80040ae:	2800      	cmp	r0, #0
 80040b0:	d0ea      	beq.n	8004088 <ECDSAverify+0x25e>
 80040b2:	e010      	b.n	80040d6 <ECDSAverify+0x2ac>
 80040b4:	f8d8 0000 	ldr.w	r0, [r8]
 80040b8:	6819      	ldr	r1, [r3, #0]
 80040ba:	f7fe fa38 	bl	800252e <CompareBig>
 80040be:	f240 34eb 	movw	r4, #1003	; 0x3eb
 80040c2:	2800      	cmp	r0, #0
 80040c4:	bf18      	it	ne
 80040c6:	f44f 747b 	movne.w	r4, #1004	; 0x3ec
 80040ca:	e004      	b.n	80040d6 <ECDSAverify+0x2ac>
 80040cc:	f241 44bf 	movw	r4, #5311	; 0x14bf
 80040d0:	e001      	b.n	80040d6 <ECDSAverify+0x2ac>
 80040d2:	f44f 747b 	mov.w	r4, #1004	; 0x3ec
 80040d6:	a807      	add	r0, sp, #28
 80040d8:	4631      	mov	r1, r6
 80040da:	f7ff fb30 	bl	800373e <ECCfreePoint>
 80040de:	a806      	add	r0, sp, #24
 80040e0:	4631      	mov	r1, r6
 80040e2:	f7ff fb2c 	bl	800373e <ECCfreePoint>
 80040e6:	4638      	mov	r0, r7
 80040e8:	f7fe fdef 	bl	8002cca <MontyKillAll>
 80040ec:	e001      	b.n	80040f2 <ECDSAverify+0x2c8>
 80040ee:	f241 44bf 	movw	r4, #5311	; 0x14bf
 80040f2:	a805      	add	r0, sp, #20
 80040f4:	4631      	mov	r1, r6
 80040f6:	f7fe f937 	bl	8002368 <StFreeBig>
 80040fa:	e001      	b.n	8004100 <ECDSAverify+0x2d6>
 80040fc:	f241 44bf 	movw	r4, #5311	; 0x14bf
 8004100:	a804      	add	r0, sp, #16
 8004102:	4631      	mov	r1, r6
 8004104:	f7fe f930 	bl	8002368 <StFreeBig>
 8004108:	e00a      	b.n	8004120 <ECDSAverify+0x2f6>
 800410a:	f241 4454 	movw	r4, #5204	; 0x1454
 800410e:	e007      	b.n	8004120 <ECDSAverify+0x2f6>
 8004110:	f241 4453 	movw	r4, #5203	; 0x1453
 8004114:	e004      	b.n	8004120 <ECDSAverify+0x2f6>
 8004116:	f241 4457 	movw	r4, #5207	; 0x1457
 800411a:	e001      	b.n	8004120 <ECDSAverify+0x2f6>
 800411c:	f240 34ed 	movw	r4, #1005	; 0x3ed
 8004120:	4620      	mov	r0, r4
 8004122:	b00c      	add	sp, #48	; 0x30
 8004124:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08004128 <ECCvalidatePubKey>:
 8004128:	b5f0      	push	{r4, r5, r6, r7, lr}
 800412a:	b08b      	sub	sp, #44	; 0x2c
 800412c:	2300      	movs	r3, #0
 800412e:	460e      	mov	r6, r1
 8004130:	4615      	mov	r5, r2
 8004132:	9302      	str	r3, [sp, #8]
 8004134:	9303      	str	r3, [sp, #12]
 8004136:	9304      	str	r3, [sp, #16]
 8004138:	9305      	str	r3, [sp, #20]
 800413a:	4607      	mov	r7, r0
 800413c:	2800      	cmp	r0, #0
 800413e:	f000 8106 	beq.w	800434e <ECCvalidatePubKey+0x226>
 8004142:	2900      	cmp	r1, #0
 8004144:	f000 8103 	beq.w	800434e <ECCvalidatePubKey+0x226>
 8004148:	2a00      	cmp	r2, #0
 800414a:	f000 8100 	beq.w	800434e <ECCvalidatePubKey+0x226>
 800414e:	6b0b      	ldr	r3, [r1, #48]	; 0x30
 8004150:	2b00      	cmp	r3, #0
 8004152:	f000 80ff 	beq.w	8004354 <ECCvalidatePubKey+0x22c>
 8004156:	689a      	ldr	r2, [r3, #8]
 8004158:	2a00      	cmp	r2, #0
 800415a:	f000 80fe 	beq.w	800435a <ECCvalidatePubKey+0x232>
 800415e:	68d9      	ldr	r1, [r3, #12]
 8004160:	2900      	cmp	r1, #0
 8004162:	f000 80fa 	beq.w	800435a <ECCvalidatePubKey+0x232>
 8004166:	6859      	ldr	r1, [r3, #4]
 8004168:	2900      	cmp	r1, #0
 800416a:	f000 80f6 	beq.w	800435a <ECCvalidatePubKey+0x232>
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	2b00      	cmp	r3, #0
 8004172:	f000 80f2 	beq.w	800435a <ECCvalidatePubKey+0x232>
 8004176:	7b03      	ldrb	r3, [r0, #12]
 8004178:	2b02      	cmp	r3, #2
 800417a:	f000 80f1 	beq.w	8004360 <ECCvalidatePubKey+0x238>
 800417e:	682b      	ldr	r3, [r5, #0]
 8004180:	2b00      	cmp	r3, #0
 8004182:	f000 80f0 	beq.w	8004366 <ECCvalidatePubKey+0x23e>
 8004186:	88e9      	ldrh	r1, [r5, #6]
 8004188:	7993      	ldrb	r3, [r2, #6]
 800418a:	88aa      	ldrh	r2, [r5, #4]
 800418c:	3134      	adds	r1, #52	; 0x34
 800418e:	200c      	movs	r0, #12
 8004190:	fb10 1103 	smlabb	r1, r0, r3, r1
 8004194:	3303      	adds	r3, #3
 8004196:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
 800419a:	429a      	cmp	r2, r3
 800419c:	f0c0 80e3 	bcc.w	8004366 <ECCvalidatePubKey+0x23e>
 80041a0:	a802      	add	r0, sp, #8
 80041a2:	4631      	mov	r1, r6
 80041a4:	462a      	mov	r2, r5
 80041a6:	f7ff fa61 	bl	800366c <ECCinitPoint>
 80041aa:	2800      	cmp	r0, #0
 80041ac:	f040 80dd 	bne.w	800436a <ECCvalidatePubKey+0x242>
 80041b0:	6b33      	ldr	r3, [r6, #48]	; 0x30
 80041b2:	6838      	ldr	r0, [r7, #0]
 80041b4:	6899      	ldr	r1, [r3, #8]
 80041b6:	f7fe f9ba 	bl	800252e <CompareBig>
 80041ba:	2800      	cmp	r0, #0
 80041bc:	db02      	blt.n	80041c4 <ECCvalidatePubKey+0x9c>
 80041be:	f241 4455 	movw	r4, #5205	; 0x1455
 80041c2:	e0be      	b.n	8004342 <ECCvalidatePubKey+0x21a>
 80041c4:	6b33      	ldr	r3, [r6, #48]	; 0x30
 80041c6:	6878      	ldr	r0, [r7, #4]
 80041c8:	6899      	ldr	r1, [r3, #8]
 80041ca:	f7fe f9b0 	bl	800252e <CompareBig>
 80041ce:	2800      	cmp	r0, #0
 80041d0:	daf5      	bge.n	80041be <ECCvalidatePubKey+0x96>
 80041d2:	4638      	mov	r0, r7
 80041d4:	9902      	ldr	r1, [sp, #8]
 80041d6:	f7ff faf9 	bl	80037cc <ECCcopyPoint>
 80041da:	4604      	mov	r4, r0
 80041dc:	2800      	cmp	r0, #0
 80041de:	f040 80b0 	bne.w	8004342 <ECCvalidatePubKey+0x21a>
 80041e2:	6b33      	ldr	r3, [r6, #48]	; 0x30
 80041e4:	a906      	add	r1, sp, #24
 80041e6:	6898      	ldr	r0, [r3, #8]
 80041e8:	462a      	mov	r2, r5
 80041ea:	f7fe fcc7 	bl	8002b7c <MontyInit>
 80041ee:	4604      	mov	r4, r0
 80041f0:	2800      	cmp	r0, #0
 80041f2:	f040 80a6 	bne.w	8004342 <ECCvalidatePubKey+0x21a>
 80041f6:	6b33      	ldr	r3, [r6, #48]	; 0x30
 80041f8:	689b      	ldr	r3, [r3, #8]
 80041fa:	a804      	add	r0, sp, #16
 80041fc:	7999      	ldrb	r1, [r3, #6]
 80041fe:	462a      	mov	r2, r5
 8004200:	f7fe f897 	bl	8002332 <StAllocBig>
 8004204:	4604      	mov	r4, r0
 8004206:	2800      	cmp	r0, #0
 8004208:	f040 8098 	bne.w	800433c <ECCvalidatePubKey+0x214>
 800420c:	6b33      	ldr	r3, [r6, #48]	; 0x30
 800420e:	689b      	ldr	r3, [r3, #8]
 8004210:	a803      	add	r0, sp, #12
 8004212:	7999      	ldrb	r1, [r3, #6]
 8004214:	462a      	mov	r2, r5
 8004216:	f7fe f88c 	bl	8002332 <StAllocBig>
 800421a:	4604      	mov	r4, r0
 800421c:	2800      	cmp	r0, #0
 800421e:	f040 8089 	bne.w	8004334 <ECCvalidatePubKey+0x20c>
 8004222:	9b02      	ldr	r3, [sp, #8]
 8004224:	9907      	ldr	r1, [sp, #28]
 8004226:	6818      	ldr	r0, [r3, #0]
 8004228:	ab06      	add	r3, sp, #24
 800422a:	4602      	mov	r2, r0
 800422c:	f7fe fd59 	bl	8002ce2 <MontyMul>
 8004230:	4604      	mov	r4, r0
 8004232:	2800      	cmp	r0, #0
 8004234:	d17a      	bne.n	800432c <ECCvalidatePubKey+0x204>
 8004236:	9b02      	ldr	r3, [sp, #8]
 8004238:	9907      	ldr	r1, [sp, #28]
 800423a:	6858      	ldr	r0, [r3, #4]
 800423c:	ab06      	add	r3, sp, #24
 800423e:	4602      	mov	r2, r0
 8004240:	f7fe fd4f 	bl	8002ce2 <MontyMul>
 8004244:	4604      	mov	r4, r0
 8004246:	2800      	cmp	r0, #0
 8004248:	d170      	bne.n	800432c <ECCvalidatePubKey+0x204>
 800424a:	9b02      	ldr	r3, [sp, #8]
 800424c:	6818      	ldr	r0, [r3, #0]
 800424e:	689a      	ldr	r2, [r3, #8]
 8004250:	4601      	mov	r1, r0
 8004252:	ab06      	add	r3, sp, #24
 8004254:	f7fe fd45 	bl	8002ce2 <MontyMul>
 8004258:	4604      	mov	r4, r0
 800425a:	2800      	cmp	r0, #0
 800425c:	d166      	bne.n	800432c <ECCvalidatePubKey+0x204>
 800425e:	6b33      	ldr	r3, [r6, #48]	; 0x30
 8004260:	9904      	ldr	r1, [sp, #16]
 8004262:	6818      	ldr	r0, [r3, #0]
 8004264:	f7fe f8a4 	bl	80023b0 <CopyBig>
 8004268:	9804      	ldr	r0, [sp, #16]
 800426a:	9907      	ldr	r1, [sp, #28]
 800426c:	9a03      	ldr	r2, [sp, #12]
 800426e:	ab06      	add	r3, sp, #24
 8004270:	f7fe fd37 	bl	8002ce2 <MontyMul>
 8004274:	4604      	mov	r4, r0
 8004276:	2800      	cmp	r0, #0
 8004278:	d158      	bne.n	800432c <ECCvalidatePubKey+0x204>
 800427a:	9b02      	ldr	r3, [sp, #8]
 800427c:	9903      	ldr	r1, [sp, #12]
 800427e:	6898      	ldr	r0, [r3, #8]
 8004280:	9500      	str	r5, [sp, #0]
 8004282:	4602      	mov	r2, r0
 8004284:	9b06      	ldr	r3, [sp, #24]
 8004286:	f7fe fe3a 	bl	8002efe <ModularAddBig>
 800428a:	4604      	mov	r4, r0
 800428c:	2800      	cmp	r0, #0
 800428e:	d14d      	bne.n	800432c <ECCvalidatePubKey+0x204>
 8004290:	9b02      	ldr	r3, [sp, #8]
 8004292:	6899      	ldr	r1, [r3, #8]
 8004294:	6818      	ldr	r0, [r3, #0]
 8004296:	460a      	mov	r2, r1
 8004298:	ab06      	add	r3, sp, #24
 800429a:	f7fe fd22 	bl	8002ce2 <MontyMul>
 800429e:	4604      	mov	r4, r0
 80042a0:	2800      	cmp	r0, #0
 80042a2:	d143      	bne.n	800432c <ECCvalidatePubKey+0x204>
 80042a4:	6b33      	ldr	r3, [r6, #48]	; 0x30
 80042a6:	9904      	ldr	r1, [sp, #16]
 80042a8:	6858      	ldr	r0, [r3, #4]
 80042aa:	f7fe f881 	bl	80023b0 <CopyBig>
 80042ae:	9804      	ldr	r0, [sp, #16]
 80042b0:	9907      	ldr	r1, [sp, #28]
 80042b2:	9a03      	ldr	r2, [sp, #12]
 80042b4:	ab06      	add	r3, sp, #24
 80042b6:	f7fe fd14 	bl	8002ce2 <MontyMul>
 80042ba:	4604      	mov	r4, r0
 80042bc:	2800      	cmp	r0, #0
 80042be:	d135      	bne.n	800432c <ECCvalidatePubKey+0x204>
 80042c0:	9b02      	ldr	r3, [sp, #8]
 80042c2:	9903      	ldr	r1, [sp, #12]
 80042c4:	6898      	ldr	r0, [r3, #8]
 80042c6:	9500      	str	r5, [sp, #0]
 80042c8:	4602      	mov	r2, r0
 80042ca:	9b06      	ldr	r3, [sp, #24]
 80042cc:	f7fe fe17 	bl	8002efe <ModularAddBig>
 80042d0:	4604      	mov	r4, r0
 80042d2:	2800      	cmp	r0, #0
 80042d4:	d12a      	bne.n	800432c <ECCvalidatePubKey+0x204>
 80042d6:	9b02      	ldr	r3, [sp, #8]
 80042d8:	6858      	ldr	r0, [r3, #4]
 80042da:	681a      	ldr	r2, [r3, #0]
 80042dc:	4601      	mov	r1, r0
 80042de:	ab06      	add	r3, sp, #24
 80042e0:	f7fe fcff 	bl	8002ce2 <MontyMul>
 80042e4:	4604      	mov	r4, r0
 80042e6:	bb08      	cbnz	r0, 800432c <ECCvalidatePubKey+0x204>
 80042e8:	4b21      	ldr	r3, [pc, #132]	; (8004370 <ECCvalidatePubKey+0x248>)
 80042ea:	2201      	movs	r2, #1
 80042ec:	601a      	str	r2, [r3, #0]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	4a20      	ldr	r2, [pc, #128]	; (8004374 <ECCvalidatePubKey+0x24c>)
 80042f2:	9305      	str	r3, [sp, #20]
 80042f4:	6813      	ldr	r3, [r2, #0]
 80042f6:	9305      	str	r3, [sp, #20]
 80042f8:	9b05      	ldr	r3, [sp, #20]
 80042fa:	3301      	adds	r3, #1
 80042fc:	9b02      	ldr	r3, [sp, #8]
 80042fe:	d10d      	bne.n	800431c <ECCvalidatePubKey+0x1f4>
 8004300:	9905      	ldr	r1, [sp, #20]
 8004302:	6011      	str	r1, [r2, #0]
 8004304:	6812      	ldr	r2, [r2, #0]
 8004306:	9205      	str	r2, [sp, #20]
 8004308:	9a05      	ldr	r2, [sp, #20]
 800430a:	6818      	ldr	r0, [r3, #0]
 800430c:	b93a      	cbnz	r2, 800431e <ECCvalidatePubKey+0x1f6>
 800430e:	6899      	ldr	r1, [r3, #8]
 8004310:	f7fe f90d 	bl	800252e <CompareBig>
 8004314:	b150      	cbz	r0, 800432c <ECCvalidatePubKey+0x204>
 8004316:	f241 4455 	movw	r4, #5205	; 0x1455
 800431a:	e007      	b.n	800432c <ECCvalidatePubKey+0x204>
 800431c:	6818      	ldr	r0, [r3, #0]
 800431e:	4601      	mov	r1, r0
 8004320:	f7fe f905 	bl	800252e <CompareBig>
 8004324:	2800      	cmp	r0, #0
 8004326:	d1f6      	bne.n	8004316 <ECCvalidatePubKey+0x1ee>
 8004328:	f241 4452 	movw	r4, #5202	; 0x1452
 800432c:	a803      	add	r0, sp, #12
 800432e:	4629      	mov	r1, r5
 8004330:	f7fe f81a 	bl	8002368 <StFreeBig>
 8004334:	a804      	add	r0, sp, #16
 8004336:	4629      	mov	r1, r5
 8004338:	f7fe f816 	bl	8002368 <StFreeBig>
 800433c:	a806      	add	r0, sp, #24
 800433e:	f7fe fcc4 	bl	8002cca <MontyKillAll>
 8004342:	a802      	add	r0, sp, #8
 8004344:	4629      	mov	r1, r5
 8004346:	f7ff f9fa 	bl	800373e <ECCfreePoint>
 800434a:	4620      	mov	r0, r4
 800434c:	e00d      	b.n	800436a <ECCvalidatePubKey+0x242>
 800434e:	f241 4054 	movw	r0, #5204	; 0x1454
 8004352:	e00a      	b.n	800436a <ECCvalidatePubKey+0x242>
 8004354:	f241 4053 	movw	r0, #5203	; 0x1453
 8004358:	e007      	b.n	800436a <ECCvalidatePubKey+0x242>
 800435a:	f241 4057 	movw	r0, #5207	; 0x1457
 800435e:	e004      	b.n	800436a <ECCvalidatePubKey+0x242>
 8004360:	f241 4055 	movw	r0, #5205	; 0x1455
 8004364:	e001      	b.n	800436a <ECCvalidatePubKey+0x242>
 8004366:	f240 30ed 	movw	r0, #1005	; 0x3ed
 800436a:	b00b      	add	sp, #44	; 0x2c
 800436c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800436e:	bf00      	nop
 8004370:	40023008 	.word	0x40023008
 8004374:	40023000 	.word	0x40023000

08004378 <memcmp>:
 8004378:	b510      	push	{r4, lr}
 800437a:	3901      	subs	r1, #1
 800437c:	4402      	add	r2, r0
 800437e:	4290      	cmp	r0, r2
 8004380:	d101      	bne.n	8004386 <memcmp+0xe>
 8004382:	2000      	movs	r0, #0
 8004384:	e005      	b.n	8004392 <memcmp+0x1a>
 8004386:	7803      	ldrb	r3, [r0, #0]
 8004388:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800438c:	42a3      	cmp	r3, r4
 800438e:	d001      	beq.n	8004394 <memcmp+0x1c>
 8004390:	1b18      	subs	r0, r3, r4
 8004392:	bd10      	pop	{r4, pc}
 8004394:	3001      	adds	r0, #1
 8004396:	e7f2      	b.n	800437e <memcmp+0x6>

08004398 <memcpy>:
 8004398:	440a      	add	r2, r1
 800439a:	4291      	cmp	r1, r2
 800439c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80043a0:	d100      	bne.n	80043a4 <memcpy+0xc>
 80043a2:	4770      	bx	lr
 80043a4:	b510      	push	{r4, lr}
 80043a6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80043aa:	f803 4f01 	strb.w	r4, [r3, #1]!
 80043ae:	4291      	cmp	r1, r2
 80043b0:	d1f9      	bne.n	80043a6 <memcpy+0xe>
 80043b2:	bd10      	pop	{r4, pc}

080043b4 <memset>:
 80043b4:	4402      	add	r2, r0
 80043b6:	4603      	mov	r3, r0
 80043b8:	4293      	cmp	r3, r2
 80043ba:	d100      	bne.n	80043be <memset+0xa>
 80043bc:	4770      	bx	lr
 80043be:	f803 1b01 	strb.w	r1, [r3], #1
 80043c2:	e7f9      	b.n	80043b8 <memset+0x4>

080043c4 <_init>:
 80043c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80043c6:	bf00      	nop
 80043c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80043ca:	bc08      	pop	{r3}
 80043cc:	469e      	mov	lr, r3
 80043ce:	4770      	bx	lr

080043d0 <_fini>:
 80043d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80043d2:	bf00      	nop
 80043d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80043d6:	bc08      	pop	{r3}
 80043d8:	469e      	mov	lr, r3
 80043da:	4770      	bx	lr
 80043dc:	0000      	movs	r0, r0
	...
